; Sonic 2 rev 2 Br Version Disassembly (Version 1.0 -> 2011-10-23)  
; Jogo dumpado de meu cartucho Sonic Classics - Tec Toy
; - By Esrael L. G. Neto (www.sonichacking.com / www.esraelneto.com.br)
;  (Neto baiano)
                include 'vars.asm'; 
; Sega Genesis Rom Header 
                dc.l    StackPointer            ; Initial stack pointer value
                dc.l    ProgramStart            ; Start of our program in ROM
                dc.l    BusError                ; Bus error
                dc.l    AddressError            ; Address error
                dc.l    IllegalInstr            ; Illegal instruction
                dc.l    ZeroDivide              ; Division by zero
                dc.l    ChkInstr                ; CHK exception
                dc.l    TrapvInstr              ; TRAPV exception
                dc.l    PrivilegeViolation      ; Privilege violation
                dc.l    Trace                   ; TRACE exception
                dc.l    Line1010Emu             ; Line-A emulator
                dc.l    Line1111Emu             ; Line-F emulator
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Spurious exception
                dc.l    ErrorTrap               ; IRQ level 1
                dc.l    ErrorTrap               ; IRQ level 2
                dc.l    ErrorTrap               ; IRQ level 3
                dc.l    HBlank                  ; IRQ level 4 -> HBlankInterrupt (horizontal retrace interrupt)
                dc.l    ErrorTrap               ; IRQ level 5
                dc.l    VBlank                  ; IRQ level 6 -> VBlankInterrupt (vertical retrace interrupt)
                dc.l    ErrorTrap               ; IRQ level 7
                dc.l    ErrorTrap               ; TRAP #$00 exception
                dc.l    ErrorTrap               ; TRAP #$01 exception
                dc.l    ErrorTrap               ; TRAP #$02 exception
                dc.l    ErrorTrap               ; TRAP #$03 exception
                dc.l    ErrorTrap               ; TRAP #$04 exception
                dc.l    ErrorTrap               ; TRAP #$05 exception
                dc.l    ErrorTrap               ; TRAP #$06 exception
                dc.l    ErrorTrap               ; TRAP #$07 exception
                dc.l    ErrorTrap               ; TRAP #$08 exception
                dc.l    ErrorTrap               ; TRAP #$09 exception
                dc.l    ErrorTrap               ; TRAP #$0A exception
                dc.l    ErrorTrap               ; TRAP #$0B exception
                dc.l    ErrorTrap               ; TRAP #$0C exception
                dc.l    ErrorTrap               ; TRAP #$0D exception
                dc.l    ErrorTrap               ; TRAP #$0E exception
                dc.l    ErrorTrap               ; TRAP #$0F exception
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)    
                
Console:
                dc.b    'SEGA MEGA DRIVE (C)'
Date:                
                dc.b    'SEGA 1997.JAN'
Title_Local:                
                dc.b    'SONIC THE             HEDGEHOG 2                '
Title_International:                
                dc.b    'SONIC THE             HEDGEHOG 2                '
Serial:                
                dc.b    'GM 00001051-02'
Checksum: ; Offset_0x00018E:                
                dc.w    $D951
IOSupport:                
                dc.b    'J               '
ROMStart:                
                dc.l    $00000000
ROMEnd:   ; Offset_0x0001A4:                 
                dc.l    $000FFFFF
RAMStart:                
                dc.l    $00FF0000
RAMEnd:                
                dc.l    $00FFFFFF
SRAMSupport:               
                dc.b    '                '
Notes:                
                dc.b    '                                                '
Region:                
                dc.b    'JUE             '            
;===============================================================================
; Sub Rotinas de tratamento das exceções do programa / jogo   
; [ Início ]
;===============================================================================
ErrorTrap: ; Offset_0x000200
BusError: 
AddressError:          ; Address error
IllegalInstr:          ; Illegal instruction
ZeroDivide:            ; Division by zero
ChkInstr:              ; CHK exception
TrapvInstr:            ; TRAPV exception
PrivilegeViolation:    ; Privilege violation
Trace:                 ; TRACE exception
Line1010Emu:           ; Line-A emulator
Line1111Emu:           ; Line-F emulator 
ErrorException:         
                bra.s   ErrorTrap                              ; Offset_0x000200
                nop
                bra.s   ErrorTrap                              ; Offset_0x000200
ProgramStart: ; Offset_0x000206:                   
                tst.l   Z80_Port_1_Control                           ; $00A10008 
                bne.s   PortA_OK                               ; Offset_0x000214 
                tst.w   Z80_Expansion_Control                        ; $00A1000C 
PortA_OK: ; Offset_0x000214:
                bne.s   PortC_OK                               ; Offset_0x000292
                lea     InitValues(PC), A5                     ; Offset_0x000294
                movem.w (A5)+, D5-D7 
                movem.l (A5)+, A0-A4 
                move.b  $EF01(A1), D0
                andi.b  #$0F, D0
                beq.s   SkipSecurity                           ; Offset_0x000234
                move.l  #'SEGA', $2F00(A1) 
SkipSecurity: ; Offset_0x000234:                                 
                move.w  (A4), D0
                moveq   #$00, D0
                move.l  D0, A6
                move    A6, USP
                moveq   #$17, D1
VDPInitLoop: ; Offset_0x00023E:                
                move.b  (A5)+, D5
                move.w  D5, (A4)
                add.w   D7, D5
                dbra    D1, VDPInitLoop                        ; Offset_0x00023E
                move.l  (A5)+, (A4)
                move.w  D0, (A3)
                move.w  D7, (A1)
                move.w  D7, (A2)
WaitForZ80: ; Offset_0x000250:                   
                btst    D0, (A1)
                bne.s   WaitForZ80                             ; Offset_0x000250
                moveq   #$25, D2
Z80InitLoop: ; Offset_0x000256:                 
                move.b  (A5)+, (A0)+
                dbra    D2, Z80InitLoop                        ; Offset_0x000256
                move.w  D0, (A2)
                move.w  D0, (A1)
                move.w  D7, (A2)
ClearRAMLoop: ; Offset_0x000262:                  
                move.l  D0, -(A6)
                dbra    D6, ClearRAMLoop                       ; Offset_0x000262
                move.l  (A5)+, (A4)
                move.l  (A5)+, (A4)
                moveq   #$1F, D3 
ClearCRAMLoop: ; Offset_0x00026E:                 
                move.l  D0, (A3)
                dbra    D3, ClearCRAMLoop                      ; Offset_0x00026E
                move.l  (A5)+, (A4)
                moveq   #$13, D4 
ClearVSRAMLoop: ; Offset_0x000278: 
                move.l  D0, (A3) 
                dbra    D4, ClearVSRAMLoop                     ; Offset_0x000278   
                moveq   #$03, D5
PSGInitLoop: ; Offset_0x000280:                    
                move.b  (A5)+, $0011(A3) 
                dbra    D5, PSGInitLoop                        ; Offset_0x000280   
                move.w  D0, (A2)   
                movem.l (A6), D0-A6
                move    #$2700, SR 
PortC_OK: ; Offset_0x000292:                
                bra.s   GameProgram                            ; Offset_0x000300
InitValues: ; Offset_0x000294:                 
                dc.w    $8000, $3FFF, $0100     ; 
                dc.l    Z80_RAM_Start           ; Z80 RAM start location $00A00000
                dc.l    Z80_Bus_Request         ; Z80 bus request  $00A11100  
                dc.l    Z80_Reset               ; Z80 reset        $00A11200
                dc.l    VDP_Data_Port           ; VDP data port    $00C00000
                dc.l    VDP_Control_Port        ; VDP control port $00C00004 
                dc.w    $0414, $303C, $076C, $0000, $0000, $FF00, $8137, $0001
                dc.w    $0100, $00FF, $FF00, $0080, $4000, $0080, $AF01, $D91F
                dc.w    $1127, $0021, $2600, $F977, $EDB0, $DDE1, $FDE1, $ED47
                dc.w    $ED4F, $D1E1, $F108, $D9C1, $D1E1, $F1F9, $F3ED, $5636
                dc.w    $E9E9, $8104, $8F02, $C000, $0000, $4000, $0010, $9FBF
                dc.w    $DFFF   
GameProgram: ; Offset_0x000300:
                tst.w   (VDP_Control_Port)                           ; $00C00004
Offset_0x000306:                
                move.w  (VDP_Control_Port), D1                       ; $00C00004
                btst    #$01, D1
                bne.s   Offset_0x000306
                btst    #$06, ($00A1000D)
                beq.s   ChecksumCheck                          ; Offset_0x000328
                cmpi.l  #'init', ($FFFFFFDC).w
                beq     AlreadyInit                            ; Offset_0x000358
ChecksumCheck: ; Offset_0x000328:
                move.l  #'SEGA', ($00FFFFE4)
                lea     ($FFFFFE00).w, A6
                moveq   #$00, D7
                move.w  #$0077, D6
ClearSomeRAMLoop: ; Offset_0x00033C:
                move.l  D7, (A6)+
                dbra    D6, ClearSomeRAMLoop                   ; Offset_0x00033C
                move.b  ($00A10001), D0
                andi.b  #$C0, D0
                move.b  D0, (Hardware_Id).w                          ; $FFFFFFD8
                move.l  #'init', ($FFFFFFDC).w
AlreadyInit: ; Offset_0x000358:
                lea     ($00FF0000), A6
                moveq   #$00, D7
                move.w  #$3F7F, D6
ClearRemainingRAMLoop: ; Offset_0x000364:
                move.l  D7, (A6)+
                dbra    D6, ClearRemainingRAMLoop              ; Offset_0x000364
                bsr     VDPRegSetup                            ; Offset_0x001114
                bsr     SoundDriverLoad                        ; Offset_0x0012C6
                bsr     JoypadInit                             ; Offset_0x0010A8 
                move.b  #gm_SegaScreen, (Game_Mode).w           ; $00, $FFFFF600
MainGameLoop: ; Offset_0x00037C:
                move.b  ($FFFFF600).w, D0   
                andi.w  #$003C, D0
                jsr     GameModeArray(PC, D0)                  ; Offset_0x00038A
                bra.s   MainGameLoop                           ; Offset_0x00037C
GameModeArray: ; Offset_0x00038A:                                               
                bra     SegaScreen                             ; Offset_0x003770
                bra     TitleScreen                            ; Offset_0x003948
                bra     Level                                  ; Offset_0x003E74
                bra     Level                                  ; Offset_0x003E74                   
                bra     Special_Stage                          ; Offset_0x004F04
                bra     Continue                               ; Offset_0x0077EE
                bra     Two_Player_Results                     ; Offset_0x007CC8
                bra     Go_Versus_Mode_Menu                    ; Offset_0x0003B6
                bra     Go_Ending_Sequence                     ; Offset_0x0003BC
                bra     Go_Options_Menu                        ; Offset_0x0003C2
                bra     Go_Level_Select_Menu                   ; Offset_0x0003C8
Go_Versus_Mode_Menu: ; Offset_0x0003B6:
                jmp     (Main_Menu_Screen)                     ; Offset_0x008B50
Go_Ending_Sequence: ; Offset_0x0003BC:                                               
                jmp     (Ending_Sequence)                      ; Offset_0x009C12
Go_Options_Menu: ; Offset_0x0003C2:
                jmp     (Main_Menu_Screen)                     ; Offset_0x008B50
Go_Level_Select_Menu: ; Offset_0x0003C8:
                jmp     (Main_Menu_Screen)                     ; Offset_0x008B50       
;===============================================================================
; Sub Rotina VBlank - Interrupção de retraço vertical         
; [ Início ]
;===============================================================================
VBlank: ; Offset_0x0003CE:    
                movem.l D0-D7/A0-A6, -(A7)
                tst.b   (VBlank_Index).w                             ; $FFFFF62A
                beq     VBlank_Id_0x00                         ; Offset_0x00044A
Offset_0x0003DA:                
                move.w  (VDP_Control_Port), D0                       ; $00C00004
                andi.w  #$0008, D0
                beq.s   Offset_0x0003DA
                move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
                move.l  ($FFFFF616).w, (VDP_Data_Port)               ; $00C00000
                btst    #$06, ($FFFFFFD8).w
                beq.s   Offset_0x000408
                move.w  #$0700, D0
Offset_0x000404:
                dbra    D0, Offset_0x000404
Offset_0x000408:
                move.b  (VBlank_Index).w, D0                         ; $FFFFF62A
                move.b  #$00, (VBlank_Index).w                       ; $FFFFF62A
                move.w  #$0001, ($FFFFF644).w
                andi.w  #$003E, D0
                move.w  VBlank_Idx(PC, D0), D0                 ; Offset_0x00042E
                jsr     VBlank_Idx(PC, D0)                     ; Offset_0x00042E
Offset_0x000424:                
                addq.l  #$01, ($FFFFFE0C).w
                movem.l (A7)+, D0-D7/A0-A6
                rte
VBlank_Idx: ; Offset_0x00042E:                 
                dc.w    VBlank_Id_0x00-VBlank_Idx              ; Offset_0x00044A
                dc.w    VBlank_Id_0x02-VBlank_Idx              ; Offset_0x0005B6
                dc.w    VBlank_Id_0x04-VBlank_Idx              ; Offset_0x000628
                dc.w    VBlank_Id_0x06-VBlank_Idx              ; Offset_0x00063E
                dc.w    VBlank_Id_0x08-VBlank_Idx              ; Offset_0x00064E
                dc.w    VBlank_Id_0x0A-VBlank_Idx              ; Offset_0x000842
                dc.w    VBlank_Id_0x0C-VBlank_Idx              ; Offset_0x000B34
                dc.w    VBlank_Id_0x0E-VBlank_Idx              ; Offset_0x000C22
                dc.w    VBlank_Id_0x10-VBlank_Idx              ; Offset_0x000644
                dc.w    VBlank_Id_0x12-VBlank_Idx              ; Offset_0x000C32
                dc.w    VBlank_Id_0x14-VBlank_Idx              ; Offset_0x0005F2
                dc.w    VBlank_Id_0x16-VBlank_Idx              ; Offset_0x000DBC
                dc.w    VBlank_Id_0x18-VBlank_Idx              ; Offset_0x000C3E
                dc.w    VBlank_Id_0x1A-VBlank_Idx              ; Offset_0x000B12                                  
;-------------------------------------------------------------------------------
VBlank_Id_0x00: ; Offset_0x00044A: 
                cmpi.b  #$80|gm_DemoMode, (Game_Mode).w        ; $88,  $FFFFF600
                beq.s   Offset_0x00048A
                cmpi.b  #$80|gm_PlayMode, (Game_Mode).w        ; $8C,  $FFFFF600
                beq.s   Offset_0x00048A
                cmpi.b  #gm_DemoMode, (Game_Mode).w            ; $08,  $FFFFF600
                beq.s   Offset_0x00048A
                cmpi.b  #gm_PlayMode, (Game_Mode).w            ; $0C,  $FFFFF600
                beq.s   Offset_0x00048A
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000472:                
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x000472
                bsr     Sound_Driver_Input                     ; Offset_0x00104C
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                bra.s   Offset_0x000424
Offset_0x00048A:
                tst.b   ($FFFFF730).w
                beq     Offset_0x00052C
                move.w  (VDP_Control_Port), D0                       ; $00C00004
                btst    #$06, ($FFFFFFD8).w
                beq.s   Offset_0x0004A8
                move.w  #$0700, D0
Offset_0x0004A4:
                dbra    D0, Offset_0x0004A4
Offset_0x0004A8:
                move.w  #$0001, ($FFFFF644).w
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x0004B6:                
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x0004B6
                tst.b   ($FFFFF64E).w
                bne.s   Offset_0x0004EC
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)           
                move.l  #$96FD9580, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                bra.s   Offset_0x000510
Offset_0x0004EC:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96F89540, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
Offset_0x000510:
                move.w  ($FFFFF624).w, (A5)
                move.w  #$8230, (VDP_Control_Port)                   ; $00C00004
                bsr     Sound_Driver_Input                     ; Offset_0x00104C
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                bra     Offset_0x000424
Offset_0x00052C:
                move.w  (VDP_Control_Port), D0                       ; $00C00004
                move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
                move.l  ($FFFFF616).w, (VDP_Data_Port)               ; $00C00000
                btst    #$06, ($FFFFFFD8).w
                beq.s   Offset_0x000554
                move.w  #$0700, D0
Offset_0x000550:
                dbra    D0, Offset_0x000550
Offset_0x000554:
                move.w  #$0001, ($FFFFF644).w
                move.w  ($FFFFF624).w, (VDP_Control_Port)            ; $00C00004
                move.w  #$8230, (VDP_Control_Port)                   ; $00C00004
                move.l  ($FFFFF61E).w, ($FFFFEEEC).w
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000578:                
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x000578
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96FC9500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                bsr     Sound_Driver_Input                     ; Offset_0x00104C
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                bra     Offset_0x000424
;-------------------------------------------------------------------------------
VBlank_Id_0x02: ; Offset_0x0005B6: 
                bsr     Offset_0x000E60
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)
                move.l  #$96F09500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7C00, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                jsr     (VBlank_Id_0x02_Sub)                   ; Offset_0x03A2A2
                tst.w   ($FFFFF614).w
                beq     Offset_0x0005F0
                subq.w  #$01, ($FFFFF614).w
Offset_0x0005F0:
                rts
;-------------------------------------------------------------------------------
VBlank_Id_0x14: ; Offset_0x0005F2:    
                move.b  ($FFFFFE0F).w, D0
                andi.w  #$000F, D0
                bne.s   Offset_0x00061A
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000604:                
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x000604
                bsr     ReadJoypads                            ; Offset_0x0010D8
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
Offset_0x00061A:
                tst.w   ($FFFFF614).w
                beq     Offset_0x000626
                subq.w  #$01, ($FFFFF614).w
Offset_0x000626:
                rts
;-------------------------------------------------------------------------------
VBlank_Id_0x04: ; Offset_0x000628:   
                bsr     Offset_0x000E60
                bsr     Offset_0x00169E
                tst.w   ($FFFFF614).w
                beq     Offset_0x00063C
                subq.w  #$01, ($FFFFF614).w
Offset_0x00063C:
                rts
;-------------------------------------------------------------------------------
VBlank_Id_0x06: ; Offset_0x00063E:  
                bsr     Offset_0x000E60
                rts
;-------------------------------------------------------------------------------
VBlank_Id_0x10: ; Offset_0x000644:
                cmpi.b  #gm_SpecialStage, (Game_Mode).w        ; $10,  $FFFFF600
                beq     Offset_0x0007CC          
;-------------------------------------------------------------------------------
VBlank_Id_0x08: ; Offset_0x00064E:    
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000656:
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x000656
                bsr     ReadJoypads                            ; Offset_0x0010D8
                tst.b   ($FFFFF622).w
                beq.s   Offset_0x0006C0
                lea     (VDP_Control_Port), A5                       ; $00C00004
                tst.w   ($FFFFF63A).w
                bne     Offset_0x000710
                subq.b  #$01, ($FFFFF622).w
                bne.s   Offset_0x000684
                move.b  #$00, ($FFFFF623).w
Offset_0x000684:
                cmpi.b  #$10, ($FFFFF622).w
                bcs.s   Offset_0x0006C0
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  #Color_RAM_Address, (VDP_Control_Port) ; $C0000000, $00C00004
                move.w  #$0EEE, D0
                move.w  #$001F, D1
Offset_0x0006A4:                
                move.w  D0, (A6)
                dbra    D1, Offset_0x0006A4
                move.l  #$C0420000, (VDP_Control_Port)               ; $00C00004
                move.w  #$001F, D1
Offset_0x0006B8:                
                move.w  D0, (A6)
                dbra    D1, Offset_0x0006B8
                bra.s   Offset_0x000710
Offset_0x0006C0:
                tst.b   ($FFFFF64E).w
                bne.s   Offset_0x0006EC
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96FD9580, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                bra.s   Offset_0x000710
Offset_0x0006EC:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96F89540, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
Offset_0x000710:
                move.w  ($FFFFF624).w, (A5)
                move.w  #$8230, (VDP_Control_Port)                   ; $00C00004
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)
                move.l  #$96F09500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7C00, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96FC9500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                bsr     Process_DMA                            ; Offset_0x001468
                bsr     Sound_Driver_Input                     ; Offset_0x00104C
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                movem.l ($FFFFEE00).w, D0-D7
                movem.l D0-D7, ($FFFFEE60).w
                movem.l ($FFFFEE20).w, D0-D7
                movem.l D0-D7, ($FFFFEE80).w
                movem.l ($FFFFEE50).w, D0-D3
                movem.l D0-D3, ($FFFFEEA0).w
                move.l  ($FFFFF61E).w, ($FFFFEEEC).w
                cmpi.b  #$5C, ($FFFFF625).w
                bcc.s   DemoTime                               ; Offset_0x0007AE
                move.b  #$01, ($FFFFF64F).w
                rts                    
;===============================================================================
; Sub Rotina DemoTime - Rotina para executar um demo durante um tempo        
; [ Início ]
;===============================================================================
DemoTime: ; Offset_0x0007AE:
                jsr     (LoadTilesAsYouMove)                   ; Offset_0x00DA14
                jsr     (HudUpdate)                            ; Offset_0x040AE0
                bsr     Offset_0x0016BA
                tst.w   ($FFFFF614).w
                beq     Exit_DemoTime                          ; Offset_0x0007CA
                subq.w  #$01, ($FFFFF614).w
Exit_DemoTime: ; Offset_0x0007CA:
                rts
;===============================================================================
; Sub Rotina DemoTime - Rotina para executar um demo durante um tempo          
; [ Fim ]
;===============================================================================  
Offset_0x0007CC:
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x0007D4:                
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x0007D4
                bsr     ReadJoypads                            ; Offset_0x0010D8
                jsr     (Sound_Driver_Input)                   ; Offset_0x00104C
                tst.b   ($FFFFDB11).w
                beq.s   Offset_0x000814
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)
                move.l  #$96EB9580, (A5)
                move.w  #$977F, (A5)
                move.w  #$7C00, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                bra.s   Offset_0x000838
Offset_0x000814:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)
                move.l  #$96F09500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7C00, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
Offset_0x000838:
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                rts
;-------------------------------------------------------------------------------
VBlank_Id_0x0A: ; Offset_0x000842: 
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x00084A:                
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x00084A
                bsr     ReadJoypads                            ; Offset_0x0010D8
                bsr     Offset_0x000AAE
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96FD9580, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96FC9500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                tst.b   ($FFFFDB0F).w
                beq.s   Offset_0x0008D0
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)
                move.l  #$96EB9580, (A5)
                move.w  #$977F, (A5)
                move.w  #$7C00, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                bra.s   Offset_0x0008F4
Offset_0x0008D0:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)
                move.l  #$96F09500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7C00, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
Offset_0x0008F4:
                tst.b   ($FFFFDB0E).w
                beq.s   Offset_0x000918
                moveq   #$00, D0
                move.b  ($FFFFDB0D).w, D0
                cmpi.b  #$04, D0
                bge.s   Offset_0x000918
                add.b   D0, D0
                tst.b   ($FFFFDB0C).w
                beq.s   Offset_0x000910
                addq.w  #$08, D0
Offset_0x000910:
                move.w  Offset_0x000940(PC, D0), D0
                jsr     Offset_0x000940(PC, D0)
Offset_0x000918:
                bsr     Offset_0x000AC8
                addq.b  #$01, ($FFFFDB0D).w
                move.b  ($FFFFDB0D).w, D0
                cmp.b   D1, D0
                blt.s   Offset_0x00095A
                move.b  #$00, ($FFFFDB0D).w
                lea     (VDP_Control_Port), A6                       ; $00C00004
                tst.b   ($FFFFDB0C).w
                beq.s   Offset_0x000950
                move.w  #$8230, (A6)
                bra.s   Offset_0x000954    
Offset_0x000940:
                dc.w    Offset_0x000A16-Offset_0x000940
                dc.w    Offset_0x000A3C-Offset_0x000940
                dc.w    Offset_0x000A62-Offset_0x000940
                dc.w    Offset_0x000A88-Offset_0x000940
                dc.w    Offset_0x00097E-Offset_0x000940
                dc.w    Offset_0x0009A4-Offset_0x000940
                dc.w    Offset_0x0009CA-Offset_0x000940
                dc.w    Offset_0x0009F0-Offset_0x000940
Offset_0x000950:
                move.w  #$8220, (A6)
Offset_0x000954:
                eori.b  #$01, ($FFFFDB0C).w
Offset_0x00095A:
                bsr     Process_DMA                            ; Offset_0x001468
                jsr     (Sound_Driver_Input)                   ; Offset_0x00104C
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                bsr     Offset_0x0016BA
                tst.w   ($FFFFF614).w
                beq     Offset_0x00097C
                subq.w  #$01, ($FFFFF614).w
Offset_0x00097C:
                rts
Offset_0x00097E:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94039380, (A5)
                move.l  #$96E89500, (A5)
                move.w  #$977F, (A5)
                move.w  #$4000, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                rts
Offset_0x0009A4:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94039380, (A5)
                move.l  #$96E89500, (A5)
                move.w  #$977F, (A5)
                move.w  #$4700, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                rts
Offset_0x0009CA:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94039380, (A5)
                move.l  #$96E89500, (A5)
                move.w  #$977F, (A5)
                move.w  #$4E00, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                rts
Offset_0x0009F0:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94039380, (A5)
                move.l  #$96E89500, (A5)
                move.w  #$977F, (A5)
                move.w  #$5500, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                rts
Offset_0x000A16:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94039380, (A5)
                move.l  #$96E89500, (A5)
                move.w  #$977F, (A5)
                move.w  #$4000, (A5)
                move.w  #$0082, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                rts
Offset_0x000A3C:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94039380, (A5)
                move.l  #$96E89500, (A5)
                move.w  #$977F, (A5)
                move.w  #$4700, (A5)
                move.w  #$0082, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                rts
Offset_0x000A62:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94039380, (A5)
                move.l  #$96E89500, (A5)
                move.w  #$977F, (A5)
                move.w  #$4E00, (A5)
                move.w  #$0082, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                rts
Offset_0x000A88:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94039380, (A5)
                move.l  #$96E89500, (A5)
                move.w  #$977F, (A5)
                move.w  #$5500, (A5)
                move.w  #$0082, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                rts
Offset_0x000AAE:
                move.w  (VDP_Control_Port), D0                       ; $00C00004
                move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
                move.l  ($FFFFF616).w, (VDP_Data_Port)               ; $00C00000
                rts
Offset_0x000AC8:
                move.w  ($FFFFDB16).w, D0
                
                cmp.w   ($FFFFDB12).w, D0
                beq.s   Offset_0x000ADE
                move.l  ($FFFFDB12).w, ($FFFFDB16).w
                
                move.b  #$00, ($FFFFDB1F).w
Offset_0x000ADE:
                subq.b  #$01, ($FFFFDB1F).w
                bgt.s   Offset_0x000B02
                lea     (Offset_0x000B0A), A0
                move.w  ($FFFFDB16).w, D0
                lsr.w   #$01, D0
                move.b  $00(A0, D0), D1
                move.b  D1, ($FFFFDB21).w
                
                move.b  D1, ($FFFFDB1F).w
                subq.b  #$01, ($FFFFDB21).w
                rts
Offset_0x000B02:
                move.b  ($FFFFDB21).w, D1
                addq.b  #$01, D1
                rts   
Offset_0x000B0A:
                dc.b    $3C, $1E, $0F, $0A, $08, $06, $05, $00                            
;-------------------------------------------------------------------------------
VBlank_Id_0x1A: ; Offset_0x000B12: 
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000B1A:
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x000B1A
                jsr     (Process_DMA)                          ; Offset_0x001468
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                rts     
;-------------------------------------------------------------------------------
VBlank_Id_0x0C: ; Offset_0x000B34:  
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000B3C:                
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x000B3C
                bsr     ReadJoypads                            ; Offset_0x0010D8
                tst.b   ($FFFFF64E).w
                bne.s   Offset_0x000B76
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96FD9580, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                bra.s   Offset_0x000B9A
Offset_0x000B76:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96F89540, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
Offset_0x000B9A:
                move.w  ($FFFFF624).w, (A5)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)
                move.l  #$96F09500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7C00, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96FC9500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                bsr     Process_DMA                            ; Offset_0x001468
                jsr     (Load_Title_Cards_Mappings)            ; Offset_0x015522
                jsr     (Sound_Driver_Input)                   ; Offset_0x00104C
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                movem.l ($FFFFEE00).w, D0-D7
                movem.l D0-D7, ($FFFFEE60).w
                movem.l ($FFFFEE50).w, D0/D1
                movem.l D0/D1, ($FFFFEEA0).w
                move.l  ($FFFFF61E).w, ($FFFFEEEC).w
                bsr     Offset_0x00169E
                rts
;-------------------------------------------------------------------------------
VBlank_Id_0x0E: ; Offset_0x000C22:   
                bsr     Offset_0x000E60
                addq.b  #$01, ($FFFFF628).w
                move.b  #$0E, (VBlank_Index).w                       ; $FFFFF62A
                rts
;-------------------------------------------------------------------------------
VBlank_Id_0x12: ; Offset_0x000C32:  
                bsr     Offset_0x000E60
                move.w  ($FFFFF624).w, (A5)
                bra     Offset_0x00169E
;-------------------------------------------------------------------------------  
VBlank_Id_0x18: ; Offset_0x000C3E:      
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000C46:                
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x000C46
                bsr     ReadJoypads                            ; Offset_0x0010D8
                
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96FD9580, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96FC9500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)
                move.l  #$96F09500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7C00, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                bsr     Process_DMA                            ; Offset_0x001468
                bsr     Sound_Driver_Input                     ; Offset_0x00104C
                movem.l ($FFFFEE00).w, D0-D7
                movem.l D0-D7, ($FFFFEE60).w
                movem.l ($FFFFEE50).w, D0-D3
                movem.l D0-D3, ($FFFFEEA0).w
                jsr     (LoadTilesAsYouMove)                   ; Offset_0x00DA14
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                move.w  ($FFFFF662).w, D0
                beq.s   Offset_0x000D00
                clr.w   ($FFFFF662).w
                move.w  Offset_0x000D02-$02(PC, D0), D0
                jsr     Offset_0x000D02(PC, D0)
Offset_0x000D00:
                rts
Offset_0x000D02:
                dc.w    Offset_0x000D06-Offset_0x000D02
                dc.w    Offset_0x000D36-Offset_0x000D02
Offset_0x000D06:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$941F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000083, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x000D28:                
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   Offset_0x000D28
                move.w  #$8F02, (A5)
                rts
Offset_0x000D36:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                
                move.w  #$8F01, (A5)
                move.l  #$941F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000081, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x000D58:                
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   Offset_0x000D58
                move.w  #$8F02, (A5)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                
                move.w  #$8F01, (A5)
                move.l  #$941F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000083, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x000D86:                
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   Offset_0x000D86
                
                move.w  #$8F02, (A5)
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8B00, (A6)
                move.w  #$8402, (A6)
                move.w  #$9011, (A6)
                lea     ($FFFF0000), A1
                move.l  #$50AC0003, D0
                moveq   #$16, D1
                moveq   #$0E, D2
                jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
                rts  
;-------------------------------------------------------------------------------
VBlank_Id_0x16: ; Offset_0x000DBC: 
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000DC4:                
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x000DC4
                bsr     ReadJoypads                            ; Offset_0x0010D8
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96FD9580, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96FC9500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)
                move.l  #$96F09500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7C00, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                bsr     Process_DMA                            ; Offset_0x001468
                bsr     Sound_Driver_Input                     ; Offset_0x00104C
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                bsr     Offset_0x00169E
                tst.w   ($FFFFF614).w
                beq     Offset_0x000E5E
                subq.w  #$01, ($FFFFF614).w
Offset_0x000E5E:
                rts   
;-------------------------------------------------------------------------------    
Offset_0x000E60:
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000E68:                
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x000E68
                bsr     ReadJoypads                            ; Offset_0x0010D8
                tst.b   ($FFFFF64E).w
                bne.s   Offset_0x000EA2
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96FD9580, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                bra.s   Offset_0x000EC6
Offset_0x000EA2:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96F89540, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
Offset_0x000EC6:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96FC9500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)
                move.l  #$96F09500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7C00, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                bsr     Sound_Driver_Input                     ; Offset_0x00104C
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                rts                             
;===============================================================================
; Sub Rotina VBlank - Interrupção de retraço vertical         
; [ Término ]
;===============================================================================
                                  
;===============================================================================
; Sub Rotina HBlank - Interrupção de retraço horizontal         
; [ Início ]
;===============================================================================
HBlank: ; Offset_0x000F1C:
                tst.w   ($FFFFF644).w
                beq     Offset_0x000FC6
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq     Pal_To_ColorRAM                        ; Offset_0x000FC8
                move.w  #$0000, ($FFFFF644).w
                move.l  A5, -(A7)
                move.l  D0, -(A7)
Offset_0x000F36:                
                move.w  (VDP_Control_Port), D0                       ; $00C00004
                andi.w  #$0004, D0
                beq.s   Offset_0x000F36
                move.w  ($FFFFF60C).w, D0
                andi.b  #$BF, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                move.w  #$8228, (VDP_Control_Port)                   ; $00C00004
                move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
                move.l  ($FFFFEEEC).w, (VDP_Data_Port)               ; $00C00000
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000F72:                
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x000F72
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96EE9580, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000FA8:                
                move.w  (VDP_Control_Port), D0                       ; $00C00004
                andi.w  #$0004, D0
                beq.s   Offset_0x000FA8
                move.w  ($FFFFF60C).w, D0
                ori.b   #$40, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                move.l  (A7)+, D0
                move.l  (A7)+, A5
Offset_0x000FC6:
                rte
;===============================================================================
; Sub Rotina HBlank - Interrupção de retraço horizontal         
; [ Término ]
;===============================================================================                 

;===============================================================================
; Sub Rotina Pal_To_ColorRAM - Transfere as paletas da Ram para a Color Ram         
; [ Início ]
;===============================================================================                  
Pal_To_ColorRAM: ; Offset_0x000FC8:
                move    #$2700, SR
                move.w  #$0000, ($FFFFF644).w
                movem.l A0/A1, -(A7)
                lea     (VDP_Data_Port), A1                          ; $00C00000
                lea     ($FFFFF080).w, A0
                move.l  #Color_RAM_Address, $0004(A1)                ; $C0000000
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.w  #$8ADF, $0004(A1)
                movem.l (A7)+, A0/A1
                tst.b   ($FFFFF64F).w
                bne.s   Offset_0x00103A
                rte
Offset_0x00103A:
                clr.b   ($FFFFF64F).w
                movem.l D0-D7/A0-A6, -(A7)
                bsr     DemoTime                               ; Offset_0x0007AE
                movem.l (A7)+, D0-D7/A0-A6
                rte
;===============================================================================
; Sub Rotina Pal_To_ColorRAM - Transfere as paletas da Ram para a Color Ram         
; [ Término ]
;=============================================================================== 

;===============================================================================
; Sub Rotina para colocar o som selecionado no Driver de Som
; [ Início ]
;===============================================================================   
Sound_Driver_Input: ; Offset_0x00104C:
                lea     ($00FFFFC0), A0
                lea     ($00A01B80), A1
                cmpi.b  #$80, $0008(A1)
                bne.s   Offset_0x00108C
                move.b  $0000(A0), D0
                beq.s   Offset_0x00106C
                clr.b   $0000(A0)
                bra.s   Offset_0x001076
Offset_0x00106C:
                move.b  $0004(A0), D0
                beq.s   Offset_0x00108C
                clr.b   $0004(A0)
Offset_0x001076:
                move.b  D0, D1
                subi.b  #$FE, D1
                bcs.s   Offset_0x001088
                addi.b  #$7F, D1
                move.b  D1, $0003(A1)
                bra.s   Offset_0x00108C
Offset_0x001088:
                move.b  D0, $0008(A1)
Offset_0x00108C:
                moveq   #$03, D1
Offset_0x00108E:
                move.b  $01(A0, D1), D0
                beq.s   Offset_0x0010A2
                tst.b   $09(A1, D1)
                bne.s   Offset_0x0010A2
                clr.b   $01(A0, D1)
                move.b  D0, $09(A1, D1)
Offset_0x0010A2:
                dbra    D1, Offset_0x00108E
                rts
;===============================================================================
; Sub Rotina para colocar o som selecionado no Driver de Som
; [ Término ]
;===============================================================================  
        
;===============================================================================
; Sub Rotina JoypadInit
; [ Início ]
;===============================================================================  
JoypadInit: ; Offset_0x0010A8:
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
JoypadInit_Z80Wait: ; Offset_0x0010B0:
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   JoypadInit_Z80Wait                     ; Offset_0x0010B0
                moveq   #$40, D0
                move.b  D0, ($00A10009)
                move.b  D0, ($00A1000B)
                move.b  D0, ($00A1000D)
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                rts
;===============================================================================
; Sub Rotina JoypadInit
; [ Término ]
;===============================================================================
  
;===============================================================================
; Sub Rotina ReadJoypads
; [ Início ]
;===============================================================================                  
ReadJoypads: ; Offset_0x0010D8:
                lea     ($FFFFF604).w, A0
                lea     ($00A10003), A1
                bsr.s   Joypad_Read                            ; Offset_0x0010E6
                addq.w  #$02, A1
Joypad_Read: ; Offset_0x0010E6:
                move.b  #$00, (A1)
                nop
                nop
                move.b  (A1), D0
                lsl.b   #$02, D0
                andi.b  #$C0, D0
                move.b  #$40, (A1)
                nop
                nop
                move.b  (A1), D1
                andi.b  #$3F, D1
                or.b    D1, D0
                not.b   D0
                move.b  (A0), D1
                eor.b   D0, D1
                move.b  D0, (A0)+
                and.b   D0, D1
                move.b  D1, (A0)+
                rts
;===============================================================================
; Sub Rotina ReadJoypads
; [ Término ]
;===============================================================================

;===============================================================================
; Sub Rotina VDPRegSetup
; [ Início ]
;=============================================================================== 
VDPRegSetup: ; Offset_0x001114:
                lea     (VDP_Control_Port), A0                       ; $00C00004
                lea     (VDP_Data_Port), A1                          ; $00C00000
                lea     (VDPRegSetup_Array), A2                ; Offset_0x00119E
                moveq   #$12, D7
VDPRegSetup_Loop: ; Offset_0x001128:
                move.w  (A2)+, (A0)
                dbra    D7, VDPRegSetup_Loop                   ; Offset_0x001128
                move.w  (VDPRegSetup_Array+$02), D0            ; Offset_0x0011A0
                move.w  D0, ($FFFFF60C).w
                move.w  #$8ADF, ($FFFFF624).w
                moveq   #$00, D0
                move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
                move.w  D0, (A1)
                move.w  D0, (A1)
                move.l  #Color_RAM_Address, (VDP_Control_Port) ; $C0000000, $00C00004
                move.w  #$003F, D7
VDPRegSetup_ClearCRAM: ; Offset_0x00115C:
                move.w  D0, (A1)
                dbra    D7, VDPRegSetup_ClearCRAM              ; Offset_0x00115C
                clr.l   ($FFFFF616).w
                clr.l   ($FFFFF61A).w
                move.l  D1, -(A7)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$94FF93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000080, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
VDPRegSetup_DMAWait: ; Offset_0x00118E:
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   VDPRegSetup_DMAWait                    ; Offset_0x00118E
                move.w  #$8F02, (A5)
                move.l  (A7)+, D1
                rts
VDPRegSetup_Array: ; Offset_0x00119E:   
                dc.w    $8004, $8134, $8230, $8328, $8407, $857C, $8600, $8700 
                dc.w    $8800, $8900, $8A00, $8B00, $8C81, $8D3F, $8E00, $8F02
                dc.w    $9001, $9100, $9200              
;===============================================================================
; Sub Rotina VDPRegSetup
; [ Término ]
;=============================================================================== 

;===============================================================================
; Sub Rotina ClearScreen
; [ Início ]
;===============================================================================                
ClearScreen: ; Offset_0x0011C4:
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x0011CC:
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x0011CC
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$9400933F, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000080, (A5)              
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
ClearScreen_DMAWait: ; Offset_0x0011F8:
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   ClearScreen_DMAWait                    ; Offset_0x0011F8
                move.w  #$8F02, (A5)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$940F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000083, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
ClearScreen_DMAWait_2: ; Offset_0x001226:
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   ClearScreen_DMAWait_2                  ; Offset_0x001226
                move.w  #$8F02, (A5)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$940F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$60000083, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
ClearScreen_DMAWait_3: ; Offset_0x001254:
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   ClearScreen_DMAWait_3                  ; Offset_0x001254
                move.w  #$8F02, (A5)
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x001294
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$940F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$60000082, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
ClearScreen_DMAWait_4: ; Offset_0x001288:
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   ClearScreen_DMAWait_4                  ; Offset_0x001288
                move.w  #$8F02, (A5)
Offset_0x001294:
                clr.l   ($FFFFF616).w
                clr.l   ($FFFFF61A).w
                lea     ($FFFFF800).w, A1
                moveq   #$00, D0
                move.w  #$00A0, D1
ClearScreen_ClearBuffer1: ; Offset_0x0012A6:
                move.l  D0, (A1)+
                dbra    D1, ClearScreen_ClearBuffer1           ; Offset_0x0012A6
                lea     ($FFFFE000).w, A1
                moveq   #$00, D0
                move.w  #$0100, D1
ClearScreen_ClearBuffer2: ; Offset_0x0012B6:
                move.l  D0, (A1)+
                dbra    D1, ClearScreen_ClearBuffer2           ; Offset_0x0012B6
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                rts
;===============================================================================
; Sub Rotina ClearScreen
; [ Término ]
;===============================================================================                




;===============================================================================
; Inicialização do driver de Som
; [ Início ]
;===============================================================================                 
SoundDriverLoad: ; Offset_0x0012C6:
                nop
                jmp     (Sound_Driver)                         ; Offset_0x0EC000
; Offset_0x0012CE: ; Código não usado                
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
                move.w  #$0100, (Z80_Reset)                          ; $00A11200
                lea     (Z80_RAM_Start), A1                          ; $00A00000
                move.b  #$F3, (A1)+
                move.b  #$F3, (A1)+
                move.b  #$C3, (A1)+
                move.b  #$00, (A1)+
                move.b  #$00, (A1)+
                move.w  #$0000, (Z80_Reset)                          ; $00A11200
                nop
                nop
                nop
                nop
                move.w  #$0100, (Z80_Reset)                          ; $00A11200
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                rts     
;===============================================================================
; Inicialização do driver de Som
; [ Término ]
;===============================================================================  

;===============================================================================
; Início das rotinas para tocar os sons
;===============================================================================                              
Play_Music: ; Offset_0x00131A:
                tst.b   ($FFFFFFC0).w
                bne.s   Play_Music_2                           ; Offset_0x001326
                move.b  D0, ($FFFFFFC0).w
                rts
Play_Music_2: ; Offset_0x001326:
                move.b  D0, ($FFFFFFC4).w
                rts
Play_Sfx: ; Offset_0x00132C:
                move.b  D0, ($FFFFFFC1).w
                rts
Play_Sfx_Stereo: ; Offset_0x001332:
                move.b  D0, ($FFFFFFC2).w
                rts
Play_Sfx_Ex: ; Offset_0x001338:
                tst.b   $0001(A0)
                bpl.s   Offset_0x001342
                move.b  D0, ($FFFFFFC1).w
Offset_0x001342:
                rts
;===============================================================================
; Término das rotinas para tocar os sons
;===============================================================================  

;===============================================================================
; Sub Rotina Pause - Rotina para pausar o jogo
; [ Início ]
;===============================================================================                
Pause: ; Offset_0x001344:
                nop
                tst.b   ($FFFFFE12).w
                beq     Unpause                                ; Offset_0x0013B4
                tst.w   ($FFFFF63A).w
                bne.s   Pause_AlreadyPaused                    ; Offset_0x001362
                move.b  ($FFFFF605).w, D0
                or.b    ($FFFFF607).w, D0
                andi.b  #$80, D0
                beq.s   Pause_DoNothing                        ; Offset_0x0013BA
Pause_AlreadyPaused: ; Offset_0x001362:
                move.w  #$0001, ($FFFFF63A).w
                move.b  #$FE, ($FFFFFFC0).w
Pause_Loop: ; Offset_0x00136E:
                move.b  #$10, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                tst.b   ($FFFFFFB1).w
                beq.s   Pause_CheckStart                       ; Offset_0x0013A0
                btst    #$06, ($FFFFF605).w
                beq.s   Pause_CheckBC                          ; Offset_0x001390
                move.b  #gm_TitleScreen, (Game_Mode).w          ; $04, $FFFFF600
                nop
                bra.s   Offset_0x0013AE
Pause_CheckBC: ; Offset_0x001390:
                btst    #$04, ($FFFFF604).w
                bne.s   Pause_SlowMotion                       ; Offset_0x0013BC
                btst    #$05, ($FFFFF605).w
                bne.s   Pause_SlowMotion                       ; Offset_0x0013BC
Pause_CheckStart: ; Offset_0x0013A0:
                move.b  ($FFFFF605).w, D0
                or.b    ($FFFFF607).w, D0
                andi.b  #$80, D0
                beq.s   Pause_Loop                             ; Offset_0x00136E
Offset_0x0013AE:
                move.b  #$FF, ($FFFFFFC0).w
Unpause: ; Offset_0x0013B4:
                move.w  #$0000, ($FFFFF63A).w
Pause_DoNothing: ; Offset_0x0013BA:
                rts
Pause_SlowMotion: ; Offset_0x0013BC:
                move.w  #$0001, ($FFFFF63A).w
                move.b  #$FF, ($FFFFFFC0).w
                rts                
;===============================================================================
; Sub Rotina Pause - Rotina para pausar o jogo
; [ Término ]
;===============================================================================  

;===============================================================================
; Sub Rotina ShowVDPGraphics
; [ Início ]
;===============================================================================                   
ShowVDPGraphics: ; Offset_0x0013CA:
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  #$00800000, D4
ShowVDPGraphics_LineLoop: ; Offset_0x0013D6:
                move.l  D0, $0004(A6)
                move.w  D1, D3
ShowVDPGraphics_TileLoop: ; Offset_0x0013DC:
                move.w  (A1)+, (A6)
                dbra    D3, ShowVDPGraphics_TileLoop           ; Offset_0x0013DC
                add.l   D4, D0
                dbra    D2, ShowVDPGraphics_LineLoop           ; Offset_0x0013D6
                rts
;===============================================================================
; Sub Rotina ShowVDPGraphics
; [ Término ]
;===============================================================================

;===============================================================================
; Sub Rotina ShowVDPGraphics_SS
; [ Início ]
;===============================================================================                   
ShowVDPGraphics_SS: ; Offset_0x0013EA:
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  #$01000000, D4
ShowVDPGraphicsSS_LineLoop: ; Offset_0x0013F6:
                move.l  D0, $0004(A6)
                move.w  D1, D3
ShowVDPGraphicsSS_TileLoop: ; Offset_0x0013FC:
                move.w  (A1)+, (A6)
                dbra    D3, ShowVDPGraphicsSS_TileLoop         ; Offset_0x0013FC
                add.l   D4, D0
                dbra    D2, ShowVDPGraphicsSS_LineLoop         ; Offset_0x0013F6
                rts 
;===============================================================================
; Sub Rotina ShowVDPGraphics_SS
; [ Término ]
;===============================================================================   

;===============================================================================
; Sub Rotina DMA_68KtoVRAM - Rotina de transferência dos sprites para a VRAM       
; [ Início ]
;===============================================================================  
DMA_68KtoVRAM: ; Offset_0x00140A:
                move.l  ($FFFFDCFC).w, A1
                cmpa.w  #$DCFC, A1
                beq.s   DMA_68KtoVRAM_NoDMA                    ; Offset_0x001466
                move.w  #$9300, D0
                move.b  D3, D0
                move.w  D0, (A1)+
                move.w  #$9400, D0
                lsr.w   #$08, D3
                move.b  D3, D0
                move.w  D0, (A1)+
                move.w  #$9500, D0
                lsr.l   #$01, D1
                move.b  D1, D0
                move.w  D0, (A1)+
                move.w  #$9600, D0
                lsr.l   #$08, D1
                move.b  D1, D0
                move.w  D0, (A1)+
                move.w  #$9700, D0
                lsr.l   #$08, D1
                move.b  D1, D0
                move.w  D0, (A1)+
                andi.l  #$0000FFFF, D2
                lsl.l   #$02, D2
                lsr.w   #$02, D2
                swap.w  D2
                ori.l   #$40000080, D2
                move.l  D2, (A1)+
                move.l  A1, ($FFFFDCFC).w
                cmpa.w  #$DCFC, A1
                beq.s   DMA_68KtoVRAM_NoDMA                    ; Offset_0x001466
                move.w  #$0000, (A1)
DMA_68KtoVRAM_NoDMA: ; Offset_0x001466:
                rts
;===============================================================================
; Sub Rotina DMA_68KtoVRAM - Rotina de transferência dos sprites para a VRAM      
; [ Término ]
;=============================================================================== 

;===============================================================================
; Sub Rotina Process_DMA     
; [ Início ]
;===============================================================================   
Process_DMA: ; Offset_0x001468:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                lea     ($FFFFDC00).w, A1
Process_DMA_Loop: ; Offset_0x001472:                
                move.w  (A1)+, D0
                beq.s   Process_DMA_End                        ; Offset_0x00148A
                move.w  D0, (A5)
                move.w  (A1)+, (A5)
                move.w  (A1)+, (A5)
                move.w  (A1)+, (A5)
                move.w  (A1)+, (A5)
                move.w  (A1)+, (A5)
                move.w  (A1)+, (A5)
                cmpa.w  #$DCFC, A1
                bne.s   Process_DMA_Loop                       ; Offset_0x001472
Process_DMA_End: ; Offset_0x00148A:
                move.w  #$0000, ($FFFFDC00).w
                move.l  #$FFFFDC00, ($FFFFDCFC).w
                rts
;===============================================================================
; Sub Rotina Process_DMA     
; [ Término ]
;===============================================================================                 
  
;===============================================================================
; Início das rotinas de descompressão no formato Nemesis  
;===============================================================================                 
;===============================================================================
; Sub Rotina NemesisDec - Rotina de descompressão no formato Nemesis       
; [ Início ]
;===============================================================================   
NemesisDec: ; Offset_0x00149A:                              
                movem.l D0-D7/A0/A1/A3-A5, -(A7)
                lea     (NemesisDec_Output), A3                ; Offset_0x00155C
                lea     (VDP_Data_Port), A4                          ; $00C00000
                bra.s   Offset_0x0014B6
NemesisDec_ToRAM: ; Offset_0x0014AC:                
                movem.l D0-D7/A0/A1/A3-A5, -(A7)
                lea     (NemesisDec_OutputRAM), A3             ; Offset_0x001572
Offset_0x0014B6:
                lea     ($FFFFAA00).w, A1
                move.w  (A0)+, D2
                lsl.w   #$01, D2
                bcc.s   Offset_0x0014C4
                adda.w  #$000A, A3   ; Aponta A3 para NemesisDec_Output_XOR se A3 = NemesisDec_Output ou
Offset_0x0014C4:                     ; Aponta A3 para NemesisDec_OutputRAM_XOR se A3 = NemesisDec_OutputRAM
                lsl.w   #$02, D2
                move.w  D2, A5
                moveq   #$08, D3
                moveq   #$00, D2
                moveq   #$00, D4
                bsr     NemesisDec_4                           ; Offset_0x001588
                move.b  (A0)+, D5
                asl.w   #$08, D5
                move.b  (A0)+, D5
                move.w  #$0010, D6
                bsr.s   NemesisDec_2                           ; Offset_0x0014E4
                movem.l (A7)+, D0-D7/A0/A1/A3-A5
                rts
;===============================================================================
; Sub Rotina NemesisDec - Rotina de descompressão no formato Nemesis       
; [ Término ]
;=============================================================================== 

;===============================================================================
; Sub Rotina NemesisDec_2 - Rotina de descompressão no formato Nemesis       
; [ Início ]
;===============================================================================   
NemesisDec_2: ; Offset_0x0014E4:
                move.w  D6, D7
                subq.w  #$08, D7
                move.w  D5, D1
                lsr.w   D7, D1
                cmpi.b  #$FC, D1
                bcc.s   Offset_0x001530
                andi.w  #$00FF, D1
                add.w   D1, D1
                move.b  $00(A1, D1), D0
                ext.w   D0
                sub.w   D0, D6
                cmpi.w  #$0009, D6
                bcc.s   Offset_0x00150C
                addq.w  #$08, D6
                asl.w   #$08, D5
                move.b  (A0)+, D5
Offset_0x00150C:
                move.b  $01(A1, D1), D1
                move.w  D1, D0
                andi.w  #$000F, D1
                andi.w  #$00F0, D0
Offset_0x00151A:                
                lsr.w   #$04, D0                 
;-------------------------------------------------------------------------------
NemesisDec_Loop_SubType: ; Offset_0x00151C:                 
                lsl.l   #$04, D4
                or.b    D1, D4
                subq.w  #$01, D3
                bne.s   Offset_0x00152A
                jmp     (A3)       ; A3 Contém uma das rotinas de descompressão no formato Nemesis.
;===============================================================================
; Sub Rotina NemesisDec_2 - Rotina de descompressão no formato Nemesis       
; [ Término ]
;===============================================================================
                 
;===============================================================================
; Sub Rotina NemesisDec_3 - Rotina de descompressão no formato Nemesis       
; [ Início ]
;===============================================================================  
NemesisDec_3: ; Offset_0x001526:                
                moveq   #$00, D4
                moveq   #$08, D3
Offset_0x00152A:
                dbra    D0, NemesisDec_Loop_SubType            ; Offset_0x00151C
                bra.s   NemesisDec_2                           ; Offset_0x0014E4
;===============================================================================
; Sub Rotina NemesisDec_3 - Rotina de descompressão no formato Nemesis       
; [ Fim ]
;===============================================================================      
Offset_0x001530:
                subq.w  #$06, D6
                cmpi.w  #$0009, D6
                bcc.s   Offset_0x00153E
                addq.w  #$08, D6
                asl.w   #$08, D5
                move.b  (A0)+, D5
Offset_0x00153E:
                subq.w  #$07, D6
                move.w  D5, D1
                lsr.w   D6, D1
                move.w  D1, D0
                andi.w  #$000F, D1
                andi.w  #$0070, D0
                cmpi.w  #$0009, D6
                bcc.s   Offset_0x00151A
                addq.w  #$08, D6
                asl.w   #$08, D5
                move.b  (A0)+, D5
                bra.s   Offset_0x00151A
;===============================================================================
; Sub Rotinas de saídas de dados da descompressão no formato Nemesis       
; [ Início ]
;===============================================================================                
NemesisDec_Output: ; Offset_0x00155C:
                move.l  D4, (A4)
                subq.w  #$01, A5
                move.w  A5, D4
                bne.s   NemesisDec_3                           ; Offset_0x001526
                rts
NemesisDec_Output_XOR: ; Offset_0x001566:
                eor.l   D4, D2
                move.l  D2, (A4)
                subq.w  #$01, A5
                move.w  A5, D4
                bne.s   NemesisDec_3                           ; Offset_0x001526
                rts
NemesisDec_OutputRAM: ; Offset_0x001572:
                move.l  D4, (A4)+
                subq.w  #$01, A5
                move.w  A5, D4
                bne.s   NemesisDec_3                           ; Offset_0x001526
                rts
NemesisDec_OutputRAM_XOR: ; Offset_0x00157C:
                eor.l   D4, D2
                move.l  D2, (A4)+
                subq.w  #$01, A5
                move.w  A5, D4
                bne.s   NemesisDec_3                           ; Offset_0x001526
                rts 
;===============================================================================
; Sub Rotinas de saídas de dados da descompressão no formato Nemesis        
; [ Fim ]
;===============================================================================   

;===============================================================================
; Sub Rotina NemesisDec_4 - Rotina de descompressão no formato Nemesis       
; [ Início ]
;===============================================================================
NemesisDec_4: ; Offset_0x001588:
                move.b  (A0)+, D0
Offset_0x00158A:                
                cmpi.b  #$FF, D0
                bne.s   Offset_0x001592
                rts
Offset_0x001592:
                move.w  D0, D7
Offset_0x001594:                
                move.b  (A0)+, D0
                cmpi.b  #$80, D0
                bcc.s   Offset_0x00158A
                move.b  D0, D1
                andi.w  #$000F, D7
                andi.w  #$0070, D1
                or.w    D1, D7
                andi.w  #$000F, D0
                move.b  D0, D1
                lsl.w   #$08, D1
                or.w    D1, D7
                moveq   #$08, D1
                sub.w   D0, D1
                bne.s   Offset_0x0015C2
                move.b  (A0)+, D0
                add.w   D0, D0
                move.w  D7, $00(A1, D0)
                bra.s   Offset_0x001594
Offset_0x0015C2:
                move.b  (A0)+, D0
                lsl.w   D1, D0
                add.w   D0, D0
                moveq   #$01, D5
                lsl.w   D1, D5
                subq.w  #$01, D5
Offset_0x0015CE:                
                move.w  D7, $00(A1, D0)
                addq.w  #$02, D0
                dbra    D5, Offset_0x0015CE
                bra.s   Offset_0x001594
;===============================================================================
; Sub Rotina NemesisDec_4 - Rotina de descompressão no formato Nemesis       
; [ Término ]
;=============================================================================== 
;===============================================================================
; Término das rotinas de descompressão no formato Nemesis  
;===============================================================================                  
                
;===============================================================================
; Sub Rotina LoadPLC - Rotina de para carregar os Sprites no array ArtLoadCues      
; [ Início ]           de acordo com o index em D0
;===============================================================================   
LoadPLC: ; Offset_0x0015DA:                               
                movem.l A1/A2, -(A7)
                lea     (ArtLoadCues), A1                      ; Offset_0x0423AA
                add.w   D0, D0
                move.w  $00(A1, D0), D0
                lea     $00(A1, D0), A1
                lea     ($FFFFF680).w, A2
Offset_0x0015F2:                
                tst.l   (A2)
                beq.s   Offset_0x0015FA
                addq.w  #$06, A2
                bra.s   Offset_0x0015F2
Offset_0x0015FA:
                move.w  (A1)+, D0
                bmi.s   Offset_0x001606
Offset_0x0015FE:                
                move.l  (A1)+, (A2)+
                move.w  (A1)+, (A2)+
                dbra    D0, Offset_0x0015FE
Offset_0x001606:
                movem.l (A7)+, A1/A2
                rts 
;===============================================================================
; Sub Rotina LoadPLC - Rotina de para carregar os Sprites no array ArtLoadCues      
; [ Término ]          de acordo com o index em D0
;=============================================================================== 

;===============================================================================
; Sub Rotina LoadPLC2 - Rotina de para carregar os Sprites no array ArtLoadCues      
; [ Início ]            de acordo com o index em D0
;=============================================================================== 
LoadPLC2: ; Offset_0x00160C:
                movem.l A1/A2, -(A7)
                lea     (ArtLoadCues), A1                      ; Offset_0x0423AA
                add.w   D0, D0
                move.w  $00(A1, D0), D0
                lea     $00(A1, D0), A1
                bsr.s   ClearPLC                               ; Offset_0x001638
                lea     ($FFFFF680).w, A2
                move.w  (A1)+, D0
                bmi.s   Offset_0x001632
Offset_0x00162A:                
                move.l  (A1)+, (A2)+
                move.w  (A1)+, (A2)+
                dbra    D0, Offset_0x00162A
Offset_0x001632:
                movem.l (A7)+, A1/A2
                rts
;===============================================================================
; Sub Rotina LoadPLC2 - Rotina de para carregar os Sprites no array ArtLoadCues      
; [ Término ]           de acordo com o index em D0
;=============================================================================== 

;===============================================================================
; Sub Rotina ClearPLC
; [ Início ]
;===============================================================================                
ClearPLC: ; Offset_0x001638:
                lea     ($FFFFF680).w, A2
                moveq   #$1F, D0
ClearPLC_Loop: ; Offset_0x00163E                
                clr.l   (A2)+
                dbra    D0, ClearPLC_Loop                      ; Offset_0x00163E
                rts
;===============================================================================
; Sub Rotina ClearPLC
; [ Término ]
;===============================================================================

;===============================================================================
; Sub Rotina RunPLC
; [ Início ]
;===============================================================================                 
RunPLC: ; Offset_0x001646:
                tst.l   ($FFFFF680).w
                beq.s   Offset_0x00169C
                tst.w   ($FFFFF6F8).w
                bne.s   Offset_0x00169C
                move.l  ($FFFFF680).w, A0
                lea     (NemesisDec_Output), A3                ; Offset_0x00155C
                nop
                lea     ($FFFFAA00).w, A1
                move.w  (A0)+, D2
                bpl.s   Offset_0x00166A
                adda.w  #$000A, A3          ; A3 + $000A = NemesisDec_Output_XOR
Offset_0x00166A:
                andi.w  #$7FFF, D2
                move.w  D2, ($FFFFF6F8).w
                bsr     NemesisDec_4                           ; Offset_0x001588
                move.b  (A0)+, D5
                asl.w   #$08, D5
                move.b  (A0)+, D5
                moveq   #$10, D6
                moveq   #$00, D0
                move.l  A0, ($FFFFF680).w
                move.l  A3, ($FFFFF6E0).w
                move.l  D0, ($FFFFF6E4).w
                move.l  D0, ($FFFFF6E8).w
                move.l  D0, ($FFFFF6EC).w
                move.l  D5, ($FFFFF6F0).w
                move.l  D6, ($FFFFF6F4).w
Offset_0x00169C:
                rts
;===============================================================================
; Sub Rotina RunPLC
; [ Término ]
;===============================================================================   

Offset_0x00169E:
                tst.w   ($FFFFF6F8).w
                beq     Offset_0x001736
                move.w  #$0006, ($FFFFF6FA).w
                moveq   #$00, D0
                move.w  ($FFFFF684).w, D0
                addi.w  #$00C0, ($FFFFF684).w
                bra.s   Offset_0x0016D2
;-------------------------------------------------------------------------------
Offset_0x0016BA:
                tst.w   ($FFFFF6F8).w
                beq.s   Offset_0x001736
                move.w  #$0003, ($FFFFF6FA).w
                moveq   #$00, D0
                move.w  ($FFFFF684).w, D0
                addi.w  #$0060, ($FFFFF684).w
Offset_0x0016D2:
                lea     (VDP_Control_Port), A4                       ; $00C00004
                lsl.l   #$02, D0
                lsr.w   #$02, D0
                ori.w   #$4000, D0
                swap.w  D0
                move.l  D0, (A4)
                subq.w  #$04, A4
                move.l  ($FFFFF680).w, A0
                move.l  ($FFFFF6E0).w, A3
                move.l  ($FFFFF6E4).w, D0
                move.l  ($FFFFF6E8).w, D1
                move.l  ($FFFFF6EC).w, D2
                move.l  ($FFFFF6F0).w, D5
                move.l  ($FFFFF6F4).w, D6
                lea     ($FFFFAA00).w, A1
Offset_0x001706:                
                move.w  #$0008, A5
                bsr     NemesisDec_3                           ; Offset_0x001526
                subq.w  #$01, ($FFFFF6F8).w
                beq.s   Offset_0x001738
                subq.w  #$01, ($FFFFF6FA).w
                bne.s   Offset_0x001706
                move.l  A0, ($FFFFF680).w
                move.l  A3, ($FFFFF6E0).w
                move.l  D0, ($FFFFF6E4).w
                move.l  D1, ($FFFFF6E8).w
                move.l  D2, ($FFFFF6EC).w
                move.l  D5, ($FFFFF6F0).w
                move.l  D6, ($FFFFF6F4).w
Offset_0x001736:
                rts
;------------------------------------------------------------------------------- 
Offset_0x001738:
                lea     ($FFFFF680).w, A0
                moveq   #$15, D0
Offset_0x00173E:
                move.l  $0006(A0), (A0)+
                dbra    D0, Offset_0x00173E
                rts
;===============================================================================
; Sub Rotina RunPLC_ROM - Carrega os dados direto do Rom sem entrar na fila       
; [ Início ]
;===============================================================================                 
RunPLC_ROM: ; Offset_0x001748:
                lea     (ArtLoadCues), A1                      ; Offset_0x0423AA
                add.w   D0, D0
                move.w  $00(A1, D0), D0
                lea     $00(A1, D0), A1
                move.w  (A1)+, D1
RunPLC_ROM_Loop: ; Offset_0x00175A:                
                move.l  (A1)+, A0
                moveq   #$00, D0
                move.w  (A1)+, D0
                lsl.l   #$02, D0
                lsr.w   #$02, D0
                ori.w   #$4000, D0
                swap.w  D0
                move.l  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     NemesisDec                             ; Offset_0x00149A
                dbra    D1, RunPLC_ROM_Loop                    ; Offset_0x00175A
                rts                
;===============================================================================
; Sub Rotina RunPLC_ROM - Carrega os dados direto do Rom sem entrar na fila       
; [ Término ]
;===============================================================================                     

;===============================================================================
; Início das rotinas de descompressão no formato Enigma  
;===============================================================================                
;===============================================================================
; Sub Rotina EnigmaDec - Rotina de descompressão no formato Enigma       
; [ Início ]
;=============================================================================== 
EnigmaDec: ; Offset_0x00177A:
                movem.l D0-D7/A1-A5, -(A7)
                move.w  D0, A3
                move.b  (A0)+, D0
                ext.w   D0
                move.w  D0, A5
                move.b  (A0)+, D4
                lsl.b   #$03, D4
                move.w  (A0)+, A2
                adda.w  A3, A2
                move.w  (A0)+, A4
                adda.w  A3, A4
                move.b  (A0)+, D5
                asl.w   #$08, D5
                move.b  (A0)+, D5
                moveq   #$10, D6
Offset_0x00179A:                
                moveq   #$07, D0
                move.w  D6, D7
                sub.w   D0, D7
                move.w  D5, D1
                lsr.w   D7, D1
                andi.w  #$007F, D1
                move.w  D1, D2
                cmpi.w  #$0040, D1
                bcc.s   Offset_0x0017B4
                moveq   #$06, D0
                lsr.w   #$01, D2
Offset_0x0017B4:
                bsr     Offset_0x0018E8
                andi.w  #$000F, D2
                lsr.w   #$04, D1
                add.w   D1, D1
                jmp     Offset_0x001810(PC, D1)
Offset_0x0017C4:                
                move.w  A2, (A1)+
                addq.w  #$01, A2
                dbra    D2, Offset_0x0017C4
                bra.s   Offset_0x00179A
Offset_0x0017CE:                
                move.w  A4, (A1)+
                dbra    D2, Offset_0x0017CE
                bra.s   Offset_0x00179A
Offset_0x0017D6:                
                bsr     Offset_0x001838
Offset_0x0017DA:                
                move.w  D1, (A1)+
                dbra    D2, Offset_0x0017DA
                bra.s   Offset_0x00179A
Offset_0x0017E2:                
                bsr     Offset_0x001838
Offset_0x0017E6:                
                move.w  D1, (A1)+
                addq.w  #$01, D1
                dbra    D2, Offset_0x0017E6
                bra.s   Offset_0x00179A
Offset_0x0017F0:                
                bsr     Offset_0x001838
Offset_0x0017F4:                
                move.w  D1, (A1)+
                subq.w  #$01, D1
                dbra    D2, Offset_0x0017F4
                bra.s   Offset_0x00179A
Offset_0x0017FE:                
                cmpi.w  #$000F, D2
                beq.s   Offset_0x001820
Offset_0x001804:                
                bsr     Offset_0x001838     
                move.w  D1, (A1)+
                dbra    D2, Offset_0x001804
                bra.s   Offset_0x00179A
Offset_0x001810:                
                bra.s   Offset_0x0017C4
                bra.s   Offset_0x0017C4
                bra.s   Offset_0x0017CE
                bra.s   Offset_0x0017CE
                bra.s   Offset_0x0017D6
                bra.s   Offset_0x0017E2
                bra.s   Offset_0x0017F0
                bra.s   Offset_0x0017FE
Offset_0x001820:
                subq.w  #$01, A0
                cmpi.w  #$0010, D6
                bne.s   Offset_0x00182A
                subq.w  #$01, A0
Offset_0x00182A:
                move.w  A0, D0
                lsr.w   #$01, D0
                bcc.s   Offset_0x001832
                addq.w  #$01, A0
Offset_0x001832:
                movem.l (A7)+, D0-D7/A1-A5
                rts  
Offset_0x001838:
                move.w  A3, D3
                move.b  D4, D1
                add.b   D1, D1
                bcc.s   Offset_0x00184A
                subq.w  #$01, D6
                btst    D6, D5
                beq.s   Offset_0x00184A
                ori.w   #$8000, D3
Offset_0x00184A:
                add.b   D1, D1
                bcc.s   Offset_0x001858
                subq.w  #$01, D6
                btst    D6, D5
                beq.s   Offset_0x001858
                addi.w  #$4000, D3
Offset_0x001858:
                add.b   D1, D1
                bcc.s   Offset_0x001866
                subq.w  #$01, D6
                btst    D6, D5
                beq.s   Offset_0x001866
                addi.w  #$2000, D3
Offset_0x001866:
                add.b   D1, D1
                bcc.s   Offset_0x001874
                subq.w  #$01, D6
                btst    D6, D5
                beq.s   Offset_0x001874
                ori.w   #$1000, D3
Offset_0x001874:
                add.b   D1, D1
                bcc.s   Offset_0x001882
                subq.w  #$01, D6
                btst    D6, D5
                beq.s   Offset_0x001882
                ori.w   #$0800, D3
Offset_0x001882:
                move.w  D5, D1
                move.w  D6, D7
                sub.w   A5, D7
                bcc.s   Offset_0x0018B2
                move.w  D7, D6
                addi.w  #$0010, D6
                neg.w   D7
                lsl.w   D7, D1
                move.b  (A0), D5
                rol.b   D7, D5
                add.w   D7, D7
                and.w   Offset_0x0018C8-$02(PC, D7), D5
                add.w   D5, D1
Offset_0x0018A0:                
                move.w  A5, D0
                add.w   D0, D0
                and.w   Offset_0x0018C8-$02(PC, D0), D1
                add.w   D3, D1
                move.b  (A0)+, D5
                lsl.w   #$08, D5
                move.b  (A0)+, D5
                rts    
Offset_0x0018B2:
                beq.s   Offset_0x0018C4
                lsr.w   D7, D1
                move.w  A5, D0
                add.w   D0, D0
                and.w   Offset_0x0018C8-$02(PC, D0), D1
                add.w   D3, D1
                move.w  A5, D0
                bra.s   Offset_0x0018E8
Offset_0x0018C4:
                moveq   #$10, D6
                bra.s   Offset_0x0018A0
Offset_0x0018C8:    
                dc.w    $0001, $0003, $0007, $000F, $001F, $003F, $007F, $00FF
                dc.w    $01FF, $03FF, $07FF, $0FFF, $1FFF, $3FFF, $7FFF, $FFFF  
Offset_0x0018E8:
                sub.w   D0, D6
                cmpi.w  #$0009, D6
                bcc.s   Offset_0x0018F6
                addq.w  #$08, D6
                asl.w   #$08, D5
                move.b  (A0)+, D5
Offset_0x0018F6:
                rts                            
;===============================================================================
; Sub Rotina EnigmaDec - Rotina de descompressão no formato Enigma       
; [ Término ]
;=============================================================================== 
;===============================================================================
; Término das rotinas de descompressão no formato Enigma  
;===============================================================================                
                
;===============================================================================
; Início das rotinas de descompressão no formato Kosinski  
;===============================================================================  
;===============================================================================
; Sub Rotina KosinskiDec - Rotina de descompressão no formato Kosinski       
; [ Início ]
;===============================================================================  
KosinskiDec: ; Offset_0x0018F8:
                subq.l  #$02, A7
                move.b  (A0)+, $0001(A7)
                move.b  (A0)+, (A7)
                move.w  (A7), D5
                moveq   #$0F, D4
Offset_0x001904:
                lsr.w   #$01, D5
                move    SR, D6
                dbra    D4, Offset_0x001916
                move.b  (A0)+, $0001(A7)
                move.b  (A0)+, (A7)
                move.w  (A7), D5
                moveq   #$0F, D4
Offset_0x001916:
                move    D6, CCR
                bcc.s   Offset_0x00191E
                move.b  (A0)+, (A1)+
                bra.s   Offset_0x001904
Offset_0x00191E:
                moveq   #$00, D3
                lsr.w   #$01, D5
                move    SR, D6
                dbra    D4, Offset_0x001932
                move.b  (A0)+, $0001(A7)
                move.b  (A0)+, (A7)
                move.w  (A7), D5
                moveq   #$0F, D4
Offset_0x001932:
                move    D6, CCR
                bcs.s   Offset_0x001962
                lsr.w   #$01, D5
                dbra    D4, Offset_0x001946
                move.b  (A0)+, $0001(A7)
                move.b  (A0)+, (A7)
                move.w  (A7), D5
                moveq   #$0F, D4
Offset_0x001946:
                roxl.w  #$01, D3
                lsr.w   #$01, D5
                dbra    D4, Offset_0x001958
                move.b  (A0)+, $0001(A7)
                move.b  (A0)+, (A7)
                move.w  (A7), D5
                moveq   #$0F, D4
Offset_0x001958:
                roxl.w  #$01, D3
                addq.w  #$01, D3
                moveq   #$FFFFFFFF, D2
                move.b  (A0)+, D2
                bra.s   Offset_0x001978
Offset_0x001962:
                move.b  (A0)+, D0
                move.b  (A0)+, D1
                moveq   #$FFFFFFFF, D2
                move.b  D1, D2
                lsl.w   #$05, D2
                move.b  D0, D2
                andi.w  #$0007, D1
                beq.s   Offset_0x001984
                move.b  D1, D3
                addq.w  #$01, D3
Offset_0x001978:
                move.b  $00(A1, D2), D0
                move.b  D0, (A1)+
                dbra    D3, Offset_0x001978
                bra.s   Offset_0x001904
Offset_0x001984:
                move.b  (A0)+, D1
                beq.s   Offset_0x001994
                cmpi.b  #$01, D1
                beq     Offset_0x001904
                move.b  D1, D3
                bra.s   Offset_0x001978
Offset_0x001994:
                addq.l  #$02, A7
                rts
;===============================================================================
; Sub Rotina KosinskiDec - Rotina de descompressão no formato Kosinski       
; [ Término ]
;===============================================================================  
;===============================================================================
; Término das rotinas de descompressão no formato Kosinski  
;===============================================================================     
             
;===============================================================================
; Sub Rotina para execução das paletas animadas. Ex: luzes piscando, fogo, 
; [ Início ]      etc...
;===============================================================================   
PalCycle_Load: ; Offset_0x001998:
                bsr     PalCycle_SuperSonic                    ; Offset_0x0020FA
                moveq   #$00, D2
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                add.w   D0, D0
                move.w  PalCycle(PC, D0), D0                   ; Offset_0x0019B0
                jmp     PalCycle(PC, D0)                       ; Offset_0x0019B0
                rts
PalCycle: ; Offset_0x0019B0:
                dc.w    PalCycle_EHz-PalCycle                  ; Offset_0x0019D4
                dc.w    PalCycle_Null-PalCycle                 ; Offset_0x0019D2
                dc.w    PalCycle_Wz-PalCycle                   ; Offset_0x001A02
                dc.w    PalCycle_Null-PalCycle                 ; Offset_0x0019D2
                dc.w    PalCycle_Mz-PalCycle                   ; Offset_0x001A32
                dc.w    PalCycle_Mz-PalCycle                   ; Offset_0x001A32
                dc.w    PalCycle_WFz-PalCycle                  ; Offset_0x001D72
                dc.w    PalCycle_HTz-PalCycle                  ; Offset_0x001AC8
                dc.w    PalCycle_HPz-PalCycle                  ; Offset_0x001B0C
                dc.w    PalCycle_Null-PalCycle                 ; Offset_0x0019D2   
                dc.w    PalCycle_OOz-PalCycle                  ; Offset_0x001B4E
                dc.w    PalCycle_MCz-PalCycle                  ; Offset_0x001B7C
                dc.w    PalCycle_CNz-PalCycle                  ; Offset_0x001BAA
                dc.w    PalCycle_CPz-PalCycle                  ; Offset_0x001CD2
                dc.w    PalCycle_DEz-PalCycle                  ; Offset_0x001CD2
                dc.w    PalCycle_ARz-PalCycle                  ; Offset_0x001D44
                dc.w    PalCycle_SCz-PalCycle                  ; Offset_0x001D72
;-------------------------------------------------------------------------------                  
PalCycle_Null: ; Offset_0x0019D2:
                rts
;-------------------------------------------------------------------------------                
PalCycle_EHz: ; Offset_0x0019D4:
                lea     (Pal_EHzCyc), A0                       ; Offset_0x001E36
                subq.w  #$01, ($FFFFF634).w
                bpl.s   Offset_0x001A00
                move.w  #$0007, ($FFFFF634).w
                move.w  ($FFFFF632).w, D0
                addq.w  #$01, ($FFFFF632).w
                andi.w  #$0003, D0
                lsl.w   #$03, D0
                move.l  $00(A0, D0), ($FFFFFB26).w
                move.l  $04(A0, D0), ($FFFFFB3C).w
Offset_0x001A00:
                rts
;------------------------------------------------------------------------------- 
PalCycle_Wz: ; Offset_0x001A02:
                subq.w  #$01, ($FFFFF634).w
                bpl.s   Offset_0x001A30
                move.w  #$0002, ($FFFFF634).w
                lea     (Pal_WzCyc), A0                        ; Offset_0x001ED6
                move.w  ($FFFFF632).w, D0
                subq.w  #$02, ($FFFFF632).w
                bcc.s   Offset_0x001A24
                move.w  #$0006, ($FFFFF632).w
Offset_0x001A24:
                lea     ($FFFFFB66).w, A1
                move.l  $00(A0, D0), (A1)+
                move.l  $04(A0, D0), (A1)
Offset_0x001A30:
                rts
;------------------------------------------------------------------------------- 
PalCycle_Mz: ; Offset_0x001A32:
                subq.w  #$01, ($FFFFF634).w
                bpl.s   Offset_0x001A62                             
                move.w  #$0011, ($FFFFF634).w
                lea     (Pal_MzCyc1), A0                       ; Offset_0x001EE6
                move.w  ($FFFFF632).w, D0
                addq.w  #$02, ($FFFFF632).w
                cmpi.w  #$000C, ($FFFFF632).w
                bcs.s   Offset_0x001A5A
                move.w  #$0000, ($FFFFF632).w
Offset_0x001A5A:
                lea     ($FFFFFB4A).w, A1
                move.w  $00(A0, D0), (A1)
Offset_0x001A62:
                subq.w  #$01, ($FFFFF666).w
                bpl.s   Offset_0x001A96
                move.w  #$0002, ($FFFFF666).w
                lea     (Pal_MzCyc2), A0                       ; Offset_0x001EF2
                move.w  ($FFFFF652).w, D0
                addq.w  #$02, ($FFFFF652).w
                cmpi.w  #$0006, ($FFFFF652).w
                bcs.s   Offset_0x001A8A
                move.w  #$0000, ($FFFFF652).w
Offset_0x001A8A:
                lea     ($FFFFFB42).w, A1
                move.l  $00(A0, D0), (A1)+
                move.w  $04(A0, D0), (A1)
Offset_0x001A96:
                subq.w  #$01, ($FFFFF668).w
                bpl.s   Offset_0x001AC6
                move.w  #$0009, ($FFFFF668).w
                lea     (Pal_MzCyc3), A0                       ; Offset_0x001EFE
                move.w  ($FFFFF654).w, D0
                addq.w  #$02, ($FFFFF654).w
                cmpi.w  #$0014, ($FFFFF654).w                                                
                bcs.s   Offset_0x001ABE                      
                move.w  #$0000, ($FFFFF654).w                
Offset_0x001ABE:
                lea     ($FFFFFB5E).w, A1
                move.w  $00(A0, D0), (A1)
Offset_0x001AC6:
                rts
;-------------------------------------------------------------------------------  
PalCycle_HTz: ; Offset_0x001AC8:                                           
                lea     (Pal_HTzCyc), A0                       ; Offset_0x001E56
                subq.w  #$01, ($FFFFF634).w
                bpl.s   Offset_0x001AFA
                move.w  #$0000, ($FFFFF634).w
                move.w  ($FFFFF632).w, D0
                addq.w  #$01, ($FFFFF632).w
                andi.w  #$000F, D0
                move.b  PalCycle_HTz_LavaDelayData(PC, D0), ($FFFFF635).w ; Offset_0x001AFC
                lsl.w   #$03, D0
                move.l  $00(A0, D0), ($FFFFFB26).w
                move.l  $04(A0, D0), ($FFFFFB3C).w
Offset_0x001AFA:
                rts
PalCycle_HTz_LavaDelayData: ; Offset_0x001AFC: ; Número de quadros entre a mudança de paleta da lava
                dc.b    $0B, $0B, $0B, $0A
                dc.b    $08, $0A, $0B, $0B
                dc.b    $0B, $0B, $0D, $0F
                dc.b    $0D, $0B, $0B, $0B
;-------------------------------------------------------------------------------    
PalCycle_HPz: ; Offset_0x001B0C:
                subq.w  #$01, ($FFFFF634).w
                bpl.s   Offset_0x001B4C
                move.w  #$0004, ($FFFFF634).w
                lea     (Pal_HPzCyc), A0                       ; Offset_0x001F12
                move.w  ($FFFFF632).w, D0
                subq.w  #$02, ($FFFFF632).w                 
                bcc.s   Offset_0x001B2E
                move.w  #$0006, ($FFFFF632).w
Offset_0x001B2E:
                lea     ($FFFFFB72).w, A1
                move.l  $00(A0, D0), (A1)+
                move.l  $04(A0, D0), (A1)
                lea     (Pal_HPzCyc_Underwater), A0            ; Offset_0x001F22
                lea     ($FFFFF0F2).w, A1
                move.l  $00(A0, D0), (A1)+
                move.l  $04(A0, D0), (A1)
Offset_0x001B4C:
                rts
;-------------------------------------------------------------------------------   
PalCycle_OOz: ; Offset_0x001B4E:
                subq.w  #$01, ($FFFFF634).w
                bpl.s   Offset_0x001B7A
                move.w  #$0007, ($FFFFF634).w
                lea     (Pal_OOzCyc), A0                       ; Offset_0x001F32
                move.w  ($FFFFF632).w, D0
                addq.w  #$02, ($FFFFF632).w
                andi.w  #$0006, ($FFFFF632).w
                lea     ($FFFFFB54).w, A1
                move.l  $00(A0, D0), (A1)+
                move.l  $04(A0, D0), (A1)
Offset_0x001B7A:
                rts
;-------------------------------------------------------------------------------    
PalCycle_MCz: ; Offset_0x001B7C:
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA
                bne.s   Offset_0x001BA8
                subq.w  #$01, ($FFFFF634).w
                bpl.s   Offset_0x001BA8
                move.w  #$0001, ($FFFFF634).w
                lea     (Pal_MCzCyc), A0                       ; Offset_0x001F42   
                move.w  ($FFFFF632).w, D0
                addq.w  #$02, ($FFFFF632).w
                andi.w  #$0006, ($FFFFF632).w
                move.w  $00(A0, D0), ($FFFFFB36).w
Offset_0x001BA8:
                rts
;------------------------------------------------------------------------------- 
PalCycle_CNz: ; Offset_0x001BAA:
                subq.w  #$01, ($FFFFF634).w
                bpl     Offset_0x001C48
                move.w  #$0007, ($FFFFF634).w
                lea     (Pal_CNzCyc1), A0                      ; Offset_0x001F4A
                move.w  ($FFFFF632).w, D0
                addq.w  #$02, ($FFFFF632).w
                cmpi.w  #$0006, ($FFFFF632).w
                bcs.s   Offset_0x001BD4
                move.w  #$0000, ($FFFFF632).w
Offset_0x001BD4:
                lea     $00(A0, D0), A0
                lea     ($FFFFFB00).w, A1
                move.w  $0000(A0), $004A(A1)
                move.w  $0006(A0), $004C(A1)
                move.w  $000C(A0), $004E(A1)
                move.w  $0012(A0), $0056(A1)
                move.w  $0018(A0), $0058(A1)
                move.w  $001E(A0), $005A(A1)
                lea     (Pal_CNzCyc2), A0                      ; Offset_0x001F6E
                lea     $00(A0, D0), A0
                move.w  $0000(A0), $0064(A1)
                move.w  $0006(A0), $0066(A1)
                move.w  $000C(A0), $0068(A1)               
                lea     (Pal_CNzCyc3), A0                      ; Offset_0x001F80
                move.w  ($FFFFF650).w, D0             
                addq.w  #$02, ($FFFFF650).w
                cmpi.w  #$0024, ($FFFFF650).w
                bcs.s   Offset_0x001C38
                move.w  #$0000, ($FFFFF650).w
Offset_0x001C38:
                lea     ($FFFFFB72).w, A1
                move.w  $04(A0, D0), (A1)+
                move.w  $02(A0, D0), (A1)+
                move.w  $00(A0, D0), (A1)+
Offset_0x001C48:
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA
                beq     Offset_0x001CD0
                subq.w  #$01, ($FFFFF666).w
                bpl     Offset_0x001CD0
                move.w  #$0003, ($FFFFF666).w
                move.w  ($FFFFF652).w, D0
                addq.w  #$02, ($FFFFF652).w
                cmpi.w  #$0006, ($FFFFF652).w
                bcs.s   Offset_0x001C74
                move.w  #$0000, ($FFFFF652).w
Offset_0x001C74:
                lea     (Pal_CNzCyc4), A0                      ; Offset_0x001FA8
                lea     $00(A0, D0), A0                        
                lea     ($FFFFFB00).w, A1
                move.w  $0000(A0), $0024(A1)
                move.w  $0006(A0), $0026(A1)
                move.w  $000C(A0), $0028(A1)
                lea     (Pal_CNzCyc5), A0                      ; Offset_0x001FBA
                move.w  ($FFFFF654).w, D0
                addq.w  #$02, ($FFFFF654).w                    
                cmpi.w  #$0014, ($FFFFF654).w
                bcs.s   Offset_0x001CB0
                move.w  #$0000, ($FFFFF654).w
Offset_0x001CB0:
                move.w  $00(A0, D0), $003C(A1)
                lea     (Pal_CNzCyc6), A0                      ; Offset_0x001FCE
                move.w  ($FFFFF656).w, D0
                addq.w  #$02, ($FFFFF656).w
                andi.w  #$000E, ($FFFFF656).w
                move.w  $00(A0, D0), $003E(A1)
Offset_0x001CD0:
                rts
;-------------------------------------------------------------------------------
PalCycle_CPz:
PalCycle_DEz: ; Offset_0x001CD2:
                subq.w  #$01, ($FFFFF634).w
                bpl.s   Offset_0x001D42
                move.w  #$0007, ($FFFFF634).w
                lea     (Pal_CPzCyc1), A0                      ; Offset_0x001FDE
                move.w  ($FFFFF632).w, D0
                addq.w  #$06, ($FFFFF632).w
                cmpi.w  #$0036, ($FFFFF632).w
                bcs.s   Offset_0x001CFA
                move.w  #$0000, ($FFFFF632).w
Offset_0x001CFA:
                lea     ($FFFFFB78).w, A1
                move.l  $00(A0, D0), (A1)+
                move.w  $04(A0, D0), (A1)
                lea     (Pal_CPzCyc2), A0                      ; Offset_0x002014
                move.w  ($FFFFF652).w, D0
                addq.w  #$02, ($FFFFF652).w
                cmpi.w  #$002A, ($FFFFF652).w
                bcs.s   Offset_0x001D22
                move.w  #$0000, ($FFFFF652).w                
Offset_0x001D22:
                move.w  $00(A0, D0), ($FFFFFB7E).w
                lea     (Pal_CPzCyc3), A0                      ; Offset_0x00203E
                move.w  ($FFFFF654).w, D0
                addq.w  #$02, ($FFFFF654).w
                andi.w  #$001E, ($FFFFF654).w
                move.w  $00(A0, D0), ($FFFFFB5E).w
Offset_0x001D42:
                rts
;------------------------------------------------------------------------------- 
PalCycle_ARz: ; Offset_0x001D44:
                lea     (Pal_ARzCyc), A0                       ; Offset_0x001E36
                subq.w  #$01, ($FFFFF634).w
                bpl.s   Offset_0x001D70
                move.w  #$0005, ($FFFFF634).w
                move.w  ($FFFFF632).w, D0
                addq.w  #$01, ($FFFFF632).w
                andi.w  #$0003, D0
                lsl.w   #$03, D0
                lea     ($FFFFFB44).w, A1
                move.l  $00(A0, D0), (A1)+
                move.l  $04(A0, D0), (A1)
Offset_0x001D70:
                rts
;------------------------------------------------------------------------------- 
PalCycle_WFz: 
PalCycle_SCz: ; Offset_0x001D72:
                subq.w  #$01, ($FFFFF634).w
                bpl.s   Offset_0x001DB8
                move.w  #$0001, ($FFFFF634).w
                lea     (Pal_WFzCyc1), A0                      ; Offset_0x00205E
                tst.b   ($FFFFF72E).w                                                                 
                beq.s   Offset_0x001D96                                                    
                move.w  #$0005, ($FFFFF634).w
                lea     (Pal_WFzCyc2), A0                      ; Offset_0x00207E   
Offset_0x001D96:
                move.w  ($FFFFF632).w, D0
                addq.w  #$08, ($FFFFF632).w
                cmpi.w  #$0020, ($FFFFF632).w
                bcs.s   Offset_0x001DAC
                move.w  #$0000, ($FFFFF632).w
Offset_0x001DAC:
                lea     ($FFFFFB4E).w, A1
                move.l  $00(A0, D0), (A1)+
                move.l  $04(A0, D0), (A1)
Offset_0x001DB8:
                subq.w  #$01, ($FFFFF666).w
                bpl.s   Offset_0x001DE6
                move.w  #$0003, ($FFFFF666).w
                lea     (Pal_WFzCyc3), A0                      ; Offset_0x00209E
                move.w  ($FFFFF652).w, D0
                addq.w  #$02, ($FFFFF652).w
                cmpi.w  #$0044, ($FFFFF652).w
                bcs.s   Offset_0x001DE0
                move.w  #$0000, ($FFFFF652).w
Offset_0x001DE0:
                move.w  $00(A0, D0), ($FFFFFB5C).w
Offset_0x001DE6:
                subq.w  #$01, ($FFFFF668).w
                bpl.s   Offset_0x001E14
                move.w  #$0005, ($FFFFF668).w
                lea     (Pal_WFzCyc4), A0                      ; Offset_0x0020E2
                move.w  ($FFFFF654).w, D0
                addq.w  #$02, ($FFFFF654).w
                cmpi.w  #$0018, ($FFFFF654).w       
                bcs.s   Offset_0x001E0E
                move.w  #$0000, ($FFFFF654).w
Offset_0x001E0E:
                move.w  $00(A0, D0), ($FFFFFB5E).w
Offset_0x001E14:       
                rts
;-------------------------------------------------------------------------------
; Pal_S1TitleCyc: ; Offset_0x001E16: ; Paleta ciclíca da tela título não usada
                dc.w    $0C42, $0E86, $0ECA, $0EEC, $0EEC, $0C42, $0E86, $0ECA
                dc.w    $0ECA, $0EEC, $0C42, $0E86, $0E86, $0ECA, $0EEC, $0C42                                       
;-------------------------------------------------------------------------------                   
Pal_EHzCyc:  
Pal_ARzCyc: ; Offset_0x001E36:
                dc.w    $0A86, $0E86, $0EA8, $0ECA, $0ECA, $0A86, $0E86, $0EA8
                dc.w    $0EA8, $0ECA, $0A86, $0E86, $0E86, $0EA8, $0ECA, $0A86
;------------------------------------------------------------------------------- 
Pal_HTzCyc: ; Offset_0x001E56:
                dc.w    $000E, $006E, $00AE, $00EE, $00EE, $000E, $006E, $00AE
                dc.w    $02CE, $00EE, $000E, $006E, $006E, $04EE, $08EE, $002E
                dc.w    $004E, $008E, $06EE, $0AEE, $08EE, $002E, $006E, $04EE
                dc.w    $02CE, $00EE, $000E, $006E, $006E, $02CE, $00EE, $000E
                dc.w    $000E, $006E, $00AE, $00EE, $00CE, $000C, $004E, $008E
                dc.w    $006E, $00AC, $000A, $002E, $000C, $004C, $008E, $0008
                dc.w    $000A, $002E, $006E, $00AC, $00CE, $000C, $004E, $008E
                dc.w    $00AE, $00EE, $000E, $006E, $006E, $00AE, $00EE, $000E
;-------------------------------------------------------------------------------                
Pal_WzCyc: ; Offset_0x001ED6:  
                dc.w    $0248, $046A, $048C, $06CE, $0248, $046A, $048C, $06CE 
;-------------------------------------------------------------------------------  
Pal_MzCyc1: ; Offset_0x001EE6:    
                dc.w    $0006, $0008, $000A, $000C, $000A, $0008 
Pal_MzCyc2: ; Offset_0x001EF2:
                dc.w    $0422, $0866, $0ECC, $0422, $0866, $0ECC 
Pal_MzCyc3: ; Offset_0x001EFE:
                dc.w    $00A0, $0000, $00EE, $0000, $002E, $0000, $0E2E, $0000
                dc.w    $0E80, $0000 
;------------------------------------------------------------------------------- 
Pal_HPzCyc: ; Offset_0x001F12:
                dc.w    $0E44, $0E82, $0EA8, $0EEE, $0E44, $0E82, $0EA8, $0EEE
Pal_HPzCyc_Underwater: ; Offset_0x001F22:   
                dc.w    $0E84, $0EA6, $0EC6, $0EE6, $0E84, $0EA6, $0EC6, $0EE6               
;------------------------------------------------------------------------------- 
Pal_OOzCyc: ; Offset_0x001F32:
                dc.w    $0400, $0602, $0804, $0806, $0400, $0602, $0804, $0806
;-------------------------------------------------------------------------------  
Pal_MCzCyc: ; Offset_0x001F42:  
                dc.w    $000C, $006E, $00CE, $08EE    
;-------------------------------------------------------------------------------  
Pal_CNzCyc1: ; Offset_0x001F4A:
                dc.w    $000E, $00EE, $006E, $006E, $000E, $00EE, $00EE, $006E
                dc.w    $000E, $00EC, $0080, $00C4, $00C4, $00EC, $0080, $0080
                dc.w    $00C4, $00EC    
Pal_CNzCyc2: ; Offset_0x001F6E: 
                dc.w    $0C06, $0C0A, $0C2E, $0C0A, $0C2E, $0C06, $0C2E, $0C06
                dc.w    $0C0A  
Pal_CNzCyc3: ; Offset_0x001F80:
                dc.w    $008E, $00AE, $00EC, $0EEE, $00EA, $00E4, $06C0, $0CC4
                dc.w    $0E80, $0E40, $0E04, $0C08, $0C2E, $080E, $040E, $000E
                dc.w    $004E, $006E, $008E, $00AE  
Pal_CNzCyc4: ; Offset_0x001FA8:  
                dc.w    $006E, $00AE, $00EE, $00AE, $00EE, $006E, $00EE, $006E
                dc.w    $00AE 
Pal_CNzCyc5: ; Offset_0x001FBA:
                dc.w    $0A0E, $0C0C, $0EA0, $00AE, $00EA, $0AE0, $00EA, $00AE
                dc.w    $0EA0, $0C0C
Pal_CNzCyc6: ; Offset_0x001FCE:     
                dc.w    $000E, $000C, $000A, $0008, $0006, $0008, $000A, $000C
;-------------------------------------------------------------------------------  
Pal_CPzCyc1: ; Offset_0x001FDE: 
                dc.w    $0E40, $0C00, $0C00, $0E60, $0C20, $0C00, $0E40, $0E40
                dc.w    $0C00, $0C20, $0E60, $0C20, $0C00, $0E40, $0C40, $0C00
                dc.w    $0C20, $0E40, $0C00, $0C00, $0E60, $0C20, $0C00, $0E40
                dc.w    $0E20, $0C00, $0C20   
Pal_CPzCyc2: ; Offset_0x002014:
                dc.w    $00E0, $00C2, $00A4, $0086, $0068, $004A, $002C, $000E
                dc.w    $020C, $040A, $0608, $0806, $0A04, $0C02, $0E00, $0C20
                dc.w    $0A40, $0860, $0680, $04A0, $02C0
Pal_CPzCyc3: ; Offset_0x00203E:  
                dc.w    $000E, $000C, $000A, $0008, $0006, $0004, $0002, $0004
                dc.w    $0006, $0008, $000A, $000C, $000E, $002E, $004E, $002E
;------------------------------------------------------------------------------- 
Pal_WFzCyc1: ; Offset_0x00205E:
                dc.w    $04EE, $02AE, $006E, $002C, $0EEE, $04EE, $02AE, $006E
                dc.w    $04EE, $02AE, $006E, $002C, $02AE, $006E, $002C, $0028
Pal_WFzCyc2: ; Offset_0x00207E:   
                dc.w    $0000, $0444, $0444, $0444, $0444, $0000, $0444, $0444
                dc.w    $0444, $0444, $0000, $0444, $0444, $0444, $0444, $0000  
Pal_WFzCyc3: ; Offset_0x00209E: 
                dc.w    $00E0, $00A0, $0060, $0020, $0000, $0200, $0600, $0A20
                dc.w    $0E60, $0A20, $0600, $0200, $0000, $0002, $0006, $000A
                dc.w    $000E, $004E, $000E, $000A, $0006, $0002, $0000, $0022
                dc.w    $0066, $00AA, $00EE, $00AA, $0066, $0022, $0000, $0020
                dc.w    $0060, $00A0     
Pal_WFzCyc4: ; Offset_0x0020E2:
                dc.w    $0EC0, $0000, $0E0E, $0000, $00EE, $0000, $00E0, $0000
                dc.w    $008E, $0000, $0EEE, $0000
;-------------------------------------------------------------------------------                
PalCycle_SuperSonic: ; Offset_0x0020FA:
                move.b  ($FFFFF65F).w, D0
                beq.s   Offset_0x002142
                bmi     Offset_0x0021A2
                subq.b  #$01, D0
                bne.s   Offset_0x002144
                subq.b  #$01, ($FFFFF65E).w
                bpl.s   Offset_0x002142
                move.b  #$03, ($FFFFF65E).w
                lea     (Pal_SuperSonic_Cyc), A0               ; Offset_0x002202
                move.w  ($FFFFF65C).w, D0
                addq.w  #$08, ($FFFFF65C).w
                cmpi.w  #$0030, ($FFFFF65C).w
                bcs.s   Offset_0x002136
                move.b  #$FF, ($FFFFF65F).w
                move.b  #$00, ($FFFFB02A).w
Offset_0x002136:
                lea     ($FFFFFB04).w, A1
                move.l  $00(A0, D0), (A1)+
                move.l  $04(A0, D0), (A1)
Offset_0x002142:
                rts
Offset_0x002144:
                subq.b  #$01, ($FFFFF65E).w
                bpl.s   Offset_0x002142
                move.b  #$03, ($FFFFF65E).w
                lea     (Pal_SuperSonic_Cyc), A0               ; Offset_0x002202
                move.w  ($FFFFF65C).w, D0
                subq.w  #$08, ($FFFFF65C).w
                bcc.s   Offset_0x00216C
                move.b  #$00, ($FFFFF65C).w
                move.b  #$00, ($FFFFF65F).w         
Offset_0x00216C:
                lea     ($FFFFFB04).w, A1
                move.l  $00(A0, D0), (A1)+
                move.l  $04(A0, D0), (A1)
                lea     (Pal_SuperSonic_CPz_Uw_Cyc), A0        ; Offset_0x002282
                cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
                beq.s   Offset_0x002194
                cmpi.b  #$0F, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x002142
                lea     (Pal_SuperSonic_ARz_Uw_Cyc), A0        ; Offset_0x002302
Offset_0x002194:
                lea     ($FFFFF084).w, A1
                move.l  $00(A0, D0), (A1)+
                move.l  $04(A0, D0), (A1)
                rts
Offset_0x0021A2:
                subq.b  #$01, ($FFFFF65E).w
                bpl.s   Offset_0x002142
                move.b  #$07, ($FFFFF65E).w
                lea     (Pal_SuperSonic_Cyc), A0               ; Offset_0x002202
                move.w  ($FFFFF65C).w, D0
                addq.w  #$08, ($FFFFF65C).w
                cmpi.w  #$0078, ($FFFFF65C).w
                bcs.s   Offset_0x0021CA
                move.w  #$0030, ($FFFFF65C).w
Offset_0x0021CA:
                lea     ($FFFFFB04).w, A1
                move.l  $00(A0, D0), (A1)+
                move.l  $04(A0, D0), (A1)     
                lea     (Pal_SuperSonic_CPz_Uw_Cyc), A0        ; Offset_0x002282
                cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
                beq.s   Offset_0x0021F4
                cmpi.b  #$0F, (Level_Id).w                           ; $FFFFFE10
                bne     Offset_0x002142
                lea     (Pal_SuperSonic_ARz_Uw_Cyc), A0        ; Offset_0x002302
Offset_0x0021F4:
                lea     ($FFFFF084).w, A1
                move.l  $00(A0, D0), (A1)+
                move.l  $04(A0, D0), (A1)
                rts    
;-------------------------------------------------------------------------------                
Pal_SuperSonic_Cyc: ; Offset_0x002202:  
                dc.w    $0A22, $0C42, $0E44, $0E66, $0844, $0A64, $0E66, $0E88
                dc.w    $0666, $0A86, $0E88, $0EAA, $0488, $0AA8, $0EAA, $0ECC
                dc.w    $04AA, $0ACA, $0ECC, $0EEE, $04CC, $0AEC, $0EEE, $0EEE
                dc.w    $04EE, $0AEE, $0EEE, $0EEE, $06EE, $0EEE, $0EEE, $0EEE
                dc.w    $08EE, $0EEE, $0EEE, $0EEE, $06EE, $0CEE, $0EEE, $0EEE
                dc.w    $04EE, $0AEE, $0EEE, $0EEE, $02EE, $08EE, $0CEE, $0EEE
                dc.w    $00EE, $06EE, $0AEE, $0EEE, $00EE, $04EE, $08EE, $0CEE
                dc.w    $00EE, $06EE, $0AEE, $0EEE, $00EE, $08EE, $0CEE, $0EEE     
Pal_SuperSonic_CPz_Uw_Cyc: ; Offset_0x002282:  
                dc.w    $0E08, $0E28, $0E2A, $0E4C, $0C2A, $0E4A, $0E4C, $0E6E
                dc.w    $0A4C, $0E6C, $0E6E, $0E8E, $0A6E, $0E8E, $0E8E, $0E8E
                dc.w    $0A6E, $0E8E, $0E8E, $0E8E, $0A6E, $0E8E, $0E8E, $0E8E
                dc.w    $0A6E, $0E8E, $0E8E, $0E8E, $0A6E, $0E8E, $0E8E, $0E8E
                dc.w    $0C8E, $0EAE, $0EAE, $0EAE, $0C8E, $0EAE, $0EAE, $0EAE
                dc.w    $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE
                dc.w    $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE
                dc.w    $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE
Pal_SuperSonic_ARz_Uw_Cyc: ; Offset_0x002302:  
                dc.w    $0A24, $0C44, $0E46, $0E68, $0C46, $0E66, $0E68, $0E8A
                dc.w    $0E68, $0E88, $0E8A, $0EAC, $0E68, $0E88, $0E8A, $0EAC
                dc.w    $0E88, $0EAA, $0EAC, $0ECC, $0E88, $0EAA, $0EAC, $0ECC
                dc.w    $0EA8, $0ECC, $0ECC, $0ECC, $0EA8, $0ECC, $0ECC, $0ECC
                dc.w    $0EA8, $0ECC, $0ECC, $0ECC, $0ECA, $0ECC, $0ECC, $0ECC
                dc.w    $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC
                dc.w    $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC
                dc.w    $0ECA, $0ECC, $0ECC, $0ECC, $0EA8, $0ECC, $0ECC, $0ECC                     
;===============================================================================
; Sub Rotina para execução das paletas animadas. Ex: luzes piscando, fogo, 
; [ Término ]     etc...
;===============================================================================  

;===============================================================================
; Sub Rotina Pal_FadeTo
; [ Início ]
;===============================================================================   
Pal_FadeTo: ; Offset_0x002382:
                move.w  #$003F, ($FFFFF626).w
                moveq   #$00, D0
                lea     ($FFFFFB00).w, A0
                move.b  ($FFFFF626).w, D0
                adda.w  D0, A0
                moveq   #$00, D1
                move.b  ($FFFFF627).w, D0
Offset_0x00239A:
                move.w  D1, (A0)+
                dbra    D0, Offset_0x00239A
                move.w  #$0015, D4
Pal_FadeTo_Loop: ; Offset_0x0023A4:
                move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                bsr.s   Pal_FadeIn                             ; Offset_0x0023BA
                bsr     RunPLC                                 ; Offset_0x001646
                dbra    D4, Pal_FadeTo_Loop                    ; Offset_0x0023A4
                rts      
;===============================================================================
; Sub Rotina Pal_FadeTo
; [ Término ]
;===============================================================================

;===============================================================================
; Sub Rotina Pal_FadeIn
; [ Início ]
;===============================================================================   
Pal_FadeIn: ; Offset_0x0023BA:
                moveq   #$00, D0
                lea     ($FFFFFB00).w, A0
                lea     ($FFFFFB80).w, A1
                move.b  ($FFFFF626).w, D0
                adda.w  D0, A0
                adda.w  D0, A1
                move.b  ($FFFFF627).w, D0
Offset_0x0023D0:
                bsr.s   Pal_AddColor                           ; Offset_0x0023FA
                dbra    D0, Offset_0x0023D0
                tst.b   ($FFFFF730).w
                beq.s   Offset_0x0023F8
                moveq   #$00, D0
                lea     ($FFFFF080).w, A0
                lea     ($FFFFF000).w, A1
                move.b  ($FFFFF626).w, D0
                adda.w  D0, A0
                adda.w  D0, A1
                move.b  ($FFFFF627).w, D0
Offset_0x0023F2:
                bsr.s   Pal_AddColor                           ; Offset_0x0023FA
                dbra    D0, Offset_0x0023F2
Offset_0x0023F8:
                rts
;===============================================================================
; Sub Rotina Pal_FadeIn
; [ Término ]
;===============================================================================

;===============================================================================
; Sub Rotina Pal_AddColor
; [ Início ]
;===============================================================================
Pal_AddColor: ; Offset_0x0023FA:
                move.w  (A1)+, D2
                move.w  (A0), D3
                cmp.w   D2, D3
                beq.s   Pal_NoAdd                              ; Offset_0x002422
Pal_AddBlue: ; Offset_0x002402:
                move.w  D3, D1
                addi.w  #$0200, D1
                cmp.w   D2, D1
                bhi.s   Pal_AddGreen                           ; Offset_0x002410
                move.w  D1, (A0)+
                rts
Pal_AddGreen: ; Offset_0x002410:
                move.w  D3, D1
                addi.w  #$0020, D1
                cmp.w   D2, D1
                bhi.s   Pal_AddRed                             ; Offset_0x00241E
                move.w  D1, (A0)+
                rts
Pal_AddRed: ; Offset_0x00241E:
                addq.w  #$02, (A0)+
                rts
Pal_NoAdd: ; Offset_0x002422:
                addq.w  #$02, A0
                rts
;===============================================================================
; Sub Rotina Pal_AddColor
; [ Término ]
;===============================================================================  

;===============================================================================
; Sub Rotina Pal_FadeFrom
; [ Início ]
;===============================================================================   
Pal_FadeFrom: ; Offset_0x002426:
                move.w  #$003F, ($FFFFF626).w
                move.w  #$0015, D4
Pal_FadeFrom_Loop: ; Offset_0x002430:
                move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                bsr.s   Pal_FadeOut                            ; Offset_0x002446
                bsr     RunPLC                                 ; Offset_0x001646
                dbra    D4, Pal_FadeFrom_Loop                  ; Offset_0x002430
                rts
;===============================================================================
; Sub Rotina Pal_FadeFrom
; [ Término ]
;=============================================================================== 
 
;===============================================================================
; Sub Rotina Pal_FadeOut
; [ Início ]
;===============================================================================  
Pal_FadeOut: ; Offset_0x002446:
                moveq   #$00, D0
                lea     ($FFFFFB00).w, A0
                move.b  ($FFFFF626).w, D0
                adda.w  D0, A0
                move.b  ($FFFFF627).w, D0
Offset_0x002456:
                bsr.s   Pal_DecColor                           ; Offset_0x002474
                dbra    D0, Offset_0x002456
                moveq   #$00, D0
                lea     ($FFFFF080).w, A0
                move.b  ($FFFFF626).w, D0
                adda.w  D0, A0
                move.b  ($FFFFF627).w, D0
Offset_0x00246C:
                bsr.s   Pal_DecColor                           ; Offset_0x002474
                dbra    D0, Offset_0x00246C
                rts
;===============================================================================
; Sub Rotina Pal_FadeOut
; [ Término ]
;=============================================================================== 

;===============================================================================
; Sub Rotina Pal_DecColor
; [ Início ]
;===============================================================================
Pal_DecColor: ; Offset_0x002474:
                move.w  (A0), D2
                beq.s   Pal_NoDec                              ; Offset_0x0024A0
Pal_DecRed: ; Offset_0x002478:
                move.w  D2, D1
                andi.w  #$000E, D1
                beq.s   Pal_DecGreen                           ; Offset_0x002484
                subq.w  #$02, (A0)+
                rts
Pal_DecGreen: ; Offset_0x002484:
                move.w  D2, D1
                andi.w  #$00E0, D1
                beq.s   Pal_DecBlue                            ; Offset_0x002492
                subi.w  #$0020, (A0)+
                rts
Pal_DecBlue: ; Offset_0x002492:
                move.w  D2, D1
                andi.w  #$0E00, D1
                beq.s   Pal_NoDec                              ; Offset_0x0024A0
                subi.w  #$0200, (A0)+
                rts
Pal_NoDec: ; Offset_0x0024A0:
                addq.w  #$02, A0
                rts 
;===============================================================================
; Sub Rotina Pal_DecColor
; [ Término ]
;===============================================================================

;===============================================================================                
; Sub Rotina Pal_MakeWhite
; [ Início ]
;===============================================================================
Pal_MakeWhite: ; Offset_0x0024A4: ; Usado pelo Special Stage
                move.w  #$003F, ($FFFFF626).w
                moveq   #$00, D0
                lea     ($FFFFFB00).w, A0
                move.b  ($FFFFF626).w, D0
                adda.w  D0, A0
                move.w  #$0EEE, D1
                move.b  ($FFFFF627).w, D0
Offset_0x0024BE:
                move.w  D1, (A0)+
                dbra    D0, Offset_0x0024BE
                move.w  #$0015, D4
Offset_0x0024C8:
                move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                bsr.s   Pal_WhiteToBlack                       ; Offset_0x0024DE
                bsr     RunPLC                                 ; Offset_0x001646
                dbra    D4, Offset_0x0024C8
                rts
;===============================================================================                
; Sub Rotina Pal_MakeWhite
; [ Término ]
;===============================================================================                

;===============================================================================                
; Sub Rotina Pal_WhiteToBlack
; [ Início ]
;===============================================================================                
Pal_WhiteToBlack: ; Offset_0x0024DE:
                moveq   #$00, D0
                lea     ($FFFFFB00).w, A0
                lea     ($FFFFFB80).w, A1
                move.b  ($FFFFF626).w, D0
                adda.w  D0, A0
                adda.w  D0, A1
                move.b  ($FFFFF627).w, D0
Offset_0x0024F4:
                bsr.s   Pal_DecColor_2                         ; Offset_0x00251E
                dbra    D0, Offset_0x0024F4
                tst.b   ($FFFFF730).w
                beq.s   Offset_0x00251C
                moveq   #$00, D0
                lea     ($FFFFF080).w, A0
                lea     ($FFFFF000).w, A1
                move.b  ($FFFFF626).w, D0
                adda.w  D0, A0
                adda.w  D0, A1
                move.b  ($FFFFF627).w, D0
Offset_0x002516:
                bsr.s   Pal_DecColor_2                         ; Offset_0x00251E
                dbra    D0, Offset_0x002516
Offset_0x00251C:
                rts
;===============================================================================                
; Sub Rotina Pal_WhiteToBlack
; [ Término ]
;===============================================================================  
                
;===============================================================================                
; Sub Rotina Pal_DecColor_2
; [ Início ]
;===============================================================================
Pal_DecColor_2: ; Offset_0x00251E:
                move.w  (A1)+, D2
                move.w  (A0), D3
                cmp.w   D2, D3
                beq.s   Pal_NoDec_2                            ; Offset_0x00254A
Pal_DecBlue_2: ; Offset_0x002526:            
                move.w  D3, D1
                subi.w  #$0200, D1
                bcs.s   Pal_DecGreen_2                         ; Offset_0x002536
                cmp.w   D2, D1
                bcs.s   Pal_DecGreen_2                         ; Offset_0x002536
                move.w  D1, (A0)+
                rts
Pal_DecGreen_2: ; Offset_0x002536:
                move.w  D3, D1
                subi.w  #$0020, D1
                bcs.s   Pal_DecRed_2                           ; Offset_0x002546
                cmp.w   D2, D1
                bcs.s   Pal_DecRed_2                           ; Offset_0x002546
                move.w  D1, (A0)+
                rts
Pal_DecRed_2: ; Offset_0x002546:
                subq.w  #$02, (A0)+
                rts
Pal_NoDec_2: ; Offset_0x00254A:
                addq.w  #$02, A0
                rts
;===============================================================================                
; Sub Rotina Pal_DecColor_2
; [ Término ]
;===============================================================================
                   
;===============================================================================
; Sub Rotina Pal_MakeFlash
; [ Início ]
;===============================================================================
Pal_MakeFlash: ; Offset_0x00254E: ; Usado pelo Special Stage
                move.w  #$003F, ($FFFFF626).w
                move.w  #$0015, D4
Offset_0x002558:
                move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                bsr.s   Pal_ToWhite                            ; Offset_0x00256E
                bsr     RunPLC                                 ; Offset_0x001646
                dbra    D4, Offset_0x002558
                rts
Pal_ToWhite: ; Offset_0x00256E:
                moveq   #$00, D0
                lea     ($FFFFFB00).w, A0
                move.b  ($FFFFF626).w, D0
                adda.w  D0, A0
                move.b  ($FFFFF627).w, D0
Offset_0x00257E:
                bsr.s   Pal_AddColor_2                         ; Offset_0x00259C
                dbra    D0, Offset_0x00257E
                moveq   #$00, D0
                lea     ($FFFFF080).w, A0
                move.b  ($FFFFF626).w, D0
                adda.w  D0, A0
                move.b  ($FFFFF627).w, D0
Offset_0x002594:
                bsr.s   Pal_AddColor_2                         ; Offset_0x00259C
                dbra    D0, Offset_0x002594
                rts  
;===============================================================================
; Sub Rotina Pal_MakeFlash
; [ Término ]
;===============================================================================
                
;===============================================================================
; Sub Rotina Pal_AddColor_2
; [ Início ]
;===============================================================================
Pal_AddColor_2: ; Offset_0x00259C: ; Usado pelo objeto 0xC7 - Chefe final na Death Egg (Robo gigante)
                move.w  (A0), D2
                cmpi.w  #$0EEE, D2
                beq.s   Pal_NoAdd_2                            ; Offset_0x0025D8
Pal_AddRed_2: ; Offset_0x0025A4:           
                move.w  D2, D1
                andi.w  #$000E, D1
                cmpi.w  #$000E, D1
                beq.s   Pal_AddGreen_2                         ; Offset_0x0025B4
                addq.w  #$02, (A0)+
                rts
Pal_AddGreen_2: ; Offset_0x0025B4:
                move.w  D2, D1
                andi.w  #$00E0, D1
                cmpi.w  #$00E0, D1
                beq.s   Pal_AddBlue_2                          ; Offset_0x0025C6
                addi.w  #$0020, (A0)+
                rts
Pal_AddBlue_2: ; Offset_0x0025C6:
                move.w  D2, D1
                andi.w  #$0E00, D1
                cmpi.w  #$0E00, D1
                beq.s   Pal_NoAdd_2                            ; Offset_0x0025D8
                addi.w  #$0200, (A0)+
                rts
Pal_NoAdd_2: ; Offset_0x0025D8:
                addq.w  #$02, A0
                rts
;===============================================================================
; Sub Rotina Pal_AddColor_2
; [ Término ]
;===============================================================================                  
                
;===============================================================================
; Rotina não usada 
; [ Início ]            
;=============================================================================== 
; Offset_0x0025DC:
                tst.b   ($FFFFF635).w
                bne.s   Offset_0x00263C
                lea     ($FFFFFB20).w, A1
                lea     (Offset_0x002692), A0
                moveq   #$05, D1
                move.w  ($FFFFF632).w, D0
Offset_0x0025F2:
                bpl.s   Offset_0x0025FC
                addq.w  #$02, A0
                subq.w  #$01, D1
                addq.w  #$02, D0
                bra.s   Offset_0x0025F2
Offset_0x0025FC:
                move.w  D0, D2
                andi.w  #$001E, D2
                bne.s   Offset_0x002606
                addq.w  #$02, D0
Offset_0x002606:
                cmpi.w  #$0060, D0
                bcc.s   Offset_0x002610
                move.w  (A0)+, $00(A1, D0)
Offset_0x002610:
                addq.w  #$02, D0
                dbra    D1, Offset_0x0025FC
                move.w  ($FFFFF632).w, D0
                addq.w  #$02, D0
                move.w  D0, D2
                andi.w  #$001E, D2
                bne.s   Offset_0x002626
                addq.w  #$02, D0
Offset_0x002626:
                cmpi.w  #$0064, D0
                blt.s   Offset_0x002634
                move.w  #$0401, ($FFFFF634).w
                moveq   #$FFFFFFF4, D0
Offset_0x002634:
                move.w  D0, ($FFFFF632).w
                moveq   #$01, D0
                rts
Offset_0x00263C:
                subq.b  #$01, ($FFFFF634).w
                bpl.s   Offset_0x00268E
                move.b  #$04, ($FFFFF634).w
                move.w  ($FFFFF632).w, D0
                addi.w  #$000C, D0
                cmpi.w  #$0030, D0
                bcs.s   Offset_0x00265A
                moveq   #$00, D0
                rts
Offset_0x00265A:
                move.w  D0, ($FFFFF632).w
                lea     (Offset_0x00269E), A0
                lea     $00(A0, D0), A0
                lea     ($FFFFFB04).w, A1
                move.l  (A0)+, (A1)+
                move.l  (A0)+, (A1)+
                move.w  (A0)+, (A1)
                lea     ($FFFFFB20).w, A1
                moveq   #$00, D0
                moveq   #$2C, D1
Offset_0x00267A:
                move.w  D0, D2
                andi.w  #$001E, D2
                bne.s   Offset_0x002684
                addq.w  #$02, D0
Offset_0x002684:
                move.w  (A0), $00(A1, D0)
                addq.w  #$02, D0
                dbra    D1, Offset_0x00267A
Offset_0x00268E:
                moveq   #$01, D0
                rts
;-------------------------------------------------------------------------------
Offset_0x002692:                                                
                dc.w    $0EEE, $0EEA, $0EE4, $0EC0, $0EE4, $0EEA
;-------------------------------------------------------------------------------
Offset_0x00269E:
                dc.w    $0EEC, $0EEA, $0EEA, $0EEA, $0EEA, $0EEA, $0EEC, $0EEA
                dc.w    $0EE4, $0EC0, $0EC0, $0EC0, $0EEC, $0EEA, $0EE4, $0EC0
                dc.w    $0EA0, $0E60, $0EEA, $0EE4, $0EC0, $0EA0, $0E80, $0E00                             
;===============================================================================
; Rotina não usada 
; [ Término ]            
;=============================================================================== 

;===============================================================================
; Sub Rotina PalLoad1 - Rotina  para carregar a paleta selecionada em D0 no  
; [ Início ]            buffer de paletas
;=============================================================================== 
PalLoad1: ; Offset_0x0026CE:
                lea     (PalPointers), A1                      ; Offset_0x00273E
                lsl.w   #$03, D0
                adda.w  D0, A1
                move.l  (A1)+, A2               ; Localização da paleta no ROM
                move.w  (A1)+, A3               ; Destino da paleta na RAM
                adda.w  #$0080, A3              ; Adiciona $80 no Destino da RAM
                move.w  (A1)+, D7               ; Quantidade de cores a ser lido
PalLoad1_Loop: ; Offset_0x0026E2:
                move.l  (A2)+, (A3)+
                dbra    D7, PalLoad1_Loop                      ; Offset_0x0026E2
                rts
;===============================================================================
; Sub Rotina PalLoad1 - Rotina para carregar a paleta selecionada em D0 no  
; [ Término ]           buffer de paletas
;===============================================================================  
            
;===============================================================================
; Sub Rotina PalLoad2 - Rotina secundária para carregar a paleta selecionada   
; [ Início ]            em D0 no buffer de paletas
;=============================================================================== 
PalLoad2: ; Offset_0x0026EA:
                lea     (PalPointers), A1                      ; Offset_0x00273E
                lsl.w   #$03, D0
                adda.w  D0, A1
                move.l  (A1)+, A2               ; Localização da paleta no ROM
                move.w  (A1)+, A3               ; Destino da paleta na RAM
                move.w  (A1)+, D7               ; Quantidade de cores a ser lido
PalLoad2_Loop: ; Offset_0x0026FA:
                move.l  (A2)+, (A3)+
                dbra    D7, PalLoad2_Loop                      ; Offset_0x0026FA
                rts             
;===============================================================================
; Sub Rotina PalLoad2 - Rotina secundária para carregar a paleta selecionada   
; [ Término ]           em D0 no buffer de paletas
;=============================================================================== 

;===============================================================================
; Sub Rotina PalLoad3_Water - Rotina para carregar a paleta embaixo da água
; [ Início ]
;=============================================================================== 
PalLoad3_Water: ; Offset_0x002702:
                lea     (PalPointers), A1                      ; Offset_0x00273E
                lsl.w   #$03, D0
                adda.w  D0, A1
                move.l  (A1)+, A2
                move.w  (A1)+, A3
                suba.l  #$00000A80, A3         ; Subtrai $0A80 no Destino da RAM
                move.w  (A1)+, D7
PalLoad3_Loop: ; Offset_0x002718:
                move.l  (A2)+, (A3)+
                dbra    D7, PalLoad3_Loop                      ; Offset_0x002718
                rts
;===============================================================================
; Sub Rotina PalLoad3_Water - Rotina para carregar a paleta embaixo da água
; [ Término ]
;===============================================================================

;===============================================================================
; Sub Rotina PalLoad4_Water - Rotina para carregar a paleta embaixo da água
; [ Início ]
;=============================================================================== 
PalLoad4_Water: ; Offset_0x002720:  
                lea     (PalPointers), A1                      ; Offset_0x00273E
                lsl.w   #$03, D0
                adda.w  D0, A1
                move.l  (A1)+, A2
                move.w  (A1)+, A3
                suba.l  #$00000B00, A3         ; Subtrai $0B00 no Destino da RAM
                move.w  (A1)+, D7
PalLoad4_Loop: ; Offset_0x002736:
                move.l  (A2)+, (A3)+
                dbra    D7, PalLoad4_Loop                      ; Offset_0x002736
                rts
;===============================================================================
; Sub Rotina PalLoad4_Water - Rotina para carregar a paleta embaixo da água
; [ Término ]
;===============================================================================  
PalPointers: ; Offset_0x00273E:             
                dc.l    Pal_Sega_Bg                   ; $00 - Offset_0x00287E -> Sega Logo  
                dc.w    $FB00, $001F
                dc.l    Pal_TitleScreen_Miles         ; $01 - Offset_0x0028FE -> Miles na tela título
                dc.w    $FB20, $0007
                dc.l    Pal_S2B_Level_Select_Menu     ; $02 - Offset_0x00291E -> Menu de seleção de fases do Sonic 2 Beta 
                dc.w    $FB00, $001F
                dc.l    Pal_Intro_Sonic_Miles         ; $03 - Offset_0x00299E -> Introdução do jogo
                dc.w    $FB00, $000F
                dc.l    Pal_Emerald_Hill              ; $04 - Offset_0x0029DE -> Emerald Hill
                dc.w    $FB20, $0017
                dc.l    Pal_Emerald_Hill              ; $05 - Offset_0x0029DE -> Emerald Hill
                dc.w    $FB20, $0017
                dc.l    Pal_Wood                      ; $06 - Offset_0x002A3E -> Wood
                dc.w    $FB20, $0017
                dc.l    Pal_Emerald_Hill              ; $07 - Offset_0x0029DE -> Emerald Hill
                dc.w    $FB20, $0017
                dc.l    Pal_Metropolis                ; $08 - Offset_0x002A9E -> Metropolis
                dc.w    $FB20, $0017
                dc.l    Pal_Metropolis                ; $09 - Offset_0x002A9E -> Metropolis
                dc.w    $FB20, $0017
                dc.l    Pal_Wing_Fortress             ; $0A - Offset_0x002AFE -> Wing Fortress
                dc.w    $FB20, $0017
                dc.l    Pal_Hill_Top                  ; $0B - Offset_0x002B5E -> Hill Top
                dc.w    $FB20, $0017
                dc.l    Pal_Hidden_Palace             ; $0C - Offset_0x002BBE -> Hidden Palace 
                dc.w    $FB20, $0017
                dc.l    Pal_Emerald_Hill              ; $0D - Offset_0x0029DE -> Emerald Hill
                dc.w    $FB20, $0017
                dc.l    Pal_Oil_Ocean                 ; $0E - Offset_0x002C9E -> Oil Ocean 
                dc.w    $FB20, $0017
                dc.l    Pal_Mystic_Cave               ; $0F - Offset_0x002CFE -> Mystic Cave 
                dc.w    $FB20, $0017
                dc.l    Pal_Casino_Night              ; $10 - Offset_0x002D5E -> Casino Night 
                dc.w    $FB20, $0017
                dc.l    Pal_Chemical_Plant            ; $11 - Offset_0x002DBE -> Chemical Plant 
                dc.w    $FB20, $0017
                dc.l    Pal_Death_Egg                 ; $12 - Offset_0x002E9E -> Death Egg 
                dc.w    $FB20, $0017
                dc.l    Pal_Aquatic_Ruin              ; $13 - Offset_0x002EFE -> Aquatic Ruin 
                dc.w    $FB20, $0017
                dc.l    Pal_Sky_Chase                 ; $14 - Offset_0x002FDE -> Sky Chase 
                dc.w    $FB20, $0017
                dc.l    Pal_Hidden_Palace_Water       ; $15 - Offset_0x002C1E -> Hidden Palace embaixo d'água 
                dc.w    $FB00, $001F
                dc.l    Pal_Chemical_Plant_Water      ; $16 - Offset_0x002E1E -> Chemical Plant embaixo d'água 
                dc.w    $FB00, $001F
                dc.l    Pal_Aquatic_Ruin_Water        ; $17 - Offset_0x002F5E -> Aquatic Ruin embaixo d'água 
                dc.w    $FB00, $001F        
                dc.l    Pal_Special_Stage_Main        ; $18 - Offset_0x00311E -> Paleta principal do Special Stage
                dc.w    $FB00, $0017
                dc.l    Pal_MCz_Boss                  ; $19 - Offset_0x00303E -> Paleta usada no chefe da Mystic Cave
                dc.w    $FB20, $0007
                dc.l    Pal_CNz_Boss                  ; $1A - Offset_0x00305E -> Paleta usada no chefe da Casino Night
                dc.w    $FB20, $0007
                dc.l    Pal_Special_Stage_1           ; $1B - Offset_0x00317E -> Paleta usada no Special Stage 1
                dc.w    $FB60, $0007
                dc.l    Pal_Special_Stage_2           ; $1C - Offset_0x00319E -> Paleta usada no Special Stage 2
                dc.w    $FB60, $0007
                dc.l    Pal_Special_Stage_3           ; $1D - Offset_0x0031BE -> Paleta usada no Special Stage 3
                dc.w    $FB60, $0007
                dc.l    Pal_Special_Stage_4           ; $1E - Offset_0x0031DE -> Paleta usada no Special Stage 4
                dc.w    $FB60, $0007
                dc.l    Pal_Special_Stage_5           ; $1F - Offset_0x0031FE -> Paleta usada no Special Stage 5
                dc.w    $FB60, $0007
                dc.l    Pal_Special_Stage_6           ; $20 - Offset_0x00321E -> Paleta usada no Special Stage 6
                dc.w    $FB60, $0007
                dc.l    Pal_Special_Stage_7           ; $21 - Offset_0x00323E -> Paleta usada no Special Stage 7
                dc.w    $FB60, $0007
                dc.l    Pal_SS_Vs_Mode_1              ; $22 - Offset_0x00325E -> Paleta usada no Special Stage 1 no modo 2 jogadores
                dc.w    $FB60, $0007
                dc.l    Pal_SS_Vs_Mode_2              ; $23 - Offset_0x00327E -> Paleta usada no Special Stage 2 no modo 2 jogadores
                dc.w    $FB60, $0007
                dc.l    Pal_SS_Vs_Mode_3              ; $24 - Offset_0x00329E -> Paleta usada no Special Stage 3 no modo 2 jogadores
                dc.w    $FB60, $0007
                dc.l    Pal_OOz_Boss                  ; $25 - Offset_0x00307E -> Paleta usada no chefe da Oil Ocean
                dc.w    $FB20, $0007
                dc.l    Pal_Main_Menu                 ; $26 - Offset_0x00309E -> Paleta usada nos Menus
                dc.w    $FB00, $001F                      
                dc.l    Pal_SS_Results                ; $27 - Offset_0x0032BE -> Paleta usada na tela de resultados do Special Stage
                dc.w    $FB00, $001F
Pal_Sega_Bg: ; Offset_0x00287E:
                incbin  'data\all\sega_bg.pal'
Pal_TitleScreen_Miles: ; Offset_0x0028FE:
                incbin  'data\all\ts_miles.pal'
Pal_S2B_Level_Select_Menu: ; Offset_0x00291E:
                incbin  'data\all\s2b_menu.pal'
Pal_Intro_Sonic_Miles: ; Offset_0x00299E:
                incbin  'data\all\intro.pal'
Pal_Emerald_Hill: ; Offset_0x0029DE:
                incbin  'data\ehz\ehz.pal'
Pal_Wood: ; Offset_0x002A3E:
                incbin  'data\wz\wz.pal'
Pal_Metropolis: ; Offset_0x002A9E:
                incbin  'data\mz\mz.pal' 
Pal_Wing_Fortress: ; Offset_0x002AFE:
                incbin  'data\wfz\wfz.pal'
Pal_Hill_Top: ; Offset_0x002B5E:
                incbin  'data\htz\htz.pal'
Pal_Hidden_Palace: ; Offset_0x002BBE:
                incbin  'data\hpz\hpz.pal'
Pal_Hidden_Palace_Water: ; Offset_0x002C1E:
                incbin  'data\hpz\hpzwater.pal' 
Pal_Oil_Ocean: ; Offset_0x002C9E:
                incbin  'data\ooz\ooz.pal'
Pal_Mystic_Cave: ;  Offset_0x002CFE:
                incbin  'data\mcz\mcz.pal'
Pal_Casino_Night: ; Offset_0x002D5E:
                incbin  'data\cnz\cnz.pal'
Pal_Chemical_Plant: ; Offset_0x002DBE:
                incbin  'data\cpz\cpz.pal' 
Pal_Chemical_Plant_Water: ; Offset_0x002E1E:
                incbin  'data\cpz\cpzwater.pal'
Pal_Death_Egg: ; Offset_0x002E9E:
                incbin  'data\dez\dez.pal'
Pal_Aquatic_Ruin: ; Offset_0x002EFE:
                incbin  'data\arz\arz.pal'
Pal_Aquatic_Ruin_Water: ; Offset_0x002F5E:
                incbin  'data\arz\arzwater.pal'
Pal_Sky_Chase: ; Offset_0x002FDE:
                incbin  'data\scz\scz.pal'
Pal_MCz_Boss: ; Offset_0x00303E:
                incbin  'data\mcz\mcz_boss.pal'
Pal_CNz_Boss: ; Offset_0x00305E:
                incbin  'data\cnz\cnz_boss.pal'
Pal_OOz_Boss: ; Offset_0x00307E:
                incbin  'data\ooz\ooz_boss.pal'
Pal_Main_Menu: ; Offset_0x00309E:              
                incbin  'data\menus\mainmenu.pal'
Pal_Special_Stage_Main: ; Offset_0x00311E:
                incbin  'data\ss\ss_main.pal'  
Pal_Special_Stage_1: ; Offset_0x00317E:
                incbin  'data\ss\ss_1.pal'
Pal_Special_Stage_2: ; Offset_0x00319E:
                incbin  'data\ss\ss_2.pal'
Pal_Special_Stage_3: ; Offset_0x0031BE:
                incbin  'data\ss\ss_3.pal'
Pal_Special_Stage_4: ; Offset_0x0031DE:
                incbin  'data\ss\ss_4.pal'
Pal_Special_Stage_5: ; Offset_0x0031FE:
                incbin  'data\ss\ss_5.pal'
Pal_Special_Stage_6 ; Offset_0x00321E:
                incbin  'data\ss\ss_6.pal'
Pal_Special_Stage_7: ; Offset_0x00323E:
                incbin  'data\ss\ss_7.pal'
Pal_SS_Vs_Mode_1: ; Offset_0x00325E:
                incbin  'data\ss\ss_vs_1.pal' 
Pal_SS_Vs_Mode_2: ; Offset_0x00327E:
                incbin  'data\ss\ss_vs_2.pal' 
Pal_SS_Vs_Mode_3: ; Offset_0x00329E:
                incbin  'data\ss\ss_vs_3.pal' 
Pal_SS_Results: ; Offset_0x0032BE:  
                incbin  'data\ss\ss_res.pal'             
;===============================================================================
; Sub Rotina DelayProgram - Rotina para dar um atraso na execução do programa
; [ Início ]
;===============================================================================                  
DelayProgram: ; Offset_0x00333E:
                move    #$2300, SR
Offset_0x003342:
                tst.b   (VBlank_Index).w                             ; $FFFFF62A
                bne.s   Offset_0x003342
                rts
;===============================================================================
; Sub Rotina DelayProgram - Rotina para dar um atraso na execução do programa
; [ Término ]
;===============================================================================                         

;===============================================================================
; Sub Rotina PseudoRandomNumber - Rotina para gerar número aleatório
; [ Início ]
;===============================================================================     
PseudoRandomNumber: ; Offset_0x00334A:
                move.l  ($FFFFF636).w, D1
                bne.s   Offset_0x003356
                move.l  #$2A6D365A, D1
Offset_0x003356:
                move.l  D1, D0
                asl.l   #$02, D1
                add.l   D0, D1
                asl.l   #$03, D1
                add.l   D0, D1
                move.w  D1, D0
                swap.w  D1
                add.w   D1, D0
                move.w  D0, D1
                swap.w  D1
                move.l  D1, ($FFFFF636).w
                rts
;===============================================================================
; Sub Rotina PseudoRandomNumber - Rotina para gerar número aleatório
; [ Término ]
;===============================================================================                                                    
                           
;===============================================================================
; Sub Rotina para calcular o seno usando tabela de valores pré definidos
; [ Início ]
;===============================================================================                           
CalcSine: ; Offset_0x003370:
                andi.w  #$00FF, D0
                add.w   D0, D0
                addi.w  #$0080, D0
                move.w  Sine_Data(PC, D0), D1                  ; Offset_0x003388
                subi.w  #$0080, D0
                move.w  Sine_Data(PC, D0), D0                  ; Offset_0x003388
                rts   
;-------------------------------------------------------------------------------                
Sine_Data: ; Offset_0x003388:
                dc.w    $0000, $0006, $000C, $0012, $0019, $001F, $0025, $002B
                dc.w    $0031, $0038, $003E, $0044, $004A, $0050, $0056, $005C
                dc.w    $0061, $0067, $006D, $0073, $0078, $007E, $0083, $0088
                dc.w    $008E, $0093, $0098, $009D, $00A2, $00A7, $00AB, $00B0
                dc.w    $00B5, $00B9, $00BD, $00C1, $00C5, $00C9, $00CD, $00D1
                dc.w    $00D4, $00D8, $00DB, $00DE, $00E1, $00E4, $00E7, $00EA
                dc.w    $00EC, $00EE, $00F1, $00F3, $00F4, $00F6, $00F8, $00F9
                dc.w    $00FB, $00FC, $00FD, $00FE, $00FE, $00FF, $00FF, $00FF
                dc.w    $0100, $00FF, $00FF, $00FF, $00FE, $00FE, $00FD, $00FC
                dc.w    $00FB, $00F9, $00F8, $00F6, $00F4, $00F3, $00F1, $00EE
                dc.w    $00EC, $00EA, $00E7, $00E4, $00E1, $00DE, $00DB, $00D8
                dc.w    $00D4, $00D1, $00CD, $00C9, $00C5, $00C1, $00BD, $00B9
                dc.w    $00B5, $00B0, $00AB, $00A7, $00A2, $009D, $0098, $0093
                dc.w    $008E, $0088, $0083, $007E, $0078, $0073, $006D, $0067
                dc.w    $0061, $005C, $0056, $0050, $004A, $0044, $003E, $0038
                dc.w    $0031, $002B, $0025, $001F, $0019, $0012, $000C, $0006
                dc.w    $0000, $FFFA, $FFF4, $FFEE, $FFE7, $FFE1, $FFDB, $FFD5
                dc.w    $FFCF, $FFC8, $FFC2, $FFBC, $FFB6, $FFB0, $FFAA, $FFA4
                dc.w    $FF9F, $FF99, $FF93, $FF8B, $FF88, $FF82, $FF7D, $FF78
                dc.w    $FF72, $FF6D, $FF68, $FF63, $FF5E, $FF59, $FF55, $FF50
                dc.w    $FF4B, $FF47, $FF43, $FF3F, $FF3B, $FF37, $FF33, $FF2F
                dc.w    $FF2C, $FF28, $FF25, $FF22, $FF1F, $FF1C, $FF19, $FF16
                dc.w    $FF14, $FF12, $FF0F, $FF0D, $FF0C, $FF0A, $FF08, $FF07
                dc.w    $FF05, $FF04, $FF03, $FF02, $FF02, $FF01, $FF01, $FF01
                dc.w    $FF00, $FF01, $FF01, $FF01, $FF02, $FF02, $FF03, $FF04
                dc.w    $FF05, $FF07, $FF08, $FF0A, $FF0C, $FF0D, $FF0F, $FF12
                dc.w    $FF14, $FF16, $FF19, $FF1C, $FF1F, $FF22, $FF25, $FF28
                dc.w    $FF2C, $FF2F, $FF33, $FF37, $FF3B, $FF3F, $FF43, $FF47
                dc.w    $FF4B, $FF50, $FF55, $FF59, $FF5E, $FF63, $FF68, $FF6D
                dc.w    $FF72, $FF78, $FF7D, $FF82, $FF88, $FF8B, $FF93, $FF99
                dc.w    $FF9F, $FFA4, $FFAA, $FFB0, $FFB6, $FFBC, $FFC2, $FFC8
                dc.w    $FFCF, $FFD5, $FFDB, $FFE1, $FFE7, $FFEE, $FFF4, $FFFA
                dc.w    $0000, $0006, $000C, $0012, $0019, $001F, $0025, $002B
                dc.w    $0031, $0038, $003E, $0044, $004A, $0050, $0056, $005C
                dc.w    $0061, $0067, $006D, $0073, $0078, $007E, $0083, $0088
                dc.w    $008E, $0093, $0098, $009D, $00A2, $00A7, $00AB, $00B0
                dc.w    $00B5, $00B9, $00BD, $00C1, $00C5, $00C9, $00CD, $00D1
                dc.w    $00D4, $00D8, $00DB, $00DE, $00E1, $00E4, $00E7, $00EA
                dc.w    $00EC, $00EE, $00F1, $00F3, $00F4, $00F6, $00F8, $00F9
                dc.w    $00FB, $00FC, $00FD, $00FE, $00FE, $00FF, $00FF, $00FF  
;===============================================================================
; Sub Rotina para calcular o seno usando tabela de valores pré definidos
; [ Término ]
;===============================================================================                             
      
;===============================================================================
; Sub Rotina para calcular o ângulo usando tabela de valores pré definidos
; [ Início ]
;=============================================================================== 
CalcAngle: ; Offset_0x003608:
                movem.l D3/D4, -(A7)
                moveq   #$00, D3
                moveq   #$00, D4
                move.w  D1, D3
                move.w  D2, D4
                or.w    D3, D4
                beq.s   Offset_0x003664
                move.w  D2, D4
                tst.w   D3
                bpl     Offset_0x003622
                neg.w   D3
Offset_0x003622:
                tst.w   D4
                bpl     Offset_0x00362A
                neg.w   D4
Offset_0x00362A:
                cmp.w   D3, D4
                bcc     Offset_0x00363C
                lsl.l   #$08, D4
                divu.w  D3, D4
                moveq   #$00, D0
                move.b  Angle_Data(PC, D4), D0                 ; Offset_0x00366E
                bra.s   Offset_0x003646
Offset_0x00363C:
                lsl.l   #$08, D3
                divu.w  D4, D3
                moveq   #$40, D0
                sub.b   Angle_Data(PC, D3), D0                 ; Offset_0x00366E
Offset_0x003646:
                tst.w   D1
                bpl     Offset_0x003652
                neg.w   D0
                addi.w  #$0080, D0
Offset_0x003652:
                tst.w   D2
                bpl     Offset_0x00365E
                neg.w   D0
                addi.w  #$0100, D0
Offset_0x00365E:
                movem.l (A7)+, D3/D4
                rts
Offset_0x003664:
                move.w  #$0040, D0
                movem.l (A7)+, D3/D4
                rts            
;-------------------------------------------------------------------------------                                 
Angle_Data: ; Offset_0x00366E:        
                dc.b    $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $02, $02, $02, $02, $02, $02
                dc.b    $03, $03, $03, $03, $03, $03, $03, $04, $04, $04, $04, $04, $04, $05, $05, $05
                dc.b    $05, $05, $05, $06, $06, $06, $06, $06, $06, $06, $07, $07, $07, $07, $07, $07
                dc.b    $08, $08, $08, $08, $08, $08, $08, $09, $09, $09, $09, $09, $09, $0A, $0A, $0A
                dc.b    $0A, $0A, $0A, $0A, $0B, $0B, $0B, $0B, $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0C
                dc.b    $0C, $0C, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0E, $0E, $0E, $0E, $0E, $0E, $0E
                dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $10, $10, $10, $10, $10, $10, $10, $11, $11
                dc.b    $11, $11, $11, $11, $11, $11, $12, $12, $12, $12, $12, $12, $12, $13, $13, $13
                dc.b    $13, $13, $13, $13, $13, $14, $14, $14, $14, $14, $14, $14, $14, $15, $15, $15
                dc.b    $15, $15, $15, $15, $15, $15, $16, $16, $16, $16, $16, $16, $16, $16, $17, $17
                dc.b    $17, $17, $17, $17, $17, $17, $17, $18, $18, $18, $18, $18, $18, $18, $18, $18
                dc.b    $19, $19, $19, $19, $19, $19, $19, $19, $19, $19, $1A, $1A, $1A, $1A, $1A, $1A
                dc.b    $1A, $1A, $1A, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1C, $1C, $1C
                dc.b    $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1D, $1D, $1D, $1D, $1D, $1D, $1D, $1D
                dc.b    $1D, $1D, $1D, $1E, $1E, $1E, $1E, $1E, $1E, $1E, $1E, $1E, $1E, $1E, $1F, $1F
                dc.b    $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $20, $20, $20, $20, $20, $20
                dc.b    $20, $00      
;===============================================================================
; Sub Rotina para calcular o ângulo usando tabela de valores pré definidos
; [ Término ]
;===============================================================================           
                                            
;===============================================================================
; Tela com o Logotipo da SEGA
; [ Início ]
;===============================================================================  
SegaScreen: ; Offset_0x003770:
                move.b  #Stop_Sound, D0         ; $FD
                bsr     Play_Music                             ; Offset_0x00131A
                bsr     ClearPLC                               ; Offset_0x001638
                bsr     Pal_FadeFrom                           ; Offset_0x002426
                lea     ($FFFFF700).w, A1
                moveq   #$00, D0
                move.w  #$003F, D1
Offset_0x00378A:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00378A
                lea     ($FFFFB000).w, A1
                moveq   #$00, D0
                move.w  #$07FF, D1
Offset_0x00379A:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00379A
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8004, (A6)
                move.w  #$8230, (A6)
                move.w  #$8405, (A6)
                move.w  #$8700, (A6)
                move.w  #$8B03, (A6)
                move.w  #$8C81, (A6)
                move.w  #$9003, (A6)
                clr.b   ($FFFFF64E).w
                clr.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                move    #$2700, SR
                move.w  ($FFFFF60C).w, D0
                andi.b  #$BF, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     ClearScreen                            ; Offset_0x0011C4
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$941F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000083, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x003802:
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   Offset_0x003802
                move.w  #$8F02, (A5)
                move.l  #$40200000, (VDP_Control_Port)               ; $00C00004
                lea     (Sega_Spr), A0                         ; Offset_0x074876
                bsr     NemesisDec                             ; Offset_0x00149A
                move.l  #$50000000, (VDP_Control_Port)               ; $00C00004
                lea     (Sega_Blocks_Spr), A0                  ; Offset_0x074CF6
                bsr     NemesisDec                             ; Offset_0x00149A
                move.l  #$51000000, (VDP_Control_Port)               ; $00C00004
                lea     (Metal_Sonic), A0                      ; Offset_0x08BE12
                bsr     NemesisDec                             ; Offset_0x00149A
                lea     ($FFFF0000), A1
                lea     (Sega_Mappings), A0                    ; Offset_0x074D0E
                move.w  #$0000, D0
                bsr     EnigmaDec                              ; Offset_0x00177A
                lea     ($FFFF0000), A1
                move.l  #$60000002, D0
                moveq   #$27, D1
                moveq   #$1B, D2
                bsr     Offset_0x003928
                tst.b   (Hardware_Id).w                              ; $FFFFFFD8
                bmi.s   Offset_0x003886
                lea     ($FFFFB080).w, A1
                move.b  #$B1, (A1)
                move.b  #$4E, $0028(A1)
Offset_0x003886:
                moveq   #$00, D0
                bsr     PalLoad2                               ; Offset_0x0026EA
                move.w  #$FFF6, ($FFFFF632).w
                move.w  #$0000, ($FFFFF634).w
                move.w  #$0000, ($FFFFF662).w
                move.w  #$0000, ($FFFFF660).w
                lea     ($FFFFB040).w, A1
                move.b  #$B0, (A1)
                move.b  #$4C, $0028(A1)
                move.w  #$00F0, ($FFFFF614).w
                move.w  ($FFFFF60C).w, D0
                ori.b   #$40, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
Offset_0x0038C6:
                move.b  #$02, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                jsr     (Load_Objects)                         ; Offset_0x015F22
                jsr     (Build_Sprites)                        ; Offset_0x01658A
                tst.b   ($FFFFF660).w
                beq.s   Offset_0x0038C6
                move.b  #Sega_Sound, D0         ; $FA
                bsr     Play_Sfx                               ; Offset_0x00132C
                move.b  #$02, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                move.w  #$00B4, ($FFFFF614).w
Offset_0x0038FA:
                move.b  #$14, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                tst.w   ($FFFFF614).w
                beq.s   Offset_0x003918
                move.b  ($FFFFF605).w, D0
                or.b    ($FFFFF607).w, D0
                andi.b  #$80, D0
                beq.s   Offset_0x0038FA
Offset_0x003918:
                clr.w   ($FFFFF660).w
                clr.w   ($FFFFF662).w
                move.b  #gm_TitleScreen, (Game_Mode).w          ; $04, $FFFFF600
                rts
Offset_0x003928:
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  #$01000000, D4
Offset_0x003934:
                move.l  D0, $0004(A6)
                move.w  D1, D3
Offset_0x00393A:
                move.w  (A1)+, (A6)
                dbra    D3, Offset_0x00393A
                add.l   D4, D0
                dbra    D2, Offset_0x003934
                rts                               
;===============================================================================
; Tela com o Logotipo da SEGA
; [ Término ]
;===============================================================================  
             
;===============================================================================
; Tela com o título do jogo 
; [ Início ]
;=============================================================================== 
TitleScreen: ; Offset_0x003948:
                move.b  #Stop_Sound, D0         ; $FD
                bsr     Play_Music                             ; Offset_0x00131A
                bsr     ClearPLC                               ; Offset_0x001638
                bsr     Pal_FadeFrom                           ; Offset_0x002426
                move    #$2700, SR
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8004, (A6)
                move.w  #$8230, (A6)
                move.w  #$8407, (A6)
                move.w  #$9001, (A6)
                move.w  #$9200, (A6)
                move.w  #$8B03, (A6)
                move.w  #$8720, (A6)
                clr.b   ($FFFFF64E).w
                move.w  #$8C81, (A6)
                bsr     ClearScreen                            ; Offset_0x0011C4
                lea     ($FFFFAC00).w, A1
                moveq   #$00, D0
                move.w  #$00FF, D1
Offset_0x003994:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x003994
                lea     ($FFFFB000).w, A1
                moveq   #$00, D0
                move.w  #$07FF, D1
Offset_0x0039A4:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x0039A4
                lea     ($FFFFF700).w, A1
                moveq   #$00, D0
                move.w  #$003F, D1
Offset_0x0039B4:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x0039B4
                lea     ($FFFFEE00).w, A1
                moveq   #$00, D0
                move.w  #$003F, D1
Offset_0x0039C4:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x0039C4
                move.l  #$60000002, ($00C00004)
                lea     (Credits_Font), A0                     ; Offset_0x00BD46
                bsr     NemesisDec                             ; Offset_0x00149A
                lea     (Map_Intro_Text), A1                   ; Offset_0x00B2AC
                jsr     (Display_Intro_Text)                   ; Offset_0x00B26E
                lea     ($FFFFFB80).w, A1
                moveq   #$00, D0
                move.w  #$001F, D1
Offset_0x0039F4:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x0039F4
                moveq   #$03, D0
                bsr     PalLoad1                               ; Offset_0x0026CE
                bsr     Pal_FadeTo                             ; Offset_0x002382
                move    #$2700, SR
                move.l  #$40000000, (VDP_Control_Port)               ; $00C00004
                lea     (Title_Screen_Bg_Wings), A0            ; Offset_0x074F6C
                bsr     NemesisDec                             ; Offset_0x00149A
                move.l  #$6A000000, (VDP_Control_Port)               ; $00C00004
                lea     (Title_Screen_Sonic_Miles), A0         ; Offset_0x07667A
                bsr     NemesisDec                             ; Offset_0x00149A
                move.l  #$7E400001, (VDP_Control_Port)               ; $00C00004
                lea     (Title_Screen_Cursor), A0              ; Offset_0x078CBC
                bsr     NemesisDec                             ; Offset_0x00149A
                move.l  #$40400002, (VDP_Control_Port)               ; $00C00004
                lea     (_1p2pVs_Spr), A0                      ; Offset_0x003DAC
                bsr     NemesisDec                             ; Offset_0x00149A
                move.l  #$50000003, (VDP_Control_Port)               ; $00C00004
                lea     (Menu_Font), A0                        ; Offset_0x07C43A
                bsr     NemesisDec                             ; Offset_0x00149A
                move.b  #$00, (Saved_Level_Flag).w                   ; $FFFFFE30
                move.b  #$00, ($FFFFFEE0).w
                move.w  #$0000, ($FFFFFE08).w
                move.w  #$0000, ($FFFFFFD0).w
                move.w  #$0000, ($FFFFFFBA).w
                move.w  #$0000, ($FFFFF634).w
                move.w  #$0000, (Two_Player_Flag).w                  ; $FFFFFFB8
                move.b  #$00, ($FFFFF711).w
                bsr     Pal_FadeFrom                           ; Offset_0x002426
                move    #$2700, SR
                lea     ($FFFF0000), A1
                lea     (Title_Screen_Mappings_1), A0          ; Offset_0x074DC6
                move.w  #$4000, D0
                bsr     EnigmaDec                              ; Offset_0x00177A
                lea     ($FFFF0000), A1
                move.l  #$60000003, D0
                moveq   #$27, D1
                moveq   #$1B, D2
                jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
                lea     ($FFFF0000), A1
                lea     (Title_Screen_Mappings_2), A0          ; Offset_0x074E3A
                move.w  #$4000, D0
                bsr     EnigmaDec                              ; Offset_0x00177A
                lea     ($FFFF0000), A1
                move.l  #$60500003, D0
                moveq   #$17, D1
                moveq   #$1B, D2
                jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
                lea     ($FFFF0000), A1
                lea     (Title_Screen_Mappings_3), A0          ; Offset_0x074E86
                move.w  #$E000, D0
                bsr     EnigmaDec                              ; Offset_0x00177A
                lea     ($FFFF0858), A1    
                lea     (Sega_Copyright), A2                   ; Offset_0x003E3A
                moveq   #$0A, D6
Offset_0x003B1A:
                move.w  (A2)+, (A1)+
                dbra    D6, Offset_0x003B1A
                lea     ($FFFF0000), A1
                move.l  #$40000003, D0
                moveq   #$27, D1
                moveq   #$1B, D2
                jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
                lea     ($FFFFFB00).w, A1
                moveq   #$00, D0
                move.w  #$003F, D1
Offset_0x003B40:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x003B40
                moveq   #$01, D0
                bsr     PalLoad1                               ; Offset_0x0026CE
                move.b  #$00, ($FFFFFFDA).w
                move.w  #$0000, (Two_Player_Flag).w                  ; $FFFFFFB8
                move.w  #$0280, ($FFFFF614).w
                clr.w   ($FFFFF604).w
                move.b  #$0E, ($FFFFB040).w
                move.b  #$02, ($FFFFB068).w
                jsr     (Load_Objects)                         ; Offset_0x015F22
                jsr     (Build_Sprites)                        ; Offset_0x01658A
                moveq   #$00, D0
                bsr     LoadPLC2                               ; Offset_0x00160C
                move.w  #$0000, ($FFFFFFB4).w
                move.w  #$0000, ($FFFFFFB6).w
                nop
                nop
                nop
                nop
                nop
                nop
                move.w  #$0004, ($FFFFEED2).w
                move.w  #$0000, ($FFFFE500).w
                lea     ($FFFFFF20).w, A1
                moveq   #$0B, D0
Offset_0x003BAA:                
                move.w  #$FFFF, (A1)+
                dbra    D0, Offset_0x003BAA
                move.w  #$FD80, ($FFFFEE00).w
                move.w  ($FFFFF60C).w, D0
                ori.b   #$40, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     Pal_FadeTo                             ; Offset_0x002382
TitleScreen_Loop: ; Offset_0x003BCA:                
                move.b  #$04, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                jsr     (Load_Objects)                         ; Offset_0x015F22
                jsr     (Bg_Scroll_Title_Screen)               ; Offset_0x00C4FA
                jsr     (Build_Sprites)                        ; Offset_0x01658A
                lea     ($FFFFF804).w, A1
                moveq   #$00, D0
                moveq   #$4F, D6
Offset_0x003BEE:                
                tst.w   (A1)
                bne.s   Offset_0x003BFA
                bchg    #02, D0
                move.w  D0, $0002(A1)
Offset_0x003BFA:
                addq.w  #$08, A1
                dbra    D6, Offset_0x003BEE    
                bsr     RunPLC                                 ; Offset_0x001646
                bsr     Change_Hardware_Id_Code_Test           ; Offset_0x003D6C
                tst.w   ($FFFFF614).w
                beq     Offset_0x003CE6
                tst.b   ($FFFFB06F).w
                beq     TitleScreen_Loop                       ; Offset_0x003BCA
                move.b  ($FFFFF605).w, D0
                or.b    ($FFFFF607).w, D0
                andi.b  #$80, D0
                beq     TitleScreen_Loop                       ; Offset_0x003BCA
                move.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
                move.b  #$03, ($FFFFFE12).w
                move.b  #$03, ($FFFFFEC6).w
                moveq   #$00, D0
                move.w  D0, ($FFFFFE20).w
                move.l  D0, ($FFFFFE22).w
                move.l  D0, ($FFFFFE26).w
                move.w  D0, ($FFFFFED0).w
                move.l  D0, ($FFFFFED2).w
                move.l  D0, ($FFFFFED6).w
                move.b  D0, ($FFFFFE18).w
                move.l  #$00001388, ($FFFFFFA0).w
                move.l  #$00001388, ($FFFFFFA4).w
                move.b  #Volume_Down, D0        ; $F9
                bsr     Play_Sfx                               ; Offset_0x00132C
                moveq   #$00, D0
                move.b  ($FFFFFF66).w, D0
                bne.s   Offset_0x003CAE
                moveq   #$00, D0
                move.w  D0, ($FFFFFF6A).w
                move.w  D0, (Two_Player_Flag).w                      ; $FFFFFFB8
                move.w  D0, (Level_Id).w                             ; $FFFFFE10
                tst.b   ($FFFFFFB0).w
                beq.s   Offset_0x003C9C
                btst    #$06, ($FFFFF604).w
                beq.s   Offset_0x003C9C
                move.b  #gm_Level_Select_Menu, (Game_Mode).w    ; $28, $FFFFF600
                rts
Offset_0x003C9C:
                move.w  D0, (Stage_Id).w                             ; $FFFFFE16
                move.w  D0, ($FFFFFF90).w
                move.l  D0, ($FFFFFF92).w
                move.l  D0, ($FFFFFF96).w
                rts
Offset_0x003CAE:
                subq.b  #$01, D0
                bne.s   Offset_0x003CD8
                moveq   #$01, D1
                move.w  D1, ($FFFFFF6A).w
                move.w  D1, (Two_Player_Flag).w                      ; $FFFFFFB8
                moveq   #$00, D0
                move.w  D0, ($FFFFFF90).w
                move.l  D0, ($FFFFFF92).w
                move.l  D0, ($FFFFFF96).w
                move.b  #gm_Versus_Mode_Menu, (Game_Mode).w     ; $1C, $FFFFF600
                move.b  #$00, ($FFFFFF68).w
                rts
Offset_0x003CD8:
                move.b  #gm_Options_Menu, (Game_Mode).w         ; $24, $FFFFF600
                move.b  #$00, ($FFFFFF6C).w
                rts
Offset_0x003CE6:
                move.b  #Volume_Down, D0        ; $F9
                bsr     Play_Sfx                               ; Offset_0x00132C
                move.w  ($FFFFFFD2).w, D0
                andi.w  #$0007, D0
                add.w   D0, D0
                move.w  Demo_Mode_Level_Array(PC, D0), D0      ; Offset_0x003D64
                move.w  D0, (Level_Id).w                             ; $FFFFFE10
                addq.w  #$01, ($FFFFFFD2).w
                cmpi.w  #$0004, ($FFFFFFD2).w
                bcs.s   Offset_0x003D12
                move.w  #$0000, ($FFFFFFD2).w
Offset_0x003D12:
                move.w  #$0001, ($FFFFFFD0).w
                move.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
                cmpi.w  #$0000, (Level_Id).w                         ; $FFFFFE10
                bne.s   Offset_0x003D2C
                move.w  #$0001, (Two_Player_Flag).w                  ; $FFFFFFB8
Offset_0x003D2C:
                move.b  #$03, ($FFFFFE12).w
                move.b  #$03, ($FFFFFEC6).w
                moveq   #$00, D0
                move.w  D0, ($FFFFFE20).w
                move.l  D0, ($FFFFFE22).w
                move.l  D0, ($FFFFFE26).w
                move.w  D0, ($FFFFFED0).w
                move.l  D0, ($FFFFFED2).w
                move.l  D0, ($FFFFFED6).w
                move.l  #$00001388, ($FFFFFFA0).w
                move.l  #$00001388, ($FFFFFFA4).w
                rts
;-------------------------------------------------------------------------------                 
Demo_Mode_Level_Array: ; Offset_0x003D64:   
                dc.w    $0000, $0D00, $0F00, $0C00    
;-------------------------------------------------------------------------------      
Change_Hardware_Id_Code_Test: ; Offset_0x003D6C:
                lea     (Change_Hardware_Id_Code), A0          ; Offset_0x003DA6
                move.w  ($FFFFFFB4).w, D0
                adda.w  D0, A0
                move.b  ($FFFFF605).w, D0
                andi.b  #$0F, D0
                beq.s   Offset_0x003DA4
                cmp.b   (A0), D0
                bne.s   Code_NoMatch                           ; Offset_0x003D9E
                addq.w  #$01, ($FFFFFFB4).w
                tst.b   $0001(A0)
                bne.s   Offset_0x003DA4
                bchg    #07, (Hardware_Id).w                         ; $FFFFFFD8
                move.b  #Ring_Sfx, D0           ; $B5
                bsr     Play_Sfx                               ; Offset_0x00132C
Code_NoMatch: ; Offset_0x003D9E:
                move.w  #$0000, ($FFFFFFB4).w
Offset_0x003DA4:
                rts
;-------------------------------------------------------------------------------                
Change_Hardware_Id_Code: ; Offset_0x003DA6:    
                dc.b    $01, $02, $02, $02, $01, $00 
;-------------------------------------------------------------------------------
_1p2pVs_Spr: ; Offset_0x003DAC:
                incbin  'data\sprites\1p2pVs.nem'     
       
Sega_Copyright: ; Offset_0x003E3A
                dc.w    _Cp, ___, __1, __9, __9, __2, ___, __S, __E, __G, __A                               
;===============================================================================
; Tela com o título do jogo 
; [ Término ]
;===============================================================================    

;===============================================================================
; Modo de jogo ou demonstração das fases 
; [ Início ]
;=============================================================================== 
PlayList: ; Offset_0x003E50:
                dc.b    $82, $82, $85, $84, $85, $85, $8F, $86, $90, $8D, $84, $8B, $89, $8E, $8A, $87
                dc.b    $8D, $00
;-------------------------------------------------------------------------------                
PlayList_2P: ; Offset_0x003E62:
                dc.b    $8C, $82, $85, $84, $85, $85, $8F, $86, $90, $8D, $84, $83, $88, $8E, $8A, $87
                dc.b    $8D, $00  
;-------------------------------------------------------------------------------                   
Level: ; Offset_0x003E74: 
                bset    #$07, (Game_Mode).w                          ; $FFFFF600
                tst.w   ($FFFFFFD0).w
                bmi.s   Level_Init                             ; Offset_0x003E88
                move.b  #Volume_Down, D0        ; $F9
                bsr     Play_Sfx                               ; Offset_0x00132C
Level_Init: ; Offset_0x003E88:
                bsr     ClearPLC                               ; Offset_0x001638
                bsr     Pal_FadeFrom                           ; Offset_0x002426
                tst.w   ($FFFFFFD0).w
                bmi.s   Offset_0x003EF8
                move    #$2700, SR
                bsr     ClearScreen                            ; Offset_0x0011C4
                jsr     (Load_Title_Cards_Art)                 ; Offset_0x015774
                move    #$2300, SR
                moveq   #$00, D0
                move.w  D0, ($FFFFFE04).w
                move.b  ($FFFFFE10).w, D0
                add.w   D0, D0
                add.w   D0, D0
                move.w  D0, D1
                add.w   D0, D0
                add.w   D1, D0
                lea     (TilesMainTable), A2                   ; Offset_0x0422DE
                lea     $00(A2, D0), A2
                moveq   #$00, D0
                move.b  (A2), D0
                beq.s   Offset_0x003ED0
                bsr     LoadPLC                                ; Offset_0x0015DA
Offset_0x003ED0:
                moveq   #$01, D0
                bsr     LoadPLC                                ; Offset_0x0015DA
                bsr     Init_Player_Selected                   ; Offset_0x004410
                moveq   #$06, D0
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   Offset_0x003EEC
                cmpi.w  #$0002, (Player_Selected_Flag).w             ; $FFFFFF7A
                bne.s   Offset_0x003EF8
                addq.w  #$01, D0
Offset_0x003EEC:
                tst.b   (Hardware_Id).w                              ; $FFFFFFD8
                bpl.s   Offset_0x003EF4
                addq.w  #$02, D0
Offset_0x003EF4:
                bsr     LoadPLC                                ; Offset_0x0015DA
Offset_0x003EF8:
                lea     ($FFFFAC00).w, A1
                moveq   #$00, D0
                move.w  #$00FF, D1
Offset_0x003F02:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x003F02
                lea     ($FFFFB000).w, A1
                moveq   #$00, D0
                move.w  #$08FF, D1
Offset_0x003F12:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x003F12
                lea     ($FFFFF628).w, A1
                moveq   #$00, D0
                move.w  #$0015, D1
Offset_0x003F22:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x003F22
                lea     ($FFFFF700).w, A1
                moveq   #$00, D0
                move.w  #$003F, D1
Offset_0x003F32:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x003F32
                lea     ($FFFFFE60).w, A1
                moveq   #$00, D0
                move.w  #$0013, D1
Offset_0x003F42:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x003F42
                lea     ($FFFFE700).w, A1
                moveq   #$00, D0
                move.w  #$003F, D1
Offset_0x003F52:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x003F52
                cmpi.w  #$0D01, (Level_Id).w                         ; $FFFFFE10
                beq.s   Init_Water                             ; Offset_0x003F70
                cmpi.b  #$0F, (Level_Id).w                           ; $FFFFFE10
                beq.s   Init_Water                             ; Offset_0x003F70
                cmpi.b  #$08, (Level_Id).w                           ; $FFFFFE10
                bne.s   Init_No_Water                          ; Offset_0x003F7C
Init_Water: ; Offset_0x003F70:
                move.b  #$01, (Water_Level_Flag).w                   ; $FFFFF730
                move.w  #$0000, (Two_Player_Flag).w                  ; $FFFFFFB8
Init_No_Water: ; Offset_0x003F7C:
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8B03, (A6)
                move.w  #$8230, (A6)
                move.w  #$8407, (A6)
                move.w  #$857C, (A6)
                move.w  #$9001, (A6)
                move.w  #$8004, (A6)
                move.w  #$8720, (A6)
                move.w  #$8C81, (A6)
                tst.b   ($FFFFFFB2).w
                beq.s   Offset_0x003FC2
                btst    #$05, ($FFFFF604).w
                beq.s   Offset_0x003FB4
                move.w  #$8C89, (A6)
Offset_0x003FB4:
                btst    #$06, ($FFFFF604).w
                beq.s   Offset_0x003FC2
                move.b  #$01, ($FFFFFFDA).w
Offset_0x003FC2:
                move.w  #$8ADF, ($FFFFF624).w
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x003FDC
                move.w  #$8A6B, ($FFFFF624).w
                move.w  #$8014, (A6)
                move.w  #$8C87, (A6)
Offset_0x003FDC:
                move.w  ($FFFFF624).w, (A6)
                clr.w   ($FFFFDC00).w
                move.l  #$FFFFDC00, ($FFFFDCFC).w
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   LevelInit_NoWater                      ; Offset_0x00402C
                move.w  #$8014, (A6)
                moveq   #$00, D0
                move.w  (Level_Id).w, D0                             ; $FFFFFE10
                subi.w  #$0800, D0
                ror.b   #$01, D0
                lsr.w   #$06, D0
                andi.w  #$FFFE, D0
                lea     (Water_Height_Array), A1               ; Offset_0x004540
                move.w  $00(A1, D0), D0
                move.w  D0, ($FFFFF646).w
                move.w  D0, ($FFFFF648).w
                move.w  D0, ($FFFFF64A).w
                clr.b   ($FFFFF64D).w
                clr.b   ($FFFFF64E).w
                move.b  #$01, ($FFFFF64C).w
LevelInit_NoWater: ; Offset_0x00402C:
                moveq   #$03, D0
                bsr     PalLoad2                               ; Offset_0x0026EA
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   LevelInit_NoUndewaterPalette           ; Offset_0x00405E
                moveq   #$15, D0
                cmpi.b  #$08, (Level_Id).w                           ; $FFFFFE10
                beq.s   LevelInit_UndewaterPalette             ; Offset_0x00404E
                moveq   #$16, D0
                cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
                beq.s   LevelInit_UndewaterPalette             ; Offset_0x00404E
                moveq   #$17, D0
LevelInit_UndewaterPalette: ; Offset_0x00404E:
                bsr     PalLoad3_Water                         ; Offset_0x002702
                tst.b   (Saved_Level_Flag).w                         ; $FFFFFE30
                beq.s   LevelInit_NoUndewaterPalette           ; Offset_0x00405E
                move.b  ($FFFFFE53).w, ($FFFFF64E).w
LevelInit_NoUndewaterPalette: ; Offset_0x00405E:
                tst.w   ($FFFFFFD0).w
                bmi.s   Offset_0x0040C8
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                lea     (PlayList), A1                         ; Offset_0x003E50
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x00407C
                lea     (PlayList_2P), A1                      ; Offset_0x003E62
Offset_0x00407C:
                move.b  $00(A1, D0), D0
                move.w  D0, (Level_Music_Buffer).w                   ; $FFFFFF70
                bsr     Play_Music                             ; Offset_0x00131A
                move.b  #$34, ($FFFFB080).w
LevelInit_TitleCard: ; Offset_0x00408E:
                move.b  #$0C, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                jsr     (Load_Objects)                         ; Offset_0x015F22
                jsr     (Build_Sprites)                        ; Offset_0x01658A
                bsr     RunPLC                                 ; Offset_0x001646
                move.w  ($FFFFB088).w, D0
                cmp.w   ($FFFFB0B0).w, D0
                bne.s   LevelInit_TitleCard                    ; Offset_0x00408E
                tst.l   ($FFFFF680).w
                bne.s   LevelInit_TitleCard                    ; Offset_0x00408E
                move.b  #$0C, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                jsr     (Head_Up_Display_Base)                 ; Offset_0x040DC4
Offset_0x0040C8:
                moveq   #$03, D0
                bsr     PalLoad1                               ; Offset_0x0026CE
                bsr     Level_Size_Load                        ; Offset_0x00BF88
                jsr     (Background_Scroll_Layer)              ; Offset_0x00C3AC
                clr.w   ($FFFFF616).w
                move.w  #$FF20, ($FFFFF61E).w
                lea     ($FFFFE000).w, A1
                moveq   #$00, D0
                move.w  #$00FF, D1
Offset_0x0040EC:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x0040EC
                bsr     Load_8x8_Tiles                         ; Offset_0x004E52
                jsr     (Main_Level_Load_16_128_Blocks)        ; Offset_0x00E386
                jsr     (Load_16x16_Mappings_For_Dyn_Sprites)  ; Offset_0x040020
                jsr     (Load_Tiles_From_Start)                ; Offset_0x00E2C0
                jsr     (FloorLog_Unk)                         ; Offset_0x01EA82
                bsr     Load_Colision_Index                    ; Offset_0x004976
                bsr     Water_Effects                          ; Offset_0x0044CA
                bsr     Load_Player_Selected                   ; Offset_0x00442E
                move.w  #$0000, ($FFFFF602).w
                move.w  #$0000, ($FFFFF66A).w
                move.w  #$0000, ($FFFFF604).w
                move.w  #$0000, ($FFFFF606).w
                move.b  #$01, ($FFFFF7CC).w
                move.b  #$01, ($FFFFF7CF).w
                move.b  #$00, ($FFFFF711).w
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   Offset_0x004162
                move.b  #$04, ($FFFFB380).w
                move.w  #$0060, ($FFFFB388).w
                move.b  #$04, ($FFFFB3C0).w
                move.w  #$0120, ($FFFFB3C8).w
Offset_0x004162:
                cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x004170
                move.b  #$7C, ($FFFFB340).w
Offset_0x004170:
                cmpi.b  #$0A, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x00417E
                move.b  #$07, ($FFFFB380).w
Offset_0x00417E:
                moveq   #$00, D0
                tst.b   (Saved_Level_Flag).w                         ; $FFFFFE30
                bne.s   Offset_0x00419E
                move.w  D0, ($FFFFFE20).w
                move.l  D0, ($FFFFFE22).w
                move.b  D0, ($FFFFFE1B).w
                move.w  D0, ($FFFFFED0).w
                move.l  D0, ($FFFFFED2).w
                move.b  D0, ($FFFFFEC7).w
Offset_0x00419E:
                move.b  D0, ($FFFFFE1A).w
                move.b  D0, ($FFFFFECC).w
                move.b  D0, ($FFFFFF4E).w
                move.w  D0, ($FFFFFF4C).w
                move.w  D0, ($FFFFFE08).w
                move.w  D0, ($FFFFFE02).w
                move.b  D0, ($FFFFF622).w
                move.b  D0, ($FFFFF623).w
                move.w  D0, ($FFFFFEF0).w
                move.w  D0, ($FFFFFEF2).w
                move.w  D0, ($FFFFFEF4).w
                move.w  D0, ($FFFFFEF6).w
                move.w  D0, ($FFFFFEF8).w
                bsr     Oscillate_Num_Init                     ; Offset_0x004A2A
                move.b  #$01, ($FFFFFE1F).w
                move.b  #$01, ($FFFFFE1D).w
                move.b  #$01, ($FFFFFE1E).w
                move.b  #$01, ($FFFFFECA).w
                jsr     (Load_Object_Pos)                      ; Offset_0x017A12
                jsr     (Load_Ring_Pos)                        ; Offset_0x016EFE
                jsr     (Load_Triangle_Pos)                    ; Offset_0x01732C
                jsr     (Load_Objects)                         ; Offset_0x015F22
                jsr     (Build_Sprites)                        ; Offset_0x01658A
                jsr     (Dynamic_Art_Cues)                     ; Offset_0x03FA10
                bsr     Test_End_Level_Art_Load                ; Offset_0x004B8C
                move.w  #$0000, ($FFFFF790).w
                move.w  #$0000, ($FFFFF732).w
                lea     (Demo_Index), A1                       ; Offset_0x004902
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                lsl.w   #$02, D0
                move.l  $00(A1, D0), A1
                tst.w   ($FFFFFFD0).w
                bpl.s   Offset_0x00424C
                lea     (Demo_End_Index), A1                   ; Offset_0x004946
                move.w  ($FFFFFFD4).w, D0
                subq.w  #$01, D0
                lsl.w   #$02, D0
                move.l  $00(A1, D0), A1
Offset_0x00424C:
                move.b  $0001(A1), ($FFFFF792).w
                tst.b   (Level_Id).w                                 ; $FFFFFE10
                bne.s   Offset_0x004264
                lea     (Demo_Emerald_Hill_Miles), A1          ; Offset_0x004CC2
                move.b  $0001(A1), ($FFFFF734).w
Offset_0x004264:
                move.w  #$0668, ($FFFFF614).w
                tst.w   ($FFFFFFD0).w
                bpl.s   Offset_0x004284
                move.w  #$021C, ($FFFFF614).w
                cmpi.w  #$0004, ($FFFFFFD4).w
                bne.s   Offset_0x004284
                move.w  #$01FE, ($FFFFF614).w
Offset_0x004284:
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   Offset_0x0042A4
                moveq   #$15, D0
                cmpi.b  #$08, (Level_Id).w                           ; $FFFFFE10
                beq.s   Offset_0x0042A0
                moveq   #$16, D0
                cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
                beq.s   Offset_0x0042A0
                moveq   #$17, D0
Offset_0x0042A0:
                bsr     PalLoad4_Water                         ; Offset_0x002720
Offset_0x0042A4:
                move.w  #$FFFF, ($FFFFB0BE).w
                move.b  #$0E, ($FFFFB1E4).w
                move.w  #$000A, ($FFFFB1F4).w
Offset_0x0042B6:
                move.b  #$0C, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                jsr     (Load_Objects)                         ; Offset_0x015F22
                jsr     (Build_Sprites)                        ; Offset_0x01658A
                bsr     RunPLC                                 ; Offset_0x001646
                tst.b   ($FFFFB140).w
                bne.s   Offset_0x0042B6
                lea     ($FFFFB080).w, A1
                move.b  #$16, $0024(A1)
                move.w  #$002D, $001E(A1)
                move.b  #$16, $0064(A1)
                move.w  #$002D, $005E(A1)
                tst.b   $0080(A1)
                beq.s   Offset_0x004304
                move.b  #$16, $00A4(A1)
                move.w  #$002D, $009E(A1)
Offset_0x004304:
                move.b  #$00, ($FFFFF7CC).w
                move.b  #$00, ($FFFFF7CF).w
                move.b  #$01, ($FFFFF711).w
                bclr    #$07, (Game_Mode).w                          ; $FFFFF600
Level_Main_Loop: ; Offset_0x00431C:
                bsr     Pause                                  ; Offset_0x001344
                move.b  #$08, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                addq.w  #$01, ($FFFFFE04).w
                bsr     Init_Demo_Control                      ; Offset_0x0047D8
                bsr     Water_Effects                          ; Offset_0x0044CA
                jsr     (Load_Objects)                         ; Offset_0x015F22
                tst.w   ($FFFFFE02).w
                bne     Level                                  ; Offset_0x003E74
                jsr     (Background_Scroll_Layer)              ; Offset_0x00C3AC
                bsr     Change_Water_Surface_Pos               ; Offset_0x0044A0
                jsr     (Load_Ring_Pos)                        ; Offset_0x016EFE
                cmpi.b  #$0C, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x004362
                jsr     (Load_Triangle_Pos)                    ; Offset_0x01732C
Offset_0x004362:
                jsr     (Dynamic_Art_Cues)                     ; Offset_0x03FA10
                bsr     PalCycle_Load                          ; Offset_0x001998
                bsr     RunPLC                                 ; Offset_0x001646
                bsr     Oscillate_Num_Do                       ; Offset_0x004A80
                bsr     Change_Ring_Frame                      ; Offset_0x004B1E
                bsr     End_Level_Art_Load                     ; Offset_0x004C02
                jsr     (Build_Sprites)                        ; Offset_0x01658A
                jsr     (Load_Object_Pos)                      ; Offset_0x017A12
                cmpi.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
                beq.s   Offset_0x00439C
                cmpi.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
                beq     Level_Main_Loop                        ; Offset_0x00431C
                rts
Offset_0x00439C:
                tst.w   ($FFFFFE02).w
                bne.s   Offset_0x0043BA
                tst.w   ($FFFFF614).w
                beq.s   Offset_0x0043BA
                cmpi.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
                beq     Level_Main_Loop                        ; Offset_0x00431C
                move.b  #gm_SegaScreen, (Game_Mode).w           ; $00, $FFFFF600
                rts
Offset_0x0043BA:
                cmpi.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
                bne.s   Offset_0x0043C8
                move.b  #gm_SegaScreen, (Game_Mode).w           ; $00, $FFFFF600
Offset_0x0043C8:
                move.w  #$003C, ($FFFFF614).w
                move.w  #$003F, ($FFFFF626).w
                clr.w   ($FFFFF794).w
Offset_0x0043D8:
                move.b  #$08, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                bsr     Init_Demo_Control                      ; Offset_0x0047D8
                jsr     (Load_Objects)                         ; Offset_0x015F22
                jsr     (Build_Sprites)                        ; Offset_0x01658A
                jsr     (Load_Object_Pos)                      ; Offset_0x017A12
                subq.w  #$01, ($FFFFF794).w
                bpl.s   Offset_0x004408
                move.w  #$0002, ($FFFFF794).w
                bsr     Pal_FadeOut                            ; Offset_0x002446
Offset_0x004408:
                tst.w   ($FFFFF614).w
                bne.s   Offset_0x0043D8
                rts
;===============================================================================
;  Sub Rotina para inicializar o jogador nº 1 como:
;   - Sonic ou Miles se o jogo estiver no modo -> 1 PLAYER 
;   - Sonic          se o jogo estiver no modo -> 2 PLAYER VS
; [ Início ]  
;===============================================================================  
Init_Player_Selected: ; Offset_0x004410:
                cmpi.b  #gm_DemoMode|$80, (Game_Mode).w         ; $88, $FFFFF600
                beq.s   Set_SonicAndMiles_Mode                 ; Offset_0x004426
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   Set_SonicAndMiles_Mode                 ; Offset_0x004426
                move.w  (Player_Select_Flag).w, (Player_Selected_Flag).w ; $FFFFFF7C, $FFFFFF7A
                rts
Set_SonicAndMiles_Mode: ; Offset_0x004426:
                move.w  #$0000, (Player_Selected_Flag).w             ; $FFFFFF7A
                rts
;===============================================================================    
; Sub Rotina Init_Player_Selected                    
; [ Término ]  
;===============================================================================                  

;===============================================================================
; Sub Rotina para carregar o jogador selecionado no modo 1 PLAYER
; [ Início ]    - Sonic And Miles / Sonic Alone / Miles Alone
;===============================================================================    
Load_Player_Selected: ; Offset_0x00442E:
                move.w  (Player_Selected_Flag).w, D0                 ; $FFFFFF7A
                bne.s   Load_Sonic_Or_Miles_Alone              ; Offset_0x00447C
                move.b  #$01, ($FFFFB000).w
                move.b  #$08, ($FFFFD100).w
                cmpi.b  #$06, (Level_Id).w                           ; $FFFFFE10
                beq.s   Dont_Load_Miles                        ; Offset_0x00447A
                cmpi.b  #$0E, (Level_Id).w                           ; $FFFFFE10
                beq.s   Dont_Load_Miles                        ; Offset_0x00447A
                cmpi.b  #$10, (Level_Id).w                           ; $FFFFFE10
                beq.s   Dont_Load_Miles                        ; Offset_0x00447A
                move.b  #$02, ($FFFFB040).w
                move.w  ($FFFFB008).w, ($FFFFB048).w
                move.w  ($FFFFB00C).w, ($FFFFB04C).w
                subi.w  #$0020, ($FFFFB048).w
                addq.w  #$04, ($FFFFB04C).w
                move.b  #$08, ($FFFFD140).w
Dont_Load_Miles: ; Offset_0x00447A:
                rts
Load_Sonic_Or_Miles_Alone: ; Offset_0x00447C:
                subq.w  #$01, D0
                bne.s   Load_Miles_Alone                       ; Offset_0x00448E
                move.b  #$01, ($FFFFB000).w
                move.b  #$08, ($FFFFD100).w
                rts
Load_Miles_Alone: ; Offset_0x00448E:
                move.b  #$02, ($FFFFB000).w
                move.b  #$08, ($FFFFD140).w
                addq.w  #$04, ($FFFFB00C).w
                rts
;===============================================================================
; Sub Rotina para carregar o jogador selecionado no modo 1 PLAYER
; [ Término ]    - Sonic And Miles / Sonic Alone / Miles Alone
;=============================================================================== 
 
;===============================================================================
; Sub Rotina para mudar a superfície da água.
; [ Início ]   
;===============================================================================   
Change_Water_Surface_Pos: ; Offset_0x0044A0:
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   Offset_0x0044C8
                move.w  ($FFFFEE00).w, D1
                btst    #$00, ($FFFFFE05).w
                beq.s   Offset_0x0044B6
                addi.w  #$0020, D1
Offset_0x0044B6:
                move.w  D1, D0
                addi.w  #$0060, D0
                move.w  D0, ($FFFFB388).w
                addi.w  #$0120, D1
                move.w  D1, ($FFFFB3C8).w
Offset_0x0044C8:
                rts
;===============================================================================
; Sub Rotina para mudar a superfície da água.
; [ Término ]
;===============================================================================

;===============================================================================
; Sub Rotina para controlar os efeitos da água. Ex: Mudança de nível
; [ Início ]   
;===============================================================================  
Water_Effects: ; Offset_0x0044CA:
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   Offset_0x004526
                tst.b   ($FFFFEEDC).w
                bne.s   Offset_0x0044E2
                cmpi.b  #$06, ($FFFFB024).w
                bcc.s   Offset_0x0044E2
                bsr     Dynamic_Water_Height                   ; Offset_0x004560
Offset_0x0044E2:
                clr.b   ($FFFFF64E).w
                moveq   #$00, D0
                cmpi.b  #$0F, (Level_Id).w                           ; $FFFFFE10
                beq.s   Offset_0x0044F6
                move.b  ($FFFFFE60).w, D0
                lsr.w   #$01, D0
Offset_0x0044F6:
                add.w   ($FFFFF648).w, D0
                move.w  D0, ($FFFFF646).w
                move.w  ($FFFFF646).w, D0
                sub.w   ($FFFFEE04).w, D0
                bcc.s   Offset_0x004518
                tst.w   D0
                bpl.s   Offset_0x004518
                move.b  #$DF, ($FFFFF625).w
                move.b  #$01, ($FFFFF64E).w
Offset_0x004518:
                cmpi.w  #$00DF, D0
                bcs.s   Offset_0x004522
                move.w  #$00DF, D0
Offset_0x004522:
                move.b  D0, ($FFFFF625).w
Offset_0x004526:
                cmpi.b  #$0A, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x004532
                bsr     OOz_Oil_Slides                         ; Offset_0x004672
Offset_0x004532:
                cmpi.b  #$06, (Level_Id).w                           ; $FFFFFE10
                bne.s   Exit_Water_Effects                     ; Offset_0x00453E
                bsr     WFz_Wind_Tunnels                       ; Offset_0x0045C6
Exit_Water_Effects: ; Offset_0x00453E:
                rts
;===============================================================================
; Sub Rotina para controlar os efeitos da água. Ex: Mudança de nível
; [ Término ]   
;===============================================================================   
                
Water_Height_Array: ; Offset_0x004540:                
                dc.w    $0600, $0600, $0600, $0600, $0600, $0600, $0600, $0600
                dc.w    $0600, $0600, $0600, $0710, $0600, $0600, $0410, $0510    
                
;===============================================================================
; Sub Rotina para mudar a altura da água dinamicamente
; [ Início ]
;=============================================================================== 
Dynamic_Water_Height: ; Offset_0x004560:
                moveq   #$00, D0
                move.w  (Level_Id).w, D0                             ; $FFFFFE10
                subi.w  #$0800, D0
                ror.b   #$01, D0
                lsr.w   #$06, D0
                andi.w  #$FFFE, D0
                move.w  Dynamic_Water_Index(PC, D0), D0        ; Offset_0x004594
                jsr     Dynamic_Water_Index(PC, D0)            ; Offset_0x004594
                moveq   #$00, D1
                move.b  ($FFFFF64C).w, D1
                move.w  ($FFFFF64A).w, D0
                sub.w   ($FFFFF648).w, D0
                beq.s   Offset_0x004592
                bcc.s   Offset_0x00458E
                neg.w   D1
Offset_0x00458E:
                add.w   D1, ($FFFFF648).w
Offset_0x004592:
                rts
Dynamic_Water_Index: ; Offset_0x004594:
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; HPz 1
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; HPz 1
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index  
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; OOz 1
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; OOz 2
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; MCz 1
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; MCz 2
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; CNz 1
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; CNz 2
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; CPz 1
                dc.w    Dynamic_CPz_Water-Dynamic_Water_Index  ; CPz 2
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; DEz 1
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; DEz 2
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; ARz 1
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; ARz 2              
;-------------------------------------------------------------------------------                
Dynamic_Null_Water: ; Offset_0x0045B4:
                rts 
;-------------------------------------------------------------------------------  
Dynamic_CPz_Water: ; Offset_0x0045B6:    
                cmpi.w  #$1DE0, ($FFFFEE00).w
                bcs.s   Exit_Dynamic_CPz_Water                 ; Offset_0x0045C4
                move.w  #$0510, ($FFFFF64A).w
Exit_Dynamic_CPz_Water: ; Offset_0x0045C4:
                rts  
;===============================================================================
; Sub Rotina para mudar a altura da água dinamicamente
; [ Término ]
;===============================================================================                
                
;===============================================================================
; Sub Rotina para fazer o Sonic voar em determinada área da Wing Fortress
; [ Início ]
;===============================================================================
WFz_Wind_Tunnels: ; Offset_0x0045C6:
                tst.w   ($FFFFFE08).w
                bne     Offset_0x004660
                lea     (WFz_Wind_Data), A2                    ; Offset_0x004662
                moveq   #$01, D1
                lea     ($FFFFB000).w, A1
Offset_0x0045DA:                
                move.w  $0008(A1), D0
                cmp.w   (A2), D0
                bcs     Offset_0x00464A
                cmp.w   $0004(A2), D0
                bcc     Offset_0x00464A
                move.w  $000C(A1), D2
                cmp.w   $0002(A2), D2
                bcs     Offset_0x00464A
                cmp.w   $0006(A2), D2
                bcc.s   Offset_0x00464A
                tst.b   ($FFFFF7C9).w
                bne     Offset_0x004660
                cmpi.b  #$04, $0024(A1)
                bcc.s   Offset_0x00465C
                move.b  #$01, ($FFFFF7C7).w
                subq.w  #$04, $0008(A1)
                move.w  #$FC00, $0010(A1)
                move.w  #$0000, $0012(A1)
                move.b  #$0F, $001C(A1)
                bset    #$01, $0022(A1)
                btst    #$00, ($FFFFF604).w
                beq.s   Offset_0x00463C
                subq.w  #$01, $000C(A1)
Offset_0x00463C:
                btst    #$01, ($FFFFF604).w
                beq.s   Offset_0x004648
                addq.w  #$01, $000C(A1)
Offset_0x004648:
                rts
Offset_0x00464A:
                addq.w  #$08, A2
                dbra    D1, Offset_0x0045DA
                tst.b   ($FFFFF7C7).w
                beq.s   Offset_0x004660
                move.b  #$00, $001C(A1)
Offset_0x00465C:
                clr.b   ($FFFFF7C7).w
Offset_0x004660:
                rts
;-------------------------------------------------------------------------------                
WFz_Wind_Data:  ; Offset_0x004662:                
                dc.b    $15, $10, $04, $00, $1A, $F0, $05, $80, $20, $F0, $06, $18, $25, $00, $06, $80                                          
;===============================================================================
; Sub Rotina para fazer o Sonic voar em determinada área da Wing Fortress
; [ Término ]
;===============================================================================                

;===============================================================================
; Sub Rotina para fazer o Sonic escorregar no óleo na Oil Ocean
; [ Início ]
;===============================================================================
OOz_Oil_Slides: ; Offset_0x004672:
                lea     ($FFFFB000).w, A1
                move.b  ($FFFFF602).w, D2
                bsr.s   Offset_0x004684
                lea     ($FFFFB040).w, A1
                move.b  ($FFFFF66A).w, D2
Offset_0x004684:
                btst    #$01, $0022(A1)
                bne.s   Offset_0x0046B8
                move.w  $000C(A1), D0
                add.w   D0, D0
                andi.w  #$0F00, D0
                move.w  $0008(A1), D1
                lsr.w   #$07, D1
                andi.w  #$007F, D1
                add.w   D1, D0
                lea     ($FFFF8000).w, A2
                move.b  $00(A2, D0), D0
                lea     OOz_Slide_Data+$0040(PC), A2           ; Offset_0x0047D8
                moveq   #$1F, D1
Offset_0x0046B0:
                cmp.b   -(A2), D0
                dbeq    D1, Offset_0x0046B0
                beq.s   Offset_0x0046CC
Offset_0x0046B8:
                tst.b   $002B(A1)
                bpl.s   Offset_0x0046CA
                move.w  #$0005, $002E(A1)
                andi.b  #$7F, $002B(A1)
Offset_0x0046CA:
                rts
Offset_0x0046CC:
                lea     (OOz_Slide_Data), A2                   ; Offset_0x004798
                move.b  $00(A2, D1), D0
                beq.s   Offset_0x004728
                move.b  $0014(A1), D1
                tst.b   D0
                bpl.s   Offset_0x0046EC
                cmp.b   D0, D1
                ble.s   Offset_0x0046F6
                subi.w  #$0040, $0014(A1)
                bra.s   Offset_0x0046F6
Offset_0x0046EC:
                cmp.b   D0, D1
                bge.s   Offset_0x0046F6
                addi.w  #$0040, $0014(A1)
Offset_0x0046F6:
                bclr    #$00, $0022(A1)
                tst.b   D1
                bpl.s   Offset_0x004706
                bset    #$00, $0022(A1)
Offset_0x004706:
                move.b  #$1B, $001C(A1)
                ori.b   #$80, $002B(A1)
                move.b  ($FFFFFE0F).w, D0
                andi.b  #$1F, D0
                bne.s   Offset_0x004726
                move.w  #$00F0, D0
                jsr     (Play_Sfx)                             ; Offset_0x00132C
Offset_0x004726:
                rts
Offset_0x004728:
                move.w  #$0004, D1
                move.w  $0014(A1), D0
                btst    #$02, D2
                beq.s   Offset_0x00474A
                move.b  #$00, $001C(A1)
                bset    #$00, $0022(A1)
                sub.w   D1, D0
                tst.w   D0
                bpl.s   Offset_0x00474A
                sub.w   D1, D0
Offset_0x00474A:
                btst    #$03, D2
                beq.s   Offset_0x004764
                move.b  #$00, $001C(A1)
                bclr    #$00, $0022(A1)
                add.w   D1, D0
                tst.w   D0
                bmi.s   Offset_0x004764
                add.w   D1, D0
Offset_0x004764:
                move.w  #$0004, D1
                tst.w   D0
                beq.s   Offset_0x00478C
                bmi.s   Offset_0x00477E
                sub.w   D1, D0
                bhi.s   Offset_0x00477C
                move.w  #$0000, D0
                move.b  #$05, $001C(A1)
Offset_0x00477C:
                bra.s   Offset_0x00478C
Offset_0x00477E:
                add.w   D1, D0
                bhi.s   Offset_0x00478C
                move.w  #$0000, D0
                move.b  #$05, $001C(A1)
Offset_0x00478C:
                move.w  D0, $0014(A1)
                ori.b   #$80, $002B(A1)
                rts
;--------------------------------------------------------------------------------                
OOz_Slide_Data: ; Offset_0x004798:
                dc.b    $F8, $F8, $F8, $08, $08, $00, $00, $00, $F8, $F8, $00, $08, $08, $08, $00, $08
                dc.b    $08, $08, $00, $F8, $00, $00, $F8, $08, $F8, $F8, $F8, $08, $08, $08, $F8, $F8
                dc.b    $2F, $30, $31, $33, $35, $38, $3A, $3C, $63, $64, $83, $90, $91, $93, $A1, $A3
                dc.b    $BD, $C7, $C8, $CE, $D7, $D8, $E6, $EB, $EC, $ED, $F1, $F2, $F3, $F4, $FA, $FD 
              
;===============================================================================
; Sub Rotina para fazer o Sonic escorregar no óleo na Oil Ocean
; [ Término ]
;===============================================================================     

Init_Demo_Control: ; Offset_0x0047D8:
                tst.w   ($FFFFFFD0).w
                bne     Demo_Mode_Control                      ; Offset_0x004864
                rts                 
;-------------------------------------------------------------------------------
; Offset_0x0047E2:
                lea     (Demo_Index), A1                       ; Offset_0x004902
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                lsl.w   #$02, D0
                move.l  $00(A1, D0), A1
                move.w  ($FFFFF790).w, D0
                adda.w  D0, A1
                move.b  ($FFFFF604).w, D0
                cmp.b   (A1), D0
                bne.s   Offset_0x004810
                addq.b  #$01, $0001(A1)
                cmpi.b  #$FF, $0001(A1)
                beq.s   Offset_0x004810
                bra.s   Offset_0x004824
Offset_0x004810:
                move.b  D0, $0002(A1)
                move.b  #$00, $0003(A1)
                addq.w  #$02, ($FFFFF790).w
                andi.w  #$03FF, ($FFFFF790).w
Offset_0x004824:
                cmpi.b  #$00, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x004862
                lea     ($00FEC000), A1
                move.w  ($FFFFF732).w, D0
                adda.w  D0, A1
                move.b  ($FFFFF606).w, D0
                cmp.b   (A1), D0
                bne.s   Offset_0x00484E
                addq.b  #$01, $0001(A1)
                cmpi.b  #$FF, $0001(A1)
                beq.s   Offset_0x00484E
                bra.s   Offset_0x004862
Offset_0x00484E:
                move.b  D0, $0002(A1)
                move.b  #$00, $0003(A1)
                addq.w  #$02, ($FFFFF732).w
                andi.w  #$03FF, ($FFFFF732).w
Offset_0x004862:
                rts                
;-------------------------------------------------------------------------------
Demo_Mode_Control: ;  Offset_0x004864:
                move.b  ($FFFFF605).w, D0
                or.b    ($FFFFF607).w, D0
                andi.b  #$80, D0
                beq.s   Offset_0x00487E
                tst.w   ($FFFFFFD0).w
                bmi.s   Offset_0x00487E
                move.b  #gm_TitleScreen, (Game_Mode).w          ; $04, $FFFFF600
Offset_0x00487E:
                lea     (Demo_Index), A1                       ; Offset_0x004902
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                cmpi.b  #gm_SpecialStage, (Game_Mode).w         ; $10, $FFFFF600
                bne.s   Offset_0x004894
                moveq   #$06, D0
Offset_0x004894:
                lsl.w   #$02, D0
                move.l  $00(A1, D0), A1
                move.w  ($FFFFF790).w, D0
                adda.w  D0, A1
                move.b  (A1), D0
                lea     ($FFFFF604).w, A0
                move.b  D0, D1
                moveq   #$00, D2
                eor.b   D2, D0
                move.b  D1, (A0)+
                and.b   D1, D0
                move.b  D0, (A0)+
                subq.b  #$01, ($FFFFF792).w
                bcc.s   Offset_0x0048C2
                move.b  $0003(A1), ($FFFFF792).w
                addq.w  #$02, ($FFFFF790).w
Offset_0x0048C2:
                cmpi.b  #$00, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x0048FA
                lea     (Demo_Emerald_Hill_Miles), A1          ; Offset_0x004CC2
                move.w  ($FFFFF732).w, D0
                adda.w  D0, A1
                move.b  (A1), D0
                lea     ($FFFFF606).w, A0
                move.b  D0, D1
                moveq   #$00, D2
                eor.b   D2, D0
                move.b  D1, (A0)+
                and.b   D1, D0
                move.b  D0, (A0)+
                subq.b  #$01, ($FFFFF734).w
                bcc.s   Offset_0x0048F8
                move.b  $0003(A1), ($FFFFF734).w
                addq.w  #$02, ($FFFFF732).w
Offset_0x0048F8:
                rts
Offset_0x0048FA:
                move.w  #$0000, ($FFFFF606).w
                rts                
;-------------------------------------------------------------------------------                            
Demo_Index: ; 
                dc.l    Demo_Emerald_Hill                      ; Offset_0x004C62
                dc.l    Demo_Emerald_Hill                      ; Offset_0x004C62
                dc.l    Demo_Emerald_Hill                      ; Offset_0x004C62
                dc.l    Demo_Emerald_Hill                      ; Offset_0x004C62
                dc.l    Demo_Emerald_Hill                      ; Offset_0x004C62
                dc.l    Demo_Emerald_Hill                      ; Offset_0x004C62
                dc.l    Demo_Emerald_Hill                      ; Offset_0x004C62
                dc.l    Demo_Emerald_Hill                      ; Offset_0x004C62
                dc.l    Demo_Emerald_Hill                      ; Offset_0x004C62
                dc.l    Demo_Emerald_Hill                      ; Offset_0x004C62
                dc.l    Demo_Emerald_Hill                      ; Offset_0x004C62
                dc.l    Demo_Emerald_Hill                      ; Offset_0x004C62   
                dc.l    Demo_Casino_Night                      ; Offset_0x004D22
                dc.l    Demo_Chemical_Plant                    ; Offset_0x004D92
                dc.l    Demo_Emerald_Hill                      ; Offset_0x004C62 
                dc.l    Demo_Aquatic_Ruin                      ; Offset_0x004DF2
                dc.l    Demo_Emerald_Hill                      ; Offset_0x004C62 
;-------------------------------------------------------------------------------                
Demo_End_Index: ; Offset_0x004946:   
                dc.w    $008B, $0837, $0042, $085C, $006A, $085F, $002F, $082C
                dc.w    $0021, $0803, $2830, $0808, $002E, $0815, $000F, $0846
                dc.w    $001A, $08FF, $08CA, $0000, $0000, $0000, $0000, $0000   
;===============================================================================
; Sub Rotina para carregar os indexadores das colisões dos blocos 16x16
; [ Início ]
;===============================================================================                    
Load_Colision_Index: ; Offset_0x004976:
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                lsl.w   #$02, D0
                move.l  #$FFFFD600, ($FFFFF796).w
                move.w  D0, -(A7)
                move.l  Primary_Colision_Index(PC, D0), A0     ; Offset_0x0049A2
                lea     ($FFFFD600).w, A1
                bsr     KosinskiDec                            ; Offset_0x0018F8
                move.w  (A7)+, D0
                move.l  Secundary_Colision_Index(PC, D0), A0   ; Offset_0x0049E6
                lea     ($FFFFD900).w, A1
                bra     KosinskiDec                            ; Offset_0x0018F8
;------------------------------------------------------------------------------- 
Primary_Colision_Index: ; Offset_0x0049A2: 
                dc.l    Emerald_Hill_Colision_1                ; Offset_0x044E50
                dc.l    Null_Colision                          ; Offset_0x045A80
                dc.l    Metropolis_Colision                    ; Offset_0x045040
                dc.l    Null_Colision                          ; Offset_0x045A80
                dc.l    Metropolis_Colision                    ; Offset_0x045040
                dc.l    Metropolis_Colision                    ; Offset_0x045040
                dc.l    Wing_Fortress_Colision_1               ; Offset_0x0458C0
                dc.l    Emerald_Hill_Colision_1                ; Offset_0x044E50
                dc.l    Hidden_Palace_Colision                 ; Offset_0x045100
                dc.l    Null_Colision                          ; Offset_0x045A80
                dc.l    Oil_Ocean_Colision                     ; Offset_0x045100
                dc.l    Mystic_Cave_Colision                   ; Offset_0x045200
                dc.l    Casino_Night_Colision_1                ; Offset_0x0452A0
                dc.l    Chemical_Plant_Colision_1              ; Offset_0x0453C0
                dc.l    Chemical_Plant_Colision_1              ; Offset_0x0453C0
                dc.l    Aquatic_Ruin_Colision_1                ; Offset_0x045610
                dc.l    Wing_Fortress_Colision_1               ; Offset_0x0458C0
;-------------------------------------------------------------------------------                 
Secundary_Colision_Index: ; Offset_0x0049E6:  
                dc.l    Emerald_Hill_Colision_2                ; Offset_0x044F40
                dc.l    Null_Colision                          ; Offset_0x045A80
                dc.l    Metropolis_Colision                    ; Offset_0x045040
                dc.l    Null_Colision                          ; Offset_0x045A80
                dc.l    Metropolis_Colision                    ; Offset_0x045040
                dc.l    Metropolis_Colision                    ; Offset_0x045040
                dc.l    Wing_Fortress_Colision_2               ; Offset_0x0459A0
                dc.l    Emerald_Hill_Colision_2                ; Offset_0x044F40
                dc.l    Hidden_Palace_Colision                 ; Offset_0x045100
                dc.l    Null_Colision                          ; Offset_0x045A80
                dc.l    Oil_Ocean_Colision                     ; Offset_0x045100
                dc.l    Mystic_Cave_Colision                   ; Offset_0x045200
                dc.l    Casino_Night_Colision_2                ; Offset_0x045330
                dc.l    Chemical_Plant_Colision_2              ; Offset_0x0454E0
                dc.l    Chemical_Plant_Colision_2              ; Offset_0x0454E0
                dc.l    Aquatic_Ruin_Colision_2                ; Offset_0x045760
                dc.l    Wing_Fortress_Colision_2               ; Offset_0x0459A0   
;===============================================================================
; Sub Rotina para carregar os indexadores das colisões dos blocos 16x16
; [ Término ]
;===============================================================================

;===============================================================================
; Sub Rotina Oscillate_Num_Init
; [ Início ]
;===============================================================================                 
Oscillate_Num_Init: ; Offset_0x004A2A:
                lea     ($FFFFFE5E).w, A1
                lea     (Oscillate_Data), A2                   ; Offset_0x004A3E
                moveq   #$20, D1
Offset_0x004A36:
                move.w  (A2)+, (A1)+
                dbra    D1, Offset_0x004A36
                rts
Oscillate_Data: ; Offset_0x004A3E:                      
                dc.w    $007D, $0080, $0000, $0080, $0000, $0080, $0000, $0080
                dc.w    $0000, $0080, $0000, $0080, $0000, $0080, $0000, $0080
                dc.w    $0000, $0080, $0000, $3848, $00EE, $2080, $00B4, $3080
                dc.w    $010E, $5080, $01C2, $7080, $0276, $0080, $0000, $4000
                dc.w    $00FE 
;===============================================================================
; Sub Rotina Oscillate_Num_Init
; [ Término ]
;===============================================================================                  
    
;===============================================================================
; Sub Rotina Oscillate_Num_Do
; [ Início ]
;===============================================================================  
Oscillate_Num_Do: ; Offset_0x004A80:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   Offset_0x004A8E
                cmpi.b  #$06, ($FFFFB024).w
                bcc.s   Offset_0x004ADC
Offset_0x004A8E:
                lea     ($FFFFFE5E).w, A1
                lea     (Oscillate_Data2), A2                  ; Offset_0x004ADE
                move.w  (A1)+, D3
                moveq   #$0F, D1
Offset_0x004A9C:
                move.w  (A2)+, D2
                move.w  (A2)+, D4
                btst    D1, D3
                bne.s   Offset_0x004ABC
                move.w  $0002(A1), D0
                add.w   D2, D0
                move.w  D0, $0002(A1)
                add.w   D0, $0000(A1)
                cmp.b   $0000(A1), D4
                bhi.s   Offset_0x004AD2
                bset    D1, D3
                bra.s   Offset_0x004AD2
Offset_0x004ABC:
                move.w  $0002(A1), D0
                sub.w   D2, D0
                move.w  D0, $0002(A1)
                add.w   D0, $0000(A1)
                cmp.b   $0000(A1), D4
                bls.s   Offset_0x004AD2
                bclr    D1, D3
Offset_0x004AD2:
                addq.w  #$04, A1
                dbra    D1, Offset_0x004A9C
                move.w  D3, ($FFFFFE5E).w
Offset_0x004ADC:
                rts
Oscillate_Data2: ; Offset_0x004ADE: 
                dc.w    $0002, $0010, $0002, $0018, $0002, $0020, $0002, $0030
                dc.w    $0004, $0020, $0008, $0008, $0008, $0040, $0004, $0040
                dc.w    $0002, $0038, $0002, $0038, $0002, $0020, $0003, $0030
                dc.w    $0005, $0050, $0007, $0070, $0002, $0040, $0002, $0040                
;===============================================================================
; Sub Rotina Oscillate_Num_Do
; [ Término ]
;===============================================================================  

;===============================================================================
; Sub Rotina para fazer os anéis e outros objetos girarem em torno de si  
; [ Início ]
;===============================================================================
Change_Ring_Frame: ; Offset_0x004B1E:
                subq.b  #$01, ($FFFFFEA0).w
                bpl.s   Offset_0x004B34
                move.b  #$0B, ($FFFFFEA0).w
                subq.b  #$01, ($FFFFFEA1).w
                andi.b  #$07, ($FFFFFEA1).w
Offset_0x004B34:
                subq.b  #$01, ($FFFFFEA2).w
                bpl.s   Offset_0x004B4A
                move.b  #$07, ($FFFFFEA2).w
                addq.b  #$01, ($FFFFFEA3).w
                andi.b  #$03, ($FFFFFEA3).w
Offset_0x004B4A:
                subq.b  #$01, ($FFFFFEA4).w
                bpl.s   Offset_0x004B68
                move.b  #$07, ($FFFFFEA4).w
                addq.b  #$01, ($FFFFFEA5).w
                cmpi.b  #$06, ($FFFFFEA5).w
                bcs.s   Offset_0x004B68
                move.b  #$00, ($FFFFFEA5).w
Offset_0x004B68:
                tst.b   ($FFFFFEA6).w
                beq.s   Offset_0x004B8A
                moveq   #$00, D0
                move.b  ($FFFFFEA6).w, D0
                add.w   ($FFFFFEA8).w, D0
                move.w  D0, ($FFFFFEA8).w
                rol.w   #$07, D0
                andi.w  #$0003, D0
                move.b  D0, ($FFFFFEA7).w
                subq.b  #$01, ($FFFFFEA6).w
Offset_0x004B8A:
                rts
;===============================================================================
; Sub Rotina para fazer os anéis e outros objetos girarem em torno de si  
; [ Término ]
;===============================================================================

;===============================================================================
; Sub Rotina para testar e setar o flag de fim de fase
; [ Início ]
;===============================================================================  
Test_End_Level_Art_Load: ; Offset_0x004B8C:
                move.w  #$0000, (End_Level_Flag).w                   ; $FFFFFFA8
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   Set_End_Level_Flag                     ; Offset_0x004BFA
                cmpi.w  #$0001, (Level_Id).w                         ; $FFFFFE10
                beq     Dont_Set_End_Level_Flag                ; Offset_0x004C00
                cmpi.w  #$0500, (Level_Id).w                         ; $FFFFFE10
                beq     Dont_Set_End_Level_Flag                ; Offset_0x004C00
                cmpi.w  #$0600, (Level_Id).w                         ; $FFFFFE10
                beq     Dont_Set_End_Level_Flag                ; Offset_0x004C00
                cmpi.w  #$0701, (Level_Id).w                         ; $FFFFFE10
                beq     Dont_Set_End_Level_Flag                ; Offset_0x004C00
                cmpi.w  #$0A01, (Level_Id).w                         ; $FFFFFE10
                beq     Dont_Set_End_Level_Flag                ; Offset_0x004C00
                cmpi.w  #$0B01, (Level_Id).w                         ; $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004C00
                cmpi.w  #$0C01, (Level_Id).w                         ; $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004C00
                cmpi.w  #$0D01, (Level_Id).w                         ; $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004C00                     
                cmpi.w  #$0E00, (Level_Id).w                         ; $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004C00
                cmpi.w  #$0F01, (Level_Id).w                         ; $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004C00
                cmpi.w  #$1000, (Level_Id).w                         ; $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004C00
Set_End_Level_Flag: ; Offset_0x004BFA:
                move.w  #$0001, (End_Level_Flag).w                   ; $FFFFFFA8
Dont_Set_End_Level_Flag: ; Offset_0x004C00:
                rts
;===============================================================================
; Sub Rotina para testar e setar o flag de fim de fase
; [ Término ]
;===============================================================================   

;===============================================================================
; Sub Rotina para carrega os sprites de fim de fase
; [ Início ]
;===============================================================================  
End_Level_Art_Load: ; Offset_0x004C02:
                tst.w   (End_Level_Flag).w                           ; $FFFFFFA8
                beq.s   Skip_End_Level_Art_Load                ; Offset_0x004C60
                tst.w   ($FFFFFE08).w
                bne.s   Skip_End_Level_Art_Load                ; Offset_0x004C60
                move.w  ($FFFFEE00).w, D0
                move.w  ($FFFFEECA).w, D1
                subi.w  #$0100, D1
                cmp.w   D1, D0
                blt.s   Offset_0x004C3A
                tst.b   ($FFFFFE1E).w
                beq.s   Offset_0x004C3A
                cmp.w   ($FFFFEEC8).w, D1
                beq.s   Offset_0x004C3A
                move.w  D1, ($FFFFEEC8).w
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   Skip_End_Level_Art_Load                ; Offset_0x004C60
                moveq   #$27, D0
                bra     LoadPLC2                               ; Offset_0x00160C
Offset_0x004C3A:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Skip_End_Level_Art_Load                ; Offset_0x004C60
                move.w  ($FFFFEE20).w, D0
                move.w  ($FFFFEEFA).w, D1
                subi.w  #$0100, D1
                cmp.w   D1, D0
                blt.s   Skip_End_Level_Art_Load                ; Offset_0x004C60
                tst.b   ($FFFFFECA).w
                beq.s   Skip_End_Level_Art_Load                ; Offset_0x004C60
                cmp.w   ($FFFFEEF8).w, D1
                beq.s   Skip_End_Level_Art_Load                ; Offset_0x004C60
                move.w  D1, ($FFFFEEF8).w
Skip_End_Level_Art_Load: ; Offset_0x004C60:
                rts    
;===============================================================================
; Sub Rotina para carrega os sprites de fim de fase
; [ Término ]
;===============================================================================    
Demo_Emerald_Hill: ; Offset_0x004C62: 
                dc.b    $00, $4B, $08, $42, $28, $08, $08, $3E, $28, $05, $08, $AF, $28, $09, $08, $45
                dc.b    $00, $1D, $04, $0E, $00, $04, $04, $04, $00, $08, $04, $3E, $00, $04, $08, $66
                dc.b    $00, $61, $08, $11, $00, $21, $02, $07, $22, $06, $02, $0D, $00, $3B, $08, $09
                dc.b    $00, $1D, $02, $06, $22, $06, $02, $01, $00, $0E, $08, $FF, $08, $2E, $00, $22
                dc.b    $20, $07, $28, $0F, $08, $02, $00, $2F, $28, $23, $08, $BD, $00, $0B, $04, $13
                dc.b    $00, $16, $02, $02, $22, $06, $02, $02, $00, $63, $80, $00, $40, $00, $00, $00
;-------------------------------------------------------------------------------
Demo_Emerald_Hill_Miles: ; Offset_0x004CC2:
                dc.b    $00, $3B, $08, $0F, $09, $43, $29, $06, $09, $06, $08, $C9, $00, $11, $08, $01
                dc.b    $28, $08, $08, $52, $00, $11, $08, $0A, $28, $0E, $08, $23, $00, $0A, $20, $04
                dc.b    $00, $0D, $08, $55, $00, $1E, $08, $5A, $00, $10, $08, $FF, $08, $C0, $00, $20
                dc.b    $04, $0D, $00, $0D, $20, $04, $28, $0F, $20, $05, $00, $0C, $04, $05, $00, $5E
                dc.b    $08, $73, $00, $18, $04, $44, $00, $08, $02, $30, $00, $08, $08, $0D, $00, $23
                dc.b    $08, $27, $00, $04, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
;-------------------------------------------------------------------------------
Demo_Casino_Night: ; Offset_0x004D22: 
                dc.b    $00, $48, $08, $10, $09, $00, $08, $01, $09, $06, $08, $60, $28, $05, $20, $01
                dc.b    $00, $08, $04, $02, $06, $03, $04, $01, $00, $19, $08, $11, $28, $19, $20, $04
                dc.b    $28, $23, $08, $1A, $00, $07, $04, $10, $00, $0E, $08, $77, $28, $16, $20, $00
                dc.b    $00, $0F, $04, $11, $00, $07, $08, $52, $00, $6F, $08, $74, $00, $37, $08, $16
                dc.b    $00, $04, $04, $26, $00, $0C, $04, $12, $00, $69, $20, $10, $28, $02, $2A, $05
                dc.b    $0A, $14, $08, $05, $00, $05, $04, $0C, $00, $48, $04, $09, $00, $1E, $08, $06
                dc.b    $00, $2F, $04, $01, $00, $FF, $00, $4F, $08, $00, $28, $0B, $08, $2A, $00, $5E
;-------------------------------------------------------------------------------   
Demo_Chemical_Plant: ; Offset_0x004D92: 
                dc.b    $00, $46, $08, $1B, $28, $07, $08, $09, $00, $1B, $08, $0D, $28, $28, $08, $FF
                dc.b    $08, $E7, $0A, $04, $02, $01, $04, $33, $06, $67, $04, $00, $00, $15, $20, $00
                dc.b    $24, $07, $04, $0E, $00, $17, $08, $01, $0A, $01, $08, $0C, $00, $1F, $28, $06
                dc.b    $08, $0A, $00, $1B, $04, $0D, $00, $1C, $04, $06, $00, $FF, $00, $DF, $08, $0E
                dc.b    $00, $1C, $04, $02, $00, $25, $08, $06, $00, $06, $20, $04, $00, $28, $04, $11
                dc.b    $00, $17, $08, $19, $00, $10, $04, $2D, $00, $13, $80, $00, $40, $00, $00, $00
;-------------------------------------------------------------------------------   
Demo_Aquatic_Ruin: ; Offset_0x004DF2:     
                dc.b    $00, $42, $08, $4A, $28, $08, $08, $4F, $28, $0B, $08, $05, $00, $1A, $08, $60
                dc.b    $28, $14, $08, $54, $00, $40, $08, $04, $09, $00, $08, $5B, $00, $46, $08, $3B
                dc.b    $28, $08, $08, $27, $00, $0A, $08, $92, $28, $32, $08, $22, $00, $22, $08, $4C
                dc.b    $00, $1E, $04, $01, $05, $02, $04, $00, $00, $0A, $04, $0C, $00, $10, $08, $05
                dc.b    $00, $61, $08, $03, $28, $05, $08, $16, $00, $1B, $08, $56, $28, $0A, $08, $16
                dc.b    $00, $15, $08, $0C, $00, $2B, $20, $01, $28, $1A, $08, $82, $00, $0B, $80, $00                         
;===============================================================================
; Modo de jogo ou demonstração das fases 
; [ Término ]
;=============================================================================== 

;===============================================================================
; Sub Rotina para carregar os Tiles 8x8 principais e o PLC primário das fases
; [ Início ]
;=============================================================================== 
Load_8x8_Tiles: ; Offset_0x004E52:
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                add.w   D0, D0
                add.w   D0, D0
                move.w  D0, D1
                add.w   D0, D0
                add.w   D1, D0
                lea     (TilesMainTable), A2                   ; Offset_0x0422DE
                lea     $00(A2, D0), A2
                move.l  (A2)+, D0
                andi.l  #$00FFFFFF, D0
                move.l  D0, A0
                lea     ($FFFF0000), A1
                bsr     KosinskiDec                            ; Offset_0x0018F8
                move.w  A1, D3
                cmpi.b  #$07, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x004E9E
                lea     (Hill_Top_Tiles), A0                   ; Offset_0x098AB4
                lea     ($FFFF3F80), A1
                bsr     KosinskiDec                            ; Offset_0x0018F8
                move.w  #$6FC0, D3
Offset_0x004E9E:
                cmpi.b  #$06, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x004EBA
                lea     (Wing_Fortress_Tiles), A0              ; Offset_0x0C7EC4
                lea     ($FFFF60E0), A1
                bsr     KosinskiDec                            ; Offset_0x0018F8
                move.w  #$6F20, D3
Offset_0x004EBA:
                cmpi.b  #$0E, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x004EC6
                move.w  #$64C0, D3
Offset_0x004EC6:
                move.w  D3, D7
                andi.w  #$0FFF, D3
                lsr.w   #$01, D3
                rol.w   #$04, D7
                andi.w  #$000F, D7
Offset_0x004ED4:
                move.w  D7, D2
                lsl.w   #$07, D2
                lsl.w   #$05, D2
                move.l  #$00FFFFFF, D1
                move.w  D2, D1
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x00140A
                move.w  D7, -(A7)
                move.b  #$0C, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                bsr     RunPLC                                 ; Offset_0x001646
                move.w  (A7)+, D7
                move.w  #$0800, D3
                dbra    D7, Offset_0x004ED4
                rts
;===============================================================================
; Sub Rotina para carregar os Tiles 8x8 principais e o PLC primário das fases
; [ Término ]
;=============================================================================== 

;===============================================================================
; Special Stage
; [ Início ]
;=============================================================================== 
Special_Stage: ; Offset_0x004F04:
                cmpi.b  #$07, (Stage_Id).w                           ; $FFFFFE16
                bcs.s   Offset_0x004F12
                move.b  #$00, (Stage_Id).w                           ; $FFFFFE16
Offset_0x004F12:
                move.w  #Special_Stage_Sfx, D0  ; $00CA
                bsr     Play_Sfx                               ; Offset_0x00132C
                move.b  #Volume_Down, D0        ; $F9
                bsr     Play_Music                             ; Offset_0x00131A
                bsr     Pal_MakeFlash                          ; Offset_0x00254E
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x004F38
                move.w  #$0000, (Two_Player_Flag).w                  ; $FFFFFFB8
                st      ($FFFFFE00).w
                bra.s   Offset_0x004F3C
Offset_0x004F38:
                sf      ($FFFFFE00).w
Offset_0x004F3C:
                move    #$2700, SR
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8B03, (A6)
                move.w  #$8004, (A6)
                move.w  #$8ADF, ($FFFFF624).w
                move.w  #$8230, (A6)
                move.w  #$8405, (A6)
                move.w  #$8C08, (A6)
                move.w  #$9003, (A6)
                move.w  #$8700, (A6)
                move.w  #$8D3F, (A6)
                move.w  #$857C, (A6)
                move.w  ($FFFFF60C).w, D0
                andi.b  #$BF, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$941F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000082, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x004FA0:
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   Offset_0x004FA0
                move.w  #$8F02, (A5)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$941F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000083, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x004FCE:
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   Offset_0x004FCE
                move.w  #$8F02, (A5)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$941F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$60000082, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x004FFC:
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   Offset_0x004FFC
                move.w  #$8F02, (A5)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$9403937F, (A5)
                move.w  #$9780, (A5)
                move.l  #$7C000083, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x00502A:
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   Offset_0x00502A
                move.w  #$8F02, (A5)
                clr.l   ($FFFFF616).w
                clr.l   ($FFFFF61A).w
                clr.b   ($FFFFDB23).w
                lea     ($FFFFF800).w, A1
                moveq   #$00, D0
                move.w  #$00A0, D1
Offset_0x00504C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00504C
                lea     ($FFFFE000).w, A1
                moveq   #$00, D0
                move.w  #$0100, D1
Offset_0x00505C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00505C
                lea     ($FFFFD000).w, A1
                moveq   #$00, D0
                move.w  #$0300, D1
Offset_0x00506C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00506C
                lea     ($FFFFAC00).w, A1
                moveq   #$00, D0
                move.w  #$00FF, D1
Offset_0x00507C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00507C
                lea     ($FFFFB000).w, A1
                moveq   #$00, D0
                move.w  #$07FF, D1
Offset_0x00508C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00508C
                move    #$2300, SR
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8F02, (A6)
                bsr     Offset_0x006C36
                bsr     Offset_0x006C80
                move.w  #$0000, ($FFFFDB0A).w
                moveq   #$3C, D0
                bsr     RunPLC_ROM                             ; Offset_0x001748
                clr.b   ($FFFFF711).w
                move.l  #$00000000, ($FFFFEE00).w
                move.l  #$00000000, ($FFFFEE04).w
                move.l  #$00000000, ($FFFFEEF0).w
                move.l  #$00000000, ($FFFFEEF4).w
                cmpi.w  #$0001, (Player_Selected_Flag).w             ; $FFFFFF7A
                bgt.s   SS_Load_Miles                          ; Offset_0x0050EC
                move.b  #$09, ($FFFFB000).w  ; Carrega o objeto 0x09 - Sonic no Special Stage
                tst.w   (Player_Selected_Flag).w                     ; $FFFFFF7A
                bne.s   SS_Load_Objects                        ; Offset_0x0050F2
SS_Load_Miles: ; Offset_0x0050EC:
                move.b  #$10, ($FFFFB040).w  ; Carrega o objeto 0x10 - Miles no Special Stage
SS_Load_Objects: ; Offset_0x0050F2:
                move.b  #$5E, ($FFFFB080).w  ; Carrega o objeto 0x5E - Mostradores de anéis
                move.b  #$5F, ($FFFFB0C0).w  ; Carrega o objeto 0x5F - Bandeiras e "START"
                move.b  #$87, ($FFFFB100).w  ; Carrega o objeto 0x87 - Números dos contadores de anéis
                move.w  #$0080, ($FFFFF73E).w
                move.w  #$0036, ($FFFFF740).w
                bsr     Offset_0x006CEC
                bsr     SS_Load_Sonic_Miles_Sprites            ; Offset_0x006D76
                bsr     SS_Load_Palette                        ; Offset_0x00774E
                move.l  #$000C0000, ($FFFFDB12).w
                clr.w   ($FFFFF602).w
                clr.w   ($FFFFF66A).w
Offset_0x00512C:
                move.b  #$0A, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                move.b  ($FFFFDB0D).w, D0
                bne.s   Offset_0x00512C
                bsr     Offset_0x0055A2
Offset_0x005140:
                move.b  #$0A, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                bsr     Offset_0x0055A2
                bsr     Offset_0x0054B2
                bsr     Offset_0x0054D2
                move.b  ($FFFFDB1F).w, D0
                subq.w  #$01, D0
                bne.s   Offset_0x005140
                jsr     (SS_Load_Check_Point)                  ; Offset_0x035078
                bsr     Offset_0x006D86
                jsr     (Load_Objects)                         ; Offset_0x015F22
                jsr     (Build_Sprites)                        ; Offset_0x01658A
                bsr     RunPLC                                 ; Offset_0x001646
                move.b  #$1A, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                move.w  #Special_Stage_Snd, D0  ; $0092
                bsr     Play_Music                             ; Offset_0x00131A
                move.w  ($FFFFF60C).w, D0
                ori.b   #$40, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     Pal_MakeWhite                          ; Offset_0x0024A4
Special_Stage_Main_Loop: ; Offset_0x00519C:
                bsr     Pause                                  ; Offset_0x001344
                move.w  ($FFFFF604).w, ($FFFFF602).w
                move.w  ($FFFFF606).w, ($FFFFF66A).w
                cmpi.b  #gm_SpecialStage, (Game_Mode).w         ; $10, $FFFFF600
                bne     Offset_0x0053BE
                move.b  #$0A, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                bsr     Offset_0x0055A2
                bsr     Offset_0x0075FE
                bsr     Offset_0x0054B2
                bsr     Offset_0x0054D2
                bsr     Offset_0x006D86
                jsr     (Load_Objects)                         ; Offset_0x015F22
                jsr     (Build_Sprites)                        ; Offset_0x01658A
                bsr     RunPLC                                 ; Offset_0x001646
                tst.b   ($FFFFDB23).w
                beq.s   Special_Stage_Main_Loop                ; Offset_0x00519C
                moveq   #$3D, D0
                bsr     LoadPLC                                ; Offset_0x0015DA
Offset_0x0051F0:
                bsr     Pause                                  ; Offset_0x001344
                cmpi.b  #gm_SpecialStage, (Game_Mode).w         ; $10, $FFFFF600
                bne     Offset_0x0053BE
                move.b  #$0A, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                bsr     Offset_0x0055A2
                bsr     Offset_0x0075FE
                bsr     Offset_0x0054B2
                bsr     Offset_0x0054D2
                bsr     Offset_0x006D86
                bsr     Offset_0x0053DE
                tst.b   ($FFFFDB87).w
                beq.s   Offset_0x005240
                move.w  ($FFFFF604).w, D0
                andi.w  #$8080, D0
                move.w  D0, ($FFFFF602).w
                move.w  ($FFFFF606).w, D0
                andi.w  #$8080, D0
                move.w  D0, ($FFFFF66A).w
                bra.s   Offset_0x00524C
Offset_0x005240:
                move.w  ($FFFFF604).w, ($FFFFF602).w
                move.w  ($FFFFF606).w, ($FFFFF66A).w
Offset_0x00524C:
                jsr     (Load_Objects)                         ; Offset_0x015F22
                tst.b   ($FFFFDB86).w
                bne.s   Offset_0x005264
                jsr     (Build_Sprites)                        ; Offset_0x01658A
                bsr     RunPLC                                 ; Offset_0x001646
                bra.s   Offset_0x0051F0
Offset_0x005264:
                andi.b  #$07, (Emeralds_Count).w                     ; $FFFFFF91
                tst.b   ($FFFFFE00).w
                beq.s   Offset_0x005282
                lea     ($FFFFFF80).w, A0
                move.w  (A0)+, D0
                add.w   (A0)+, D0
                add.w   (A0)+, D0
                add.w   (A0)+, D0
                add.w   (A0)+, D0
                add.w   (A0)+, D0
                bra.s   Offset_0x00528A
Offset_0x005282:
                move.w  ($FFFFFE20).w, D0
                add.w   ($FFFFFED0).w, D0
Offset_0x00528A:
                cmp.w   ($FFFFDB9A).w, D0
                bne.s   Offset_0x005294
                st      ($FFFFFF42).w
Offset_0x005294:
                bsr     Pal_MakeFlash                          ; Offset_0x00254E
                tst.w   ($FFFFFF6A).w
                bne     Offset_0x0053B0
                move    #$2700, SR
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8230, (A6)
                move.w  #$8407, (A6)
                move.w  #$9001, (A6)
                move.w  #$8C81, (A6)
                bsr     ClearScreen                            ; Offset_0x0011C4
                jsr     (Head_Up_Display_Base)                 ; Offset_0x040DC4
                clr.w   ($FFFFDC00).w
                move.l  #$FFFFDC00, ($FFFFDCFC).w
                move    #$2300, SR
                moveq   #$27, D0
                bsr     PalLoad2                               ; Offset_0x0026EA
                moveq   #$00, D0
                bsr     LoadPLC2                               ; Offset_0x00160C
                move.l  #$40400000, D0
                lea     Load_SS_Result_Title_Cards(PC), A0     ; Offset_0x0077CE
                jsr     (Init_SS_Title_Card_Art)               ; Offset_0x015742
                move.l  #$72000002, (VDP_Control_Port)               ; $00C00004
                lea     (SS_Results_Spr), A0                   ; Offset_0x07EB58
                bsr     NemesisDec                             ; Offset_0x00149A
                move.w  (Player_Selected_Flag).w, D0                 ; $FFFFFF7A
                beq.s   Offset_0x005318
                subq.w  #$01, D0
                beq.s   Offset_0x005314
                clr.w   ($FFFFFE20).w
                bra.s   Offset_0x005318
Offset_0x005314:
                clr.w   ($FFFFFED0).w
Offset_0x005318:
                move.w  ($FFFFFE20).w, ($FFFFF7D2).w
                move.w  ($FFFFFED0).w, ($FFFFF7D4).w
                clr.w   ($FFFFFF6E).w
                tst.b   ($FFFFFF90).w
                beq.s   Offset_0x005334
                move.w  #$03E8, ($FFFFFF6E).w
Offset_0x005334:
                move.b  #$01, ($FFFFFE1F).w
                move.b  #$01, ($FFFFF7D6).w
                move.w  #Results_Snd, D0        ; $009A
                jsr     (Play_Sfx)                             ; Offset_0x00132C
                lea     ($FFFFAC00).w, A1
                moveq   #$00, D0
                move.w  #$00FF, D1
Offset_0x005354:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x005354
                lea     ($FFFFB000).w, A1
                moveq   #$00, D0
                move.w  #$07FF, D1
Offset_0x005364:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x005364
                move.b  #$6F, ($FFFFB800).w  ; Carrega o objeto 0x6F - Resultados do Special Stage
Offset_0x005370:
                move.b  #$08, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                jsr     (Load_Objects)                         ; Offset_0x015F22
                jsr     (Build_Sprites)                        ; Offset_0x01658A
                bsr     RunPLC                                 ; Offset_0x001646
                tst.w   ($FFFFFE02).w
                beq.s   Offset_0x005370
                tst.l   ($FFFFF680).w
                bne.s   Offset_0x005370
                move.w  #Special_Stage_Sfx, D0 ; $00CA
                bsr     Play_Sfx                               ; Offset_0x00132C
                bsr     Pal_MakeFlash                          ; Offset_0x00254E
                tst.w   ($FFFFFF6A).w
                bne.s   Offset_0x0053B0
                move.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
                rts
Offset_0x0053B0:
                move.w  #$0003, ($FFFFFF10).w
                move.b  #gm_Two_Player_Results, (Game_Mode).w   ; $18, $FFFFF600
                rts
Offset_0x0053BE:
                move.b  #$FF, ($FFFFFFC0).w
                move.b  #$08, (VBlank_Index).w                       ; $FFFFF62A
                bra     DelayProgram                           ; Offset_0x00333E
;-------------------------------------------------------------------------------  
Offset_0x0053CE:
                dc.w    $0EEE, $0CCC, $0AAA, $0888, $0888, $0AAA, $0CCC, $0EEE
;-------------------------------------------------------------------------------  
Offset_0x0053DE:
                move.b  ($FFFFFE0F).w, D0
                andi.b  #$03, D0
                bne.s   Offset_0x005410
                move.b  ($FFFFDB9E).w, D0
                addq.b  #$01, ($FFFFDB9E).w
                andi.w  #$0007, D0
                add.w   D0, D0
                move.w  Offset_0x0053CE(PC, D0), ($FFFFFB1C).w
                move.b  ($FFFFDB9F).w, D0
                addq.b  #$01, ($FFFFDB9F).w
                andi.w  #$0007, D0
                add.w   D0, D0
                move.w  Offset_0x0053CE(PC, D0), ($FFFFFB1E).w
Offset_0x005410:
                cmpi.b  #$06, (Stage_Id).w                           ; $FFFFFE16
                bne.s   Offset_0x005422
                cmpi.b  #$03, ($FFFFFE17).w
                beq     Offset_0x00547A
Offset_0x005422:
                tst.b   ($FFFFDB98).w
                beq.s   Offset_0x005458
                move.b  ($FFFFFE0F).w, D0
                andi.b  #$07, D0
                bne.s   Offset_0x005458
                move.b  ($FFFFDB99).w, D0
                addq.b  #$01, ($FFFFDB99).w
                andi.b  #$03, D0
                add.w   D0, D0
                move.w  D0, D1
                add.w   D0, D0
                add.w   D1, D0
                move.w  Offset_0x00545A+$08(PC, D0), ($FFFFFB76).w
                move.w  Offset_0x00545A+$0A(PC, D0), ($FFFFFB78).w
                move.w  Offset_0x00545A+$0C(PC, D0), ($FFFFFB7A).w
Offset_0x005458:
                rts
;-------------------------------------------------------------------------------                  
Offset_0x00545A:
                dc.w    $00EE, $00C0, $00EE, $00C0, $00EE, $00CC, $0088, $00E0
                dc.w    $00C0, $0080, $0EE0, $0CC0, $0880, $0E0E, $0C0C, $0808
;-------------------------------------------------------------------------------  
Offset_0x00547A:
                tst.b   ($FFFFDB87).w
                beq.s   Offset_0x005422
                moveq   #$00, D0
                move.b  ($FFFFFE0F).w, D0
                andi.b  #$01, D0
                bne     Offset_0x005422
                move.w  ($FFFFFE20).w, D2
                add.w   ($FFFFFED0).w, D2
                cmp.w   ($FFFFDB8C).w, D2
                blt     Offset_0x005422
                lea     ($FFFFFB02).w, A0
                move.l  A0, A1
                move.w  (A0)+, D0
                moveq   #$0B, D1
Offset_0x0054A8:
                move.w  (A0)+, (A1)+
                dbra    D1, Offset_0x0054A8
                move.w  D0, (A1)
                rts
Offset_0x0054B2:
                cmpi.b  #$04, ($FFFFDB0D).w
                bne.s   Offset_0x0054D0
                move.l  #$FFFF6A60, A0
                moveq   #$00, D0
                move.b  ($FFFFDB10).w, D0
                add.w   D0, D0
                adda.w  $00(A0, D0), A0
                move.l  A0, ($FFFFDB82).w
Offset_0x0054D0:
                rts
Offset_0x0054D2:
                cmpi.b  #$04, ($FFFFDB0D).w
                bne     Offset_0x00557A
                moveq   #$00, D0
                move.b  ($FFFFDB0A).w, D0
                cmp.b   ($FFFFDB4C).w, D0
                beq     Offset_0x00557A
                move.b  D0, ($FFFFDB4C).w
                move.l  ($FFFFDB8E).w, A1
                move.b  $00(A1, D0), D3
                andi.w  #$007F, D3
                lea     (Offset_0x00559C), A0
                move.b  $00(A0, D3), D3
                add.w   D3, D3
                add.w   D3, D3
                move.l  ($FFFFDB88).w, A0
Offset_0x00550C:
                bsr     Offset_0x006F30
                bne.s   Offset_0x00557A
                moveq   #$00, D0
                move.b  (A0)+, D0
                bmi.s   Offset_0x005550
                move.b  D0, D1
                andi.b  #$40, D1
                bne.s   Offset_0x005538
                addq.w  #$01, ($FFFFDB9A).w
                move.b  #$60, (A1)
                add.w   D0, D0
                add.w   D0, D0
                add.w   D3, D0
                move.w  D0, $0030(A1)
                move.b  (A0)+, $0026(A1)
                bra.s   Offset_0x00550C
Offset_0x005538:
                andi.w  #$003F, D0
                move.b  #$61, (A1)
                add.w   D0, D0
                add.w   D0, D0
                add.w   D3, D0
                move.w  D0, $0030(A1)
                move.b  (A0)+, $0026(A1)
                bra.s   Offset_0x00550C
Offset_0x005550:
                move.l  A0, ($FFFFDB88).w
                addq.b  #$01, D0
                beq.s   Offset_0x00557A
                addq.b  #$01, D0
                beq.s   Offset_0x005576
                addq.b  #$01, D0
                beq.s   Offset_0x00556A
                st      ($FFFFDB95).w
                sf      ($FFFFDBA0).w
                bra.s   Offset_0x005576
Offset_0x00556A:
                tst.b   ($FFFFFE00).w
                bne.s   Offset_0x005576
                move.b  #$59, (A1)
                rts
Offset_0x005576:
                move.b  #$5A, (A1)
Offset_0x00557A:
                rts
;-------------------------------------------------------------------------------  
Offset_0x00557C:
                dc.l    $40000002, $47000002, $4E000002, $55000002
                dc.l    $40000003, $47000003, $4E000003, $55000003
;-------------------------------------------------------------------------------  
Offset_0x00559C:
                dc.b    $18, $18, $0C, $10, $0B, $00
;-------------------------------------------------------------------------------  
Offset_0x0055A2:
                moveq   #$00, D0
                move.b  ($FFFFDB0D).w, D0
                cmpi.b  #$04, D0
                bge     Offset_0x006BA4
                add.w   D0, D0
                add.w   D0, D0
                bne     Offset_0x00566E
                move.l  ($FFFFDB2C).w, ($FFFFDB28).w
                move.b  ($FFFFDB10).w, ($FFFFDB39).w
                moveq   #$00, D1
                moveq   #$00, D2
                moveq   #$00, D3
                moveq   #$00, D4
                move.b  ($FFFFDB0A).w, D1
                move.b  ($FFFFDB0B).w, D2
                move.l  ($FFFFDB8E).w, A1
                move.b  $00(A1, D1), D3
                andi.b  #$7F, D3
                move.b  D3, ($FFFFDB08).w
                move.w  D3, D1
                add.w   D3, D3
                lea     (Offset_0x006376), A1
                adda.w  $00(A1, D3), A1
                adda.w  D2, A1
                moveq   #$00, D4
                move.b  (A1), D4
                move.b  D4, ($FFFFDB10).w
                lsl.w   #$02, D4
                lea     (Offset_0x0063D8), A1
                move.l  $00(A1, D4), A0
                move.l  A0, A1
                moveq   #$00, D2
                move.b  (A0)+, D2
                move.b  (A0)+, D2
                move.b  (A0)+, D2
                lsl.w   #$08, D2
                move.b  (A0)+, D2
                addq.w  #$04, D2
                adda.w  D2, A1
                move.l  A1, A2
                moveq   #$00, D2
                move.b  (A1)+, D2
                move.b  (A1)+, D2
                move.b  (A1)+, D2
                lsl.w   #$08, D2
                move.b  (A1)+, D2
                addq.w  #$04, D2
                adda.w  D2, A2
                move.b  (A2)+, D2
                move.b  (A2)+, D2
                move.b  (A2)+, D2
                move.b  (A2)+, D2
                move.l  A0, ($FFFFDB00).w
                move.l  A0, ($FFFFDB2C).w
                move.l  A1, ($FFFFDB04).w
                move.l  A2, ($FFFFDB3A).w
                lea     (Offset_0x00559C), A4
                move.b  $00(A4, D1), D2
                move.b  ($FFFFDB0B).w, ($FFFFDB09).w
                addq.b  #$01, ($FFFFDB0B).w
                cmp.b   ($FFFFDB0B).w, D2
                bne.s   Offset_0x00566E
                move.b  #$00, ($FFFFDB0B).w
                move.b  ($FFFFDB0A).w, ($FFFFDB22).w
                addq.b  #$01, ($FFFFDB0A).w
Offset_0x00566E:
                tst.b   ($FFFFDB0C).w
                beq.s   Offset_0x005678
                addi.w  #$0010, D0
Offset_0x005678:
                lea     (Offset_0x00557C), A3
                move.l  $00(A3, D0), A3
                move.l  A3, (VDP_Control_Port)                       ; $00C00004
                lea     (VDP_Data_Port), A6                          ; $00C00000
                bsr     Offset_0x006BA4
                move.l  ($FFFFDB00).w, A0
                move.l  ($FFFFDB04).w, A1
                move.l  ($FFFFDB3A).w, A2
                lea     ($FFFFDB3E).w, A3
                movem.w (A3)+, D2-D7
                lea     (Offset_0x0064B8), A3
                lea     (Offset_0x006980), A4
                move.w  #$FFF8, A5
                moveq   #$00, D0
                tst.b   ($FFFFDB0E).w
                bne     Offset_0x005D26
Offset_0x0056C0:                
                addq.w  #$01, A5
                cmpa.w  #$0000, A5
                beq     Offset_0x005CF4
Offset_0x0056CA:                
                moveq   #$00, D1
                subq.w  #$01, D7
                bpl.s   Offset_0x0056D4
                move.b  (A0)+, D6
                moveq   #$07, D7
Offset_0x0056D4:
                add.b   D6, D6
                bcc.s   Offset_0x005724
                subq.b  #$01, D5
                bpl.s   Offset_0x0056E0
                move.b  (A1)+, D4
                moveq   #$07, D5
Offset_0x0056E0:
                add.b   D4, D4
                bcc.s   Offset_0x005704
                moveq   #$0A, D0
                sub.b   D5, D0
                subq.b  #$03, D0
                add.w   D0, D0
                move.w  Offset_0x0056F4(PC, D0), D0
                jmp     Offset_0x0056F4(PC, D0)
Offset_0x0056F4:
                dc.w    Offset_0x00589A-Offset_0x0056F4
                dc.w    Offset_0x005870-Offset_0x0056F4
                dc.w    Offset_0x005846-Offset_0x0056F4
                dc.w    Offset_0x00581C-Offset_0x0056F4
                dc.w    Offset_0x0057F2-Offset_0x0056F4
                dc.w    Offset_0x0057D2-Offset_0x0056F4
                dc.w    Offset_0x0057A2-Offset_0x0056F4
                dc.w    Offset_0x00577A-Offset_0x0056F4
Offset_0x005704:
                moveq   #$06, D0
                sub.b   D5, D0
                addq.b  #$01, D0
                add.w   D0, D0
                move.w  Offset_0x005714(PC, D0), D0
                jmp     Offset_0x005714(PC, D0)
Offset_0x005714:
                dc.w    Offset_0x0059B6-Offset_0x005714
                dc.w    Offset_0x00599E-Offset_0x005714
                dc.w    Offset_0x005978-Offset_0x005714
                dc.w    Offset_0x005952-Offset_0x005714
                dc.w    Offset_0x00592C-Offset_0x005714
                dc.w    Offset_0x005906-Offset_0x005714
                dc.w    Offset_0x0058E0-Offset_0x005714
                dc.w    Offset_0x0058C4-Offset_0x005714
Offset_0x005724:
                subq.b  #$01, D3
                bpl.s   Offset_0x005738
                move.b  (A2)+, D2
                cmpi.b  #$FF, D2
                bne.s   Offset_0x005736
                moveq   #$00, D3
                bra     Offset_0x0056C0
Offset_0x005736:
                moveq   #$07, D3
Offset_0x005738:
                add.b   D2, D2
                bcc.s   Offset_0x00575A
                moveq   #$07, D0
                sub.b   D3, D0
                add.b   D0, D0
                move.w  Offset_0x00574A(PC, D0), D0
                jmp     Offset_0x00574A(PC, D0)
Offset_0x00574A:
                dc.w    Offset_0x005B6A-Offset_0x00574A
                dc.w    Offset_0x005B2E-Offset_0x00574A
                dc.w    Offset_0x005AF2-Offset_0x00574A
                dc.w    Offset_0x005AB6-Offset_0x00574A
                dc.w    Offset_0x005A7A-Offset_0x00574A
                dc.w    Offset_0x005A3E-Offset_0x00574A
                dc.w    Offset_0x005A02-Offset_0x00574A
                dc.w    Offset_0x0059D0-Offset_0x00574A
Offset_0x00575A:
                moveq   #$06, D0
                sub.b   D3, D0
                addq.b  #$01, D0
                add.b   D0, D0
                move.w  Offset_0x00576A(PC, D0), D0
                jmp     Offset_0x00576A(PC, D0)
Offset_0x00576A:
                dc.w    Offset_0x005CD0-Offset_0x00576A
                dc.w    Offset_0x005CAE-Offset_0x00576A
                dc.w    Offset_0x005C7E-Offset_0x00576A
                dc.w    Offset_0x005C4E-Offset_0x00576A
                dc.w    Offset_0x005C1E-Offset_0x00576A
                dc.w    Offset_0x005BEE-Offset_0x00576A
                dc.w    Offset_0x005BBE-Offset_0x00576A
                dc.w    Offset_0x005B98-Offset_0x00576A
Offset_0x00577A:
                moveq   #$00, D0
                move.b  (A1)+, D0
                lsl.w   #$02, D0
                move.b  (A1)+, D4
                rol.b   #$02, D4
                move.b  D4, D1
                andi.b  #$03, D1
                or.b    D1, D0
                addi.w  #$0040, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                ori.w   #$6000, D0
                move.w  D0, (A6)
                moveq   #$06, D5
                bra     Offset_0x0056CA
Offset_0x0057A2:
                move.b  D4, D0
                lsl.w   #$02, D0
                andi.w  #$0200, D0
                move.b  (A1)+, D1
                lsl.w   #$01, D1
                or.w    D1, D0
                move.b  (A1)+, D4
                rol.b   #$01, D4
                move.b  D4, D1
                andi.b  #$01, D1
                or.b    D1, D0
                addi.w  #$0040, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                ori.w   #$6000, D0
                move.w  D0, (A6)
                moveq   #$07, D5
                bra     Offset_0x0056CA
Offset_0x0057D2:
                move.b  D4, D0
                lsl.w   #$02, D0
                andi.w  #$0300, D0
                move.b  (A1)+, D0
                addi.w  #$0040, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                ori.w   #$6000, D0
                move.w  D0, (A6)
                moveq   #$00, D5
                bra     Offset_0x0056CA
Offset_0x0057F2:
                move.b  D4, D0
                lsl.w   #$02, D0
                andi.w  #$0380, D0
                move.b  (A1)+, D4
                ror.b   #$01, D4
                move.b  D4, D1
                andi.b  #$7F, D1
                or.b    D1, D0
                addi.w  #$0040, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                ori.w   #$6000, D0
                move.w  D0, (A6)
                moveq   #$01, D5
                bra     Offset_0x0056CA
Offset_0x00581C:
                move.b  D4, D0
                lsl.w   #$02, D0
                andi.w  #$03C0, D0
                move.b  (A1)+, D4
                ror.b   #$02, D4
                move.b  D4, D1
                andi.b  #$3F, D1
                or.b    D1, D0
                addi.w  #$0040, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                ori.w   #$6000, D0
                move.w  D0, (A6)
                moveq   #$02, D5
                bra     Offset_0x0056CA
Offset_0x005846:
                move.b  D4, D0
                lsl.w   #$02, D0
                andi.w  #$03E0, D0
                move.b  (A1)+, D4
                ror.b   #$03, D4
                move.b  D4, D1
                andi.b  #$1F, D1
                or.b    D1, D0
                addi.w  #$0040, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                ori.w   #$6000, D0
                move.w  D0, (A6)
                moveq   #$03, D5
                bra     Offset_0x0056CA
Offset_0x005870:
                move.b  D4, D0
                lsl.w   #$02, D0
                andi.w  #$03F0, D0
                move.b  (A1)+, D4
                ror.b   #$04, D4
                move.b  D4, D1
                andi.b  #$0F, D1
                or.b    D1, D0
                addi.w  #$0040, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                ori.w   #$6000, D0
                move.w  D0, (A6)
                moveq   #$04, D5
                bra     Offset_0x0056CA
Offset_0x00589A:
                move.b  D4, D0
                lsl.w   #$02, D0
                andi.w  #$03F8, D0
                move.b  (A1)+, D4
                rol.b   #$03, D4
                move.b  D4, D1
                andi.b  #$07, D1
                or.b    D1, D0
                addi.w  #$0040, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                ori.w   #$6000, D0
                move.w  D0, (A6)
                moveq   #$05, D5
                bra     Offset_0x0056CA
Offset_0x0058C4:
                move.b  (A1)+, D4
                ror.b   #$02, D4
                move.b  D4, D0
                andi.w  #$003F, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                ori.w   #$6000, D0
                move.w  D0, (A6)
                moveq   #$02, D5
                bra     Offset_0x0056CA
Offset_0x0058E0:
                move.b  D4, D0
                lsr.b   #$02, D0
                andi.w  #$0020, D0
                move.b  (A1)+, D4
                ror.b   #$03, D4
                move.b  D4, D1
                andi.b  #$1F, D1
                or.b    D1, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                ori.w   #$6000, D0
                move.w  D0, (A6)
                moveq   #$03, D5
                bra     Offset_0x0056CA
Offset_0x005906:
                move.b  D4, D0
                lsr.b   #$02, D0
                andi.w  #$0030, D0
                move.b  (A1)+, D4
                ror.b   #$04, D4
                move.b  D4, D1
                andi.b  #$0F, D1
                or.b    D1, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                ori.w   #$6000, D0
                move.w  D0, (A6)
                moveq   #$04, D5
                bra     Offset_0x0056CA
Offset_0x00592C:
                move.b  D4, D0
                lsr.b   #$02, D0
                andi.w  #$0038, D0
                move.b  (A1)+, D4
                rol.b   #$03, D4
                move.b  D4, D1
                andi.b  #$07, D1
                or.b    D1, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                ori.w   #$6000, D0
                move.w  D0, (A6)
                moveq   #$05, D5
                bra     Offset_0x0056CA
Offset_0x005952:
                move.b  D4, D0
                lsr.b   #$02, D0
                andi.w  #$003C, D0
                move.b  (A1)+, D4
                rol.b   #$02, D4
                move.b  D4, D1
                andi.b  #$03, D1
                or.b    D1, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                ori.w   #$6000, D0
                move.w  D0, (A6)
                moveq   #$06, D5
                bra     Offset_0x0056CA
Offset_0x005978:
                move.b  D4, D0
                lsr.b   #$02, D0
                andi.w  #$003E, D0
                move.b  (A1)+, D4
                rol.b   #$01, D4
                move.b  D4, D1
                andi.b  #$01, D1
                or.b    D1, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                ori.w   #$6000, D0
                move.w  D0, (A6)
                moveq   #$07, D5
                bra     Offset_0x0056CA
Offset_0x00599E:
                lsr.b   #$02, D4
                andi.w  #$003F, D4
                add.w   D4, D4
                move.w  $00(A3, D4), D4
                ori.w   #$6000, D4
                move.w  D4, (A6)
                moveq   #$00, D5
                bra     Offset_0x0056CA
Offset_0x0059B6:
                ror.b   #$02, D4
                move.b  D4, D0
                andi.w  #$003F, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                ori.w   #$6000, D0
                move.w  D0, (A6)
                moveq   #$01, D5
                bra     Offset_0x0056CA
Offset_0x0059D0:
                move.b  (A2)+, D2
                ror.b   #$01, D2
                move.b  D2, D0
                andi.w  #$007F, D0
                moveq   #$01, D3
                cmpi.b  #$7F, D0
                beq     Offset_0x0056C0
                addi.w  #$0040, D0
                add.w   D0, D0
                add.w   D0, D0
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x0059F8:
                move.w  D1, (A6)
                dbra    D0, Offset_0x0059F8
                bra     Offset_0x0056CA
Offset_0x005A02:
                move.b  D2, D1
                lsr.b   #$01, D1
                andi.b  #$40, D1
                move.b  (A2)+, D2
                ror.b   #$02, D2
                move.b  D2, D0
                andi.w  #$003F, D0
                or.b    D1, D0
                moveq   #$02, D3
                cmpi.b  #$7F, D0
                beq     Offset_0x0056C0
                addi.w  #$0040, D0
                add.w   D0, D0
                add.w   D0, D0
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x005A34:
                move.w  D1, (A6)
                dbra    D0, Offset_0x005A34
                bra     Offset_0x0056CA
Offset_0x005A3E:
                move.b  D2, D1
                lsr.b   #$01, D1
                andi.b  #$60, D1
                move.b  (A2)+, D2
                ror.b   #$03, D2
                move.b  D2, D0
                andi.w  #$001F, D0
                or.b    D1, D0
                moveq   #$03, D3
                cmpi.b  #$7F, D0
                beq     Offset_0x0056C0
                addi.w  #$0040, D0
                add.w   D0, D0
                add.w   D0, D0
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x005A70:
                move.w  D1, (A6)
                dbra    D0, Offset_0x005A70
                bra     Offset_0x0056CA
Offset_0x005A7A:
                move.b  D2, D1
                lsr.b   #$01, D1
                andi.b  #$70, D1
                move.b  (A2)+, D2
                ror.b   #$04, D2
                move.b  D2, D0
                andi.w  #$000F, D0
                or.b    D1, D0
                moveq   #$04, D3
                cmpi.b  #$7F, D0
                beq     Offset_0x0056C0
                addi.w  #$0040, D0
                add.w   D0, D0
                add.w   D0, D0
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x005AAC:
                move.w  D1, (A6)
                dbra    D0, Offset_0x005AAC
                bra     Offset_0x0056CA
Offset_0x005AB6:
                move.b  D2, D1
                lsr.b   #$01, D1
                andi.b  #$78, D1
                move.b  (A2)+, D2
                rol.b   #$03, D2
                move.b  D2, D0
                andi.w  #$0007, D0
                or.b    D1, D0
                moveq   #$05, D3
                cmpi.b  #$7F, D0
                beq     Offset_0x0056C0
                addi.w  #$0040, D0
                add.w   D0, D0
                add.w   D0, D0
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x005AE8:
                move.w  D1, (A6)
                dbra    D0, Offset_0x005AE8
                bra     Offset_0x0056CA
Offset_0x005AF2:
                move.b  D2, D1
                lsr.b   #$01, D1
                andi.b  #$7C, D1
                move.b  (A2)+, D2
                rol.b   #$02, D2
                move.b  D2, D0
                andi.w  #$0003, D0
                or.b    D1, D0
                moveq   #$06, D3
                cmpi.b  #$7F, D0
                beq     Offset_0x0056C0
                addi.w  #$0040, D0
                add.w   D0, D0
                add.w   D0, D0
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x005B24:
                move.w  D1, (A6)
                dbra    D0, Offset_0x005B24
                bra     Offset_0x0056CA
Offset_0x005B2E:
                move.b  D2, D1
                lsr.b   #$01, D1
                andi.b  #$7E, D1
                move.b  (A2)+, D2
                rol.b   #$01, D2
                move.b  D2, D0
                andi.w  #$0001, D0
                or.b    D1, D0
                moveq   #$07, D3
                cmpi.b  #$7F, D0
                beq     Offset_0x0056C0
                addi.w  #$0040, D0
                add.w   D0, D0
                add.w   D0, D0
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x005B60:
                move.w  D1, (A6)
                dbra    D0, Offset_0x005B60
                bra     Offset_0x0056CA
Offset_0x005B6A:
                lsr.b   #$01, D2
                andi.w  #$007F, D2
                moveq   #$00, D3
                cmpi.b  #$7F, D2
                beq     Offset_0x0056C0
                addi.w  #$0040, D2
                add.w   D2, D2
                add.w   D2, D2
                move.w  $00(A4, D2), D1
                move.w  $02(A4, D2), D0
                ori.w   #$E000, D1
Offset_0x005B8E:
                move.w  D1, (A6)
                dbra    D0, Offset_0x005B8E
                bra     Offset_0x0056CA
Offset_0x005B98:
                move.b  (A2)+, D2
                ror.b   #$02, D2
                move.b  D2, D0
                andi.w  #$003F, D0
                add.w   D0, D0
                add.w   D0, D0
                moveq   #$02, D3
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x005BB4:
                move.w  D1, (A6)
                dbra    D0, Offset_0x005BB4
                bra     Offset_0x0056CA
Offset_0x005BBE:
                move.b  D2, D0
                lsr.b   #$02, D0
                andi.w  #$0020, D0
                move.b  (A2)+, D2
                ror.b   #$03, D2
                move.b  D2, D1
                andi.b  #$1F, D1
                or.b    D1, D0
                moveq   #$03, D3
                add.w   D0, D0
                add.w   D0, D0
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x005BE4:
                move.w  D1, (A6)
                dbra    D0, Offset_0x005BE4
                bra     Offset_0x0056CA
Offset_0x005BEE:
                move.b  D2, D0
                lsr.b   #$02, D0
                andi.w  #$0030, D0
                move.b  (A2)+, D2
                ror.b   #$04, D2
                move.b  D2, D1
                andi.b  #$0F, D1
                or.b    D1, D0
                add.w   D0, D0
                add.w   D0, D0
                moveq   #$04, D3
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x005C14:
                move.w  D1, (A6)
                dbra    D0, Offset_0x005C14
                bra     Offset_0x0056CA
Offset_0x005C1E:
                move.b  D2, D0
                lsr.b   #$02, D0
                andi.w  #$0038, D0
                move.b  (A2)+, D2
                rol.b   #$03, D2
                move.b  D2, D1
                andi.b  #$07, D1
                or.b    D1, D0
                add.w   D0, D0
                add.w   D0, D0
                moveq   #$05, D3
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x005C44:
                move.w  D1, (A6)
                dbra    D0, Offset_0x005C44
                bra     Offset_0x0056CA
Offset_0x005C4E:
                move.b  D2, D0
                lsr.b   #$02, D0
                andi.w  #$003C, D0
                move.b  (A2)+, D2
                rol.b   #$02, D2
                move.b  D2, D1
                andi.b  #$03, D1
                or.b    D1, D0
                add.w   D0, D0
                add.w   D0, D0
                moveq   #$06, D3
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x005C74:
                move.w  D1, (A6)
                dbra    D0, Offset_0x005C74
                bra     Offset_0x0056CA
Offset_0x005C7E:
                move.b  D2, D0
                lsr.b   #$02, D0
                andi.w  #$003E, D0
                move.b  (A2)+, D2
                rol.b   #$01, D2
                move.b  D2, D1
                andi.b  #$01, D1
                or.b    D1, D0
                add.w   D0, D0
                add.w   D0, D0
                moveq   #$07, D3
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x005CA4:
                move.w  D1, (A6)
                dbra    D0, Offset_0x005CA4
                bra     Offset_0x0056CA
Offset_0x005CAE:
                lsr.b   #$02, D2
                andi.w  #$003F, D2
                add.w   D2, D2
                add.w   D2, D2
                moveq   #$00, D3
                move.w  $00(A4, D2), D1
                move.w  $02(A4, D2), D0
                ori.w   #$E000, D1
Offset_0x005CC6:
                move.w  D1, (A6)
                dbra    D0, Offset_0x005CC6
                bra     Offset_0x0056CA
Offset_0x005CD0:
                ror.b   #$02, D2
                move.b  D2, D0
                andi.w  #$003F, D0
                add.w   D0, D0
                add.w   D0, D0
                moveq   #$01, D3
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x005CEA:
                move.w  D1, (A6)
                dbra    D0, Offset_0x005CEA
                bra     Offset_0x0056CA
Offset_0x005CF4:
                cmpi.b  #$03, ($FFFFDB0D).w
                beq.s   Offset_0x005D12
                move.l  A0, ($FFFFDB00).w
                move.l  A1, ($FFFFDB04).w
                move.l  A2, ($FFFFDB3A).w
                lea     ($FFFFDB4A).w, A3
                movem.w D2-D7, -(A3)
                rts
Offset_0x005D12:
                lea     ($FFFFDB3E).w, A2
                moveq   #$00, D0
                move.w  D0, (A2)+
                move.w  D0, (A2)+
                move.w  D0, (A2)+
                move.w  D0, (A2)+
                move.w  D0, (A2)+
                move.w  D0, (A2)+
                rts
Offset_0x005D26:
                addq.w  #$01, A5
                cmpa.w  #$0000, A5
                beq     Offset_0x005CF4
                lea     ($FFFFD000).w, A6
                swap.w  D0
                addi.w  #$0100, D0
                andi.w  #$0F00, D0
                adda.w  D0, A6
                swap.w  D0
Offset_0x005D42:                
                moveq   #$00, D1
                subq.w  #$01, D7
                bpl.s   Offset_0x005D4C
                move.b  (A0)+, D6
                moveq   #$07, D7
Offset_0x005D4C:
                add.b   D6, D6
                bcc.s   Offset_0x005DA0
                subq.b  #$01, D5
                bpl.s   Offset_0x005D58
                move.b  (A1)+, D4
                moveq   #$07, D5
Offset_0x005D58:
                add.b   D4, D4
                bcc.s   Offset_0x005D7E
                move.w  #$000A, D0
                sub.b   D5, D0
                subq.b  #$03, D0
                add.w   D0, D0
                move.w  Offset_0x005D6E(PC, D0), D0
                jmp     Offset_0x005D6E(PC, D0)
Offset_0x005D6E:
                dc.w    Offset_0x005F1C-Offset_0x005D6E
                dc.w    Offset_0x005EF2-Offset_0x005D6E
                dc.w    Offset_0x005EC8-Offset_0x005D6E
                dc.w    Offset_0x005E9E-Offset_0x005D6E
                dc.w    Offset_0x005E74-Offset_0x005D6E
                dc.w    Offset_0x005E54-Offset_0x005D6E
                dc.w    Offset_0x005E24-Offset_0x005D6E
                dc.w    Offset_0x005DFA-Offset_0x005D6E
Offset_0x005D7E:
                move.w  #$0006, D0
                sub.b   D5, D0
                addq.b  #$01, D0
                add.w   D0, D0
                move.w  Offset_0x005D90(PC, D0), D0
                jmp     Offset_0x005D90(PC, D0)
Offset_0x005D90:
                dc.w    Offset_0x006038-Offset_0x005D90
                dc.w    Offset_0x006020-Offset_0x005D90
                dc.w    Offset_0x005FFA-Offset_0x005D90
                dc.w    Offset_0x005FD4-Offset_0x005D90
                dc.w    Offset_0x005FAE-Offset_0x005D90
                dc.w    Offset_0x005F88-Offset_0x005D90
                dc.w    Offset_0x005F62-Offset_0x005D90
                dc.w    Offset_0x005F46-Offset_0x005D90
Offset_0x005DA0:
                subq.b  #$01, D3
                bpl.s   Offset_0x005DB4
                move.b  (A2)+, D2
                cmpi.b  #$FF, D2
                bne.s   Offset_0x005DB2
                moveq   #$00, D3
                bra     Offset_0x005D26
Offset_0x005DB2:
                moveq   #$07, D3
Offset_0x005DB4:
                add.b   D2, D2
                bcc.s   Offset_0x005DD8
                move.w  #$0007, D0
                sub.b   D3, D0
                add.b   D0, D0
                move.w  Offset_0x005DC8(PC, D0), D0
                jmp     Offset_0x005DC8(PC, D0)
Offset_0x005DC8:
                dc.w    Offset_0x0061EC-Offset_0x005DC8
                dc.w    Offset_0x0061B0-Offset_0x005DC8
                dc.w    Offset_0x006174-Offset_0x005DC8
                dc.w    Offset_0x006138-Offset_0x005DC8
                dc.w    Offset_0x0060FC-Offset_0x005DC8
                dc.w    Offset_0x0060C0-Offset_0x005DC8
                dc.w    Offset_0x006084-Offset_0x005DC8
                dc.w    Offset_0x006052-Offset_0x005DC8
Offset_0x005DD8:
                move.w  #$0006, D0
                sub.b   D3, D0
                addq.b  #$01, D0
                add.b   D0, D0
                move.w  Offset_0x005DEA(PC, D0), D0
                jmp     Offset_0x005DEA(PC, D0)
Offset_0x005DEA:
                dc.w    Offset_0x006352-Offset_0x005DEA
                dc.w    Offset_0x006330-Offset_0x005DEA
                dc.w    Offset_0x006300-Offset_0x005DEA
                dc.w    Offset_0x0062D0-Offset_0x005DEA
                dc.w    Offset_0x0062A0-Offset_0x005DEA
                dc.w    Offset_0x006270-Offset_0x005DEA
                dc.w    Offset_0x006240-Offset_0x005DEA
                dc.w    Offset_0x00621A-Offset_0x005DEA
Offset_0x005DFA:
                move.w  #$0000, D0
                move.b  (A1)+, D0
                lsl.w   #$02, D0
                move.b  (A1)+, D4
                rol.b   #$02, D4
                move.b  D4, D1
                andi.b  #$03, D1
                or.b    D1, D0
                addi.w  #$0040, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                eori.w  #$6800, D0
                move.w  D0, -(A6)
                moveq   #$06, D5
                bra     Offset_0x005D42
Offset_0x005E24:
                move.b  D4, D0
                lsl.w   #$02, D0
                andi.w  #$0200, D0
                move.b  (A1)+, D1
                lsl.w   #$01, D1
                or.w    D1, D0
                move.b  (A1)+, D4
                rol.b   #$01, D4
                move.b  D4, D1
                andi.b  #$01, D1
                or.b    D1, D0
                addi.w  #$0040, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                eori.w  #$6800, D0
                move.w  D0, -(A6)
                moveq   #$07, D5
                bra     Offset_0x005D42
Offset_0x005E54:
                move.b  D4, D0
                lsl.w   #$02, D0
                andi.w  #$0300, D0
                move.b  (A1)+, D0
                addi.w  #$0040, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                eori.w  #$6800, D0
                move.w  D0, -(A6)
                moveq   #$00, D5
                bra     Offset_0x005D42
Offset_0x005E74:
                move.b  D4, D0
                lsl.w   #$02, D0
                andi.w  #$0380, D0
                move.b  (A1)+, D4
                ror.b   #$01, D4
                move.b  D4, D1
                andi.b  #$7F, D1
                or.b    D1, D0
                addi.w  #$0040, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                eori.w  #$6800, D0
                move.w  D0, -(A6)
                moveq   #$01, D5
                bra     Offset_0x005D42
Offset_0x005E9E:
                move.b  D4, D0
                lsl.w   #$02, D0
                andi.w  #$03C0, D0
                move.b  (A1)+, D4
                ror.b   #$02, D4
                move.b  D4, D1
                andi.b  #$3F, D1
                or.b    D1, D0
                addi.w  #$0040, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                eori.w  #$6800, D0
                move.w  D0, -(A6)
                moveq   #$02, D5
                bra     Offset_0x005D42
Offset_0x005EC8:
                move.b  D4, D0
                lsl.w   #$02, D0
                andi.w  #$03E0, D0
                move.b  (A1)+, D4
                ror.b   #$03, D4
                move.b  D4, D1
                andi.b  #$1F, D1
                or.b    D1, D0
                addi.w  #$0040, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                eori.w  #$6800, D0
                move.w  D0, -(A6)
                moveq   #$03, D5
                bra     Offset_0x005D42
Offset_0x005EF2:
                move.b  D4, D0
                lsl.w   #$02, D0
                andi.w  #$03F0, D0
                move.b  (A1)+, D4
                ror.b   #$04, D4
                move.b  D4, D1
                andi.b  #$0F, D1
                or.b    D1, D0
                addi.w  #$0040, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                eori.w  #$6800, D0
                move.w  D0, -(A6)
                moveq   #$04, D5
                bra     Offset_0x005D42
Offset_0x005F1C:
                move.b  D4, D0
                lsl.w   #$02, D0
                andi.w  #$03F8, D0
                move.b  (A1)+, D4
                rol.b   #$03, D4
                move.b  D4, D1
                andi.b  #$07, D1
                or.b    D1, D0
                addi.w  #$0040, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                eori.w  #$6800, D0
                move.w  D0, -(A6)
                moveq   #$05, D5
                bra     Offset_0x005D42
Offset_0x005F46:
                move.b  (A1)+, D4
                ror.b   #$02, D4
                move.b  D4, D0
                andi.w  #$003F, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                eori.w  #$6800, D0
                move.w  D0, -(A6)
                moveq   #$02, D5
                bra     Offset_0x005D42
Offset_0x005F62:
                move.b  D4, D0
                lsr.b   #$02, D0
                andi.w  #$0020, D0
                move.b  (A1)+, D4
                ror.b   #$03, D4
                move.b  D4, D1
                andi.b  #$1F, D1
                or.b    D1, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                eori.w  #$6800, D0
                move.w  D0, -(A6)
                moveq   #$03, D5
                bra     Offset_0x005D42
Offset_0x005F88:
                move.b  D4, D0
                lsr.b   #$02, D0
                andi.w  #$0030, D0
                move.b  (A1)+, D4
                ror.b   #$04, D4
                move.b  D4, D1
                andi.b  #$0F, D1
                or.b    D1, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                eori.w  #$6800, D0
                move.w  D0, -(A6)
                moveq   #$04, D5
                bra     Offset_0x005D42
Offset_0x005FAE:
                move.b  D4, D0
                lsr.b   #$02, D0
                andi.w  #$0038, D0
                move.b  (A1)+, D4
                rol.b   #$03, D4
                move.b  D4, D1
                andi.b  #$07, D1
                or.b    D1, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                eori.w  #$6800, D0
                move.w  D0, -(A6)
                moveq   #$05, D5
                bra     Offset_0x005D42
Offset_0x005FD4:
                move.b  D4, D0
                lsr.b   #$02, D0
                andi.w  #$003C, D0
                move.b  (A1)+, D4
                rol.b   #$02, D4
                move.b  D4, D1
                andi.b  #$03, D1
                or.b    D1, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                eori.w  #$6800, D0
                move.w  D0, -(A6)
                moveq   #$06, D5
                bra     Offset_0x005D42
Offset_0x005FFA:
                move.b  D4, D0
                lsr.b   #$02, D0
                andi.w  #$003E, D0
                move.b  (A1)+, D4
                rol.b   #$01, D4
                move.b  D4, D1
                andi.b  #$01, D1
                or.b    D1, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                eori.w  #$6800, D0
                move.w  D0, -(A6)
                moveq   #$07, D5
                bra     Offset_0x005D42
Offset_0x006020:
                lsr.b   #$02, D4
                andi.w  #$003F, D4
                add.w   D4, D4
                move.w  $00(A3, D4), D0
                eori.w  #$6800, D0
                move.w  D0, -(A6)
                moveq   #$00, D5
                bra     Offset_0x005D42
Offset_0x006038:
                ror.b   #$02, D4
                move.b  D4, D0
                andi.w  #$003F, D0
                add.w   D0, D0
                move.w  $00(A3, D0), D0
                eori.w  #$6800, D0
                move.w  D0, -(A6)
                moveq   #$01, D5
                bra     Offset_0x005D42
Offset_0x006052:
                move.b  (A2)+, D2
                ror.b   #$01, D2
                move.b  D2, D0
                andi.w  #$007F, D0
                moveq   #$01, D3
                cmpi.b  #$7F, D0
                beq     Offset_0x005D26
                addi.w  #$0040, D0
                add.w   D0, D0
                add.w   D0, D0
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x00607A:
                move.w  D1, -(A6)
                dbra    D0, Offset_0x00607A
                bra     Offset_0x005D42
Offset_0x006084:
                move.b  D2, D1
                lsr.b   #$01, D1
                andi.b  #$40, D1
                move.b  (A2)+, D2
                ror.b   #$02, D2
                move.b  D2, D0
                andi.w  #$003F, D0
                or.b    D1, D0
                moveq   #$02, D3
                cmpi.b  #$7F, D0
                beq     Offset_0x005D26
                addi.w  #$0040, D0
                add.w   D0, D0
                add.w   D0, D0
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x0060B6:
                move.w  D1, -(A6)
                dbra    D0, Offset_0x0060B6
                bra     Offset_0x005D42
Offset_0x0060C0:
                move.b  D2, D1
                lsr.b   #$01, D1
                andi.b  #$60, D1
                move.b  (A2)+, D2
                ror.b   #$03, D2
                move.b  D2, D0
                andi.w  #$001F, D0
                or.b    D1, D0
                moveq   #$03, D3
                cmpi.b  #$7F, D0
                beq     Offset_0x005D26
                addi.w  #$0040, D0
                add.w   D0, D0
                add.w   D0, D0
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x0060F2:
                move.w  D1, -(A6)
                dbra    D0, Offset_0x0060F2
                bra     Offset_0x005D42
Offset_0x0060FC:
                move.b  D2, D1
                lsr.b   #$01, D1
                andi.b  #$70, D1
                move.b  (A2)+, D2
                ror.b   #$04, D2
                move.b  D2, D0
                andi.w  #$000F, D0
                or.b    D1, D0
                moveq   #$04, D3
                cmpi.b  #$7F, D0
                beq     Offset_0x005D26
                addi.w  #$0040, D0
                add.w   D0, D0
                add.w   D0, D0
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x00612E:
                move.w  D1, -(A6)
                dbra    D0, Offset_0x00612E
                bra     Offset_0x005D42
Offset_0x006138:
                move.b  D2, D1
                lsr.b   #$01, D1
                andi.b  #$78, D1
                move.b  (A2)+, D2
                rol.b   #$03, D2
                move.b  D2, D0
                andi.w  #$0007, D0
                or.b    D1, D0
                moveq   #$05, D3
                cmpi.b  #$7F, D0
                beq     Offset_0x005D26
                addi.w  #$0040, D0
                add.w   D0, D0
                add.w   D0, D0
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x00616A:
                move.w  D1, -(A6)
                dbra    D0, Offset_0x00616A
                bra     Offset_0x005D42
Offset_0x006174:
                move.b  D2, D1
                lsr.b   #$01, D1
                andi.b  #$7C, D1
                move.b  (A2)+, D2
                rol.b   #$02, D2
                move.b  D2, D0
                andi.w  #$0003, D0
                or.b    D1, D0
                moveq   #$06, D3
                cmpi.b  #$7F, D0
                beq     Offset_0x005D26
                addi.w  #$0040, D0
                add.w   D0, D0
                add.w   D0, D0
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x0061A6:
                move.w  D1, -(A6)
                dbra    D0, Offset_0x0061A6
                bra     Offset_0x005D42
Offset_0x0061B0:
                move.b  D2, D1
                lsr.b   #$01, D1
                andi.b  #$7E, D1
                move.b  (A2)+, D2
                rol.b   #$01, D2
                move.b  D2, D0
                andi.w  #$0001, D0
                or.b    D1, D0
                moveq   #$07, D3
                cmpi.b  #$7F, D0
                beq     Offset_0x005D26
                addi.w  #$0040, D0
                add.w   D0, D0
                add.w   D0, D0
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x0061E2:
                move.w  D1, -(A6)
                dbra    D0, Offset_0x0061E2
                bra     Offset_0x005D42
Offset_0x0061EC:
                lsr.b   #$01, D2
                andi.w  #$007F, D2
                moveq   #$00, D3
                cmpi.b  #$7F, D2
                beq     Offset_0x005D26
                addi.w  #$0040, D2
                add.w   D2, D2
                add.w   D2, D2
                move.w  $00(A4, D2), D1
                move.w  $02(A4, D2), D0
                ori.w   #$E000, D1
Offset_0x006210:
                move.w  D1, -(A6)
                dbra    D0, Offset_0x006210
                bra     Offset_0x005D42
Offset_0x00621A:
                move.b  (A2)+, D2
                ror.b   #$02, D2
                move.b  D2, D0
                andi.w  #$003F, D0
                add.w   D0, D0
                add.w   D0, D0
                moveq   #$02, D3
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x006236:
                move.w  D1, -(A6)
                dbra    D0, Offset_0x006236
                bra     Offset_0x005D42
Offset_0x006240:
                move.b  D2, D0
                lsr.b   #$02, D0
                andi.w  #$0020, D0
                move.b  (A2)+, D2
                ror.b   #$03, D2
                move.b  D2, D1
                andi.b  #$1F, D1
                or.b    D1, D0
                moveq   #$03, D3
                add.w   D0, D0
                add.w   D0, D0
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x006266:
                move.w  D1, -(A6)
                dbra    D0, Offset_0x006266
                bra     Offset_0x005D42
Offset_0x006270:
                move.b  D2, D0
                lsr.b   #$02, D0
                andi.w  #$0030, D0
                move.b  (A2)+, D2
                ror.b   #$04, D2
                move.b  D2, D1
                andi.b  #$0F, D1
                or.b    D1, D0
                add.w   D0, D0
                add.w   D0, D0
                moveq   #$04, D3
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x006296:
                move.w  D1, -(A6)
                dbra    D0, Offset_0x006296
                bra     Offset_0x005D42
Offset_0x0062A0:
                move.b  D2, D0
                lsr.b   #$02, D0
                andi.w  #$0038, D0
                move.b  (A2)+, D2
                rol.b   #$03, D2
                move.b  D2, D1
                andi.b  #$07, D1
                or.b    D1, D0
                add.w   D0, D0
                add.w   D0, D0
                moveq   #$05, D3
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x0062C6:
                move.w  D1, -(A6)
                dbra    D0, Offset_0x0062C6
                bra     Offset_0x005D42
Offset_0x0062D0:
                move.b  D2, D0
                lsr.b   #$02, D0
                andi.w  #$003C, D0
                move.b  (A2)+, D2
                rol.b   #$02, D2
                move.b  D2, D1
                andi.b  #$03, D1
                or.b    D1, D0
                add.w   D0, D0
                add.w   D0, D0
                moveq   #$06, D3
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x0062F6:
                move.w  D1, -(A6)
                dbra    D0, Offset_0x0062F6
                bra     Offset_0x005D42
Offset_0x006300:
                move.b  D2, D0
                lsr.b   #$02, D0
                andi.w  #$003E, D0
                move.b  (A2)+, D2
                rol.b   #$01, D2
                move.b  D2, D1
                andi.b  #$01, D1
                or.b    D1, D0
                add.w   D0, D0
                add.w   D0, D0
                moveq   #$07, D3
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x006326:
                move.w  D1, -(A6)
                dbra    D0, Offset_0x006326
                bra     Offset_0x005D42
Offset_0x006330:
                lsr.b   #$02, D2
                andi.w  #$003F, D2
                add.w   D2, D2
                add.w   D2, D2
                moveq   #$00, D3
                move.w  $00(A4, D2), D1
                move.w  $02(A4, D2), D0
                ori.w   #$E000, D1
Offset_0x006348:
                move.w  D1, -(A6)
                dbra    D0, Offset_0x006348
                bra     Offset_0x005D42
Offset_0x006352:
                ror.b   #$02, D2
                move.b  D2, D0
                andi.w  #$003F, D0
                add.w   D0, D0
                add.w   D0, D0
                moveq   #$01, D3
                move.w  $00(A4, D0), D1
                move.w  $02(A4, D0), D0
                ori.w   #$E000, D1
Offset_0x00636C:
                move.w  D1, -(A6)
                dbra    D0, Offset_0x00636C
                bra     Offset_0x005D42
;-------------------------------------------------------------------------------
Offset_0x006376:
                dc.w    Offset_0x006380-Offset_0x006376
                dc.w    Offset_0x006398-Offset_0x006376
                dc.w    Offset_0x0063B0-Offset_0x006376
                dc.w    Offset_0x0063BC-Offset_0x006376
                dc.w    Offset_0x0063CC-Offset_0x006376
Offset_0x006380:
                dc.b    $26, $27, $28, $29, $2A, $2B, $26, $00, $01, $02, $03, $04, $05, $06, $07, $08
                dc.b    $09, $0A, $0B, $0C, $0D, $0E, $0F, $10
Offset_0x006398:
                dc.b    $26, $27, $28, $29, $2A, $2B, $26, $15, $16, $17, $18, $19, $1A, $1B, $1C, $1D
                dc.b    $1E, $1F, $20, $21, $22, $23, $24, $25
Offset_0x0063B0:
                dc.b    $26, $27, $28, $29, $2A, $2B, $26, $2C, $2D, $2E, $2F, $30
Offset_0x0063BC:
                dc.b    $11, $12, $13, $14, $11, $12, $13, $14, $11, $12, $13, $14, $11, $12, $13, $14
Offset_0x0063CC:
                dc.b    $11, $12, $13, $14, $31, $32, $33, $34, $35, $36, $37, $00    
;-------------------------------------------------------------------------------                  
Offset_0x0063D8:   
                dc.l    Offset_0x0CA904
                dc.l    Offset_0x0CADA8                
                dc.l    Offset_0x0CB376                
                dc.l    Offset_0x0CB92E
                dc.l    Offset_0x0CBF92                
                dc.l    Offset_0x0CC5BE                
                dc.l    Offset_0x0CCC7A                
                dc.l    Offset_0x0CD282
                dc.l    Offset_0x0CD7C0                
                dc.l    Offset_0x0CDD44                
                dc.l    Offset_0x0CE2BE                
                dc.l    Offset_0x0CE7DE
                dc.l    Offset_0x0CEC52                
                dc.l    Offset_0x0CF0BC                
                dc.l    Offset_0x0CF580                
                dc.l    Offset_0x0CFA00
                dc.l    Offset_0x0CFE4A                
                dc.l    Offset_0x0D028C                
                dc.l    Offset_0x0D090A                
                dc.l    Offset_0x0D0EA6
                dc.l    Offset_0x0D1400                
                dc.l    Offset_0x0D19FC                
                dc.l    Offset_0x0D1EAC                
                dc.l    Offset_0x0D23AE
                dc.l    Offset_0x0D27C6                
                dc.l    Offset_0x0D2C14                
                dc.l    Offset_0x0D3092                
                dc.l    Offset_0x0D3522
                dc.l    Offset_0x0D39EC                
                dc.l    Offset_0x0D3F78                
                dc.l    Offset_0x0D4660                
                dc.l    Offset_0x0D4DA6
                dc.l    Offset_0x0D53FC                
                dc.l    Offset_0x0D5958                
                dc.l    Offset_0x0D5F02                
                dc.l    Offset_0x0D6596
                dc.l    Offset_0x0D6BAA                
                dc.l    Offset_0x0D702E                
                dc.l    Offset_0x0D749C                
                dc.l    Offset_0x0D7912
                dc.l    Offset_0x0D7DAA                
                dc.l    Offset_0x0D8250                
                dc.l    Offset_0x0D85F8                
                dc.l    Offset_0x0D89EC
                dc.l    Offset_0x0D8E24                
                dc.l    Offset_0x0D92B6                
                dc.l    Offset_0x0D9778                
                dc.l    Offset_0x0D9B80
                dc.l    Offset_0x0DA016                
                dc.l    Offset_0x0DA4CE                
                dc.l    Offset_0x0DAB20                
                dc.l    Offset_0x0DB086
                dc.l    Offset_0x0DB5AE                
                dc.l    Offset_0x0DBB62                
                dc.l    Offset_0x0DC154                
                dc.l    Offset_0x0DC5E8
;-------------------------------------------------------------------------------                      
Offset_0x0064B8:                                    
                dc.b    $80, $01, $80, $07, $80, $2C, $80, $0B, $80, $24, $88, $24, $80, $39, $88, $2B
                dc.b    $80, $5D, $88, $5D, $80, $2B, $80, $4A, $80, $49, $80, $37, $88, $49, $80, $45
                dc.b    $88, $45, $88, $3A, $80, $48, $88, $50, $80, $36, $88, $37, $80, $3A, $80, $50
                dc.b    $88, $42, $80, $42, $88, $15, $80, $1D, $80, $4B, $88, $17, $88, $48, $88, $36
                dc.b    $80, $38, $88, $4B, $80, $15, $80, $21, $80, $17, $80, $33, $80, $1A, $80, $2A
                dc.b    $80, $5E, $80, $28, $80, $30, $88, $21, $88, $38, $88, $1A, $80, $25, $88, $5E
                dc.b    $88, $25, $88, $33, $80, $03, $88, $14, $80, $14, $80, $04, $80, $4E, $88, $03
                dc.b    $80, $0C, $88, $2A, $80, $02, $80, $51, $80, $40, $80, $3D, $80, $19, $80, $52
                dc.b    $80, $09, $80, $5A, $88, $30, $88, $4E, $88, $52, $88, $51, $88, $09, $88, $40
                dc.b    $80, $2F, $88, $5A, $88, $18, $80, $34, $88, $19, $88, $2F, $88, $3D, $80, $3E
                dc.b    $80, $18, $88, $0C, $80, $12, $88, $04, $80, $26, $88, $34, $88, $05, $80, $3B
                dc.b    $88, $3E, $88, $3B, $80, $00, $88, $02, $80, $05, $80, $0D, $80, $55, $80, $AF
                dc.b    $80, $1C, $80, $1B, $88, $0D, $80, $16, $88, $12, $80, $1F, $88, $32, $80, $13
                dc.b    $80, $92, $88, $26, $80, $10, $80, $4D, $80, $47, $88, $92, $88, $00, $80, $62
                dc.b    $80, $66, $80, $90, $80, $08, $88, $7C, $88, $67, $88, $F7, $80, $0E, $80, $60
                dc.b    $80, $32, $80, $94, $88, $1C, $89, $05, $88, $B0, $80, $59, $80, $0F, $80, $67
                dc.b    $80, $68, $88, $94, $80, $7C, $80, $B0, $80, $B1, $80, $06, $88, $41, $80, $87
                dc.b    $80, $93, $80, $CC, $88, $1F, $88, $68, $80, $41, $80, $8F, $88, $90, $80, $C2
                dc.b    $88, $13, $88, $C2, $80, $5C, $80, $64, $80, $D8, $88, $1B, $88, $CC, $88, $11
                dc.b    $88, $55, $88, $E2, $88, $F3, $80, $44, $88, $D8, $80, $85, $80, $A1, $80, $C1
                dc.b    $81, $19, $88, $89, $88, $0A, $88, $22, $80, $3F, $80, $5B, $80, $7F, $88, $86
                dc.b    $88, $08, $80, $80, $88, $66, $88, $E0, $88, $C1, $80, $20, $80, $22, $80, $54
                dc.b    $80, $D2, $88, $59, $88, $B1, $88, $60, $89, $19, $88, $A4, $88, $8F, $80, $0A
                dc.b    $80, $61, $80, $75, $80, $95, $80, $B6, $80, $E0, $88, $10, $88, $98, $88, $5B
                dc.b    $88, $D2, $88, $16, $80, $53, $80, $91, $80, $96, $80, $A4, $80, $DD, $80, $E6
                dc.b    $88, $7A, $88, $4D, $88, $E6, $80, $11, $80, $57, $80, $7A, $80, $86, $80, $9E
                dc.b    $80, $DA, $80, $58, $80, $DC, $80, $E3, $88, $63, $80, $3C, $80, $56, $80, $69
                dc.b    $80, $7E, $80, $AE, $80, $B5, $80, $B8, $80, $CD, $80, $FB, $80, $FF, $88, $5C
                dc.b    $88, $CD, $88, $74, $88, $EA, $88, $FF, $88, $B5, $80, $43, $80, $6C, $80, $74
                dc.b    $80, $77, $80, $89, $80, $97, $80, $9F, $80, $A0, $81, $13, $81, $1B, $88, $78
                dc.b    $88, $0F, $88, $E1, $88, $FB, $89, $28, $80, $63, $80, $84, $80, $8D, $80, $CB
                dc.b    $80, $D7, $80, $E9, $81, $28, $81, $38, $88, $AE, $88, $EC, $80, $31, $80, $4C
                dc.b    $80, $E2, $80, $EA, $88, $64, $80, $29, $80, $2D, $80, $6D, $80, $78, $80, $88
                dc.b    $80, $B4, $80, $BE, $80, $CF, $80, $E1, $80, $E4, $88, $54, $88, $D6, $88, $D7
                dc.b    $88, $61, $89, $2B, $88, $47, $80, $35, $80, $6A, $80, $72, $80, $73, $80, $98
                dc.b    $80, $D5, $80, $D6, $81, $16, $81, $1E, $81, $26, $81, $27, $81, $2F, $81, $5D
                dc.b    $88, $69, $88, $88, $88, $75, $88, $97, $88, $B4, $88, $D1, $88, $D4, $88, $D5
                dc.b    $88, $CB, $88, $E4, $88, $91, $88, $62, $88, $06, $88, $B8, $80, $65, $80, $6E
                dc.b    $80, $71, $80, $7D, $80, $D1, $80, $E7, $80, $F9, $81, $08, $81, $2E, $81, $4B
                dc.b    $88, $81, $88, $85, $88, $77, $88, $7E, $88, $95, $88, $DF, $88, $87, $88, $6C
                dc.b    $88, $F5, $89, $08, $88, $79, $88, $6D, $89, $2A, $88, $AA, $80, $1E, $80, $27
                dc.b    $80, $46, $80, $5F, $80, $70, $80, $79, $80, $9A, $80, $AA, $80, $C3, $80, $D3
                dc.b    $80, $D4, $80, $DE, $80, $DF, $80, $F8, $81, $00, $81, $01, $81, $2B, $81, $33
                dc.b    $81, $36, $81, $43, $81, $51, $88, $2E, $88, $9E, $88, $99, $88, $D3, $88, $DD
                dc.b    $88, $DE, $88, $E9, $88, $EF, $88, $F0, $88, $F8, $89, $27, $88, $BE, $88, $96
                dc.b    $80, $4F, $80, $6F, $80, $81, $80, $8B, $80, $8E, $80, $9C, $80, $A3, $80, $B3
                dc.b    $80, $C0, $80, $CE, $80, $F0, $80, $F1, $80, $F5, $80, $F7, $81, $02, $81, $04
                dc.b    $81, $05, $81, $09, $81, $0C, $81, $14, $81, $18, $81, $20, $81, $24, $81, $25
                dc.b    $81, $2A, $81, $30, $81, $32, $81, $37, $81, $59, $81, $65, $88, $3F, $88, $6B
                dc.b    $88, $80, $88, $53, $88, $C6, $88, $CF, $88, $D9, $88, $DC, $88, $56, $88, $B6
                dc.b    $88, $F9, $89, $02, $89, $04, $89, $15, $88, $6A, $89, $13, $88, $72, $88, $35
                dc.b    $89, $38, $89, $5D, $89, $43, $80, $23, $80, $76, $80, $7B, $80, $8A, $80, $9D
                dc.b    $80, $A6, $80, $A8, $80, $AC, $80, $B2, $80, $B7, $80, $BB, $80, $BC, $80, $BD
                dc.b    $80, $C6, $80, $E5, $80, $E8, $80, $EE, $80, $F4, $81, $0A, $81, $0D, $81, $11
                dc.b    $81, $15, $81, $1A, $81, $1F, $81, $22, $81, $23, $81, $39, $81, $3A, $81, $3C
                dc.b    $81, $42, $81, $44, $81, $47, $81, $48, $81, $5E, $81, $5F, $81, $63, $81, $68
                dc.b    $81, $6A, $81, $6C, $81, $70, $88, $E5, $88, $CE, $88, $EE, $88, $F1, $88, $84
                dc.b    $88, $FD, $89, $00, $88, $B9, $89, $17, $88, $71, $89, $09, $89, $0D, $88, $65
                dc.b    $89, $25, $89, $22, $88, $31, $88, $3C, $89, $0F, $88, $C5, $89, $33, $89, $37
                dc.b    $89, $1F, $80, $2E, $80, $6B, $80, $82, $80, $83, $80, $8C, $80, $99, $80, $9B
                dc.b    $80, $A2, $80, $A5, $80, $A7, $80, $A9, $80, $AB, $80, $AD, $80, $B9, $80, $BA
                dc.b    $80, $BF, $80, $C4, $80, $C5, $80, $C7, $80, $C8, $80, $C9, $80, $CA, $80, $D0
                dc.b    $80, $D9, $80, $DB, $80, $EB, $80, $EC, $80, $ED, $80, $EF, $80, $F2, $80, $F3
                dc.b    $80, $F6, $80, $FA, $80, $FC, $80, $FD, $80, $FE, $81, $03, $81, $06, $81, $07
                dc.b    $81, $0B, $81, $0E, $81, $0F, $81, $10, $81, $12, $81, $17, $81, $1C, $81, $1D
                dc.b    $81, $21, $81, $29, $81, $2C, $81, $2D, $81, $31, $81, $34, $81, $35, $81, $3B
                dc.b    $81, $3D, $81, $3E, $81, $3F, $81, $40, $81, $41, $81, $45, $81, $46, $81, $49
                dc.b    $81, $4A, $81, $4C, $81, $4D, $81, $4E, $81, $4F, $81, $50, $81, $52, $81, $53
                dc.b    $81, $54, $81, $55, $81, $56, $81, $57, $81, $58, $81, $5A, $81, $5B, $81, $5C
                dc.b    $81, $60, $81, $61, $81, $62, $81, $64, $81, $66, $81, $67, $81, $69, $81, $6B
                dc.b    $81, $6D, $81, $6E, $81, $6F, $81, $71, $81, $72, $81, $73, $88, $6E, $88, $7D
                dc.b    $88, $C3, $88, $DB, $88, $E7, $88, $E8, $88, $EB, $88, $ED, $88, $F2, $88, $F6
                dc.b    $88, $FA, $88, $FC, $88, $FE, $88, $2D, $89, $03, $89, $06, $89, $07, $89, $0B
                dc.b    $88, $73, $88, $9A, $89, $29, $89, $2C, $89, $2D, $89, $11, $89, $3C, $89, $20
                dc.b    $89, $46, $88, $A9, $88, $9C, $89, $16, $89, $4F, $89, $4C, $88, $6F, $89, $58
                dc.b    $89, $56, $89, $59, $89, $5A, $89, $61, $88, $7B, $89, $66, $89, $1C, $89, $18
                dc.b    $88, $A0, $88, $A3, $89, $67, $88, $A1
;-------------------------------------------------------------------------------  
Offset_0x006980:
                dc.b    $00, $07, $00, $01, $00, $01, $00, $01, $00, $4A, $00, $01, $00, $39, $00, $03
                dc.b    $00, $01, $00, $05, $00, $28, $00, $07, $00, $2C, $00, $01, $00, $01, $00, $02
                dc.b    $00, $28, $00, $05, $00, $39, $00, $01, $00, $28, $00, $09, $00, $01, $00, $04
                dc.b    $00, $28, $00, $06, $00, $28, $00, $03, $00, $4A, $00, $02, $00, $01, $00, $03
                dc.b    $00, $28, $00, $04, $00, $39, $00, $02, $00, $39, $00, $04, $00, $01, $00, $06
                dc.b    $00, $07, $00, $02, $00, $2C, $00, $02, $00, $28, $00, $01, $00, $1D, $00, $01
                dc.b    $00, $28, $00, $08, $00, $28, $00, $02, $00, $07, $00, $03, $00, $01, $00, $07
                dc.b    $00, $28, $00, $0B, $00, $39, $00, $05, $00, $1D, $00, $03, $00, $1D, $00, $04
                dc.b    $00, $1D, $00, $02, $00, $1D, $00, $05, $00, $28, $00, $0D, $00, $0B, $00, $01
                dc.b    $00, $28, $00, $0A, $00, $39, $00, $06, $00, $39, $00, $07, $00, $2C, $00, $03
                dc.b    $00, $1D, $00, $09, $00, $4A, $00, $03, $00, $1D, $00, $07, $00, $28, $00, $0F
                dc.b    $00, $1D, $00, $0B, $00, $1D, $00, $11, $00, $1D, $00, $0D, $00, $1D, $00, $08
                dc.b    $00, $28, $00, $11, $00, $1D, $00, $06, $00, $0B, $00, $02, $00, $1D, $00, $15
                dc.b    $00, $28, $00, $0C, $00, $1D, $00, $0A, $00, $28, $00, $0E, $00, $01, $00, $08
                dc.b    $00, $1D, $00, $0F, $00, $28, $00, $10, $00, $07, $00, $06, $00, $1D, $00, $13
                dc.b    $00, $4A, $00, $04, $00, $1D, $00, $17, $00, $07, $00, $04, $00, $0B, $00, $03
                dc.b    $00, $1D, $00, $1B, $00, $4A, $00, $06, $00, $1D, $00, $1D, $00, $4A, $00, $05
                dc.b    $00, $01, $00, $09, $00, $07, $00, $05, $00, $1D, $00, $1E, $00, $1D, $00, $19
                dc.b    $00, $01, $00, $11, $00, $1D, $00, $0C, $00, $1D, $00, $7F, $00, $2C, $00, $04
                dc.b    $00, $1D, $00, $0E, $00, $1D, $00, $1C, $00, $4A, $00, $0A, $00, $1D, $00, $1A
                dc.b    $00, $4A, $00, $07, $00, $1D, $00, $18, $00, $0B, $00, $04, $00, $1D, $00, $12
                dc.b    $00, $1D, $00, $10, $00, $01, $00, $0F, $00, $0B, $00, $05, $00, $01, $00, $0D
                dc.b    $00, $01, $00, $13, $00, $4A, $00, $09, $00, $4A, $00, $0B, $00, $4A, $00, $0C
                dc.b    $00, $2C, $00, $05, $00, $1D, $00, $14, $00, $0B, $00, $07, $00, $1D, $00, $16
                dc.b    $00, $01, $00, $0C, $00, $01, $00, $0E, $00, $4A, $00, $08, $00, $1D, $00, $5F
                dc.b    $00, $01, $00, $0A, $00, $0B, $00, $06, $00, $0B, $00, $08, $00, $0B, $00, $0A
                dc.b    $00, $39, $00, $08, $00, $0B, $00, $09, $00, $2C, $00, $06, $00, $01, $00, $10
                dc.b    $00, $0B, $00, $0C, $00, $01, $00, $0B, $00, $01, $00, $12, $00, $07, $00, $07
                dc.b    $00, $1D, $00, $1F, $00, $28, $00, $12, $00, $0B, $00, $0B, $00, $2C, $00, $07
                dc.b    $00, $2C, $00, $0B, $00, $1D, $00, $23, $00, $01, $00, $15, $00, $2C, $00, $08
                dc.b    $00, $1D, $00, $2E, $00, $1D, $00, $3F, $00, $01, $00, $14, $00, $0B, $00, $0D
                dc.b    $00, $2C, $00, $09, $00, $2C, $00, $0A, $00, $1D, $00, $25, $00, $1D, $00, $55
                dc.b    $00, $1D, $00, $71, $00, $1D, $00, $7C, $00, $4A, $00, $0D, $00, $2C, $00, $0C
                dc.b    $00, $2C, $00, $0F, $00, $2C, $00, $10, $FF, $FB, $FF, $FB, $FF, $FA, $FF, $FA
                dc.b    $FF, $FA, $FF, $FA
;-------------------------------------------------------------------------------  
Offset_0x006BA4:
                move.b  ($FFFFDB0F).w, ($FFFFDB11).w
                moveq   #$00, D1
                move.l  ($FFFFDB00).w, A0
                cmpa.l  #Offset_0x0D090A, A0
                blt.s   Offset_0x006BE4
                cmpa.l  #Offset_0x0D0EA6, A0
                bge.s   Offset_0x006BE4
                move.l  ($FFFFDB8E).w, A5
                move.b  ($FFFFDB0A).w, D1
                move.b  $00(A5, D1), D1
                bpl.s   Offset_0x006C22
Offset_0x006BCE:
                st      ($FFFFDB0E).w
                move.b  ($FFFFDB0D).w, D0
                cmp.b   ($FFFFDB21).w, D0
                blt     Offset_0x006C34
                st      ($FFFFDB0F).w
                rts
Offset_0x006BE4:
                cmpa.l  #Offset_0x0CF0BC, A0
                blt.s   Offset_0x006C04
                cmpa.l  #Offset_0x0CF580, A0
                bge.s   Offset_0x006C04
                move.l  ($FFFFDB8E).w, A5
                move.b  ($FFFFDB0A).w, D1
                move.b  $00(A5, D1), D1
                bpl.s   Offset_0x006C22
                bra.s   Offset_0x006BCE
Offset_0x006C04:
                cmpa.l  #Offset_0x0D3092, A0
                blt.s   Offset_0x006C34
                cmpa.l  #Offset_0x0D3522, A0
                bge.s   Offset_0x006C34
                move.l  ($FFFFDB8E).w, A5
                move.b  ($FFFFDB0A).w, D1
                move.b  $00(A5, D1), D1
                bmi.s   Offset_0x006BCE
Offset_0x006C22:
                sf      ($FFFFDB0E).w
                move.b  ($FFFFDB0D).w, D0
                cmp.b   ($FFFFDB21).w, D0
                blt.s   Offset_0x006C34
                sf      ($FFFFDB0F).w
Offset_0x006C34:
                rts
;-------------------------------------------------------------------------------                
Offset_0x006C36:
                lea     ($FFFFE000).w, A1
                lea     ($FFFFD700).w, A2
                moveq   #$00, D0
                moveq   #$00, D1
                moveq   #$00, D2
                moveq   #$00, D3
                move.w  #$FF00, D1
                move.w  #$FE00, D2
                move.w  #$FD00, D3
                swap.w  D1
                swap.w  D2
                swap.w  D3
                moveq   #$1F, D4
Offset_0x006C5A:
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D1, (A1)+
                move.l  D1, (A1)+
                move.l  D2, (A1)+
                move.l  D2, (A1)+
                move.l  D3, (A1)+
                move.l  D3, (A1)+
                move.l  D3, (A2)+
                move.l  D3, (A2)+
                move.l  D2, (A2)+
                move.l  D2, (A2)+
                move.l  D1, (A2)+
                move.l  D1, (A2)+
                move.l  D0, (A2)+
                move.l  D0, (A2)+
                dbra    D4, Offset_0x006C5A
                rts                
;-------------------------------------------------------------------------------  
Offset_0x006C80:
                lea     (Offset_0x0DCA38), A0
                lea     ($FFFF0000), A1
                bsr     KosinskiDec                            ; Offset_0x0018F8
                move.l  #$40000000, (VDP_Control_Port)               ; $00C00004
                lea     (VDP_Data_Port), A1                          ; $00C00000
                move.l  #$FFFF0000, A0
                move.w  (A0)+, D0
                subq.w  #$01, D0
Offset_0x006CAA:
                move.l  (A0), (A1)
                move.l  (A0), (A1)
                move.l  (A0), (A1)
                move.l  (A0), (A1)
                move.l  (A0), (A1)
                move.l  (A0), (A1)
                move.l  (A0), (A1)
                move.l  (A0)+, (A1)
                dbra    D0, Offset_0x006CAA
                lea     (Offset_0x0E24FE), A0
                lea     ($FFFF6A60), A1
                bsr     KosinskiDec                            ; Offset_0x0018F8
                lea     (Offset_0x0E34EE), A0
                lea     ($FFFF855C).w, A4
                bsr     NemesisDec_ToRAM                       ; Offset_0x0014AC
                lea     (Offset_0x0E35F2), A0
                lea     ($FFFF8778).w, A1
                bsr     KosinskiDec                            ; Offset_0x0018F8
                rts
;-------------------------------------------------------------------------------               
Offset_0x006CEC:
                move    #$2700, SR
                move.l  #$FFFF0000, A1
                lea     (Offset_0x0DD30C), A0
                move.w  #$0700, D0
                bsr     EnigmaDec                              ; Offset_0x00177A
                move.l  #$FFFF0400, A1
                lea     (Offset_0x0DD1DE), A0
                move.w  #$0700, D0
                bsr     EnigmaDec                              ; Offset_0x00177A
                lea     ($FFFF0000), A1
                move.l  #$60000002, D0
                moveq   #$1F, D1
                moveq   #$1F, D2
                jsr     (ShowVDPGraphics_SS)                   ; Offset_0x0013EA
                lea     ($FFFF0000), A1
                move.l  #$60400002, D0
                moveq   #$1F, D1
                moveq   #$1F, D2
                jsr     (ShowVDPGraphics_SS)                   ; Offset_0x0013EA
                lea     ($FFFF0000), A1
                move.l  #$60800002, D0
                moveq   #$1F, D1
                moveq   #$1F, D2
                jsr     (ShowVDPGraphics_SS)                   ; Offset_0x0013EA
                lea     ($FFFF0000), A1
                move.l  #$60C00002, D0
                moveq   #$1F, D1
                moveq   #$1F, D2
                jsr     (ShowVDPGraphics_SS)                   ; Offset_0x0013EA
                move    #$2300, SR
                rts                
;-------------------------------------------------------------------------------                
SS_Load_Sonic_Miles_Sprites: ; Offset_0x006D76:
                lea     (SS_Sonic_Miles), A0                   ; Offset_0x0DEEAE
                lea     ($00FF0000), A4
                bra     NemesisDec_ToRAM                       ; Offset_0x0014AC             
;-------------------------------------------------------------------------------         
Offset_0x006D86:
                bsr     Offset_0x006DDE
                bsr     Offset_0x006E80
                rts
;-------------------------------------------------------------------------------   
Offset_0x006D90:
                dc.w    Offset_0x006DA6-Offset_0x006D90
                dc.w    Offset_0x006DAB-Offset_0x006D90
                dc.w    Offset_0x006DB0-Offset_0x006D90
                dc.w    Offset_0x006DB5-Offset_0x006D90
                dc.w    Offset_0x006DBA-Offset_0x006D90
                dc.w    Offset_0x006DBF-Offset_0x006D90
                dc.w    Offset_0x006DC4-Offset_0x006D90
                dc.w    Offset_0x006DC9-Offset_0x006D90
                dc.w    Offset_0x006DCE-Offset_0x006D90
                dc.w    Offset_0x006DD3-Offset_0x006D90
                dc.w    Offset_0x006DD8-Offset_0x006D90
Offset_0x006DA6:
                dc.b    $02, $02, $02, $02, $02
Offset_0x006DAB:
                dc.b    $04, $04, $05, $04, $05
Offset_0x006DB0:
                dc.b    $0B, $0B, $0B, $0B, $0C
Offset_0x006DB5:
                dc.b    $00, $00, $01, $00, $00
Offset_0x006DBA:
                dc.b    $01, $01, $01, $01, $01
Offset_0x006DBF:
                dc.b    $09, $09, $08, $09, $09
Offset_0x006DC4:
                dc.b    $09, $09, $09, $09, $0A
Offset_0x006DC9:
                dc.b    $07, $07, $06, $07, $07
Offset_0x006DCE:
                dc.b    $00, $01, $01, $01, $00
Offset_0x006DD3:
                dc.b    $04, $03, $03, $03, $04
Offset_0x006DD8:
                dc.b    $00, $00, $FF, $00, $00 
;-------------------------------------------------------------------------------                   
                dc.b    $00                                             ; Filler
;-------------------------------------------------------------------------------  
Offset_0x006DDE:
                moveq   #$00, D7
                moveq   #$00, D6
                moveq   #$00, D0
                move.b  ($FFFFDB09).w, D2
                move.b  ($FFFFDB08).w, D0
                add.w   D0, D0
                move.w  Offset_0x006DF6(PC, D0), D0
                jmp     Offset_0x006DF6(PC, D0)
Offset_0x006DF6:
                dc.w    Offset_0x006E00-Offset_0x006DF6
                dc.w    Offset_0x006E00-Offset_0x006DF6
                dc.w    Offset_0x006E00-Offset_0x006DF6
                dc.w    Offset_0x006E28-Offset_0x006DF6
                dc.w    Offset_0x006E28-Offset_0x006DF6
Offset_0x006E00:
                moveq   #$00, D1
                cmpi.b  #$01, D2
                blt.s   Offset_0x006E2A
                moveq   #$02, D1
                cmpi.b  #$02, D2
                blt.s   Offset_0x006E2A
                moveq   #$04, D1
                cmpi.b  #$0A, D2
                blt.s   Offset_0x006E2A
                moveq   #$02, D1
                cmpi.b  #$0B, D2
                blt.s   Offset_0x006E2A
                moveq   #$00, D1
                cmpi.b  #$0C, D2
                blt.s   Offset_0x006E2A
Offset_0x006E28:
                rts
Offset_0x006E2A:
                moveq   #$00, D0
                moveq   #$00, D2
                move.b  ($FFFFDB0D).w, D0
                lea     (Offset_0x006D90), A0
                adda.w  $00(A0, D1), A0
                move.b  $00(A0, D0), D2
                tst.b   ($FFFFDB11).w
                bne.s   Offset_0x006E4E
                tst.b   ($FFFFDB0F).w
                beq.s   Offset_0x006E62
                bra.s   Offset_0x006E5A
Offset_0x006E4E:
                tst.b   ($FFFFDB0F).w
                bne.s   Offset_0x006E62
                lea     ($FFFFE002).w, A1
                bra.s   Offset_0x006E72
Offset_0x006E5A:
                lea     ($FFFFD702).w, A1
                neg.w   D2
                bra.s   Offset_0x006E72
Offset_0x006E62:
                lea     ($FFFFE002).w, A1
                tst.b   ($FFFFDB0F).w
                beq.s   Offset_0x006E72
                lea     ($FFFFD702).w, A1
                neg.w   D2
Offset_0x006E72:
                move.w  #$00FF, D0
Offset_0x006E76:
                sub.w   D2, (A1)+
                addq.l  #$02, A1
                dbra    D0, Offset_0x006E76
                rts
;-------------------------------------------------------------------------------    
Offset_0x006E80:            
                move.w  ($FFFFF618).w, ($FFFFDB34).w
                moveq   #$00, D7
                moveq   #$00, D0
                moveq   #$00, D2
                move.b  ($FFFFDB09).w, D2
                move.b  ($FFFFDB08).w, D0
                add.w   D0, D0
                move.w  Offset_0x006E9E(PC, D0), D0
                jmp     Offset_0x006E9E(PC, D0)
Offset_0x006E9E:
                dc.w    Offset_0x006EAA-Offset_0x006E9E
                dc.w    Offset_0x006ECA-Offset_0x006E9E
                dc.w    Offset_0x006EA8-Offset_0x006E9E
                dc.w    Offset_0x006EEC-Offset_0x006E9E
                dc.w    Offset_0x006EA8-Offset_0x006E9E
Offset_0x006EA8:
                rts
Offset_0x006EAA:
                move.b  Offset_0x006EB2(PC, D2), D1
                bpl.s   Offset_0x006F0A
                rts
;-------------------------------------------------------------------------------
Offset_0x006EB2:
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $08, $08, $02, $04, $04, $04
                dc.b    $04, $04, $04, $0A, $0C, $0E, $12, $10
;-------------------------------------------------------------------------------
Offset_0x006ECA:
                st      D7
                move.b  Offset_0x006ED4(PC, D2), D1
                bpl.s   Offset_0x006F0A
                rts
;-------------------------------------------------------------------------------
Offset_0x006ED4:
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $10, $12, $0E, $0C, $0A
                dc.b    $04, $04, $04, $04, $04, $04, $02, $00
;-------------------------------------------------------------------------------
Offset_0x006EEC:
                tst.b   ($FFFFDB87).w
                bne.s   Offset_0x006EF8
                move.b  Offset_0x006EFA(PC, D2), D1
                bpl.s   Offset_0x006F0A
Offset_0x006EF8:
                rts
;-------------------------------------------------------------------------------
Offset_0x006EFA:
                dc.b    $06, $06, $14, $14, $06, $06, $14, $14, $06, $06, $14, $14, $06, $06, $14, $14
;-------------------------------------------------------------------------------
Offset_0x006F0A:
                moveq   #$00, D0
                moveq   #$00, D2
                move.b  ($FFFFDB0D).w, D0
                lea     (Offset_0x006D90), A0
                adda.w  $00(A0, D1), A0
                move.b  $00(A0, D0), D2
                tst.b   D7
                bpl.s   Offset_0x006F2A
                add.w   D2, ($FFFFF618).w
                rts
Offset_0x006F2A:
                sub.w   D2, ($FFFFF618).w
                rts
;-------------------------------------------------------------------------------
Offset_0x006F30:                
                lea     ($FFFFB200).w, A1
                move.w  #$0076, D5
Offset_0x006F38:
                tst.b   (A1)
                beq.s   Offset_0x006F44
                lea     $0040(A1), A1
                dbra    D5, Offset_0x006F38
Offset_0x006F44:
                rts
;-------------------------------------------------------------------------------  
Obj_0x60_Offset_0x006F46: ; Offset_0x006F46:         
                move.l  A0, A1
                move.w  #$CFC0, D5
                sub.w   A0, D5
                lsr.w   #$06, D5
                subq.w  #$01, D5
                bcs.s   Offset_0x006F60                                
Offset_0x006F54:
                tst.b   (A1)
                beq.s   Offset_0x006F60
                lea     $0040(A1), A1
                dbra    D5, Offset_0x006F54
Offset_0x006F60:
                rts
;-------------------------------------------------------------------------------     
Obj_0x5E_SS_Head_Up_Display: ; Offset_0x006F62:
                include 'data\objects\obj_0x5E.asm' 
;------------------------------------------------------------------------------- 
; Obj_0x5F_SS_Start_Flag: 
Obj_0x5F_SS_Flag_START_Flag: ; Offset_0x007092:
                include 'data\objects\obj_0x5F.asm'           
;-------------------------------------------------------------------------------    
SS_Ring_Count_Display_Mappings: ; Offset_0x007282:
                dc.w    SS_Ring_Display_Digit_0-SS_Ring_Count_Display_Mappings ; Offset_0x007298
                dc.w    SS_Ring_Display_Digit_1-SS_Ring_Count_Display_Mappings ; Offset_0x0072A2
                dc.w    SS_Ring_Display_Digit_2-SS_Ring_Count_Display_Mappings ; Offset_0x0072AC
                dc.w    SS_Ring_Display_Digit_3-SS_Ring_Count_Display_Mappings ; Offset_0x0072B6
                dc.w    SS_Ring_Display_Digit_4-SS_Ring_Count_Display_Mappings ; Offset_0x0072C0
                dc.w    SS_Ring_Display_Digit_5-SS_Ring_Count_Display_Mappings ; Offset_0x0072CA
                dc.w    SS_Ring_Display_Digit_6-SS_Ring_Count_Display_Mappings ; Offset_0x0072D4
                dc.w    SS_Ring_Display_Digit_7-SS_Ring_Count_Display_Mappings ; Offset_0x0072DE
                dc.w    SS_Ring_Display_Digit_8-SS_Ring_Count_Display_Mappings ; Offset_0x0072E8
                dc.w    SS_Ring_Display_Digit_9-SS_Ring_Count_Display_Mappings ; Offset_0x0072F2
                dc.w    SS_Ring_Display_Wings-SS_Ring_Count_Display_Mappings   ; Offset_0x0072FC
SS_Ring_Display_Digit_0: ; Offset_0x007298:
                dc.w    $0001
                dc.l    $F8018012, $8009FFFC
SS_Ring_Display_Digit_1: ; Offset_0x0072A2:
                dc.w    $0001
                dc.l    $F8018014, $800AFFFC
SS_Ring_Display_Digit_2: ; Offset_0x0072AC:
                dc.w    $0001
                dc.l    $F8018016, $800BFFFC
SS_Ring_Display_Digit_3: ; Offset_0x0072B6:
                dc.w    $0001
                dc.l    $F8018018, $800CFFFC
SS_Ring_Display_Digit_4: ; Offset_0x0072C0:
                dc.w    $0001
                dc.l    $F801801A, $800DFFFC
SS_Ring_Display_Digit_5: ; Offset_0x0072CA:
                dc.w    $0001
                dc.l    $F801801C, $800EFFFC
SS_Ring_Display_Digit_6: ; Offset_0x0072D4:
                dc.w    $0001
                dc.l    $F801801E, $800FFFFC
SS_Ring_Display_Digit_7: ; Offset_0x0072DE:
                dc.w    $0001
                dc.l    $F8018020, $8010FFFC
SS_Ring_Display_Digit_8: ; Offset_0x0072E8:
                dc.w    $0001
                dc.l    $F8018022, $8011FFFC
SS_Ring_Display_Digit_9: ; Offset_0x0072F2:
                dc.w    $0001
                dc.l    $F8018024, $8012FFFC
SS_Ring_Display_Wings: ; Offset_0x0072FC:
                dc.w    $0001
                dc.l    $FC04803A, $801DFFF8
;-------------------------------------------------------------------------------   
Obj_0x87_SS_Ring_Count_Display: ; Offset_0x007306:
                include 'data\objects\obj_0x87.asm'  
;------------------------------------------------------------------------------- 
Offset_0x0075FE:
                move.b  ($FFFFDB0D).w, D0
                cmp.b   ($FFFFDB21).w, D0
                beq.s   Offset_0x00760A
                rts
Offset_0x00760A:
                moveq   #$00, D0
                move.b  ($FFFFDB10).w, D0
                add.w   D0, D0
                lea     Offset_0x007638(PC, D0), A2
                move.b  (A2)+, D0
                tst.b   ($FFFFDB0E).w
                beq.s   Offset_0x007620
                neg.b   D0
Offset_0x007620:
                ext.w   D0
                addi.w  #$0080, D0
                move.w  D0, ($FFFFF73E).w
                move.b  (A2), D0
                ext.w   D0
                addi.w  #$0036, D0
                move.w  D0, ($FFFFF740).w
                rts
;-------------------------------------------------------------------------------  
Offset_0x007638:
                dc.b    $13, $00, $13, $00, $13, $00, $13, $00, $09, $F6, $00, $E4, $00, $E4, $00, $E0
                dc.b    $00, $DC, $00, $D6, $00, $F0, $00, $06, $00, $0E, $00, $10, $00, $12, $00, $12
                dc.b    $09, $12, $00, $00, $00, $00, $00, $00, $00, $00, $13, $00, $13, $00, $13, $00
                dc.b    $13, $00, $0B, $0C, $00, $0C, $00, $12, $00, $0A, $00, $08, $00, $02, $00, $10
                dc.b    $00, $E0, $00, $E1, $00, $E2, $00, $E5, $00, $E8, $00, $F2, $13, $00, $13, $00
                dc.b    $13, $00, $13, $00, $13, $00, $13, $00, $13, $00, $13, $00, $13, $00, $13, $00
                dc.b    $0B, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $00
;-------------------------------------------------------------------------------  
Offset_0x0076A8:
                moveq   #$00, D1
                moveq   #$01, D2
                move.w  (Stage_Id).w, D0                             ; $FFFFFE16
                move.b  D0, D1
                lsr.w   #$08, D0
                add.w   D0, D0
                add.w   D0, D0
                add.w   D1, D0
                tst.w   (Player_Selected_Flag).w                     ; $FFFFFF7A
                bne.s   Offset_0x0076C6
                move.b  SS_Ring_Target_Cooperative(PC, D0), D1 ; Offset_0x007702
                bra.s   Offset_0x0076CA
Offset_0x0076C6:
                move.b  SS_Ring_Target_Alone(PC, D0), D1       ; Offset_0x00771E
Offset_0x0076CA:
                move.w  D1, ($FFFFDB8C).w
                moveq   #$00, D0
                cmpi.w  #$0064, D1
                blt.s   Offset_0x0076EE
                addq.w  #$01, D2
                subi.w  #$0064, D1
                move.w  #$0100, D0
                cmpi.w  #$0064, D1
                blt.s   Offset_0x0076EE
                subi.w  #$0064, D1
                addi.w  #$0100, D0
Offset_0x0076EE:
                divu.w  #$000A, D1
                lsl.w   #$04, D1
                or.b    D1, D0
                swap.w  D1
                or.b    D1, D0
                move.w  D0, D1
                addq.w  #$01, (Stage_Id).w                           ; $FFFFFE16
                rts
                
;-------------------------------------------------------------------------------  
SS_Ring_Target_Cooperative: ; Offset_0x007702:
                dc.b    $28, $50, $8C, $78
                dc.b    $32, $64, $8C, $96
                dc.b    $3C, $6E, $A0, $AA
                dc.b    $28, $64, $96, $A0
                dc.b    $37, $6E, $C8, $C8
                dc.b    $50, $8C, $DC, $DC
                dc.b    $64, $BE, $D2, $D2
SS_Ring_Target_Alone: ; Offset_0x00771E:
                dc.b    $1E, $46, $82, $6E
                dc.b    $32, $64, $8C, $8C
                dc.b    $32, $6E, $A0, $A0
                dc.b    $28, $6E, $96, $96
                dc.b    $32, $5A, $A0, $A0
                dc.b    $50, $8C, $D2, $D2
                dc.b    $64, $96, $BE, $BE                
;-------------------------------------------------------------------------------  
Special_Stage_Palette_Idx: ; Offset_0x00773A
                dc.w    $001B, $001C, $001D, $001E, $001F, $0020, $0021, $0022
                dc.w    $0023, $0024
;-------------------------------------------------------------------------------  
SS_Load_Palette: ; Offset_0x00774E:
                clr.b   ($FFFFFE17).w
                move.b  #$FF, ($FFFFDB4C).w
                move.w  #$0000, ($FFFFFE20).w
                move.w  #$0000, ($FFFFFED0).w
                move.b  #$00, ($FFFFFF42).w
                move.b  #$00, ($FFFFFF90).w
                move.b  #$04, ($FFFFDB9F).w
                lea     ($FFFFFF80).w, A2
                moveq   #$00, D0
                move.w  D0, (A2)+
                move.w  D0, (A2)+
                move.w  D0, (A2)+
                move.w  D0, (A2)+
                move.w  D0, (A2)+
                move.w  D0, (A2)+
                moveq   #$18, D0
                bsr     PalLoad1                               ; Offset_0x0026CE
                lea     (Special_Stage_Palette_Idx), A1        ; Offset_0x00773A
                moveq   #$00, D0
                move.b  (Stage_Id).w, D0                             ; $FFFFFE16
                add.w   D0, D0
                move.w  D0, D1
                tst.b   ($FFFFFE00).w
                beq.s   Offset_0x0077AC
                cmpi.b  #$04, D0
                bcs.s   Offset_0x0077AC
                addq.w  #$06, D0
Offset_0x0077AC:
                move.w  $00(A1, D0), D0
                bsr     PalLoad1                               ; Offset_0x0026CE
                lea     ($FFFF8778).w, A0
                adda.w  $00(A0, D1), A0
                move.l  A0, ($FFFFDB88).w
                lea     ($FFFF855C).w, A0
                adda.w  $00(A0, D1), A0
                move.l  A0, ($FFFFDB8E).w
                rts    
;-------------------------------------------------------------------------------            
Load_SS_Result_Title_Cards: ; Offset_0x0077CE:
                dc.w    TC_A, TC_C, TC_D, TC_G, TC_H, TC_I, TC_L, TC_M
                dc.w    TC_P, TC_R, TC_S, TC_T, TC_U, TC_W, TCpt, TC_Break                        
;===============================================================================
; Special Stage
; [ Término ]
;=============================================================================== 

;===============================================================================
; Continue
; [ Início ]
;===============================================================================  
Continue: ; Offset_0x0077EE: 
                bsr     Pal_FadeFrom                           ; Offset_0x002426
                move    #$2700, SR
                move.w  ($FFFFF60C).w, D0
                andi.b  #$BF, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8004, (A6)
                move.w  #$8700, (A6)
                bsr     ClearScreen                            ; Offset_0x0011C4
                lea     ($FFFFB000).w, A1
                moveq   #$00, D0
                move.w  #$07FF, D1
Offset_0x007820:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x007820
                bsr     Offset_0x007982
                move.l  #$60000002, (VDP_Control_Port)               ; $00C00004
                lea     (Miles_In_Continue), A0                ; Offset_0x07BDBE
                bsr     NemesisDec                             ; Offset_0x00149A
                move.l  #$64800002, (VDP_Control_Port)               ; $00C00004
                lea     (Mini_Sonic), A0                       ; Offset_0x07C0AA
                cmpi.w  #$0002, (Player_Selected_Flag).w             ; $FFFFFF7A
                bne.s   Offset_0x00785C
                lea     (Mini_Miles), A0                       ; Offset_0x07C2F2
Offset_0x00785C:
                bsr     NemesisDec                             ; Offset_0x00149A
                moveq   #$0A, D1
                jsr     (Time_Count_Down)                      ; Offset_0x040EF8
                moveq   #$1B, D0
                bsr     PalLoad1                               ; Offset_0x0026CE
                move.w  #$0000, ($FFFFFB80).w
                move.b  #Continue_Snd, D0       ; $9C
                bsr     Play_Music                             ; Offset_0x00131A
                move.w  #$0293, ($FFFFF614).w
                clr.b   ($FFFFF711).w
                clr.l   ($FFFFEEF0).w
                move.l  #$01000000, ($FFFFEEF4).w
                move.b  #$DB, ($FFFFB000).w ; Carrega o objeto 0xDB na memória - Sonic e Miles
                move.b  #$DB, ($FFFFB040).w ; Carrega o objeto 0xDB na memória - Sonic e Miles
                move.b  #$06, ($FFFFB064).w
                move.b  #$DA, ($FFFFB080).w ; Carrega o objeto 0xDA na memória - Contador  
                move.b  #$DA, ($FFFFB0C0).w ; Carrega o objeto 0xDA na memória - Contador
                move.b  #$04, ($FFFFB0E4).w
                jsr     (Load_Objects)                         ; Offset_0x015F22
                jsr     (Build_Sprites)                        ; Offset_0x01658A
                move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                move.w  ($FFFFF60C).w, D0
                ori.b   #$40, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     Pal_FadeTo                             ; Offset_0x002382
Continue_Main_Loop: ; Offset_0x0078DE:
                move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                cmpi.b  #$04, ($FFFFB024).w
                bcc.s   Offset_0x00790C
                move    #$2700, SR
                move.w  ($FFFFF614).w, D1
                divu.w  #$003C, D1
                andi.l  #$0000000F, D1
                jsr     (Time_Count_Down)                      ; Offset_0x040EF8
                move    #$2300, SR
Offset_0x00790C:
                jsr     (Load_Objects)                         ; Offset_0x015F22
                jsr     (Build_Sprites)                        ; Offset_0x01658A
                cmpi.w  #$0180, ($FFFFB048).w
                bcc.s   Offset_0x007938
                cmpi.b  #$04, ($FFFFB024).w
                bcc.s   Continue_Main_Loop                     ; Offset_0x0078DE
                tst.w   ($FFFFF614).w
                bne     Continue_Main_Loop                     ; Offset_0x0078DE
                move.b  #gm_SegaScreen, (Game_Mode).w           ; $00, $FFFFF600
                rts
Offset_0x007938:
                move.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
                move.b  #$03, ($FFFFFE12).w
                move.b  #$03, ($FFFFFEC6).w
                moveq   #$00, D0
                move.w  D0, ($FFFFFE20).w
                move.l  D0, ($FFFFFE22).w
                move.l  D0, ($FFFFFE26).w
                move.b  D0, ($FFFFFE30).w
                move.w  D0, ($FFFFFED0).w
                move.l  D0, ($FFFFFED2).w
                move.l  D0, ($FFFFFED6).w
                move.b  D0, ($FFFFFEE0).w
                move.l  #$00001388, ($FFFFFFA0).w
                move.l  #$00001388, ($FFFFFFA4).w
                subq.b  #$01, ($FFFFFE18).w
                rts
Offset_0x007982:
                move.l  #$70000002, (VDP_Control_Port)               ; $00C00004
                lea     (Title_Card_ZONE_123), A0              ; Offset_0x07D22C
                bsr     NemesisDec                             ; Offset_0x00149A
                lea     (Fg_Mem_Start_Address).w, A4                 ; $FFFF8000
                lea     (Title_Card_AY), A0                    ; Offset_0x07D58A
                bsr     NemesisDec_ToRAM                       ; Offset_0x0014AC
                lea     (Load_Continue_Title_Cards), A0        ; Offset_0x0079DC
                move.l  #$72000002, (VDP_Control_Port)               ; $00C00004
                lea     (Fg_Mem_Start_Address).w, A1                 ; $FFFF8000
                lea     (VDP_Data_Port), A6                          ; $00C00000
Offset_0x0079BE:
                moveq   #$00, D0
                move.b  (A0)+, D0
                bmi.s   Offset_0x0079DA
                lsl.w   #$05, D0
                lea     $00(A1, D0), A2
                moveq   #$00, D1
                move.b  (A0)+, D1
                lsl.w   #$03, D1
                subq.w  #$01, D1
Loop_Copy_Continue_TC_RAM_To_VRAM: ; Offset_0x0079D2:
                move.l  (A2)+, (A6)
                dbra    D1, Loop_Copy_Continue_TC_RAM_To_VRAM  ; Offset_0x0079D2
                bra.s   Offset_0x0079BE
Offset_0x0079DA:
                rts
;-------------------------------------------------------------------------------
Load_Continue_Title_Cards: ; : Offset_0x0079DC:
                dc.w    TC_C, TC_T, TC_I, TC_U, TC_Break        
;-------------------------------------------------------------------------------                
Obj_0xDA_Continue_Counter: ; Offset_0x0079E6:      
                include 'data\objects\obj_0xDA.asm' 
;-------------------------------------------------------------------------------   
Obj_0xDB_Sonic_Miles_Continue: ; Offset_0x007B06:       
                include 'data\objects\obj_0xDB.asm'                      
;===============================================================================
; Continue
; [ Término ]                                                                  
;===============================================================================  

;===============================================================================
; Tela de resultados no modo 2 jogadores
; [ Início ]
;===============================================================================  
Two_Player_Results: ; Offset_0x007CC8:
                bsr     Pal_FadeFrom                           ; Offset_0x002426
                move    #$2700, SR
                move.w  ($FFFFF60C).w, D0
                andi.b  #$BF, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     ClearScreen                            ; Offset_0x0011C4
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8004, (A6)
                move.w  #$8230, (A6)
                move.w  #$8407, (A6)
                move.w  #$8230, (A6)
                move.w  #$8700, (A6)
                move.w  #$8C81, (A6)
                move.w  #$9001, (A6)
                lea     ($FFFFAC00).w, A1
                moveq   #$00, D0
                move.w  #$00FF, D1
Offset_0x007D0E:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x007D0E
                lea     ($FFFFB000).w, A1
                moveq   #$00, D0
                move.w  #$07FF, D1
Offset_0x007D1E:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x007D1E
                move.l  #$42000000, (VDP_Control_Port)               ; $00C00004
                lea     (Menu_Font), A0                        ; Offset_0x07C43A
                bsr     NemesisDec                             ; Offset_0x00149A
                move.l  #$4E000000, (VDP_Control_Port)               ; $00C00004
                lea     (Versus_1P2_Wins_Tied), A0             ; Offset_0x07C9AE
                bsr     NemesisDec                             ; Offset_0x00149A
                lea     ($FFFF0000), A1
                lea     (Versus_Menu_Bg_Mappings), A0          ; Offset_0x07CB80
                move.w  #$6000, D0
                bsr     EnigmaDec                              ; Offset_0x00177A
                lea     ($FFFF0000), A1
                move.l  #$60000003, D0
                moveq   #$27, D1
                moveq   #$1B, D2
                jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
                move.w  ($FFFFFF10).w, D0
                add.w   D0, D0
                add.w   D0, D0
                add.w   D0, D0
                lea     Map_Vs_Mode_Results_Idx(PC), A2        ; Offset_0x008764
                move.l  $00(A2, D0), A0
                move.l  $04(A2, D0), A2
                lea     ($FFFF0000), A1
                move.w  #$0000, D0
                bsr     EnigmaDec                              ; Offset_0x00177A
                jsr     (A2)
                lea     ($FFFF0000), A1
                move.l  #$40000003, D0
                moveq   #$27, D1
                moveq   #$1B, D2
                jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
                clr.w   ($FFFFDC00).w
                move.l  #$FFFFDC00, ($FFFFDCFC).w
                clr.b   ($FFFFF711).w
                clr.w   ($FFFFF7F0).w
                lea     (Menu_Animate), A2                     ; Offset_0x00874E
                jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
                moveq   #$00, D0
                bsr     LoadPLC2                               ; Offset_0x00160C
                moveq   #$26, D0
                bsr     PalLoad1                               ; Offset_0x0026CE
                moveq   #$00, D0
                move.b  #$81, D0
                cmp.w   (Level_Music_Buffer).w, D0                   ; $FFFFFF70
                beq.s   Offset_0x007DF2
                move.w  D0, (Level_Music_Buffer).w                   ; $FFFFFF70
                bsr     Play_Music                             ; Offset_0x00131A
Offset_0x007DF2:
                move.w  #$0707, ($FFFFF614).w
                clr.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                clr.l   ($FFFFEE00).w
                clr.l   ($FFFFEE04).w
                clr.l   ($FFFFF616).w
                clr.l   ($FFFFF61E).w
                clr.l   ($FFFFEEEC).w
                move.b  #$21, ($FFFFB000).w
                move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                move.w  ($FFFFF60C).w, D0
                ori.b   #$40, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     Pal_FadeTo                             ; Offset_0x002382
Offset_0x007E32:
                move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                lea     (Menu_Animate), A2                     ; Offset_0x00874E
                jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
                jsr     (Load_Objects)                         ; Offset_0x015F22
                jsr     (Build_Sprites)                        ; Offset_0x01658A
                bsr     RunPLC                                 ; Offset_0x001646
                tst.l   ($FFFFF680).w
                bne.s   Offset_0x007E32
                move.b  ($FFFFF605).w, D0
                or.b    ($FFFFF607).w, D0
                andi.b  #$80, D0
                beq.s   Offset_0x007E32
                move.w  ($FFFFFF10).w, D0                             
                bne     Offset_0x007F32
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   Offset_0x007EBC
                addq.b  #$01, (Act_Id).w                             ; $FFFFFE11
                move.b  #$01, ($FFFFFF69).w
                move.b  #gm_PlayMode, (Game_Mode).w            ; $0C,  $FFFFF600
                move.b  #$00, ($FFFFFE30).w
                move.b  #$00, ($FFFFFEE0).w
                moveq   #$01, D0
                move.w  D0, (Two_Player_Flag).w                      ; $FFFFFFB8
                move.w  D0, ($FFFFFF6A).w
                moveq   #$00, D0
                move.l  D0, ($FFFFFE26).w
                move.l  D0, ($FFFFFED6).w
                move.l  #$00001388, ($FFFFFFA0).w
                move.l  #$00001388, ($FFFFFFA4).w
                rts
Offset_0x007EBC:
                move.b  #$02, ($FFFFFF69).w
                bsr     Offset_0x008426
                lea     ($FFFFFF38).w, A4
                clr.w   (A4)
                bsr.s   Offset_0x007F1A
                bsr.s   Offset_0x007F1A
                move.b  (A4), D1
                sub.b   $0001(A4), D1
                beq.s   Offset_0x007EE6
                move.w  #$0001, ($FFFFFF10).w
                move.b  #gm_Two_Player_Results, (Game_Mode).w   ; $18, $FFFFF600
                rts
Offset_0x007EE6:
                move.b  ($FFFFFF68).w, D0
                addq.b  #$01, D0
                move.b  D0, (Stage_Id).w                             ; $FFFFFE16
                move.w  #$0003, ($FFFFFF10).w
                move.b  #$01, ($FFFFF7CD).w
                move.b  #gm_SpecialStage, (Game_Mode).w         ; $10, $FFFFF600
                moveq   #$01, D0
                move.w  D0, (Two_Player_Flag).w                      ; $FFFFFFB8
                move.w  D0, ($FFFFFF6A).w
                move.b  #$00, ($FFFFFE30).w
                move.b  #$00, ($FFFFFEE0).w
                rts
Offset_0x007F1A:
                moveq   #$00, D1
                move.b  (A5), D1
                sub.b   $0001(A5), D1
                beq.s   Offset_0x007F2E
                bcs.s   Offset_0x007F2A
                addq.b  #$01, (A4)
                bra.s   Offset_0x007F2E
Offset_0x007F2A:
                addq.b  #$01, $0001(A4)
Offset_0x007F2E:
                addq.w  #$02, A5
                rts
Offset_0x007F32:
                subq.w  #$01, D0
                bne.s   Offset_0x007FA0
Offset_0x007F36:
                lea     ($FFFFFF20).w, A4
                moveq   #$00, D0
                moveq   #$00, D1
                move.w  (A4)+, D0
                add.l   D0, D1
                move.w  (A4)+, D0
                add.l   D0, D1
                addq.w  #$02, A4
                move.w  (A4)+, D0
                add.l   D0, D1
                move.w  (A4)+, D0
                add.l   D0, D1
                addq.w  #$02, A4
                move.w  (A4)+, D0
                add.l   D0, D1
                move.w  (A4)+, D0
                add.l   D0, D1
                addq.w  #$02, A4
                move.w  (A4)+, D0
                add.l   D0, D1
                move.w  (A4)+, D0
                add.l   D0, D1
                swap.w  D1
                tst.w   D1
                bne.s   Offset_0x007F78
                move.w  #$0002, ($FFFFFF10).w
                move.b  #gm_Two_Player_Results, (Game_Mode).w  ; $18,  $FFFFF600
                rts
Offset_0x007F78:
                tst.w   ($FFFFFF78).w
                beq.s   Offset_0x007F98
                lea     ($FFFFFF20).w, A1
                moveq   #$0B, D0
Offset_0x007F84:
                move.w  #$FFFF, (A1)+
                dbra    D0, Offset_0x007F84
                move.b  #$03, ($FFFFFE12).w
                move.b  #$03, ($FFFFFEC6).w
Offset_0x007F98:
                move.b  #gm_Versus_Mode_Menu, (Game_Mode).w     ; $1C, $FFFFF600
                rts
Offset_0x007FA0:
                subq.w  #$01, D0
                bne.s   Offset_0x007FAC
                move.b  #gm_SegaScreen, (Game_Mode).w           ; $00, $FFFFF600
                rts
Offset_0x007FAC:
                subq.w  #$01, D0
                bne     Offset_0x00803A
                cmpi.b  #$03, ($FFFFFF68).w
                beq.s   Offset_0x007FC8
                move.w  #$0001, ($FFFFFF10).w
                move.b  #gm_Two_Player_Results, (Game_Mode).w  ; $18,  $FFFFF600
                rts
Offset_0x007FC8:
                tst.b   ($FFFFFF69).w
                beq.s   Offset_0x007FEC
                cmpi.b  #$02, ($FFFFFF69).w
                beq.s   Offset_0x00802C
                bsr     Offset_0x008426
                lea     ($FFFFFF38).w, A4
                clr.w   (A4)
                bsr.s   Offset_0x008014
                bsr.s   Offset_0x008014
                move.b  (A4), D1
                sub.b   $0001(A4), D1
                bne.s   Offset_0x00802C
Offset_0x007FEC:
                addq.b  #$01, ($FFFFFF69).w
                addq.b  #$01, (Stage_Id).w                           ; $FFFFFE16
                move.w  #$0003, ($FFFFFF10).w
                move.b  #$01, ($FFFFF7CD).w
                move.b  #gm_SpecialStage, (Game_Mode).w         ; $10, $FFFFF600
                move.w  #$0001, (Two_Player_Flag).w                  ; $FFFFFFB8
                move.w  #$0000, (Level_Music_Buffer).w               ; $FFFFFF70
                rts
Offset_0x008014:
                moveq   #$00, D1
                move.b  (A5), D1
                sub.b   $0001(A5), D1
                beq.s   Offset_0x008028
                bcs.s   Offset_0x008024
                addq.b  #$01, (A4)
                bra.s   Offset_0x008028
Offset_0x008024:
                addq.b  #$01, $0001(A4)
Offset_0x008028:
                addq.w  #$02, A5
                rts
Offset_0x00802C:
                move.w  #$0004, ($FFFFFF10).w
                move.b  #gm_Two_Player_Results, (Game_Mode).w   ; $18, $FFFFF600
                rts
Offset_0x00803A:
                bra     Offset_0x007F36                
;-------------------------------------------------------------------------------
Obj_0x21_2P_Versus_Results: ; Offset_0x00803E:    
                include 'data\objects\obj_0x21.asm'     
;===============================================================================
; Sub Rotina Vs_Mode_Current_Act_Results
; [ Início ]
;===============================================================================   
Vs_Mode_Current_Act_Results: ; Offset_0x00811C:
                move.w  #$01F2, D2
                moveq   #$00, D0
                bsr     Offset_0x0085F4
                move.w  #$0216, D2
                moveq   #$00, D1
                move.b  ($FFFFFF69).w, D1
                addq.b  #$01, D1
                bsr     Offset_0x008632
                move.w  #$033E, D2
                move.l  ($FFFFFE26).w, D1
                bsr     Offset_0x008678
                move.w  #$0352, D2
                move.l  ($FFFFFED6).w, D1
                bsr     Offset_0x008678
                move.w  #$03DA, D2
                moveq   #$00, D0
                move.w  ($FFFFFE22).w, D1
                bsr     Offset_0x008632
                move.w  #$03E0, D2
                moveq   #$00, D1
                move.b  ($FFFFFE24).w, D1
                bsr     Offset_0x008632
                move.w  #$03E6, D2
                moveq   #$00, D1
                move.b  ($FFFFFE25).w, D1
                mulu.w  #$01B0, D1
                lsr.l   #$08, D1
                bsr     Offset_0x008632
                move.w  #$03EE, D2
                moveq   #$00, D0
                move.w  ($FFFFFED2).w, D1
                bsr     Offset_0x008632
                move.w  #$03F4, D2
                moveq   #$00, D1
                move.b  ($FFFFFED4).w, D1
                bsr     Offset_0x008632
                move.w  #$03FA, D2
                moveq   #$00, D1
                move.b  ($FFFFFED5).w, D1
                mulu.w  #$01B0, D1
                lsr.l   #$08, D1
                bsr     Offset_0x008632
                move.w  #$0486, D2
                moveq   #$00, D0
                move.w  ($FFFFFE20).w, D1
                bsr     Offset_0x008632
                move.w  #$049A, D2
                move.w  ($FFFFFED0).w, D1
                bsr     Offset_0x008632
                move.w  #$0526, D2
                moveq   #$00, D0
                move.w  ($FFFFFEF0).w, D1
                bsr     Offset_0x008632
                move.w  #$053A, D2
                move.w  ($FFFFFEF2).w, D1
                bsr     Offset_0x008632
                move.w  #$05C6, D2
                moveq   #$00, D0
                move.w  ($FFFFFEF4).w, D1
                bsr     Offset_0x008632
                move.w  #$05DA, D2
                move.w  ($FFFFFEF6).w, D1
                bsr     Offset_0x008632
                bsr     Offset_0x0083F8
                move.w  #$0364, D2
                move.w  #$6000, D0
                move.l  ($FFFFFE26).w, D1
                sub.l   ($FFFFFED6).w, D1
                bsr     Offset_0x0085D4
                move.w  #$0404, D2
                move.l  ($FFFFFED2).w, D1
                sub.l   ($FFFFFE22).w, D1
                bsr     Offset_0x0085D4
                move.w  #$04A4, D2
                moveq   #$00, D1
                move.w  ($FFFFFE20).w, D1
                sub.w   ($FFFFFED0).w, D1
                bsr     Offset_0x0085D4
                move.w  #$0544, D2
                moveq   #$00, D1
                move.w  ($FFFFFEF0).w, D1
                sub.w   ($FFFFFEF2).w, D1
                bsr     Offset_0x0085D4
                move.w  #$05E4, D2
                moveq   #$00, D1
                move.w  ($FFFFFEF4).w, D1
                sub.w   ($FFFFFEF6).w, D1
                bsr     Offset_0x0085D4
                move.w  #$0706, D2
                moveq   #$00, D0
                moveq   #$00, D1
                move.b  (A4), D1
                bsr     Offset_0x008632
                move.w  #$070E, D2
                moveq   #$00, D1
                move.b  $0001(A4), D1
                bsr     Offset_0x008632
                move.w  (A4), ($FFFFFF38).w
                rts  
;===============================================================================
; Sub Rotina Vs_Mode_Current_Act_Results
; [ Término ]
;===============================================================================  

;===============================================================================
; Sub Rotina Vs_Mode_Current_Level_Results
; [ Início ]
;===============================================================================   
Vs_Mode_Current_Level_Results: ; Offset_0x00827C:  
                move.w  #$0242, D2
                moveq   #$00, D0
                bsr     Offset_0x0085F4
                bsr     Offset_0x008426
                lea     ($FFFFFF38).w, A4
                clr.w   (A4)
                move.w  #$0398, D6
                bsr     Offset_0x0084CC
                move.w  #$0488, D6
                bsr     Offset_0x0084CC
                move.w  #$0618, D6
                bsr     Offset_0x0084CC
                rts
;===============================================================================
; Sub Rotina Vs_Mode_Current_Level_Results
; [ Término ]
;===============================================================================  

;===============================================================================
; Sub Rotina Vs_Mode_Global_Results
; [ Início ]
;===============================================================================  
Vs_Mode_Global_Results: ; Offset_0x0082AA:  
                lea     ($FFFFFF20).w, A5
                lea     ($FFFFFF38).w, A4
                clr.w   (A4)
                move.w  #$0208, D6
                bsr     Offset_0x008446
                move.w  #$0258, D6
                bsr     Offset_0x008446
                move.w  #$02A8, D6
                bsr     Offset_0x008446
                move.w  #$0348, D6
                bsr     Offset_0x008446
                move.w  #$0398, D6
                bsr     Offset_0x008446
                move.w  #$03E8, D6
                bsr     Offset_0x008446
                move.w  #$0488, D6
                bsr     Offset_0x008446
                move.w  #$04D8, D6
                bsr     Offset_0x008446
                move.w  #$0528, D6
                bsr     Offset_0x008446
                move.w  #$05C8, D6
                bsr     Offset_0x008446
                move.w  #$0618, D6
                bsr     Offset_0x008446
                move.w  #$0668, D6
                bsr     Offset_0x008446
                move.w  #$070A, D2
                moveq   #$00, D0
                moveq   #$00, D1
                move.b  (A4), D1
                bsr     Offset_0x008632
                move.w  #$0710, D2
                moveq   #$00, D1
                move.b  $0001(A4), D1
                bsr     Offset_0x008632
                rts
;===============================================================================
; Sub Rotina Vs_Mode_Global_Results
; [ Término ]
;===============================================================================  

;===============================================================================
; Sub Rotina Vs_Mode_SS_Results
; [ Início ]
;===============================================================================  
Vs_Mode_SS_Results: ; Offset_0x008332:   
                move.w  #$0266, D2
                moveq   #$00, D1
                move.b  ($FFFFFF69).w, D1
                addq.b  #$01, D1
                bsr     Offset_0x008632
                move.w  #$04D6, D2
                moveq   #$00, D0
                move.w  ($FFFFFF80).w, D1
                bsr     Offset_0x008632
                move.w  #$04E6, D2
                move.w  ($FFFFFF82).w, D1
                bsr     Offset_0x008632
                move.w  #$0576, D2
                moveq   #$00, D0
                move.w  ($FFFFFF84).w, D1       
                bsr     Offset_0x008632
                move.w  #$0586, D2
                move.w  ($FFFFFF86).w, D1
                bsr     Offset_0x008632
                move.w  #$0616, D2
                moveq   #$00, D0
                move.w  ($FFFFFF88).w, D1
                bsr     Offset_0x008632
                move.w  #$0626, D2
                move.w  ($FFFFFF8A).w, D1
                bsr     Offset_0x008632
                bsr     Offset_0x0083F8
                move.w  #$6000, D0
                move.w  #$04F0, D2
                moveq   #$00, D1
                move.w  ($FFFFFF80).w, D1
                sub.w   ($FFFFFF82).w, D1
                bsr     Offset_0x0085D4
                move.w  #$0590, D2
                moveq   #$00, D1
                move.w  ($FFFFFF84).w, D1              
                sub.w   ($FFFFFF86).w, D1
                bsr     Offset_0x0085D4
                move.w  #$0630, D2
                moveq   #$00, D1
                move.w  ($FFFFFF88).w, D1
                sub.w   ($FFFFFF8A).w, D1
                bsr     Offset_0x0085D4
                move.w  (A4), ($FFFFFF38).w
                rts
;===============================================================================
; Sub Rotina Vs_Mode_SS_Results
; [ Término ]
;===============================================================================   

;===============================================================================
; Sub Rotina Vs_Mode_All_SS_Results
; [ Início ]
;===============================================================================  
Vs_Mode_All_SS_Results: ; Offset_0x0083D4:  
                bsr     Offset_0x008426
                lea     ($FFFFFF38).w, A4
                clr.w   (A4)
                move.w  #$04D4, D6
                bsr     Offset_0x008550
                move.w  #$0574, D6
                bsr     Offset_0x008550
                move.w  #$0614, D6
                bsr     Offset_0x008550
                rts  
;===============================================================================
; Sub Rotina Vs_Mode_All_SS_Results
; [ Término ]
;===============================================================================   


Offset_0x0083F8:
                lea     ($FFFFFF20).w, A4
                move.b  ($FFFFFF68).w, D0
                beq.s   Offset_0x008416
                lea     ($FFFFFF26).w, A4
                subq.b  #$01, D0
                beq.s   Offset_0x008416
                lea     ($FFFFFF2C).w, A4
                subq.b  #$01, D0
                beq.s   Offset_0x008416
                lea     ($FFFFFF32).w, A4
Offset_0x008416:
                moveq   #$00, D0
                move.b  ($FFFFFF69).w, D0
                add.w   D0, D0
                lea     $00(A4, D0), A4
                clr.w   (A4)
                rts
;-------------------------------------------------------------------------------                
Offset_0x008426:
                lea     ($FFFFFF20).w, A5
                move.b  ($FFFFFF68).w, D0
                beq.s   Offset_0x008444
                lea     ($FFFFFF26).w, A5
                subq.b  #$01, D0
                beq.s   Offset_0x008444
                lea     ($FFFFFF2C).w, A5
                subq.b  #$01, D0
                beq.s   Offset_0x008444
                lea     ($FFFFFF32).w, A5
Offset_0x008444:
                rts    
;-------------------------------------------------------------------------------               
Offset_0x008446:
                move.w  (A5), D0
                bmi.s   Offset_0x00847E
                move.w  D6, D2
                moveq   #$00, D0
                moveq   #$00, D1
                move.b  (A5), D1
                bsr     Offset_0x008632
                addq.w  #$08, D6
                move.w  D6, D2
                moveq   #$00, D1
                move.b  $0001(A5), D1
                bsr     Offset_0x008632
                addi.w  #$0012, D6
                move.w  D6, D2
                move.w  #$6000, D0
                moveq   #$00, D1
                move.b  (A5), D1
                sub.b   $0001(A5), D1
                bsr     Offset_0x0085D4
                addq.w  #$02, A5
                rts               
Offset_0x00847E:
                addq.w  #$04, D6
                not.w   D0
                bne.s   Offset_0x0084A4
                lea     (Map_No_Game), A1                      ; Offset_0x008732
                move.w  D6, D2
                bsr     Offset_0x00861A
                addi.w  #$0016, D6
                move.w  D6, D2
                lea     (Map_Blank), A1                        ; Offset_0x008748
                bsr     Offset_0x00861A
                addq.w  #$02, A5
                rts                  
Offset_0x0084A4:
                moveq   #$00, D0
                lea     (Map_Game_Over), A1                    ; Offset_0x00871E
                move.w  D6, D2
                bsr     Offset_0x00861A
                addi.w  #$0016, D6
                move.w  D6, D2
                move.w  #$6000, D0
                moveq   #$00, D1
                move.b  (A5), D1
                sub.b   $0001(A5), D1
                bsr     Offset_0x0085D4
                addq.w  #$02, A5
                rts                
;-------------------------------------------------------------------------------    
Offset_0x0084CC:
                move.w  (A5), D0
                bmi.s   Offset_0x008504
                move.w  D6, D2
                moveq   #$00, D0
                moveq   #$00, D1
                move.b  (A5), D1
                bsr     Offset_0x008632
                addq.w  #$08, D6
                move.w  D6, D2
                moveq   #$00, D1
                move.b  $0001(A5), D1
                bsr     Offset_0x008632
                addi.w  #$000C, D6
                move.w  D6, D2
                move.w  #$6000, D0
                moveq   #$00, D1
                move.b  (A5), D1
                sub.b   $0001(A5), D1
                bsr     Offset_0x0085D4
                addq.w  #$02, A5
                rts
Offset_0x008504:
                not.w   D0
                bne.s   Offset_0x008528
                lea     (Map_No_Game), A1                      ; Offset_0x008732
                move.w  D6, D2
                bsr     Offset_0x00861A
                addi.w  #$0014, D6
                move.w  D6, D2
                lea     (Map_Blank), A1                        ; Offset_0x008748
                bsr     Offset_0x00861A
                addq.w  #$02, A5
                rts     
Offset_0x008528:
                moveq   #$00, D0
                lea     (Map_Game_Over), A1                    ; Offset_0x00871E
                move.w  D6, D2
                bsr     Offset_0x00861A
                addi.w  #$0014, D6
                move.w  D6, D2
                move.w  #$6000, D0
                moveq   #$00, D1
                move.b  (A5), D1
                sub.b   $0001(A5), D1
                bsr     Offset_0x0085D4
                addq.w  #$02, A5
                rts                           
;-------------------------------------------------------------------------------    
Offset_0x008550:
                move.w  (A5), D0
                bmi.s   Offset_0x00858A
                move.w  D6, D2
                moveq   #$00, D0
                moveq   #$00, D1
                move.b  (A5), D1
                bsr     Offset_0x008632
                addi.w  #$000C, D6
                move.w  D6, D2
                moveq   #$00, D1
                move.b  $0001(A5), D1
                bsr     Offset_0x008632
                addi.w  #$0010, D6
                move.w  D6, D2
                move.w  #$6000, D0
                moveq   #$00, D1
                move.b  (A5), D1
                sub.b   $0001(A5), D1
                bsr     Offset_0x0085D4
                addq.w  #$02, A5
                rts
Offset_0x00858A:
                not.w   D0
                bne.s   Offset_0x0085AE
                lea     (Map_No_Game), A1                      ; Offset_0x008732
                move.w  D6, D2
                addq.w  #$04, D2
                bsr     Offset_0x00861A
                addi.w  #$0014, D6
                move.w  D6, D2
                lea     (Map_Blank), A1                        ; Offset_0x008748
                bsr.s   Offset_0x00861A
                addq.w  #$02, A5
                rts       
Offset_0x0085AE:
                moveq   #$00, D0
                lea     (Map_Game_Over), A1                    ; Offset_0x00871E
                move.w  D6, D2
                bsr.s   Offset_0x00861A
                addi.w  #$0014, D6
                move.w  D6, D2
                move.w  #$6000, D0
                moveq   #$00, D1
                move.b  (A5), D1
                sub.b   $0001(A5), D1
                bsr     Offset_0x0085D4
                addq.w  #$02, A5
                rts          
Offset_0x0085D4:
                lea     (Map_Tied), A1                         ; Offset_0x00873A
                beq.s   Offset_0x0085F2
                bcs.s   Offset_0x0085E8
                lea     (Map_1P), A1                           ; Offset_0x008740
                addq.b  #$01, (A4)
                bra.s   Offset_0x0085F2
Offset_0x0085E8:
                lea     (Map_2P), A1                           ; Offset_0x008744
                addq.b  #$01, $0001(A4)
Offset_0x0085F2:
                bra.s   Offset_0x00861A                               
;-------------------------------------------------------------------------------  
Offset_0x0085F4:
                lea     (Map_Emerald_Hill), A1                 ; Offset_0x0086CC
                move.b  ($FFFFFF68).w, D1
                beq.s   Offset_0x00861A
                lea     (Map_Mystic_Cave), A1                  ; Offset_0x0086DA
                subq.b  #$01, D1
                beq.s   Offset_0x00861A
                lea     (Map_Casino_Night), A1                 ; Offset_0x0086E8
                subq.b  #$01, D1
                beq.s   Offset_0x00861A
                lea     (Map_Special_Stage), A1                ; Offset_0x0086F6
Offset_0x00861A:
                lea     ($FFFF0000), A2
                lea     $00(A2, D2), A2
                moveq   #$00, D1
                move.b  (A1)+, D1
Offset_0x008628:
                move.b  (A1)+, D0
                move.w  D0, (A2)+
                dbra    D1, Offset_0x008628
                rts
;-------------------------------------------------------------------------------    
Offset_0x008632:
                lea     ($FFFF0000), A2
                lea     $00(A2, D2), A2
                lea     (Offset_0x008672), A3
                moveq   #$00, D2
                moveq   #$02, D5
Offset_0x008646:
                moveq   #$00, D3
                move.w  (A3)+, D4
Offset_0x00864A:
                sub.w   D4, D1
                bcs.s   Offset_0x008652
                addq.w  #$01, D3
                bra.s   Offset_0x00864A
Offset_0x008652:
                add.w   D4, D1
                tst.w   D5
                beq.s   Offset_0x008662
                tst.w   D3
                beq.s   Offset_0x00865E
                moveq   #$01, D2
Offset_0x00865E:
                tst.w   D2
                beq.s   Offset_0x00866A
Offset_0x008662:
                addi.b  #$10, D3
                move.b  D3, D0
                move.w  D0, (A2)
Offset_0x00866A:
                addq.w  #$02, A2
                dbra    D5, Offset_0x008646
                rts
;-------------------------------------------------------------------------------                    
Offset_0x008672:
                dc.w    $0064, $000A, $0001                   
;-------------------------------------------------------------------------------    
Offset_0x008678:
                lea     ($FFFF0000), A2
                lea     $00(A2, D2), A2
                lea     (Offset_0x0086B4), A3
                moveq   #$00, D2
                moveq   #$05, D5
Offset_0x00868C:
                moveq   #$00, D3
                move.l  (A3)+, D4
Offset_0x008690:
                sub.l   D4, D1
                bcs.s   Offset_0x008698
                addq.w  #$01, D3
                bra.s   Offset_0x008690
Offset_0x008698:
                add.l   D4, D1
                tst.w   D3
                beq.s   Offset_0x0086A0
                moveq   #$01, D2
Offset_0x0086A0:
                tst.w   D2
                beq.s   Offset_0x0086AC
                addi.b  #$10, D3
                move.b  D3, D0
                move.w  D0, (A2)
Offset_0x0086AC:
                addq.w  #$02, A2
                dbra    D5, Offset_0x00868C
                rts
;-------------------------------------------------------------------------------                  
Offset_0x0086B4:
                dc.l    $000186A0, $00002710, $000003E8, $00000064
                dc.l    $0000000A, $00000001                   
;-------------------------------------------------------------------------------  
Map_Emerald_Hill:  ; Offset_0x0086CC:
                dc.b    $0B,_E,_M,_E,_R,_A,_L,_D,__,_H,_I,_L,_L
                dc.b    $00 
Map_Mystic_Cave:   ; Offset_0x0086DA:
                dc.b    $0B,__,_M,_Y,_S,_T,_I,_C,__,_C,_A,_V,_E 
                dc.b    $00
Map_Casino_Night:  ; Offset_0x0086E8:
                dc.b    $0B,_C,_A,_S,_I,_N,_O,__,_N,_I,_G,_H,_T
                dc.b    $00
Map_Special_Stage: ; Offset_0x0086F6:
                dc.b    $0C,_S,_P,_E,_C,_I,_A,_L,__,_S,_T,_A,_G,_E   
Map_Special: ; Offset_0x008704:    
                dc.b    $0B,__,__,__,_S,_P,_E,_C,_I,_A,_L,__,__  
                dc.b    $00          
Map_Zone: ; Offset_0x008712:
                dc.b    $04,_Z,_O,_N,_E,__ 
Map_Stage: ; Offset_0x008718:
                dc.b    $04,_S,_T,_A,_G,_E                                                                                                 
Map_Game_Over: ; Offset_0x00871E:  
                dc.b    $08,_G,_A,_M,_E,__,_O,_V,_E,_R
; Map_Time_Over: ; Offset_0x008728:               
                dc.b    $08,_T,_I,_M,_E,__,_O,_V,_E,_R
Map_No_Game: ; Offset_0x008732:
                dc.b    $06,_N,_O,__,_G,_A,_M,_E
Map_Tied: ; Offset_0x00873A:  
                dc.b    $03,_T,_I,_E,_D
                dc.b    $00
Map_1P: ; Offset_0x008740:  
                dc.b    $02,__,_1,_P
Map_2P: ; Offset_0x008744:           
                dc.b    $02,__,_2,_P
Map_Blank: ; Offset_0x008748:   
                dc.b    $03,__,__,__,__
                dc.b    $00
;-------------------------------------------------------------------------------  
                 
Menu_Animate: ; Offset_0x00874E:  
                dc.w    $0000                   ; Total de Animações     
                dc.l    ($FF<<$18)|Sonic_Miles  ; Offset_0x27CD2C
                dc.w    $0020                   ; VRAM 
                dc.w    $060A                   ; Quadros / Tiles
                dc.w    $00C7, $0A05, $1405, $1EC7, $1405, $0A05 ; Carregar quadro / Tempo do quadro                 
;------------------------------------------------------------------------------- 
Map_Vs_Mode_Results_Idx: ; Offset_0x008764:                                             
                dc.l    Map_Vs_Mode_Current_Act_Results   ; Offset_0x00878C
                dc.l    Vs_Mode_Current_Act_Results       ; Offset_0x00811C
                dc.l    Map_Vs_Mode_Current_Level_Results ; Offset_0x008856
                dc.l    Vs_Mode_Current_Level_Results     ; Offset_0x00827C
                dc.l    Map_Vs_Mode_Global_Results        ; Offset_0x0088E8
                dc.l    Vs_Mode_Global_Results            ; Offset_0x0082AA
                dc.l    Map_Vs_Mode_SS_Results            ; Offset_0x008A2C
                dc.l    Vs_Mode_SS_Results                ; Offset_0x008332
                dc.l    Map_Vs_Mode_All_SS_Results        ; Offset_0x008AB8
                dc.l    Vs_Mode_All_SS_Results            ; Offset_0x0083D4
;-------------------------------------------------------------------------------
Map_Vs_Mode_Current_Act_Results:                              ; Offset_0x00878C: 
                incbin  'data\all\vsactres.eni'               
Map_Vs_Mode_Current_Level_Results:                            ; Offset_0x008856:
                incbin  'data\all\vslvlres.eni'                  
Map_Vs_Mode_Global_Results:                                   ; Offset_0x0088E8:    
                incbin  'data\all\vsgblres.eni'             
Map_Vs_Mode_SS_Results:                                       ; Offset_0x008A2C:                           
                incbin  'data\all\vs_ssres.eni' 
Map_Vs_Mode_All_SS_Results:                                   ; Offset_0x008AB8: 
                incbin  'data\all\vsall_ss.eni'                                        
;===============================================================================
; Tela de resultados no modo 2 jogadores
; [ Término ]
;===============================================================================  
                    
;===============================================================================
; Menu de opções, menu de seleção de fases no modo 1 e 2 jogadores 
; [ Início ]
;=============================================================================== 
Main_Menu_Screen: ; Offset_0x008B50:   
                bsr     Pal_FadeFrom                           ; Offset_0x002426
                move    #$2700, SR
                move.w  ($FFFFF60C).w, D0
                andi.b  #$BF, D0                                     ; $00C00004
                move.w  D0, (VDP_Control_Port)
                bsr     ClearScreen                            ; Offset_0x0011C4
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8004, (A6)
                move.w  #$8230, (A6)
                move.w  #$8407, (A6)
                move.w  #$8230, (A6)
                move.w  #$8700, (A6)
                move.w  #$8C81, (A6)
                move.w  #$9001, (A6)
                lea     ($FFFFAC00).w, A1
                moveq   #$00, D0
                move.w  #$00FF, D1
Offset_0x008B96:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x008B96
                lea     ($FFFFB000).w, A1
                moveq   #$00, D0
                move.w  #$07FF, D1
Offset_0x008BA6:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x008BA6
                clr.w   ($FFFFDC00).w
                move.l  #$FFFFDC00, ($FFFFDCFC).w
                move.l  #$42000000, (VDP_Control_Port)               ; $00C00004
                lea     (Menu_Font), A0                        ; Offset_0x07C43A
                bsr     NemesisDec                             ; Offset_0x00149A
                move.l  #$4E000000, (VDP_Control_Port)               ; $00C00004
                lea     (Menu_Frame), A0                       ; Offset_0x07D990
                bsr     NemesisDec                             ; Offset_0x00149A
                move.l  #$52000000, (VDP_Control_Port)               ; $00C00004
                lea     (Level_Icons), A0                      ; Offset_0x07DA10
                bsr     NemesisDec                             ; Offset_0x00149A
                lea     ($FFFF0000), A1
                lea     (Versus_Menu_Bg_Mappings), A0          ; Offset_0x07CB80
                move.w  #$6000, D0
                bsr     EnigmaDec                              ; Offset_0x00177A
                lea     ($FFFF0000), A1
                move.l  #$60000003, D0
                moveq   #$27, D1
                moveq   #$1B, D2
                jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
                cmpi.b  #gm_Options_Menu, (Game_Mode).w         ; $24, $FFFFF600
                beq     Options_Menu                           ; Offset_0x008F56
                cmpi.b  #gm_Level_Select_Menu, (Game_Mode).w    ; $28, $FFFFF600
                beq     Level_Select_Menu                      ; Offset_0x00928C
;===============================================================================
Level_Select_Menu_2P:                 
                lea     ($FFFF0000), A1
                lea     (Vs_Level_Select_Frame_Mappings), A0   ; Offset_0x009A0E
                move.w  #$0070, D0
                bsr     EnigmaDec                              ; Offset_0x00177A
                lea     ($FFFF0198), A1
                lea     (Vs_Level_Select_Frame_Mappings), A0   ; Offset_0x009A0E
                move.w  #$2070, D0
                bsr     EnigmaDec                              ; Offset_0x00177A
                lea     ($FFFF0330), A1
                lea     (Menu_Icons_Mappings), A0              ; Offset_0x009BE0
                move.w  #$0090, D0
                bsr     EnigmaDec                              ; Offset_0x00177A
                lea     ($FFFF0498), A2
                moveq   #$0F, D1
Offset_0x008C76:
                move.w  #$207B, (A2)+
                dbra    D1, Offset_0x008C76
                bsr     Offset_0x008E04
                addq.b  #$01, ($FFFFFF68).w
                andi.b  #$03, ($FFFFFF68).w
                bsr     Offset_0x008EA4
                addq.b  #$01, ($FFFFFF68).w
                andi.b  #$03, ($FFFFFF68).w
                bsr     Offset_0x008EA4
                addq.b  #$01, ($FFFFFF68).w
                andi.b  #$03, ($FFFFFF68).w
                bsr     Offset_0x008EA4
                addq.b  #$01, ($FFFFFF68).w
                andi.b  #$03, ($FFFFFF68).w
                clr.w   ($FFFFFF7A).w
                clr.b   ($FFFFFF69).w
                clr.w   ($FFFFFF10).w
                clr.b   ($FFFFF711).w
                clr.w   ($FFFFF7F0).w
                clr.w   ($FFFFFF78).w
                lea     (Menu_Animate), A2                     ; Offset_0x00874E
                jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
                moveq   #$26, D0
                bsr     PalLoad1                               ; Offset_0x0026CE
                lea     ($FFFFFB40).w, A1
                lea     ($FFFFFBC0).w, A2
                moveq   #$07, D1
Offset_0x008CEA:
                move.l  (A1), (A2)+
                clr.l   (A1)+
                dbra    D1, Offset_0x008CEA
                move.b  #Main_Menu_Snd, D0      ; $91
                jsr     (Play_Music)                           ; Offset_0x00131A
                move.w  #$0707, ($FFFFF614).w
                clr.w   ($FFFFFFB8).w
                clr.l   ($FFFFEE00).w
                clr.l   ($FFFFEE04).w
                move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                move.w  ($FFFFF60C).w, D0
                ori.b   #$40, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     Pal_FadeTo                             ; Offset_0x002382
Offset_0x008D2A:
                move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                move    #$2700, SR
                bsr     Offset_0x008EA4
                bsr     Offset_0x008DE0
                bsr     Offset_0x008E04
                move    #$2300, SR
                lea     (Menu_Animate), A2                     ; Offset_0x00874E
                jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
                move.b  ($FFFFF605).w, D0
                or.b    ($FFFFF607).w, D0
                andi.b  #$80, D0
                bne.s   Offset_0x008D66
                bra     Offset_0x008D2A
Offset_0x008D66:
                bsr     Offset_0x008E86
                bmi.s   Offset_0x008D7A
                move.w  #$00ED, D0
                jsr     (Play_Sfx)                             ; Offset_0x00132C
                bra     Offset_0x008D2A
Offset_0x008D7A:
                moveq   #$00, D0
                move.b  ($FFFFFF68).w, D0
                add.w   D0, D0
                move.w  Menu_Level_Select_Array_2P(PC, D0), D0 ; Offset_0x008DD8
                bmi.s   Menu_Load_Special_Stage_2P             ; Offset_0x008DC0
                move.w  D0, (Level_Id).w                             ; $FFFFFE10
                move.w  #$0001, (Two_Player_Flag).w                  ; $FFFFFFB8
                move.b  #$0C, (Game_Mode).w                          ; $FFFFF600
                move.b  #$00, ($FFFFFE30).w
                move.b  #$00, ($FFFFFEE0).w
                moveq   #$00, D0
                move.l  D0, ($FFFFFE26).w
                move.l  D0, ($FFFFFED6).w
                move.l  #$00001388, ($FFFFFFA0).w
                move.l  #$00001388, ($FFFFFFA4).w
                rts
Menu_Load_Special_Stage_2P: ; Offset_0x008DC0:
                move.b  #$04, (Stage_Id).w                           ; $FFFFFE16
                move.b  #gm_SpecialStage, (Game_Mode).w         ; $10, $FFFFF600
                moveq   #$01, D0
                move.w  D0, ($FFFFFFB8).w
                move.w  D0, ($FFFFFF6A).w
                rts
Menu_Level_Select_Array_2P: ; Offset_0x008DD8:                
                dc.w    $0000, $0B00, $0C00, $FFFF
Offset_0x008DE0:
                move.b  ($FFFFF605).w, D0
                or.b    ($FFFFF607).w, D0
                move.b  D0, D1
                andi.b  #$03, D0
                beq.s   Offset_0x008DF6
                bchg    #01, ($FFFFFF68).w
Offset_0x008DF6:
                andi.b  #$0C, D1
                beq.s   Offset_0x008E02
                bchg    #00, ($FFFFFF68).w
Offset_0x008E02:
                rts
Offset_0x008E04:
                moveq   #$00, D0
                move.b  ($FFFFFF68).w, D0
                lsl.w   #$04, D0
                lea     (Level_Select_Text_2P), A3             ; Offset_0x008F08
                lea     $00(A3, D0), A3
                move.w  #$6000, D0
                lea     ($FFFF0048), A2
                move.l  (A3)+, A1
                bsr     Offset_0x008F48
                lea     ($FFFF0094), A2
                move.l  (A3)+, A1
                bsr     Offset_0x008F48
                lea     ($FFFF00D8), A2
                move.l  $0004(A3), A1
                bsr     Offset_0x008E86
                bmi.s   Offset_0x008E48
                lea     ($FFFF0468), A1
Offset_0x008E48:
                moveq   #$02, D1
Offset_0x008E4A:
                move.l  (A1)+, (A2)+
                move.l  (A1)+, (A2)+
                lea     $001A(A2), A2
                dbra    D1, Offset_0x008E4A
                lea     ($FFFF0000), A1
                move.l  (A3)+, D0
                moveq   #$10, D1
                moveq   #$0B, D2
                jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
                lea     (Pal_Levels_Icons), A1                 ; Offset_0x00982E
                moveq   #$00, D0
                move.b  (A3), D0
                lsl.w   #$05, D0
                lea     $00(A1, D0), A1
                lea     ($FFFFFB40).w, A2
                moveq   #$07, D1
Offset_0x008E7E:
                move.l  (A1)+, (A2)+
                dbra    D1, Offset_0x008E7E
                rts
Offset_0x008E86:
                moveq   #$00, D0
                move.b  ($FFFFFF68).w, D0
                move.w  D0, D1
                add.w   D0, D0
                add.w   D1, D0
                add.w   D0, D0
                lea     ($FFFFFF20).w, A5
                lea     $00(A5, D0), A5
                move.w  (A5), D0
                add.w   $0002(A5), D0
                rts
Offset_0x008EA4:
                moveq   #$00, D0
                move.b  ($FFFFFF68).w, D0
                lsl.w   #$04, D0
                lea     (Level_Select_Text_2P), A3             ; Offset_0x008F08    
                lea     $00(A3, D0), A3
                moveq   #$00, D0
                lea     ($FFFF01E0), A2
                move.l  (A3)+, A1
                bsr     Offset_0x008F48
                lea     ($FFFF022C), A2
                move.l  (A3)+, A1
                bsr     Offset_0x008F48
                lea     ($FFFF0270), A2
                lea     ($FFFF0498), A1
                bsr     Offset_0x008E86
                bmi.s   Offset_0x008EE8
                lea     ($FFFF0468), A1
Offset_0x008EE8:
                moveq   #$02, D1
Offset_0x008EEA:
                move.l  (A1)+, (A2)+
                move.l  (A1)+, (A2)+
                lea     $001A(A2), A2
                dbra    D1, Offset_0x008EEA
                lea     ($FFFF0198), A1
                move.l  (A3)+, D0
                moveq   #$10, D1
                moveq   #$0B, D2
                jmp     (ShowVDPGraphics)                      ; Offset_0x0013CA
;-------------------------------------------------------------------------------                
Level_Select_Text_2P: ; Offset_0x008F08:               
                dc.l    Map_Emerald_Hill                       ; Offset_0x0086CC               
                dc.l    Map_Zone                               ; Offset_0x008712          
                dc.w    $4104, $0003, $00FF, $0330
                dc.l    Map_Mystic_Cave                        ; Offset_0x0086DA 
                dc.l    Map_Zone                               ; Offset_0x008712
                dc.w    $412C, $0003, $05FF, $03A8
                dc.l    Map_Casino_Night                       ; Offset_0x0086E8
                dc.l    Map_Zone                               ; Offset_0x008712
                dc.w    $4784, $0003, $06FF, $03C0
                dc.l    Map_Special                            ; Offset_0x008704
                dc.l    Map_Stage                              ; Offset_0x008718
                dc.w    $47AC, $0003, $0CFF, $0450
;-------------------------------------------------------------------------------                   
Offset_0x008F48:
                moveq   #$00, D1
                move.b  (A1)+, D1
Offset_0x008F4C:
                move.b  (A1)+, D0
                move.w  D0, (A2)+
                dbra    D1, Offset_0x008F4C
                rts                
;===============================================================================                
Options_Menu: ; Offset_0x008F56:
                lea     ($FFFF0000), A1
                lea     (Options_Frame_Mappings), A0           ; Offset_0x009A60
                move.w  #$0070, D0
                bsr     EnigmaDec                              ; Offset_0x00177A
                lea     ($FFFF0160), A1
                lea     (Options_Frame_Mappings), A0           ; Offset_0x009A60
                move.w  #$2070, D0
                bsr     EnigmaDec                              ; Offset_0x00177A
                clr.b   ($FFFFFF6C).w
                bsr     Offset_0x009118
                addq.b  #$01, ($FFFFFF6C).w
                bsr     Offset_0x00918C
                addq.b  #$01, ($FFFFFF6C).w
                bsr     Offset_0x00918C
                clr.b   ($FFFFFF6C).w
                clr.b   ($FFFFF711).w
                clr.w   ($FFFFF7F0).w
                lea     (Menu_Animate), A2                     ; Offset_0x00874E
                jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
                moveq   #$26, D0
                bsr     PalLoad1                               ; Offset_0x0026CE
                move.b  #Main_Menu_Snd, D0      ; $91
                jsr     (Play_Music)                           ; Offset_0x00131A
                clr.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                clr.l   ($FFFFEE00).w
                clr.l   ($FFFFEE04).w
                clr.w   ($FFFFFFB4).w
                clr.w   ($FFFFFFB6).w
                move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                move.w  ($FFFFF60C).w, D0
                ori.b   #$40, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     Pal_FadeTo                             ; Offset_0x002382
Offset_0x008FEE:
                move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                move    #$2700, SR
                bsr     Offset_0x00918C
                bsr     Offset_0x009070
                bsr     Offset_0x009118
                move    #$2300, SR
                lea     (Menu_Animate), A2                     ; Offset_0x00874E
                jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
                move.b  ($FFFFF605).w, D0
                or.b    ($FFFFF607).w, D0
                andi.b  #$80, D0
                bne.s   Menu_Go_Play_Mode                      ; Offset_0x00902A
                bra     Offset_0x008FEE
Menu_Go_Play_Mode: ; Offset_0x00902A:
                move.b  ($FFFFFF6C).w, D0
                bne.s   Menu_Go_Versus_Mode                    ; Offset_0x009046
                moveq   #$00, D0
                move.w  D0, (Two_Player_Flag).w                      ; $FFFFFFB8
                move.w  D0, ($FFFFFF6A).w
                move.w  D0, (Level_Id).w                             ; $FFFFFE10
                move.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
                rts
Menu_Go_Versus_Mode: ; Offset_0x009046:
                subq.b  #$01, D0
                bne.s   Offset_0x009068
                moveq   #$01, D0
                move.w  D0, (Two_Player_Flag).w      ; $FFFFFFB8
                move.w  D0, ($FFFFFF6A).w
                move.b  #gm_Versus_Mode_Menu, (Game_Mode).w     ; $1C, $FFFFF600
                move.b  #$00, ($FFFFFF68).w
                move.w  #$0000, ($FFFFFF7A).w
                rts
Offset_0x009068:
                move.b  #$00, (Game_Mode).w     ; $FFFFF600
                rts
Offset_0x009070:
                moveq   #$00, D2
                move.b  ($FFFFFF6C).w, D2
                move.b  ($FFFFF605).w, D0
                or.b    ($FFFFF607).w, D0
                btst    #$00, D0
                beq.s   Offset_0x00908C
                subq.b  #$01, D2
                bcc.s   Offset_0x00908C
                move.b  #$02, D2
Offset_0x00908C:
                btst    #$01, D0
                beq.s   Offset_0x00909C
                addq.b  #$01, D2
                cmpi.b  #$03, D2
                bcs.s   Offset_0x00909C
                moveq   #$00, D2
Offset_0x00909C:
                move.b  D2, ($FFFFFF6C).w
                lsl.w   #$02, D2
                move.b  Menu_Options_Boundaries(PC, D2), D3    ; Offset_0x00910C
                move.l  Menu_Options_Boundaries(PC, D2), A1    ; Offset_0x00910C
                move.w  (A1), D2                      
                btst    #$02, D0
                beq.s   Offset_0x0090B8
                subq.b  #$01, D2
                bcc.s   Offset_0x0090B8
                move.b  D3, D2
Offset_0x0090B8:
                btst    #$03, D0
                beq.s   Offset_0x0090C6
                addq.b  #$01, D2
                cmp.b   D3, D2
                bls.s   Offset_0x0090C6
                moveq   #$00, D2
Offset_0x0090C6:
                btst    #$06, D0
                beq.s   Offset_0x0090D6
                addi.b  #$10, D2
                cmp.b   D3, D2
                bls.s   Offset_0x0090D6
                moveq   #$00, D2
Offset_0x0090D6:
                move.w  D2, (A1)
                cmpi.b  #$02, ($FFFFFF6C).w
                bne.s   Offset_0x00910A
                andi.w  #$0030, D0
                beq.s   Offset_0x00910A
                move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF64
                addi.w  #$0080, D0
                jsr     (Play_Music)                           ; Offset_0x00131A
                lea     (Code_Level_Select), A0                ; Offset_0x00975C
                lea     (Code_14_Continues), A2                ; Offset_0x009762
                lea     ($FFFFFFB0).w, A1
                moveq   #$00, D2
                bsr     Offset_0x0096EA
Offset_0x00910A:
                rts
;-------------------------------------------------------------------------------                 
Menu_Options_Boundaries: ; Offset_0x00910C:
                dc.l    ($02<<$18)|(Player_Select_Flag&$00FFFFFF)    ; Jogador selecionado 
                dc.l    ($01<<$18)|(Two_Player_Items_Mode&$00FFFFFF) ; Opções do modo 2 Player
                dc.l    ($7F<<$18)|(Sound_Test_Sound&$00FFFFFF)      ; Intervalo do Sound Test    
;------------------------------------------------------------------------------- 
Offset_0x009118:
                bsr     Offset_0x0091FE
                moveq   #$00, D1
                move.b  ($FFFFFF6C).w, D1
                lsl.w   #$03, D1
                lea     (Menu_Options_Idx), A3                 ; Offset_0x009250
                lea     $00(A3, D1), A3
                move.w  #$6000, D0
                lea     ($FFFF0030), A2
                move.l  (A3)+, A1
                bsr     Offset_0x008F48
                lea     ($FFFF00B6), A2
                moveq   #$00, D1
                cmpi.b  #$02, ($FFFFFF6C).w
                beq.s   Offset_0x009160
                move.b  ($FFFFFF6C).w, D1
                lsl.w   #$02, D1
                lea     Menu_Options_Boundaries(PC), A1        ; Offset_0x00910C
                move.l  $00(A1, D1), A1
                move.w  (A1), D1
                lsl.w   #$02, D1
Offset_0x009160:
                move.l  $00(A4, D1), A1
                bsr     Offset_0x008F48
                cmpi.b  #$02, ($FFFFFF6C).w
                bne.s   Offset_0x00917A
                lea     ($FFFF00C2), A2
                bsr     Offset_0x00922C
Offset_0x00917A:
                lea     ($FFFF0000), A1
                move.l  (A3)+, D0
                moveq   #$15, D1
                moveq   #$07, D2
                jmp     (ShowVDPGraphics)                      ; Offset_0x0013CA
Offset_0x00918C:
                bsr     Offset_0x0091FE
                moveq   #$00, D1
                move.b  ($FFFFFF6C).w, D1
                lsl.w   #$03, D1
                lea     (Menu_Options_Idx), A3                 ; Offset_0x009250
                lea     $00(A3, D1), A3
                moveq   #$00, D0
                lea     ($FFFF0190), A2
                move.l  (A3)+, A1
                bsr     Offset_0x008F48
                lea     ($FFFF0216), A2
                moveq   #$00, D1
                cmpi.b  #$02, ($FFFFFF6C).w
                beq.s   Offset_0x0091D2
                move.b  ($FFFFFF6C).w, D1
                lsl.w   #$02, D1
                lea     Menu_Options_Boundaries(PC), A1        ; Offset_0x00910C
                move.l  $00(A1, D1), A1
                move.w  (A1), D1
                lsl.w   #$02, D1
Offset_0x0091D2:
                move.l  $00(A4, D1), A1
                bsr     Offset_0x008F48
                cmpi.b  #$02, ($FFFFFF6C).w
                bne.s   Offset_0x0091EC
                lea     ($FFFF0222), A2
                bsr     Offset_0x00922C
Offset_0x0091EC:
                lea     ($FFFF0160), A1
                move.l  (A3)+, D0
                moveq   #$15, D1
                moveq   #$07, D2
                jmp     (ShowVDPGraphics)                      ; Offset_0x0013CA
Offset_0x0091FE:
                lea     (Map_Player_Select_Jap_Idx), A4        ; Offset_0x009268
                tst.b   (Hardware_Id).w                              ; $FFFFFFD8
                bpl.s   Offset_0x009210
                lea     (Map_Player_Select_Idx), A4            ; Offset_0x009274
Offset_0x009210:
                tst.b   ($FFFFFF6C).w
                beq.s   Offset_0x00921C
                lea     (Map_Vs_Mode_Items_Idx), A4            ; Offset_0x009280
Offset_0x00921C:
                cmpi.b  #$02, ($FFFFFF6C).w
                bne.s   Offset_0x00922A
                lea     (Map_Sound_Test_Idx), A4               ; Offset_0x009288
Offset_0x00922A:
                rts
Offset_0x00922C:
                move.w  (Sound_Test_Sound).w, D1                     ; $FFFFFF64
                move.b  D1, D2
                lsr.b   #$04, D1
                bsr.s   Offset_0x009238
                move.b  D2, D1
Offset_0x009238:
                andi.w  #$000F, D1
                cmpi.b  #$0A, D1
                bcs.s   Offset_0x009246
                addi.b  #$04, D1
Offset_0x009246:
                addi.b  #$10, D1
                move.b  D1, D0
                move.w  D0, (A2)+
                rts
;-------------------------------------------------------------------------------                
Menu_Options_Idx: ; Offset_0x009250:
                dc.l    Map_Player_Select_Caption              ; Offset_0x009778
                dc.w    $4192, $0003
                dc.l    Map_Vs_Mode_Items_Caption              ; Offset_0x0097DA       
                dc.w    $4592, $0003
                dc.l    Map_Sound_Test_Caption                 ; Offset_0x00980C   
                dc.w    $4992, $0003  
;-------------------------------------------------------------------------------                
Map_Player_Select_Jap_Idx: ; Offset_0x009268: 
                dc.l    Map_Sonic_And_Miles                    ; Offset_0x00978A                 
                dc.l    Map_Sonic_Alone                        ; Offset_0x0097AA  
                dc.l    Map_Miles_Alone                        ; Offset_0x0097BA 
;-------------------------------------------------------------------------------                
Map_Player_Select_Idx: ; Offset_0x009274  
                dc.l    Map_Sonic_And_Tails                    ; Offset_0x00979A 
                dc.l    Map_Sonic_Alone                        ; Offset_0x0097AA
                dc.l    Map_Tails_Alone                        ; Offset_0x0097CA               
;-------------------------------------------------------------------------------                
Map_Vs_Mode_Items_Idx: ; Offset_0x009280:  
                dc.l    Map_All_Kinds_Items                    ; Offset_0x0097EC  
                dc.l    Map_Teleport_Only                      ; Offset_0x0097FC
;-------------------------------------------------------------------------------                
Map_Sound_Test_Idx: ; Offset_0x009288:          
                dc.l    Map_Sound_Test_Sound                   ; Offset_0x00981E
;===============================================================================
Level_Select_Menu: ; Offset_0x00928C:
                lea     ($FFFF0000), A1
                lea     (Menu_Level_Select_Text), A0           ; Offset_0x009A8C
                move.w  #$0000, D0
                bsr     EnigmaDec                              ; Offset_0x00177A
                lea     ($FFFF0000), A1
                move.l  #$40000003, D0
                moveq   #$27, D1
                moveq   #$1B, D2
                jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
                moveq   #$00, D3
                bsr     Offset_0x0095FC
                lea     ($FFFF08C0), A1
                lea     (Menu_Icons_Mappings), A0              ; Offset_0x009BE0
                move.w  #$0090, D0
                bsr     EnigmaDec                              ; Offset_0x00177A
                bsr     Menu_Display_Icon                      ; Offset_0x00962A
                clr.w   ($FFFFFF7A).w
                clr.w   ($FFFFFF10).w
                clr.b   ($FFFFF711).w
                clr.w   ($FFFFF7F0).w
                lea     (Menu_Animate), A2                     ; Offset_0x00874E
                jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
                moveq   #$26, D0
                bsr     PalLoad1                               ; Offset_0x0026CE
                lea     ($FFFFFB40).w, A1
                lea     ($FFFFFBC0).w, A2
                moveq   #$07, D1
Offset_0x009300:
                move.l  (A1), (A2)+
                clr.l   (A1)+
                dbra    D1, Offset_0x009300
                move.b  #Main_Menu_Snd, D0      ; $91
                jsr     (Play_Music)                           ; Offset_0x00131A
                move.w  #$0707, ($FFFFF614).w
                clr.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                clr.l   ($FFFFEE00).w
                clr.l   ($FFFFEE04).w
                clr.w   ($FFFFFFB4).w
                clr.w   ($FFFFFFB6).w
                move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                move.w  ($FFFFF60C).w, D0
                ori.b   #$40, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     Pal_FadeTo                             ; Offset_0x002382
Level_Select_Menu_Main_Loop: ; Offset_0x009348:
                move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                move    #$2700, SR
                moveq   #$00, D3
                bsr     Offset_0x00955A
                bsr     Offset_0x00947C
                move.w  #$6000, D3
                bsr     Offset_0x00955A
                bsr     Menu_Display_Icon                      ; Offset_0x00962A
                move    #$2300, SR
                lea     (Menu_Animate), A2                     ; Offset_0x00874E
                jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
                move.b  ($FFFFF605).w, D0
                or.b    ($FFFFF607).w, D0
                andi.b  #$80, D0
                bne.s   Offset_0x00938E
                bra     Level_Select_Menu_Main_Loop            ; Offset_0x009348
Offset_0x00938E:
                move.w  ($FFFFFF62).w, D0
                add.w   D0, D0
                move.w  Menu_Level_Select_Array(PC, D0), D0    ; Offset_0x0093F2
                bmi     Menu_Game_Reset                        ; Offset_0x0093EA
                cmpi.w  #$4000, D0
                bne.s   Menu_Load_Level                        ; Offset_0x00941E
                move.b  #gm_SpecialStage, (Game_Mode).w         ; $10, $FFFFF600
                clr.w   (Level_Id).w                                 ; $FFFFFE10
                move.b  #$03, ($FFFFFE12).w
                move.b  #$03, ($FFFFFEC6).w
                moveq   #$00, D0
                move.w  D0, ($FFFFFE20).w
                move.l  D0, ($FFFFFE22).w
                move.l  D0, ($FFFFFE26).w
                move.w  D0, ($FFFFFED0).w
                move.l  D0, ($FFFFFED2).w
                move.l  D0, ($FFFFFED6).w
                move.l  #$00001388, ($FFFFFFA0).w
                move.l  #$00001388, ($FFFFFFA4).w
                move.w  ($FFFFFF7C).w, ($FFFFFF7A).w
                rts
Menu_Game_Reset: ; Offset_0x0093EA:
                move.b  #gm_SegaScreen, (Game_Mode).w           ; $00, $FFFFF600
                rts
;-------------------------------------------------------------------------------                
Menu_Level_Select_Array: ; Offset_0x0093F2:
                dc.w    $0000, $0001, $0D00, $0D01, $0F00, $0F01, $0C00, $0C01
                dc.w    $0700, $0701, $0B00, $0B01, $0A00, $0A01, $0400, $0401
                dc.w    $0500, $1000, $0600, $0E00, $4000, $FFFF
;------------------------------------------------------------------------------- 
Menu_Load_Level: ; Offset_0x00941E:
                andi.w  #$3FFF, D0
                move.w  D0, (Level_Id).w                             ; $FFFFFE10
                move.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
                move.b  #$03, ($FFFFFE12).w
                move.b  #$03, ($FFFFFEC6).w
                moveq   #$00, D0
                move.w  D0, ($FFFFFE20).w
                move.l  D0, ($FFFFFE22).w
                move.l  D0, ($FFFFFE26).w
                move.w  D0, ($FFFFFED0).w
                move.l  D0, ($FFFFFED2).w
                move.l  D0, ($FFFFFED6).w
                move.b  D0, ($FFFFFE18).w
                move.l  #$00001388, ($FFFFFFA0).w
                move.l  #$00001388, ($FFFFFFA4).w
                move.b  #Volume_Down, D0        ; $F9
                jsr     (Play_Sfx)                             ; Offset_0x00132C
                moveq   #$00, D0
                move.w  D0, ($FFFFFF6A).w
                move.w  D0, ($FFFFFFB8).w
                rts 
;------------------------------------------------------------------------------- 
Offset_0x00947C:
                move.b  ($FFFFF605).w, D1
                andi.b  #$03, D1
                bne.s   Offset_0x00948C
                subq.w  #$01, ($FFFFFF60).w
                bpl.s   Offset_0x0094C2
Offset_0x00948C:
                move.w  #$000B, ($FFFFFF60).w
                move.b  ($FFFFF604).w, D1
                andi.b  #$03, D1
                beq.s   Offset_0x0094C2
                move.w  ($FFFFFF62).w, D0
                btst    #$00, D1
                beq.s   Offset_0x0094AC
                subq.w  #$01, D0
                bcc.s   Offset_0x0094AC
                moveq   #$15, D0
Offset_0x0094AC:
                btst    #$01, D1
                beq.s   Offset_0x0094BC
                addq.w  #$01, D0
                cmpi.w  #$0016, D0
                bcs.s   Offset_0x0094BC
                moveq   #$00, D0
Offset_0x0094BC:
                move.w  D0, ($FFFFFF62).w
                rts
Offset_0x0094C2:
                cmpi.w  #$0015, ($FFFFFF62).w
                bne.s   Offset_0x00952C
                move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF64
                move.b  ($FFFFF605).w, D1
                btst    #$02, D1
                beq.s   Offset_0x0094DE
                subq.b  #$01, D0
                bcc.s   Offset_0x0094DE
                moveq   #$7F, D0
Offset_0x0094DE:
                btst    #$03, D1
                beq.s   Offset_0x0094EE
                addq.b  #$01, D0
                cmpi.w  #$0080, D0
                bcs.s   Offset_0x0094EE
                moveq   #$00, D0
Offset_0x0094EE:
                btst    #$06, D1
                beq.s   Offset_0x0094FC
                addi.b  #$10, D0
                andi.b  #$7F, D0
Offset_0x0094FC:
                move.w  D0, (Sound_Test_Sound).w                     ; $FFFFFF64
                andi.w  #$0030, D1
                beq.s   Offset_0x00952A
                move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF64
                addi.w  #$0080, D0
                jsr     (Play_Music)                           ; Offset_0x00131A
                lea     (Code_Debug_Mode), A0                  ; Offset_0x009768
                lea     (Code_All_Emeralds), A2                ; Offset_0x009772
                lea     ($FFFFFFB2).w, A1
                moveq   #$01, D2
                bsr     Offset_0x0096EA
Offset_0x00952A:
                rts
Offset_0x00952C:
                move.b  ($FFFFF605).w, D1
                andi.b  #$0C, D1
                beq.s   Offset_0x009542
                move.w  ($FFFFFF62).w, D0
                move.b  Menu_Left_Right_Select(PC, D0), D0     ; Offset_0x009544
                move.w  D0, ($FFFFFF62).w
Offset_0x009542:
                rts
;-------------------------------------------------------------------------------
Menu_Left_Right_Select: ; Offset_0x009544:
                dc.b    $0E, $0F, $11, $11, $12, $12, $13, $13, $14, $14, $15, $15, $0C, $0D, $00, $01
                dc.b    $01, $02, $04, $06, $08, $0A                                                                
;-------------------------------------------------------------------------------  
Offset_0x00955A:
                lea     ($FFFF0000), A4
                lea     (Menu_Text_Highlight), A5              ; Offset_0x009692
                lea     (VDP_Data_Port), A6                          ; $00C00000
                moveq   #$00, D0
                move.w  ($FFFFFF62).w, D0
                lsl.w   #$02, D0
                lea     $00(A5, D0), A3
                moveq   #$00, D0
                move.b  (A3), D0
                mulu.w  #$0050, D0
                moveq   #$00, D1
                move.b  $0001(A3), D1
                add.w   D1, D0
                lea     $00(A4, D0), A1
                moveq   #$00, D1
                move.b  (A3), D1
                lsl.w   #$07, D1
                add.b   $0001(A3), D1
                addi.w  #$C000, D1
                lsl.l   #$02, D1
                lsr.w   #$02, D1
                ori.w   #$4000, D1
                swap.w  D1
                move.l  D1, $0004(A6)
                moveq   #$0D, D2
Offset_0x0095AA:
                move.w  (A1)+, D0
                add.w   D3, D0
                move.w  D0, (A6)
                dbra    D2, Offset_0x0095AA
                addq.w  #$02, A3
                moveq   #$00, D0
                move.b  (A3), D0
                beq.s   Offset_0x0095EE
                mulu.w  #$0050, D0
                moveq   #$00, D1
                move.b  $0001(A3), D1
                add.w   D1, D0
                lea     $00(A4, D0), A1
                moveq   #$00, D1
                move.b  (A3), D1
                lsl.w   #$07, D1
                add.b   $0001(A3), D1
                addi.w  #$C000, D1
                lsl.l   #$02, D1
                lsr.w   #$02, D1
                ori.w   #$4000, D1
                swap.w  D1
                move.l  D1, $0004(A6)
                move.w  (A1)+, D0
                add.w   D3, D0
                move.w  D0, (A6)
Offset_0x0095EE:
                cmpi.w  #$0015, ($FFFFFF62).w
                bne.s   Offset_0x0095FA
                bsr     Offset_0x0095FC
Offset_0x0095FA:
                rts       
;------------------------------------------------------------------------------- 
Offset_0x0095FC:
                move.l  #$49440003, (VDP_Control_Port)               ; $00C00004
                move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF64
                move.b  D0, D2
                lsr.b   #$04, D0
                bsr.s   Offset_0x009612
                move.b  D2, D0
Offset_0x009612:
                andi.w  #$000F, D0
                cmpi.b  #$0A, D0
                bcs.s   Offset_0x009620
                addi.b  #$04, D0
Offset_0x009620:
                addi.b  #$10, D0
                add.w   D3, D0
                move.w  D0, (A6)
                rts
;-------------------------------------------------------------------------------                               
Menu_Display_Icon: ; Offset_0x00962A:
                move.w  ($FFFFFF62).w, D0
                lea     (Menu_Icon_List), A3                   ; Offset_0x00967C
                lea     $00(A3, D0), A3
                lea     ($FFFF08C0), A1
                moveq   #$00, D0
                move.b  (A3), D0
                lsl.w   #$03, D0
                move.w  D0, D1
                add.w   D0, D0
                add.w   D1, D0
                lea     $00(A1, D0), A1
                move.l  #$4B360003, D0
                moveq   #$03, D1
                moveq   #$02, D2
                jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
                lea     (Pal_Levels_Icons), A1                 ; Offset_0x00982E
                moveq   #$00, D0
                move.b  (A3), D0
                lsl.w   #$05, D0
                lea     $00(A1, D0), A1
                lea     ($FFFFFB40).w, A2
                moveq   #$07, D1
Offset_0x009674:
                move.l  (A1)+, (A2)+
                dbra    D1, Offset_0x009674
                rts
;-------------------------------------------------------------------------------                  
Menu_Icon_List: ; Offset_0x00967C:
                dc.b    $00, $00, $07, $07, $08, $08, $06, $06, $02, $02, $05, $05, $04, $04, $01, $01
                dc.b    $01, $09, $0A, $0B, $0C, $0E   
;-------------------------------------------------------------------------------  
Menu_Text_Highlight: ; Offset_0x009692: 
                dc.w    $0306, $0324, $0306, $0424, $0606, $0624, $0606, $0724
                dc.w    $0906, $0924, $0906, $0A24, $0C06, $0C24, $0C06, $0D24
                dc.w    $0F06, $0F24, $0F06, $1024, $1206, $1224, $1206, $1324
                dc.w    $1506, $1524, $1506, $1624, $032C, $0348, $032C, $0448
                dc.w    $032C, $0548, $062C, $0000, $092C, $0000, $0C2C, $0000
                dc.w    $0F2C, $0000, $122C, $1248                      
;-------------------------------------------------------------------------------
Offset_0x0096EA:
                move.w  ($FFFFFFB4).w, D0
                adda.w  D0, A0
                move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF64
                cmp.b   (A0), D0
                bne.s   Offset_0x009710
                addq.w  #$01, ($FFFFFFB4).w
                tst.b   $0001(A0)
                bne.s   Offset_0x009716
                move.w  #$0101, (A1)
                move.b  #Ring_Sfx, D0           ; $B5
                jsr     (Play_Sfx)                             ; Offset_0x00132C
Offset_0x009710:
                move.w  #$0000, ($FFFFFFB4).w
Offset_0x009716:
                move.w  ($FFFFFFB6).w, D0
                adda.w  D0, A2
                move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF64
                cmp.b   (A2), D0
                bne.s   Offset_0x009754
                addq.w  #$01, ($FFFFFFB6).w
                tst.b   $0001(A2)
                bne.s   Offset_0x00975A
                tst.w   D2
                bne.s   Offset_0x009744
                move.b  #$0F, ($FFFFFE18).w
                move.b  #Extra_Continue_Sfx-$80, D0 ; $3F - Referência incorreta
                jsr     (Play_Music)                           ; Offset_0x00131A
                bra.s   Offset_0x009754
Offset_0x009744:
                move.w  #$0007, ($FFFFFF90).w
                move.b  #Emerald_Snd, D0        ; $9D
                jsr     (Play_Music)                           ; Offset_0x00131A
Offset_0x009754:
                move.w  #$0000, ($FFFFFFB6).w
Offset_0x00975A:
                rts
;-------------------------------------------------------------------------------                    
Code_Level_Select: ;  Offset_0x00975C:
                dc.b    $19, $65, $09, $17, $00, $00
;-------------------------------------------------------------------------------                 
Code_14_Continues: ; Offset_0x009762:
                dc.b    $01, $01, $02, $04, $00, $00
;-------------------------------------------------------------------------------                  
Code_Debug_Mode: ; Offset_0x009768:
                dc.b    $01, $09, $09, $02, $01, $01, $02, $04, $00, $00
;-------------------------------------------------------------------------------                 
Code_All_Emeralds: ; Offset_0x009772:
                dc.b    $04, $01, $02, $06, $00, $00
;-------------------------------------------------------------------------------  
Map_Player_Select_Caption: ; Offset_0x009778:
                dc.b    $10
                dc.b    _st,__,_P,_L,_A,_Y,_E,_R,__,_S,_E,_L,_E,_C,_T,__,_st                   
Map_Sonic_And_Miles: ; Offset_0x00978A: 
                dc.b    $0E
                dc.b    _S,_O,_N,_I,_C,__,_A,_N,_D,__,_M,_I,_L,_E,_S 
Map_Sonic_And_Tails: ; Offset_0x00979A: 
                dc.b    $0E
                dc.b    _S,_O,_N,_I,_C,__,_A,_N,_D,__,_T,_A,_I,_L,_S   
Map_Sonic_Alone: ; Offset_0x0097AA:
                dc.b    $0E
                dc.b    _S,_O,_N,_I,_C,__,_A,_L,_O,_N,_E,__,__,__,__
Map_Miles_Alone: ; Offset_0x0097BA:
                dc.b    $0E
                dc.b    _M,_I,_L,_E,_S,__,_A,_L,_O,_N,_E,__,__,__,__
Map_Tails_Alone: ; Offset_0x0097CA:
                dc.b    $0E
                dc.b    _T,_A,_I,_L,_S,__,_A,_L,_O,_N,_E,__,__,__,__
;-------------------------------------------------------------------------------     
Map_Vs_Mode_Items_Caption: ; Offset_0x0097DA:
                dc.b    $10
                dc.b    _st,__,_V,_S,__,_M,_O,_D,_E,__,_I,_T,_E,_M,_S,__,_st  
Map_All_Kinds_Items: ; Offset_0x0097EC:  
                dc.b    $0E
                dc.b    _A,_L,_L,__,_K,_I,_N,_D,_S,__,_I,_T,_E,_M,_S
Map_Teleport_Only: ; Offset_0x0097FC:
                dc.b    $0E
                dc.b    _T,_E,_L,_E,_P,_O,_R,_T,__,_O,_N,_L,_Y,__,__
;-------------------------------------------------------------------------------   
Map_Sound_Test_Caption: ; Offset_0x00980C:
                dc.b    $10
                dc.b    _st,__,__,_S,_O,_U,_N,_D,__,_T,_E,_S,_T,__,__,__,_st
Map_Sound_Test_Sound: ; Offset_0x00981E:   
                dc.b    $0E
                dc.b    __,__,__,__,__,__,_0,_0,__,__,__,__,__,__,__       
;-------------------------------------------------------------------------------  
Pal_Levels_Icons: ; Offset_0x00982E:                
                incbin  'data\menus\lvsicons.pal'  
;------------------------------------------------------------------------------- 
Vs_Level_Select_Frame_Mappings: ; Offset_0x009A0E:
                incbin  'data\menus\vsslctmn.eni' 
;-------------------------------------------------------------------------------   
Options_Frame_Mappings: ; Offset_0x009A60:
                incbin  'data\menus\optframe.eni' 
;-------------------------------------------------------------------------------                 
Menu_Level_Select_Text: ; Offset_0x009A8C:
                incbin  'data\menus\menutext.eni'  
;-------------------------------------------------------------------------------                
Menu_Icons_Mappings: ; Offset_0x009BE0: 
                incbin  'data\menus\iconsmap.eni'     
;===============================================================================
; Menu de opções, menu de seleção de fases no modo 1 e 2 jogadores 
; [ Término ]
;=============================================================================== 

;===============================================================================
; Sequência do final e créditos
; [ Início ]
;===============================================================================  
Ending_Sequence: ; Offset_0x009C12:   
                lea     ($FFFFB000).w, A1
                moveq   #$00, D0
                move.w  #$07FF, D1
Offset_0x009C1C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x009C1C
                lea     ($FFFFF700).w, A1
                moveq   #$00, D0
                move.w  #$003F, D1
Offset_0x009C2C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x009C2C
                lea     ($FFFFEE00).w, A1
                moveq   #$00, D0
                move.w  #$003F, D1
Offset_0x009C3C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x009C3C
                move    #$2700, SR
                move.w  ($FFFFF60C).w, D0
                andi.b  #$BF, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x009C5C:
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x009C5C
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$940F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000083, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x009C88:
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   Offset_0x009C88
                move.w  #$8F02, (A5)
                clr.l   ($FFFFF616).w
                clr.l   ($FFFFF61A).w
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8B03, (A6)
                move.w  #$8230, (A6)
                move.w  #$8407, (A6)
                move.w  #$857C, (A6)
                move.w  #$9001, (A6)
                move.w  #$8004, (A6)
                move.w  #$8720, (A6)
                move.w  #$8ADF, ($FFFFF624).w
                move.w  ($FFFFF624).w, (A6)
                clr.b   ($FFFFFE19).w
                cmpi.b  #$07, ($FFFFFF91).w
                bne.s   Offset_0x009CFA
                cmpi.w  #$0002, (Player_Selected_Flag).w             ; $FFFFFF7A
                beq.s   Offset_0x009CFA
                st      ($FFFFFE19).w
                move.b  #$FF, ($FFFFF65F).w
                move.b  #$0F, ($FFFFF65E).w
                move.w  #$0030, ($FFFFF65C).w
Offset_0x009CFA:
                moveq   #$00, D0
                cmpi.w  #$0002, (Player_Selected_Flag).w             ; $FFFFFF7A
                beq.s   Offset_0x009D0E
                tst.b   ($FFFFFE19).w
                bne.s   Offset_0x009D10
                bra     Offset_0x009D12
Offset_0x009D0E:
                addq.w  #$02, D0
Offset_0x009D10:
                addq.w  #$02, D0
Offset_0x009D12:
                move.w  D0, ($FFFFF750).w
                bsr     Offset_0x00ABD2
                bsr     Offset_0x00AC26
                move.l  #$6AC00000, (VDP_Control_Port)               ; $00C00004
                lea     (Tornado_In_Ending), A0                ; Offset_0x091F3C
                jsr     (NemesisDec)                           ; Offset_0x00149A
                move.l  #$65000001, (VDP_Control_Port)               ; $00C00004
                lea     (Miles_In_Ending_Movie), A0            ; Offset_0x090992
                jsr     (NemesisDec)                           ; Offset_0x00149A
                move.l  #$52600002, (VDP_Control_Port)               ; $00C00004
                lea     (Tornado_In_Ending_2), A0              ; Offset_0x0927E0
                jsr     (NemesisDec)                           ; Offset_0x00149A
                move.l  #$60000002, (VDP_Control_Port)               ; $00C00004
                lea     (Tornado), A0                          ; Offset_0x08CC44
                jsr     (NemesisDec)                           ; Offset_0x00149A
                move.l  #$69E00002, (VDP_Control_Port)               ; $00C00004
                lea     (Clouds), A0                           ; Offset_0x08DAFC
                jsr     (NemesisDec)                           ; Offset_0x00149A
                move.w  #$0E00, (Level_Id).w                         ; $FFFFFE10
                move    #$2300, SR
                moveq   #End_Sequence_Snd, D0   ; $FFFFFF95
                jsr     (Play_Music)                           ; Offset_0x00131A
                move.l  #$0EEE0EEE, D1
                lea     ($FFFFFB00).w, A1
                moveq   #$1F, D0
Offset_0x009DAA:
                move.l  D1, (A1)+
                dbra    D0, Offset_0x009DAA
                lea     (Offset_0x00AC7A), A1
                lea     ($FFFFFB80).w, A2
                moveq   #$1F, D0
Offset_0x009DBC:
                move.l  (A1)+, (A2)+
                dbra    D0, Offset_0x009DBC
                clr.b   ($FFFFEEBD).w
                moveq   #$00, D0
                move.w  D0, ($FFFFFE08).w
                move.w  D0, ($FFFFFE02).w
                move.w  D0, ($FFFFFE04).w
                move.w  D0, ($FFFFEE00).w
                move.w  D0, ($FFFFEE04).w
                move.w  D0, ($FFFFEEF0).w
                move.w  D0, ($FFFFEEF4).w
                move.w  D0, ($FFFFEE08).w
                move.w  #$00C8, ($FFFFEE0C).w
                move.l  D0, ($FFFFF616).w
                move.b  D0, ($FFFFEE42).w
                move.b  D0, ($FFFFEE43).w
                move.w  D0, ($FFFFF662).w
                move.w  D0, ($FFFFF660).w
                lea     ($FFFFE000).w, A1
                moveq   #$00, D0
                move.w  #$0100, D1
Offset_0x009E0C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x009E0C
                move.w  #$7FFF, ($FFFFF634).w
                lea     ($FFFFB100).w, A1
                move.b  #$CA, (A1)      ; Carrega o objeto 0xCA na memória
                move.b  #$06, $0024(A1)
                move.w  #$0060, $003C(A1)
                move.w  #$0001, $0030(A1)
                cmpi.w  #$0004, ($FFFFF750).w
                bne.s   Offset_0x009E46
                move.w  #$0010, $002E(A1)
                move.w  #$0100, $003C(A1)
Offset_0x009E46:
                move.b  #$18, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                move.w  ($FFFFF60C).w, D0
                ori.b   #$40, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
Offset_0x009E5E:
                move.b  #$18, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                addq.w  #$01, ($FFFFFE04).w
                jsr     (PseudoRandomNumber)                   ; Offset_0x00334A
                jsr     (Load_Objects)                         ; Offset_0x015F22
                jsr     (Build_Sprites)                        ; Offset_0x01658A
                tst.b   ($FFFFF661).w
                beq.s   Offset_0x009E8A
                jsr     (PalCycle_Load)                        ; Offset_0x001998
Offset_0x009E8A:
                bsr     Offset_0x009E98
                tst.w   ($FFFFFE02).w
                beq     Offset_0x009E5E
                rts
Offset_0x009E98:
                tst.b   ($FFFFF660).w
                beq     Offset_0x00A072
                bsr     Pal_FadeFrom                           ; Offset_0x002426
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8004, (A6)
                move.w  #$8230, (A6)
                move.w  #$8407, (A6)
                move.w  #$9001, (A6)
                move.w  #$9200, (A6)
                move.w  #$8B03, (A6)
                move.w  #$8700, (A6)
                clr.b   ($FFFFF64E).w
                move.w  #$8C81, (A6)
                jsr     (ClearScreen)                          ; Offset_0x0011C4
                lea     ($FFFFAC00).w, A1
                moveq   #$00, D0
                move.w  #$00FF, D1
Offset_0x009EDE:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x009EDE
                lea     ($FFFFB000).w, A1
                moveq   #$00, D0
                move.w  #$07FF, D1
Offset_0x009EEE:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x009EEE
                lea     ($FFFFF700).w, A1
                moveq   #$00, D0
                move.w  #$003F, D1
Offset_0x009EFE:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x009EFE
                lea     ($FFFFEE00).w, A1
                moveq   #$00, D0
                move.w  #$003F, D1
Offset_0x009F0E:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x009F0E
                clr.b   ($FFFFEEBD).w
                moveq   #$00, D0
                move.w  D0, ($FFFFFE02).w
                move.w  D0, ($FFFFFE04).w
                move.w  D0, ($FFFFEE00).w
                move.w  D0, ($FFFFEE04).w
                move.w  D0, ($FFFFEEF0).w
                move.w  D0, ($FFFFEEF4).w
                move.w  D0, ($FFFFEE08).w
                move.w  D0, ($FFFFEE0C).w
                move.l  D0, ($FFFFF616).w
                move.b  D0, ($FFFFEE42).w
                move.b  D0, ($FFFFEE43).w
                move.w  D0, ($FFFFF662).w
                move.w  D0, ($FFFFF660).w
                lea     ($FFFFE000).w, A1
                moveq   #$00, D0
                move.w  #$0100, D1
Offset_0x009F58:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x009F58
                moveq   #Credits_Snd, D0        ; $FFFFFF9E
                jsr     (Play_Sfx)                             ; Offset_0x00132C
                clr.w   ($FFFFFB80).w
                move.w  #$0EEE, ($FFFFFB8C).w
                move.w  #$00EE, ($FFFFFBAC).w
                move.l  #$40200000, (VDP_Control_Port)               ; $00C00004
                lea     (Credits_Font), A0                     ; Offset_0x00BD46
                jsr     (NemesisDec)                           ; Offset_0x00149A
                clr.w   ($FFFFFF4C).w
Credits_Main_Loop: ; Offset_0x009F90:
                jsr     (ClearScreen)                          ; Offset_0x0011C4
                bsr     Display_Credits_Text                   ; Offset_0x00B25E
                bsr     Pal_FadeTo                             ; Offset_0x002382
                move.w  #$018E, D0
                btst    #$06, (Hardware_Id).w                        ; $FFFFFFD8
                beq.s   Offset_0x009FAE
                move.w  #$0144, D0
Offset_0x009FAE:
                move.b  #$18, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                dbra    D0, Offset_0x009FAE
                bsr     Pal_FadeFrom                           ; Offset_0x002426
                lea     (Credits_Text_Mappings), A1            ; Offset_0x00B2C6
                addq.w  #$01, ($FFFFFF4C).w
                move.w  ($FFFFFF4C).w, D0
                lsl.w   #$02, D0
                move.l  $00(A1, D0), D0
                bpl.s   Credits_Main_Loop                      ; Offset_0x009F90
                bsr     Pal_FadeFrom                           ; Offset_0x002426
                jsr     (ClearScreen)                          ; Offset_0x0011C4
                move.l  #$40000000, (VDP_Control_Port)               ; $00C00004
                lea     (Sonic_The_Hedgehog_2), A0             ; Offset_0x094B28
                jsr     (NemesisDec)                           ; Offset_0x00149A
                lea     (Offset_0x00B236), A0
                lea     ($FFFF0000), A1
                move.w  #$0000, D0
                jsr     (EnigmaDec)                            ; Offset_0x00177A
                lea     ($FFFF0000), A1
                move.l  #$45980003, D0
                moveq   #$0F, D1
                moveq   #$05, D2
                jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
                clr.w   ($FFFFFF4C).w
                bsr     Offset_0x00A074
                move.w  #$003B, D0
Offset_0x00A02E:
                move.b  #$18, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                dbra    D0, Offset_0x00A02E
                move.w  #$0257, D6
Ending_Main_Loop: ; Offset_0x00A040:
                move.b  #$18, (VBlank_Index).w                       ; $FFFFF62A
                bsr     DelayProgram                           ; Offset_0x00333E
                addq.w  #$01, ($FFFFFF4C).w
                bsr     Offset_0x00A074
                cmpi.w  #$005E, ($FFFFFF4C).w
                bcs.s   Ending_Main_Loop                       ; Offset_0x00A040
                move.b  ($FFFFF605).w, D1
                andi.b  #$F0, D1
                bne.s   Offset_0x00A068
                dbra    D6, Ending_Main_Loop                   ; Offset_0x00A040
Offset_0x00A068:
                st      ($FFFFFE02).w
                move.b  #gm_SegaScreen, (Game_Mode).w           ; $00, $FFFFF600 
Offset_0x00A072:
                rts
Offset_0x00A074:
                lea     ($FFFFFB02).w, A2
                move.w  ($FFFFFF4C).w, D0
                cmpi.w  #$0024, D0
                bcc.s   Offset_0x00A072
                btst    #$00, D0
                bne.s   Offset_0x00A072
                lsr.w   #$01, D0
                move.b  Offset_0x00A0A0(PC, D0), D0
                mulu.w  #$0018, D0
                lea     Offset_0x00A0B2(PC, D0), A1
                moveq   #$05, D0
Offset_0x00A098:
                move.l  (A1)+, (A2)+
                dbra    D0, Offset_0x00A098
                rts
;-------------------------------------------------------------------------------               
Offset_0x00A0A0:     
                dc.b    $00, $01, $02, $03, $04, $03, $02, $01, $00, $05, $06, $07, $08, $07, $06, $05
                dc.b    $00, $00
;-------------------------------------------------------------------------------               
Offset_0x00A0B2:  
                dc.w    $0000, $0026, $004E, $0000, $0000, $0EEE, $0000, $0EC8
                dc.w    $0EA6, $0E40, $0000, $0000, $0000, $0026, $004E, $0000
                dc.w    $0000, $0EEE, $0000, $0EC8, $0EA6, $0E60, $0600, $0000
                dc.w    $0000, $0026, $004E, $0000, $0000, $0EEE, $0000, $0EC8
                dc.w    $0EA6, $0E80, $0A00, $0400, $0000, $0026, $004E, $0000
                dc.w    $0000, $0EEE, $0000, $0EC8, $0EA6, $0EA0, $0E00, $0800
                dc.w    $0000, $0026, $004E, $0000, $0000, $0EEE, $0000, $0EC8
                dc.w    $0EA6, $0EC0, $0E60, $0E00, $0000, $0026, $006E, $0000
                dc.w    $0000, $0EEE, $0000, $0EC8, $0EA6, $0E40, $0000, $0000
                dc.w    $0000, $0026, $008E, $0000, $0000, $0EEE, $0000, $0EC8
                dc.w    $0EA6, $0E40, $0000, $0000, $0000, $0046, $00CE, $0000
                dc.w    $0000, $0EEE, $0000, $0EC8, $0EA6, $0E40, $0000, $0000
                dc.w    $0000, $008E, $06EE, $0000, $0000, $0EEE, $0000, $0EC8
                dc.w    $0EA6, $0E40, $0000, $0000
;-------------------------------------------------------------------------------   
Obj_0xCA_Ending_Movie: ; Offset_0x00A18A:
                include 'data\objects\obj_0xCA.asm' 
;-------------------------------------------------------------------------------                   
Obj_0xCC_Tornado_In_Ending ; Offset_0x00A382:   
                include 'data\objects\obj_0xCC.asm'            
;-------------------------------------------------------------------------------               
Obj_0xCE_Sonic_Miles_In_Ending: ; Offset_0x00A860:   
                include 'data\objects\obj_0xCE.asm'                               
;-------------------------------------------------------------------------------                  
Obj_0xCF_Tornado_Helix_In_Ending: ; Offset_0x00A95E:
                include 'data\objects\obj_0xCF.asm'   
;-------------------------------------------------------------------------------                             
Obj_0xCB_Clouds_In_Ending: ; Offset_0x00A9CC:   
                include 'data\objects\obj_0xCB.asm'   
;-------------------------------------------------------------------------------               
Obj_0xCD_Flickies_In_Ending: ; Offset_0x00AA90:
                include 'data\objects\obj_0xCD.asm'   
;-------------------------------------------------------------------------------              
Ending_Load_Clouds: ; Offset_0x00AB88:
                subq.w  #$01, $0030(A0)
                bpl.s   Offset_0x00ABA6
                move.l  ($FFFFF636).w, D0
                andi.w  #$001F, D0
                move.w  D0, $0030(A0)
                lea     (Obj_0xCA_Load_Clouds), A2             ; Offset_0x00AD5A
                jsr     (Load_Sub_Obj)                         ; Offset_0x0361F6
Offset_0x00ABA6:
                rts           
;-------------------------------------------------------------------------------     
Ending_Load_Flickies: ; Offset_0x00ABA8:
                subq.w  #$01, $0030(A0)
                bpl.s   Offset_0x00ABD0
                tst.b   $0035(A0)
                beq.s   Offset_0x00ABD0
                subq.b  #$01, $0035(A0)
                move.l  ($FFFFF636).w, D0
                andi.w  #$000F, D0
                move.w  D0, $0030(A0)
                lea     (Obj_0xCC_Load_Flickies), A2           ; Offset_0x00AD62
                jsr     (Load_Sub_Obj)                         ; Offset_0x0361F6
Offset_0x00ABD0:
                rts                             
;-------------------------------------------------------------------------------   
Offset_0x00ABD2:
                move.w  ($FFFFF750).w, D0
                move.w  Offset_0x00ABDE(PC, D0), D0
                jmp     Offset_0x00ABDE(PC, D0)
Offset_0x00ABDE:
                dc.w    Offset_0x00ABE4-Offset_0x00ABDE
                dc.w    Offset_0x00ABFA-Offset_0x00ABDE
                dc.w    Offset_0x00AC10-Offset_0x00ABDE
Offset_0x00ABE4:
                move.l  #$43200000, ($00C00004)
                lea     (Sonic_In_Ending), A0                  ; Offset_0x092F0A
                jmp     (NemesisDec)                           ; Offset_0x00149A
Offset_0x00ABFA:
                move.l  #$43200000, ($00C00004)
                lea     (Super_Sonic_In_Ending), A0            ; Offset_0x093848
                jmp     (NemesisDec)                           ; Offset_0x00149A
Offset_0x00AC10:
                move.l  #$43200000, ($00C00004)
                lea     (Miles_In_Ending), A0                  ; Offset_0x093F3C
                jmp     (NemesisDec)                           ; Offset_0x00149A
;-------------------------------------------------------------------------------  
Offset_0x00AC26:
                move.w  ($FFFFF750).w, D0
                move.w  Offset_0x00AC32(PC, D0), D0
                jmp     Offset_0x00AC32(PC, D0)
Offset_0x00AC32:
                dc.w    Offset_0x00AC38-Offset_0x00AC32
                dc.w    Offset_0x00AC4E-Offset_0x00AC32
                dc.w    Offset_0x00AC64-Offset_0x00AC32
Offset_0x00AC38:
                move.l  #$72800002, ($00C00004)
                lea     (Blue_Bird), A0                        ; Offset_0x07EF60
                jmp     (NemesisDec)                           ; Offset_0x00149A
Offset_0x00AC4E:
                move.l  #$72800002, ($00C00004)
                lea     (Black_Bird), A0                       ; Offset_0x07F5E2
                jmp     (NemesisDec)                           ; Offset_0x00149A
Offset_0x00AC64:
                move.l  #$72800002, ($00C00004)
                lea     (White_Bird), A0                       ; Offset_0x07F340
                jmp     (NemesisDec)                           ; Offset_0x00149A 
;===============================================================================
; Sequência do final e créditos
; [ Término ]
;=============================================================================== 
Offset_0x00AC7A:
                dc.w    $0EEE, $0000, $0A22, $0C42, $0E44, $0E66, $0EEE, $0AAA
                dc.w    $0888, $0444, $08AE, $046A, $000E, $0008, $00AE, $008E
;------------------------------------------------------------------------------- 
Offset_0x00AC9A:          
                dc.w    $0EEE, $0000, $0A22, $0C42, $0E44, $0E66, $0EEE, $0AAA
                dc.w    $0888, $0444, $08AE, $046A, $000E, $0008, $00AE, $008E
                dc.w    $0AEE, $0000, $006C, $008E, $00AE, $08CE, $0EEE, $0ECA
                dc.w    $0EA8, $0A66, $046A, $0EEC, $000E, $0006, $0000, $0000              
;-------------------------------------------------------------------------------   
Offset_0x00ACDA:  
                dc.w    $0000, $0000, $0002, $0024, $0046, $0068, $008A, $00CE
                dc.w    $0ECA, $0EA6, $0E80, $0E64, $0E40, $0C00, $0EEE, $000E
                dc.w    $0E44, $0000, $0E64, $0E86, $0EA8, $0ECA, $0EEE, $04EE
                dc.w    $02AE, $006E, $002C, $0444, $0888, $0AAA, $00E0, $0EC0
;-------------------------------------------------------------------------------                 
Offset_0x00AD1A:
                dc.w    $0EEE, $0000, $0222, $0444, $0666, $0888, $0AAA, $0CCC
                dc.w    $0EEE, $0000, $0000, $0000, $0000, $0000, $0000, $0000
;-------------------------------------------------------------------------------              
Offset_0x00AD3A:
                dc.w    $0EEE, $0000, $04CC, $0AEC, $0EEE, $0EEE, $0EEE, $0AAA
                dc.w    $0888, $0444, $08AE, $046A, $000E, $0008, $00AE, $008E
;------------------------------------------------------------------------------- 
Obj_0xCA_Load_Clouds: ; Offset_0x00AD5A:
                dc.w    $003E, $CB00
;-------------------------------------------------------------------------------                 
Obj_0xCA_Load_Tornado: ; Offset_0x00AD5E:                                                    
                dc.w    $003E, $CC00
;-------------------------------------------------------------------------------                   
Obj_0xCC_Load_Flickies: ; Offset_0x00AD62:                
                dc.w    $003E, $CD00
;-------------------------------------------------------------------------------                  
Obj_0xCC_Load_Sonic_Miles: ; Offset_0x00AD66:                
                dc.w    $003E, $CE00     
;-------------------------------------------------------------------------------                  
Obj_0xCC_Load_Tornado_Helix: ; Offset_0x00AD6A:
                dc.w    $003E, $CF00
;-------------------------------------------------------------------------------    
Obj_0xCD_Ptr: ; Offset_0x00AD6E:
                dc.l    Flickies_Mappings                      ; Offset_0x011DC8
                dc.w    $0594
                dc.b    $04, $02, $08, $00
;-------------------------------------------------------------------------------                 
Flickies_End_AnimateData: ; Offset_0x00AD78:
                dc.w    Offset_0x00AD7A-Flickies_End_AnimateData
Offset_0x00AD7A:
                dc.b    $05, $00, $01, $FF
;-------------------------------------------------------------------------------               
Offset_0x00AD7E:
                dc.w    Offset_0x00AD84-Offset_0x00AD7E
                dc.w    Offset_0x00AD8A-Offset_0x00AD7E
                dc.w    Offset_0x00AD9A-Offset_0x00AD7E
Offset_0x00AD84:
                dc.b    $03, $00, $00, $01, $FA, $00
Offset_0x00AD8A:
                dc.b    $03, $01, $01, $01, $01, $01, $02, $02, $02, $02, $02, $03, $03, $04, $FA, $00
Offset_0x00AD9A:
                dc.b    $01, $05, $06, $FF                
;------------------------------------------------------------------------------- 
Offset_0x00AD9E:
                dc.w    Offset_0x00ADD2-Offset_0x00AD9E
                dc.w    Offset_0x00AE0C-Offset_0x00AD9E
                dc.w    Offset_0x00AE2E-Offset_0x00AD9E
                dc.w    Offset_0x00AE40-Offset_0x00AD9E
                dc.w    Offset_0x00AE52-Offset_0x00AD9E
                dc.w    Offset_0x00AE6C-Offset_0x00AD9E
                dc.w    Offset_0x00AE9E-Offset_0x00AD9E
                dc.w    Offset_0x00AED0-Offset_0x00AD9E
                dc.w    Offset_0x00AF12-Offset_0x00AD9E
                dc.w    Offset_0x00AF3C-Offset_0x00AD9E
                dc.w    Offset_0x00AF5E-Offset_0x00AD9E
                dc.w    Offset_0x00AF80-Offset_0x00AD9E
                dc.w    Offset_0x00AFA2-Offset_0x00AD9E
                dc.w    Offset_0x00AFBC-Offset_0x00AD9E
                dc.w    Offset_0x00AFDE-Offset_0x00AD9E
                dc.w    Offset_0x00B040-Offset_0x00AD9E
                dc.w    Offset_0x00B062-Offset_0x00AD9E
                dc.w    Offset_0x00B07C-Offset_0x00AD9E
                dc.w    Offset_0x00B116-Offset_0x00AD9E
                dc.w    Offset_0x00B128-Offset_0x00AD9E
                dc.w    Offset_0x00B132-Offset_0x00AD9E
                dc.w    Offset_0x00B13C-Offset_0x00AD9E
                dc.w    Offset_0x00B146-Offset_0x00AD9E
                dc.w    Offset_0x00B150-Offset_0x00AD9E
                dc.w    Offset_0x00B1CA-Offset_0x00AD9E
                dc.w    Offset_0x00B20C-Offset_0x00AD9E
Offset_0x00ADD2:
                dc.w    $0007
                dc.l    $F0040493, $0249FFE0, $F8090495, $024AFFE0
                dc.l    $F005049B, $024DFFF8, $0004049F, $024FFFF8
                dc.l    $F00404A1, $02500008, $F80904A3, $02510008
                dc.l    $080004A9, $02540008
Offset_0x00AE0C:
                dc.w    $0004
                dc.l    $F40504AA, $0255FFE8, $F40504AE, $0257FFF8
                dc.l    $040404B2, $0259FFF8, $F40604B4, $025A0008
Offset_0x00AE2E:
                dc.w    $0002
                dc.l    $F40E04BA, $025DFFEC, $F40204C6, $0263000C
Offset_0x00AE40:
                dc.w    $0002
                dc.l    $F40E04C9, $0264FFEC, $F40004D5, $026A000C
Offset_0x00AE52:
                dc.w    $0003
                dc.l    $FC0504D6, $026BFFEC, $F40904DA, $026DFFFC
                dc.l    $040404E0, $0270FFFC
Offset_0x00AE6C:
                dc.w    $0006
                dc.l    $F80004E2, $0271FFF0, $000404E3, $0271FFF0
                dc.l    $080804E5, $0272FFF0, $F00804E8, $0274FFF8
                dc.l    $F80404EB, $02750000, $000004ED, $02760008
Offset_0x00AE9E:
                dc.w    $0006
                dc.l    $00001CE2, $1A710008, $F8041CE3, $1A710000
                dc.l    $F0081CE5, $1A72FFF8, $08081CE8, $1A74FFF0
                dc.l    $00041CEB, $1A75FFF0, $F8001CED, $1A76FFF0
Offset_0x00AED0:
                dc.w    $0008
                dc.l    $E0062019, $200C0006, $F0040493, $0249FFE0
                dc.l    $F8090495, $024AFFE0, $F005049B, $024DFFF8
                dc.l    $0004049F, $024FFFF8, $F00404A1, $02500008
                dc.l    $F80904A3, $02510008, $080004A9, $02540008
Offset_0x00AF12:
                dc.w    $0005
                dc.l    $E701201F, $200F0004, $F40504AA, $0255FFE8
                dc.l    $F40504AE, $0257FFF8, $040404B2, $0259FFF8
                dc.l    $F40604B4, $025A0008
Offset_0x00AF3C:
                dc.w    $0004
                dc.l    $ED012021, $2010FFFB, $F5002023, $20110005
                dc.l    $F40E04BA, $025DFFEC, $F40204C6, $0263000C
Offset_0x00AF5E:
                dc.w    $0004
                dc.l    $ED012024, $2012FFF8, $F5002026, $20130000
                dc.l    $F40E04C9, $0264FFEC, $F40004D5, $026A000C
Offset_0x00AF80:
                dc.w    $0004
                dc.l    $F1052027, $2013FFF7, $FC0504D6, $026BFFEC
                dc.l    $F40904DA, $026DFFFC, $040404E0, $0270FFFC
Offset_0x00AFA2:
                dc.w    $0003
                dc.l    $000B002B, $00150000, $08020037, $001B0018
                dc.l    $2004003A, $001D0008
Offset_0x00AFBC:
                dc.w    $0004
                dc.l    $0008003C, $001E0000, $080E003F, $001F0000
                dc.l    $2008004B, $00250008, $2804004E, $00270010
Offset_0x00AFDE:
                dc.w    $000C
                dc.l    $00080050, $00280008, $080F0053, $00290000
                dc.l    $080B0063, $00310020, $1006006F, $00370038
                dc.l    $28040075, $003A0000, $28060077, $003B0010
                dc.l    $280F007D, $003E0020, $2800008D, $00460040
                dc.l    $3006008E, $00470040, $480C0094, $004A0028
                dc.l    $50090098, $004C0038, $6004009E, $004F0040
Offset_0x00B040:
                dc.w    $0004
                dc.l    $0004002B, $00150008, $0801002D, $00160000
                dc.l    $080A002F, $00170008, $20040038, $001C0008
Offset_0x00B062:
                dc.w    $0003
                dc.l    $0808003A, $001D0008, $100E003D, $001E0000
                dc.l    $28080049, $00240008
Offset_0x00B07C:
                dc.w    $0013
                dc.l    $0008004C, $00260030, $080F004F, $00270028
                dc.l    $1808005F, $002F0048, $200F0062, $00310048
                dc.l    $18030072, $00390068, $38030076, $003B0068
                dc.l    $400F007A, $003D0048, $1000008A, $00450000
                dc.l    $2000008B, $00450000, $100E008C, $00460008
                dc.l    $28000098, $004C0008, $38020099, $004C0000
                dc.l    $280F009C, $004E0028, $280500AC, $00560018
                dc.l    $380900B0, $00580010, $400200B6, $005B0008
                dc.l    $480A00B9, $005C0010, $480500C2, $00610028
                dc.l    $480700C6, $00630038
Offset_0x00B116:
                dc.w    $0002
                dc.l    $F8040019, $000CFFFC, $0008001B, $000DFFF4
Offset_0x00B128:
                dc.w    $0001
                dc.l    $F805001E, $000FFFF8
Offset_0x00B132:
                dc.w    $0001
                dc.l    $F8050022, $0011FFF8
Offset_0x00B13C:
                dc.w    $0001
                dc.l    $F8050026, $0013FFF8
Offset_0x00B146:
                dc.w    $0001
                dc.l    $F805002A, $0015FFF8
Offset_0x00B150:
                dc.w    $000F
                dc.l    $0000802E, $80170028, $0808802F, $80170020
                dc.l    $100F8032, $80190018, $10058042, $80210038
                dc.l    $200B8046, $80230038, $280F8052, $80290050
                dc.l    $300F8062, $80310018, $40088072, $80390038
                dc.l    $480A8075, $803A0000, $5004807E, $803F0018
                dc.l    $58008080, $80400018, $480C8081, $80400038
                dc.l    $50058085, $80420030, $50088089, $80440040
                dc.l    $5804808C, $80460048
Offset_0x00B1CA:
                dc.w    $0008
                dc.l    $E0062019, $200C0006, $F0040493, $0249FFE0
                dc.l    $F80904EE, $0277FFE0, $F00504F4, $027AFFF8
                dc.l    $0004049F, $024FFFF8, $F00404A1, $02500008
                dc.l    $F80904A3, $02510008, $080004A9, $02540008
Offset_0x00B20C:
                dc.w    $0005
                dc.l    $E701201F, $200F0004, $F40504F8, $027CFFE8
                dc.l    $F40504FC, $027EFFF8, $040404B2, $0259FFF8
                dc.l    $F40604B4, $025A0008
;------------------------------------------------------------------------------- 
Offset_0x00B236:                   
                dc.b    $07, $01, $00, $01, $00, $01, $0A, $00, $18, $10, $00, $C1, $80, $06, $0A, $81
                dc.b    $40, $0B, $02, $00, $58, $88, $03, $86, $4C, $A4, $01, $C3, $40, $52, $01, $C0
                dc.b    $14, $21, $13, $C2, $80, $97, $FC, $00
;===============================================================================
; Rotinas para mostrar o texto dos créditos na tela título e créditos do jogo
; [ Início ]
;===============================================================================             
Display_Credits_Text: ; Offset_0x00B25E:
                lea     Credits_Text_Mappings(PC), A1          ; Offset_0x00B2C6
                move.w  ($FFFFFF4C).w, D0
                lsl.w   #$02, D0
                move.l  $00(A1, D0), D0
                move.l  D0, A1
;-------------------------------------------------------------------------------        
Display_Intro_Text: ; Offset_0x00B26E:
                move    #$2700, SR
                lea     (VDP_Data_Port), A6                          ; $00C00000
Offset_0x00B278:
                move.l  (A1)+, D0
                bmi.s   Offset_0x00B294
                move.l  D0, A2
                move.w  (A1)+, D0
                bsr.s   Offset_0x00B29A
                move.l  D0, $0004(A6)
                move.b  (A2)+, D0
                lsl.w   #$08, D0
Offset_0x00B28A:
                move.b  (A2)+, D0
                bmi.s   Offset_0x00B292
                move.w  D0, (A6)
                bra.s   Offset_0x00B28A
Offset_0x00B292:
                bra.s   Offset_0x00B278
Offset_0x00B294:
                move    #$2300, SR
                rts
Offset_0x00B29A:
                andi.l  #$0000FFFF, D0
                lsl.l   #$02, D0
                lsr.w   #$02, D0
                ori.w   #$4000, D0
                swap.w  D0
                rts
;-------------------------------------------------------------------------------           
Map_Intro_Text: ; Offset_0x00B2AC:
                dc.l    Intro_Sonic                            ; Offset_0x00BD3A
                dc.w    $C49E
                dc.l    Intro_And                              ; Offset_0x00BD0E
                dc.w    $C622
                dc.l    Intro_Miles_Tails_Prower               ; Offset_0x00BD16
                dc.w    $C786
                dc.l    Intro_In                               ; Offset_0x00BD08
                dc.w    $C924, $FFFF
;-------------------------------------------------------------------------------   
Credits_Text_Mappings: ; Offset_0x00B2C6: 
                dc.l    Offset_0x00B31E
                dc.l    Offset_0x00B332
                dc.l    Offset_0x00B346
                dc.l    Offset_0x00B354
                dc.l    Offset_0x00B362
                dc.l    Offset_0x00B370
                dc.l    Offset_0x00B384
                dc.l    Offset_0x00B3A4
                dc.l    Offset_0x00B3BE
                dc.l    Offset_0x00B3D8
                dc.l    Offset_0x00B3EC
                dc.l    Offset_0x00B418
                dc.l    Offset_0x00B432
                dc.l    Offset_0x00B44C
                dc.l    Offset_0x00B45A
                dc.l    Offset_0x00B48C
                dc.l    Offset_0x00B4AC
                dc.l    Offset_0x00B4C0
                dc.l    Offset_0x00B4EC
                dc.l    Offset_0x00B518
                dc.l    Offset_0x00B544
                dc.l    $FFFFFFFF   
;-------------------------------------------------------------------------------  
Offset_0x00B31E:
                dc.l    Offset_0x00BC62
                dc.w    $C59C
                dc.l    Offset_0x00BC6E
                dc.w    $C5B0
                dc.l    Offset_0x00BC72
                dc.w    $C784, $FFFF
Offset_0x00B332:
                dc.l    Offset_0x00B558
                dc.w    $C586
                dc.l    Offset_0x00B56C
                dc.w    $C5AC
                dc.l    Offset_0x00B57E
                dc.w    $C78C, $FFFF
Offset_0x00B346:
                dc.l    Offset_0x00B56C
                dc.w    $C598
                dc.l    Offset_0x00B59C
                dc.w    $C78E, $FFFF
Offset_0x00B354:
                dc.l    Offset_0x00B5BA
                dc.w    $C598
                dc.l    Offset_0x00B5CC
                dc.w    $C78C, $FFFF                
Offset_0x00B362:
                dc.l    Offset_0x00B5EA
                dc.w    $C58A
                dc.l    Offset_0x00B60C
                dc.w    $C78E, $FFFF
Offset_0x00B370:
                dc.l    Offset_0x00B628
                dc.w    $C510
                dc.l    Offset_0x00B642
                dc.w    $C708
                dc.l    Offset_0x00B666
                dc.w    $C814, $FFFF
Offset_0x00B384:
                dc.l    Offset_0x00B67C
                dc.w    $C408
                dc.l    Offset_0x00B69E
                dc.w    $C522
                dc.l    Offset_0x00B6A6
                dc.w    $C612
                dc.l    Offset_0x00B6BE
                dc.w    $C808
                dc.l    Offset_0x00B6E0
                dc.w    $C910, $FFFF
Offset_0x00B3A4:
                dc.l    Offset_0x00B6FA
                dc.w    $C496
                dc.l    Offset_0x00B70E
                dc.w    $C592
                dc.l    Offset_0x00B726
                dc.w    $C794
                dc.l    Offset_0x00B73C
                dc.w    $C886, $FFFF
Offset_0x00B3BE:
                dc.l    Offset_0x00B760
                dc.w    $C488
                dc.l    Offset_0x00B642
                dc.w    $C688
                dc.l    Offset_0x00B782
                dc.w    $C78E
                dc.l    Offset_0x00B79E
                dc.w    $C88E, $FFFF
Offset_0x00B3D8:
                dc.l    Offset_0x00B7BA
                dc.w    $C510
                dc.l    Offset_0x00B760
                dc.w    $C608
                dc.l    Offset_0x00B79E
                dc.w    $C80E, $FFFF
Offset_0x00B3EC:
                dc.l    Offset_0x00B7F8
                dc.w    $C312
                dc.l    Offset_0x00B6BE
                dc.w    $C508
                dc.l    Offset_0x00B812
                dc.w    $C614
                dc.l    Offset_0x00B828
                dc.w    $C712
                dc.l    Offset_0x00B840
                dc.w    $C80E
                dc.l    Offset_0x00B85C
                dc.w    $C916
                dc.l    Offset_0x00B870
                dc.w    $CA16, $FFFF
Offset_0x00B418:
                dc.l    Offset_0x00B7BA
                dc.w    $C492
                dc.l    Offset_0x00B884
                dc.w    $C594
                dc.l    Offset_0x00B89A
                dc.w    $C796
                dc.l    Offset_0x00B8B0
                dc.w    $C88E, $FFFF
Offset_0x00B432:
                dc.l    Offset_0x00B8CE
                dc.w    $C48C
                dc.l    Offset_0x00B8EC
                dc.w    $C68A
                dc.l    Offset_0x00B90C
                dc.w    $C786
                dc.l    Offset_0x00B91A
                dc.w    $C888, $FFFF
Offset_0x00B44C:
                dc.l    Offset_0x00B93E
                dc.w    $C588
                dc.l    Offset_0x00B960
                dc.w    $C78A, $FFFF
Offset_0x00B45A:
                dc.l    Offset_0x00B980
                dc.w    $C288
                dc.l    Offset_0x00B9A2
                dc.w    $C49E
                dc.l    Offset_0x00B9AE
                dc.w    $C59E
                dc.l    Offset_0x00B9BA
                dc.w    $C69E
                dc.l    Offset_0x00B9C6
                dc.w    $C7A0
                dc.l    Offset_0x00B9D0
                dc.w    $C8A2
                dc.l    Offset_0x00B9D8
                dc.w    $C9A2
                dc.l    Offset_0x00B9E0
                dc.w    $CA9E, $FFFF
Offset_0x00B48C:
                dc.l    Offset_0x00B9EC
                dc.w    $C406
                dc.l    Offset_0x00BA12
                dc.w    $C610
                dc.l    Offset_0x00BA2E
                dc.w    $C70C
                dc.l    Offset_0x00BA4E
                dc.w    $C812
                dc.l    Offset_0x00BA66
                dc.w    $C914, $FFFF
Offset_0x00B4AC:
                dc.l    Offset_0x00BA7E
                dc.w    $C512
                dc.l    Offset_0x00BA96
                dc.w    $C70A
                dc.l    Offset_0x00B7D4
                dc.w    $C806, $FFFF
Offset_0x00B4C0:
                dc.l    Offset_0x00B558
                dc.w    $C316
                dc.l    Offset_0x00BAB8
                dc.w    $C414
                dc.l    Offset_0x00BACE
                dc.w    $C606
                dc.l    Offset_0x00BAF2
                dc.w    $C70E
                dc.l    Offset_0x00BB0E
                dc.w    $C80A
                dc.l    Offset_0x00BB2E
                dc.w    $C90E
                dc.l    Offset_0x00BB4A
                dc.w    $CA04, $FFFF
Offset_0x00B4EC:
                dc.l    Offset_0x00BB70
                dc.w    $C30C
                dc.l    Offset_0x00BB8E
                dc.w    $C424
                dc.l    Offset_0x00BB94
                dc.w    $C60C
                dc.l    Offset_0x00BCBC
                dc.w    $C70A
                dc.l    Offset_0x00BBF2
                dc.w    $C810
                dc.l    Offset_0x00BC0C
                dc.w    $C910
                dc.l    Offset_0x00BC26
                dc.w    $CA12, $FFFF
Offset_0x00B518:
                dc.l    Offset_0x00BB70
                dc.w    $C30C
                dc.l    Offset_0x00BB8E
                dc.w    $C424
                dc.l    Offset_0x00BBB2
                dc.w    $C606
                dc.l    Offset_0x00BBD6
                dc.w    $C70E
                dc.l    Offset_0x00BCDC
                dc.w    $C80E
                dc.l    Offset_0x00BCF8
                dc.w    $C91A
                dc.l    Offset_0x00BC40
                dc.w    $CA08, $FFFF
Offset_0x00B544:
                dc.l    Offset_0x00BC98
                dc.w    $C496
                dc.l    Offset_0x00BCAC
                dc.w    $C6A4
                dc.l    Offset_0x00BCB2
                dc.w    $C8A0, $FFFF                
;-------------------------------------------------------------------------------               
Offset_0x00B558:
                dc.b    $20, $0A, $0B, $2F, $30, $0A, $0B, $06, $07, $29, $2A, $27, $28, $12, $2B, $2C
                dc.b    $0A, $0B, $FF, $00
;-------------------------------------------------------------------------------                  
Offset_0x00B56C:
                dc.b    $20, $1F, $20, $23, $24, $1D, $1E, $08, $09, $29, $2A, $06, $07, $0A, $0B, $23
                dc.b    $24, $FF
;-------------------------------------------------------------------------------                  
Offset_0x00B57E:
                dc.b    $00, $10, $11, $02, $03, $31, $32, $02, $03, $1D, $1E, $00, $00, $1B, $1C, $02
                dc.b    $03, $15, $16, $02, $03, $31, $32, $02, $03, $19, $1A, $02, $03, $FF
;-------------------------------------------------------------------------------                     
Offset_0x00B59C:
                dc.b    $00, $25, $26, $10, $11, $12, $1B, $1C, $1D, $1E, $04, $05, $29, $2A, $00, $00
                dc.b    $27, $28, $1D, $1E, $31, $32, $1D, $1E, $08, $09, $02, $03, $FF, $00
;-------------------------------------------------------------------------------                  
Offset_0x00B5BA:
                dc.b    $20, $08, $09, $12, $23, $24, $0A, $0B, $06, $07, $27, $28, $1D, $1E, $23, $24
                dc.b    $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B5CC:
                dc.b    $00, $19, $1A, $02, $03, $25, $26, $02, $03, $10, $11, $02, $03, $23, $24, $29
                dc.b    $2A, $00, $00, $31, $32, $1D, $1E, $25, $26, $10, $11, $12, $12, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B5EA:
                dc.b    $20, $06, $07, $10, $11, $12, $0A, $0B, $0C, $0D, $00, $00, $1F, $20, $23, $24
                dc.b    $1D, $1E, $0E, $0F, $23, $24, $02, $03, $19, $1A, $19, $1A, $0A, $0B, $23, $24
                dc.b    $FF, $00              
;-------------------------------------------------------------------------------  
Offset_0x00B60C:
                dc.b    $00, $31, $32, $29, $2A, $13, $14, $12, $00, $00, $1B, $1C, $02, $03, $15, $16
                dc.b    $02, $03, $00, $37, $31, $32, $29, $2A, $35, $36, $38, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B628:
                dc.b    $20, $0E, $0F, $02, $03, $19, $1A, $0A, $0B, $00, $00, $1F, $20, $17, $18, $02
                dc.b    $03, $1B, $1C, $1B, $1C, $0A, $0B, $23, $24, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B642:
                dc.b    $00, $10, $11, $12, $23, $24, $1D, $1E, $15, $16, $02, $03, $33, $34, $29, $2A
                dc.b    $00, $00, $31, $32, $02, $03, $25, $26, $29, $2A, $10, $11, $02, $03, $23, $24
                dc.b    $02, $03, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B666:
                dc.b    $00, $37, $06, $07, $02, $03, $23, $24, $1D, $1E, $17, $18, $00, $00, $31, $32
                dc.b    $02, $03, $25, $26, $38, $FF  
;-------------------------------------------------------------------------------  
Offset_0x00B67C:
                dc.b    $20, $06, $07, $10, $11, $02, $03, $23, $24, $02, $03, $06, $07, $27, $28, $0A
                dc.b    $0B, $23, $24, $00, $00, $08, $09, $0A, $0B, $25, $26, $12, $0E, $0F, $1B, $1C
                dc.b    $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B69E:
                dc.b    $20, $02, $03, $1B, $1C, $08, $09, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B6A6:
                dc.b    $20, $06, $07, $10, $11, $12, $0A, $0B, $0C, $0D, $00, $00, $02, $03, $23, $24
                dc.b    $27, $28, $12, $25, $26, $27, $28, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B6BE:
                dc.b    $00, $31, $32, $02, $03, $25, $26, $29, $2A, $25, $26, $10, $11, $12, $00, $00
                dc.b    $31, $32, $02, $03, $19, $1A, $02, $03, $0E, $0F, $29, $2A, $06, $07, $10, $11
                dc.b    $12, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B6E0:
                dc.b    $00, $37, $13, $14, $29, $2A, $08, $09, $31, $32, $00, $00, $27, $28, $1D, $1E
                dc.b    $27, $28, $1D, $1E, $31, $32, $02, $03, $38, $FF                          
;-------------------------------------------------------------------------------  
Offset_0x00B6FA:
                dc.b    $20, $02, $03, $25, $26, $25, $26, $12, $25, $26, $27, $28, $02, $03, $1B, $1C
                dc.b    $27, $28, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B70E:
                dc.b    $20, $1F, $20, $23, $24, $1D, $1E, $0E, $0F, $23, $24, $02, $03, $19, $1A, $19
                dc.b    $1A, $0A, $0B, $23, $24, $25, $26, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B726:
                dc.b    $00, $04, $05, $12, $17, $18, $17, $18, $00, $00, $2D, $2E, $12, $17, $18, $17
                dc.b    $18, $12, $25, $26, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B73C:
                dc.b    $00, $19, $1A, $02, $03, $25, $26, $02, $03, $1B, $1C, $1D, $1E, $04, $05, $29
                dc.b    $2A, $00, $00, $31, $32, $02, $03, $19, $1A, $02, $03, $19, $1A, $1D, $1E, $27
                dc.b    $28, $1D, $1E, $FF   
;-------------------------------------------------------------------------------  
Offset_0x00B760:
                dc.b    $20, $1D, $1E, $04, $05, $13, $14, $0A, $0B, $06, $07, $27, $28, $00, $00, $1F
                dc.b    $20, $17, $18, $02, $03, $06, $07, $0A, $0B, $19, $1A, $0A, $0B, $1B, $1C, $27
                dc.b    $28, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B782:
                dc.b    $00, $27, $28, $02, $03, $15, $16, $02, $03, $10, $11, $12, $23, $24, $1D, $1E
                dc.b    $00, $00, $02, $03, $1B, $1C, $27, $28, $1D, $1E, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B79E:
                dc.b    $00, $31, $32, $29, $2A, $27, $28, $02, $03, $15, $16, $02, $03, $00, $00, $25
                dc.b    $26, $29, $2A, $0E, $0F, $02, $03, $1B, $1C, $1D, $1E, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B7BA:
                dc.b    $20, $25, $26, $1F, $20, $0A, $0B, $06, $07, $12, $02, $03, $17, $18, $25, $26
                dc.b    $27, $28, $02, $03, $0E, $0F, $0A, $0B, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B7D4:
                dc.b    $00, $06, $07, $02, $03, $23, $24, $1D, $1E, $17, $18, $00, $00, $02, $03, $1B
                dc.b    $1C, $1B, $1C, $00, $00, $10, $11, $02, $03, $1B, $1C, $25, $26, $10, $11, $02
                dc.b    $03, $2D, $2E, $FF                  
;-------------------------------------------------------------------------------  
Offset_0x00B7F8:
                dc.b    $20, $33, $34, $1D, $1E, $1B, $1C, $0A, $0B, $00, $00, $02, $03, $23, $24, $27
                dc.b    $28, $12, $25, $26, $27, $28, $25, $26, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B812:
                dc.b    $00, $06, $07, $23, $24, $02, $03, $12, $0E, $0F, $00, $00, $25, $26, $27, $28
                dc.b    $12, $27, $28, $27, $28, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B828:
                dc.b    $00, $04, $05, $23, $24, $0A, $0B, $1B, $1C, $08, $09, $02, $03, $00, $00, $23
                dc.b    $24, $1D, $1E, $25, $26, $25, $26, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B840:
                dc.b    $00, $13, $14, $12, $1B, $1C, $02, $03, $00, $00, $12, $25, $26, $10, $11, $12
                dc.b    $2D, $2E, $02, $03, $27, $28, $02, $03, $23, $24, $12, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B85C:
                dc.b    $00, $27, $28, $1D, $1E, $19, $1A, $00, $00, $1F, $20, $02, $03, $31, $32, $1B
                dc.b    $1C, $0A, $0B, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B870:
                dc.b    $00, $1F, $20, $10, $11, $0A, $0B, $1B, $1C, $12, $2F, $30, $00, $00, $23, $24
                dc.b    $12, $0A, $0B, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B884:
                dc.b    $20, $02, $03, $23, $24, $27, $28, $00, $00, $02, $03, $1B, $1C, $08, $09, $00
                dc.b    $00, $06, $07, $0E, $0F, $FF      
;-------------------------------------------------------------------------------  
Offset_0x00B89A:
                dc.b    $00, $27, $28, $12, $19, $1A, $00, $00, $25, $26, $15, $16, $0A, $0B, $17, $18
                dc.b    $17, $18, $31, $32, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B8B0:
                dc.b    $00, $1F, $20, $0A, $0B, $27, $28, $0A, $0B, $23, $24, $00, $00, $19, $1A, $1D
                dc.b    $1E, $23, $24, $02, $03, $2D, $2E, $12, $0A, $0B, $06, $07, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B8CE:
                dc.b    $20, $19, $1A, $29, $2A, $25, $26, $12, $06, $07, $00, $00, $06, $07, $1D, $1E
                dc.b    $19, $1A, $1F, $20, $1D, $1E, $25, $26, $0A, $0B, $23, $24, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B8EC:
                dc.b    $00, $19, $1A, $02, $03, $25, $26, $02, $03, $27, $28, $1D, $1E, $00, $00, $1B
                dc.b    $1C, $02, $03, $15, $16, $02, $03, $19, $1A, $29, $2A, $23, $24, $02, $03, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B90C:
                dc.b    $00, $37, $00, $3B, $3C, $3D, $3E, $3F, $3E, $3F, $35, $36, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B91A:
                dc.b    $00, $08, $09, $23, $24, $0A, $0B, $02, $03, $19, $1A, $25, $26, $00, $00, $06
                dc.b    $07, $1D, $1E, $19, $1A, $0A, $0B, $00, $00, $27, $28, $23, $24, $29, $2A, $0A
                dc.b    $0B, $38, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B93E:
                dc.b    $20, $25, $26, $1D, $1E, $29, $2A, $1B, $1C, $08, $09, $00, $00, $1F, $20, $23
                dc.b    $24, $1D, $1E, $0E, $0F, $23, $24, $02, $03, $19, $1A, $19, $1A, $0A, $0B, $23
                dc.b    $24, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B960:
                dc.b    $00, $27, $28, $1D, $1E, $19, $1A, $1D, $1E, $31, $32, $29, $2A, $15, $16, $12
                dc.b    $00, $00, $25, $26, $10, $11, $12, $19, $1A, $02, $03, $08, $09, $02, $03, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B980:
                dc.b    $20, $25, $26, $1D, $1E, $29, $2A, $1B, $1C, $08, $09, $00, $00, $02, $03, $25
                dc.b    $26, $25, $26, $12, $25, $26, $27, $28, $02, $03, $1B, $1C, $27, $28, $25, $26
                dc.b    $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B9A2:
                dc.b    $00, $19, $1A, $02, $03, $06, $07, $15, $16, $31, $32, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B9AE:
                dc.b    $00, $13, $14, $12, $19, $1A, $12, $27, $28, $02, $03, $FF 
;-------------------------------------------------------------------------------  
Offset_0x00B9BA:
                dc.b    $00, $19, $1A, $12, $17, $18, $1F, $20, $1D, $1E, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B9C6:
                dc.b    $00, $12, $1F, $20, $1F, $20, $1D, $1E, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B9D0:
                dc.b    $00, $25, $26, $3A, $1D, $1E, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B9D8:
                dc.b    $00, $1D, $1E, $31, $32, $33, $34, $FF
;-------------------------------------------------------------------------------  
Offset_0x00B9E0:
                dc.b    $00, $1B, $1C, $3A, $0E, $0F, $0A, $0B, $0A, $0B, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00B9EC:
                dc.b    $20, $1F, $20, $23, $24, $1D, $1E, $13, $14, $0A, $0B, $06, $07, $27, $28, $00
                dc.b    $00, $02, $03, $25, $26, $25, $26, $12, $25, $26, $27, $28, $02, $03, $1B, $1C
                dc.b    $27, $28, $25, $26, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00BA12:
                dc.b    $00, $25, $26, $31, $32, $29, $2A, $12, $06, $07, $10, $11, $12, $00, $00, $15
                dc.b    $16, $02, $03, $27, $28, $02, $03, $0E, $0F, $12, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00BA2E:
                dc.b    $00, $27, $28, $02, $03, $15, $16, $02, $03, $10, $11, $12, $23, $24, $1D, $1E
                dc.b    $00, $00, $10, $11, $02, $03, $19, $1A, $02, $03, $1B, $1C, $1D, $1E, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00BA4E:
                dc.b    $00, $31, $32, $1D, $1E, $25, $26, $10, $11, $12, $15, $16, $12, $00, $00, $1D
                dc.b    $1E, $1D, $1E, $15, $16, $02, $03, $FF
;-------------------------------------------------------------------------------  
Offset_0x00BA66:
                dc.b    $00, $25, $26, $27, $28, $0A, $0B, $2B, $2C, $0A, $0B, $00, $00, $2D, $2E, $1D
                dc.b    $1E, $12, $27, $28, $02, $03, $FF, $00       
;-------------------------------------------------------------------------------  
Offset_0x00BA7E:
                dc.b    $20, $0E, $0F, $02, $03, $19, $1A, $0A, $0B, $00, $00, $19, $1A, $02, $03, $1B
                dc.b    $1C, $29, $2A, $02, $03, $17, $18, $FF
;-------------------------------------------------------------------------------  
Offset_0x00BA96:
                dc.b    $00, $31, $32, $1D, $1E, $29, $2A, $12, $06, $07, $10, $11, $12, $00, $00, $27
                dc.b    $28, $02, $03, $15, $16, $02, $03, $10, $11, $02, $03, $25, $26, $10, $11, $12
                dc.b    $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00BAB8:
                dc.b    $20, $25, $26, $29, $2A, $1F, $20, $1F, $20, $1D, $1E, $23, $24, $27, $28, $0A
                dc.b    $0B, $23, $24, $25, $26, $FF
;-------------------------------------------------------------------------------  
Offset_0x00BACE:
                dc.b    $00, $08, $09, $02, $03, $12, $33, $34, $02, $03, $04, $05, $29, $2A, $23, $24
                dc.b    $1D, $1E, $29, $2A, $00, $00, $25, $26, $02, $03, $15, $16, $29, $2A, $23, $24
                dc.b    $02, $03, $12, $FF
;-------------------------------------------------------------------------------  
Offset_0x00BAF2:
                dc.b    $00, $10, $11, $12, $25, $26, $02, $03, $25, $26, $10, $11, $12, $00, $00, $25
                dc.b    $26, $29, $2A, $33, $34, $29, $2A, $15, $16, $12, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00BB0E:
                dc.b    $00, $27, $28, $10, $11, $1D, $1E, $19, $1A, $02, $03, $25, $26, $00, $00, $15
                dc.b    $16, $02, $03, $17, $18, $12, $1B, $1C, $25, $26, $15, $16, $0A, $0B, $FF, $00     
;-------------------------------------------------------------------------------  
Offset_0x00BB2E:
                dc.b    $00, $0C, $0D, $29, $2A, $13, $14, $12, $1D, $1E, $00, $00, $19, $1A, $12, $1B
                dc.b    $1C, $0A, $0B, $0E, $0F, $12, $25, $26, $10, $11, $12, $FF
;-------------------------------------------------------------------------------  
Offset_0x00BB4A:
                dc.b    $00, $27, $28, $02, $03, $15, $16, $02, $03, $10, $11, $02, $03, $23, $24, $29
                dc.b    $2A, $00, $29, $2A, $27, $28, $25, $26, $29, $2A, $1B, $1C, $1D, $1E, $19, $1A
                dc.b    $12, $31, $32, $02, $03, $FF
;-------------------------------------------------------------------------------  
Offset_0x00BB70:
                dc.b    $20, $25, $26, $1F, $20, $0A, $0B, $06, $07, $12, $02, $03, $17, $18, $00, $00
                dc.b    $27, $28, $10, $11, $02, $03, $1B, $1C, $15, $16, $25, $26, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00BB8E:
                dc.b    $20, $27, $28, $1D, $1E, $FF
;-------------------------------------------------------------------------------  
Offset_0x00BB94:
                dc.b    $00, $06, $07, $12, $1B, $1C, $08, $09, $31, $32, $00, $00, $06, $07, $17, $18
                dc.b    $02, $03, $2B, $2C, $0A, $0B, $23, $24, $02, $03, $1B, $1C, $FF, $00
;-------------------------------------------------------------------------------  
Offset_0x00BBB2:
                dc.b    $00, $08, $09, $0A, $0B, $04, $05, $1D, $1E, $23, $24, $02, $03, $10, $11, $00
                dc.b    $00, $19, $1A, $06, $07, $06, $07, $23, $24, $02, $03, $06, $07, $15, $16, $0A
                dc.b    $0B, $1B, $1C, $FF
;-------------------------------------------------------------------------------  
Offset_0x00BBD6:
                dc.b    $00, $27, $28, $02, $03, $27, $28, $25, $26, $29, $2A, $1D, $1E, $00, $00, $31
                dc.b    $32, $02, $03, $19, $1A, $02, $03, $08, $09, $02, $03, $FF
;-------------------------------------------------------------------------------
Offset_0x00BBF2:
                dc.b    $00, $08, $09, $02, $03, $12, $25, $26, $29, $2A, $15, $16, $0A, $0B, $00, $00
                dc.b    $25, $26, $02, $03, $12, $27, $28, $1D, $1E, $FF
;-------------------------------------------------------------------------------                
Offset_0x00BC0C:
                dc.b    $00, $15, $16, $29, $2A, $1B, $1C, $12, $27, $28, $02, $03, $15, $16, $0A, $0B
                dc.b    $00, $00, $02, $03, $1D, $1E, $15, $16, $12, $FF
;-------------------------------------------------------------------------------                
Offset_0x00BC26:
                dc.b    $00, $27, $28, $25, $26, $29, $2A, $1B, $1C, $0A, $0B, $15, $16, $1D, $1E, $00
                dc.b    $00, $02, $03, $1D, $1E, $15, $16, $12, $FF, $00
;-------------------------------------------------------------------------------                
Offset_0x00BC40:
                dc.b    $00, $19, $1A, $02, $03, $25, $26, $02, $03, $02, $03, $15, $16, $12, $00, $00
                dc.b    $15, $16, $02, $03, $2D, $2E, $02, $03, $19, $1A, $29, $2A, $23, $24, $02, $03
                dc.b    $FF, $00
;-------------------------------------------------------------------------------                
Offset_0x00BC62:
                dc.b    $00, $25, $26, $1D, $1E, $1B, $1C, $12, $06, $07, $FF, $00
;-------------------------------------------------------------------------------                
Offset_0x00BC6E:
                dc.b    $20, $35, $36, $FF
;-------------------------------------------------------------------------------                
Offset_0x00BC72:
                dc.b    $00, $06, $07, $02, $03, $25, $26, $27, $28, $00, $00, $1D, $1E, $0C, $0D, $00
                dc.b    $00, $06, $07, $10, $11, $02, $03, $23, $24, $02, $03, $06, $07, $27, $28, $0A
                dc.b    $0B, $23, $24, $25, $26, $FF
;-------------------------------------------------------------------------------  
Offset_0x00BC98:
                dc.b    $00, $1F, $20, $23, $24, $0A, $0B, $25, $26, $0A, $0B, $1B, $1C, $27, $28, $0A
                dc.b    $0B, $08, $09, $FF
;-------------------------------------------------------------------------------                  
Offset_0x00BCAC:
                dc.b    $00, $04, $05, $31, $32, $FF
;-------------------------------------------------------------------------------                  
Offset_0x00BCB2:
                dc.b    $00, $25, $26, $0A, $0B, $0E, $0F, $02, $03, $FF
;-------------------------------------------------------------------------------                  
Offset_0x00BCBC:
                dc.b    $00, $0C, $0D, $23, $24, $02, $03, $1B, $1C, $06, $07, $0A, $0B, $00, $00, $27
                dc.b    $28, $02, $03, $1B, $1C, $27, $28, $12, $02, $03, $08, $09, $1D, $1E, $FF, $00
;-------------------------------------------------------------------------------                  
Offset_0x00BCDC:
                dc.b    $00, $23, $24, $12, $06, $07, $15, $16, $00, $00, $19, $1A, $02, $03, $06, $07
                dc.b    $02, $03, $23, $24, $02, $03, $0A, $0B, $0E, $0F, $FF, $00
;-------------------------------------------------------------------------------                  
Offset_0x00BCF8:
                dc.b    $00, $17, $18, $1D, $1E, $06, $07, $15, $16, $31, $32, $00, $00, $1F, $20, $FF                                                                                
;-------------------------------------------------------------------------------                  
Intro_In: ; Offset_0x00BD08:                               
                dc.b    $05, $11, $1A, $1B, $FF
;-------------------------------------------------------------------------------                 
                dc.b    $00                                             ; Filler   
;-------------------------------------------------------------------------------                               
Intro_And: ; Offset_0x00BD0E: Offset_0x00BD0E                
                dc.b    $05, $01, $02, $1A, $1B, $07, $08, $FF
;-------------------------------------------------------------------------------                  
Intro_Miles_Tails_Prower: ; Offset_0x00BD16:  
                dc.b    $05, $18, $19, $11, $16, $17, $09, $0A, $24, $25, $00, $38, $26, $27, $01, $02
                dc.b    $11, $16, $17, $24, $25, $38, $00, $1E, $1F, $22, $23, $1C, $1D, $2C, $2D, $09
                dc.b    $0A, $22, $23, $FF
;-------------------------------------------------------------------------------                 
Intro_Sonic: ; Offset_0x00BD3A:                 
                dc.b    $05, $24, $25, $1C, $1D, $1A, $1B, $11, $05, $06, $FF, $00  
;-------------------------------------------------------------------------------  
                                                                                              
Credits_Font: ; Offset_0x00BD46:               
                incbin  'data\sprites\credits.nem'  
;===============================================================================
; Rotinas para mostrar o texto dos créditos na tela título e créditos do jogo
; [ Término ]
;===============================================================================  

;===============================================================================
; Rotina para carregar o tamanho das fases 
; [ Início ]
;===============================================================================                 
Level_Size_Load: ; Offset_0x00BF88:
                clr.w   ($FFFFEE50).w
                clr.w   ($FFFFEE52).w
                clr.w   ($FFFFEE54).w
                clr.w   ($FFFFEE56).w
                clr.w   ($FFFFEE58).w
                clr.w   ($FFFFEE5A).w
                clr.w   ($FFFFEE5C).w
                clr.w   ($FFFFEE5E).w
                clr.w   ($FFFFEEA0).w
                clr.w   ($FFFFEEA2).w
                clr.w   ($FFFFEEA4).w
                clr.w   ($FFFFEEA6).w
                clr.w   ($FFFFEEA8).w
                clr.w   ($FFFFEEAA).w
                clr.w   ($FFFFEEAC).w
                clr.w   ($FFFFEEAE).w
                clr.b   ($FFFFEEDC).w
                clr.b   ($FFFFEEBC).w
                clr.b   ($FFFFEEBD).w
                clr.b   ($FFFFEEBE).w
                clr.b   ($FFFFEEBF).w
                moveq   #$00, D0
                move.b  D0, ($FFFFEEDF).w
                move.w  D0, ($FFFFF660).w
                move.w  D0, ($FFFFF662).w
                move.w  D0, ($FFFFEEE2).w
                move.w  D0, ($FFFFEEE4).w
                move.w  (Level_Id).w, D0                             ; $FFFFFE10  
                ror.b   #$01, D0
                lsr.w   #$04, D0
                lea     Level_Size_Array(PC, D0), A0           ; Offset_0x00C030
                move.l  (A0)+, D0
                move.l  D0, ($FFFFEEC8).w
                move.l  D0, ($FFFFEEC0).w
                move.l  D0, ($FFFFEEF8).w
                move.l  (A0)+, D0
                move.l  D0, ($FFFFEECC).w
                move.l  D0, ($FFFFEEC4).w
                move.l  D0, ($FFFFEEFC).w
                move.w  #$1010, ($FFFFEE40).w
                move.w  #$0060, ($FFFFEED8).w
                move.w  #$0060, ($FFFFEEDA).w
                bra     Level_Size_Check_Star_Post             ; Offset_0x00C140
;-------------------------------------------------------------------------------
Level_Size_Array: ; Offset_0x00C030:
                dc.l    $000029A0, $00000320, $00002940, $00000420  ; EHz
                dc.l    $00003FFF, $00000720, $00003FFF, $00000720
                dc.l    $00003FFF, $00000720, $00003FFF, $00000720  ; Wz
                dc.l    $00003FFF, $00000720, $00003FFF, $00000720
                dc.l    $00002280, $FF000800, $00001E80, $FF000800  ; Mz
                dc.l    $00002A80, $FF000800, $00003FFF, $FF000800  ; Mz 3
                dc.l    $00003FFF, $00000720, $00003FFF, $00000720  ; WFz
                dc.l    $00002800, $00000720, $00003280, $00000720  ; HTz
                dc.l    $00003FFF, $00000720, $00003FFF, $00000720  ; HPz
                dc.l    $00003FFF, $00000720, $00003FFF, $00000720
                dc.l    $00002F80, $00000680, $00002D00, $00000680  ; OOz
                dc.l    $00002380, $03C00720, $00003FFF, $00600720  ; MCz
                dc.l    $000027A0, $00000720, $00002A80, $00000720  ; CNz
                dc.l    $00002780, $00000720, $00002A80, $00000720  ; CPz
                dc.l    $00001000, $00C800C8, $00001000, $00C800C8  ; DEz
                dc.l    $000028C0, $02000600, $00003FFF, $01800710  ; ARz
                dc.l    $00003FFF, $00000000, $00003FFF, $00000720  ; SCz 
;===============================================================================
; Rotina para carregar o tamanho das fases 
; [ Término ]
;===============================================================================                 
                
;===============================================================================
; Rotina para reiniciar de um Ponto salvo anteriormente através do Star Post
; [ Início ]
;===============================================================================  
Level_Size_Check_Star_Post: ; Offset_0x00C140:
                tst.b   ($FFFFFE30).w
                beq.s   Level_Size_Start_Loc                   ; Offset_0x00C156
                jsr     (Star_Post_Load_Info)                  ; Offset_0x01F2F0
                move.w  ($FFFFB008).w, D1
                move.w  ($FFFFB00C).w, D0
                bra.s   Level_Size_Start_Loc_Loaded            ; Offset_0x00C172       
;===============================================================================
; Rotina para reiniciar de um Ponto salvo anteriormente através do Star Post
; [ Término ]
;===============================================================================

;===============================================================================
; Rotina para inicializar a posição do jogador das fases 
; [ Início ]
;===============================================================================                                
Level_Size_Start_Loc: ; Offset_0x00C156:
                move.w  (Level_Id).w, D0                             ; $FFFFFE10
                ror.b   #$01, D0
                lsr.w   #$05, D0
                lea     Player_Start_Position_Array(PC, D0), A1 ; Offset_0x00C1AC
                moveq   #$00, D1
                move.w  (A1)+, D1
                move.w  D1, ($FFFFB008).w
                moveq   #$00, D0
                move.w  (A1), D0
                move.w  D0, ($FFFFB00C).w
Level_Size_Start_Loc_Loaded: ; Offset_0x00C172:
                subi.w  #$00A0, D1
                bcc.s   Offset_0x00C17A
                moveq   #$00, D1
Offset_0x00C17A:
                move.w  ($FFFFEECA).w, D2
                cmp.w   D2, D1
                bcs.s   Offset_0x00C184
                move.w  D2, D1
Offset_0x00C184:
                move.w  D1, ($FFFFEE00).w
                move.w  D1, ($FFFFEE20).w
                subi.w  #$0060, D0
                bcc.s   Offset_0x00C194
                moveq   #$00, D0
Offset_0x00C194:
                cmp.w   ($FFFFEECE).w, D0
                blt.s   Offset_0x00C19E
                move.w  ($FFFFEECE).w, D0
Offset_0x00C19E:
                move.w  D0, ($FFFFEE04).w
                move.w  D0, ($FFFFEE24).w
                bsr     Background_Scroll_Speed                ; Offset_0x00C234
                rts
;-------------------------------------------------------------------------------                
Player_Start_Position_Array: ; Offset_0x00C1AC:
                dc.l    $0060028F, $006002AF   ; EHz
                dc.l    $0060028F, $006002AF
                dc.l    $006001AC, $006001AC   ; Wz
                dc.l    $0060028F, $006002AF
                dc.l    $0060028C, $006005EC   ; Mz
                dc.l    $0060020C, $006002AF   ; Mz 3
                dc.l    $006004CC, $01E004CC   ; WFz
                dc.l    $006003EF, $006006AF   ; HTz
                dc.l    $023001AC, $023001AC   ; HPz
                dc.l    $0060028F, $006002AF
                dc.l    $006006AC, $0060056C   ; OOz
                dc.l    $006006AC, $006005AC   ; MCz
                dc.l    $006002AC, $0060058C   ; CNz
                dc.l    $006001EC, $0060012C   ; CPz
                dc.l    $0060012D, $0060012D   ; DEz
                dc.l    $0060037E, $0060037E   ; ARz
                dc.l    $01200070, $01400070   ; SCz   
;===============================================================================
; Rotina para inicializar a posição do jogador das fases 
; [ Término ]
;===============================================================================

;===============================================================================
; Rotina para inicializar a posição do plano de fundo das fases 
; [ Início ]
;===============================================================================
Background_Scroll_Speed: ; Offset_0x00C234:
                tst.b   (Saved_Level_Flag).w                         ; $FFFFFE30
                bne.s   Offset_0x00C262
                move.w  D0, ($FFFFEE0C).w
                move.w  D0, ($FFFFEE14).w
                move.w  D1, ($FFFFEE08).w
                move.w  D1, ($FFFFEE10).w
                move.w  D1, ($FFFFEE18).w
                move.w  D0, ($FFFFEE2C).w
                move.w  D0, ($FFFFEE34).w
                move.w  D1, ($FFFFEE28).w
                move.w  D1, ($FFFFEE30).w
                move.w  D1, ($FFFFEE38).w
Offset_0x00C262:
                moveq   #$00, D2
                move.b  (Level_Id).w, D2                             ; $FFFFFE10
                add.w   D2, D2
                move.w  Bg_Scroll_Speed_Index(PC, D2), D2      ; Offset_0x00C272
                jmp     Bg_Scroll_Speed_Index(PC, D2)          ; Offset_0x00C272
Bg_Scroll_Speed_Index: ; Offset_0x00C272:
                dc.w    Bg_Scroll_Speed_EHz-Bg_Scroll_Speed_Index  ; Offset_0x00C294
                dc.w    Bg_Scroll_Speed_Mz-Bg_Scroll_Speed_Index   ; Offset_0x00C2C0
                dc.w    Bg_Scroll_Speed_Mz-Bg_Scroll_Speed_Index   ; Offset_0x00C2C0
                dc.w    Bg_Scroll_Speed_Mz-Bg_Scroll_Speed_Index   ; Offset_0x00C2C0
                dc.w    Bg_Scroll_Speed_Mz-Bg_Scroll_Speed_Index   ; Offset_0x00C2C0
                dc.w    Bg_Scroll_Speed_Mz-Bg_Scroll_Speed_Index   ; Offset_0x00C2C0
                dc.w    Bg_Scroll_Speed_WFz-Bg_Scroll_Speed_Index  ; Offset_0x00C2CE
                dc.w    Bg_Scroll_Speed_HTz-Bg_Scroll_Speed_Index  ; Offset_0x00C2D0
                dc.w    Bg_Scroll_Speed_Null-Bg_Scroll_Speed_Index ; Offset_0x00C2FC
                dc.w    Bg_Scroll_Speed_Null-Bg_Scroll_Speed_Index ; Offset_0x00C2FC
                dc.w    Bg_Scroll_Speed_OOz-Bg_Scroll_Speed_Index  ; Offset_0x00C2FE
                dc.w    Bg_Scroll_Speed_MCz-Bg_Scroll_Speed_Index  ; Offset_0x00C30E
                dc.w    Bg_Scroll_Speed_CNz-Bg_Scroll_Speed_Index  ; Offset_0x00C340
                dc.w    Bg_Scroll_Speed_CPz-Bg_Scroll_Speed_Index  ; Offset_0x00C34E
                dc.w    Bg_Scroll_Speed_DEz-Bg_Scroll_Speed_Index  ; Offset_0x00C366
                dc.w    Bg_Scroll_Speed_ARz-Bg_Scroll_Speed_Index  ; Offset_0x00C368
                dc.w    Bg_Scroll_Speed_SCz-Bg_Scroll_Speed_Index  ; Offset_0x00C3A2
;-------------------------------------------------------------------------------                
Bg_Scroll_Speed_EHz: ; Offset_0x00C294:
                clr.l   ($FFFFEE08).w
                clr.l   ($FFFFEE0C).w
                clr.l   ($FFFFEE14).w
                clr.l   ($FFFFEE1C).w
                lea     ($FFFFA800).w, A2
                clr.l   (A2)+
                clr.l   (A2)+
                clr.l   (A2)+
                clr.l   ($FFFFEE28).w
                clr.l   ($FFFFEE2C).w
                clr.l   ($FFFFEE34).w
                clr.l   ($FFFFEE3C).w
                rts
;-------------------------------------------------------------------------------                
Bg_Scroll_Speed_Mz: ; Offset_0x00C2C0:
                asr.w   #$02, D0
                move.w  D0, ($FFFFEE0C).w
                asr.w   #$03, D1
                move.w  D1, ($FFFFEE08).w
                rts
;-------------------------------------------------------------------------------                
Bg_Scroll_Speed_WFz: ; Offset_0x00C2CE:
                rts
;-------------------------------------------------------------------------------                 
Bg_Scroll_Speed_HTz: ; Offset_0x00C2D0:
                clr.l   ($FFFFEE08).w
                clr.l   ($FFFFEE0C).w
                clr.l   ($FFFFEE14).w
                clr.l   ($FFFFEE1C).w
                lea     ($FFFFA800).w, A2
                clr.l   (A2)+
                clr.l   (A2)+
                clr.l   (A2)+
                clr.l   ($FFFFEE28).w
                clr.l   ($FFFFEE2C).w
                clr.l   ($FFFFEE34).w
                clr.l   ($FFFFEE3C).w
                rts
;-------------------------------------------------------------------------------                
Bg_Scroll_Speed_Null: ; Offset_0x00C2FC:
                rts
;-------------------------------------------------------------------------------                 
Bg_Scroll_Speed_OOz: ; Offset_0x00C2FE:
                lsr.w   #$03, D0
                addi.w  #$0050, D0
                move.w  D0, ($FFFFEE0C).w
                clr.l   ($FFFFEE08).w
                rts
;-------------------------------------------------------------------------------                
Bg_Scroll_Speed_MCz: ; Offset_0x00C30E:
                clr.l   ($FFFFEE08).w
                clr.l   ($FFFFEE28).w
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   Bg_Scroll_Speed_MCz_2                  ; Offset_0x00C32E
                divu.w  #$0003, D0
                subi.w  #$0140, D0
                move.w  D0, ($FFFFEE0C).w
                move.w  D0, ($FFFFEE2C).w
                rts
Bg_Scroll_Speed_MCz_2: ; Offset_0x00C32E:
                divu.w  #$0006, D0
                subi.w  #$0010, D0
                move.w  D0, ($FFFFEE0C).w
                move.w  D0, ($FFFFEE2C).w
                rts
;-------------------------------------------------------------------------------                 
Bg_Scroll_Speed_CNz: ; Offset_0x00C340:
                clr.l   ($FFFFEE08).w
                clr.l   ($FFFFEE0C).w
                clr.l   ($FFFFEE2C).w
                rts
;-------------------------------------------------------------------------------                  
Bg_Scroll_Speed_CPz: ; Offset_0x00C34E:
                lsr.w   #$02, D0
                move.w  D0, ($FFFFEE0C).w
                move.w  D0, ($FFFFEE2C).w
                lsr.w   #$01, D1
                move.w  D1, ($FFFFEE10).w
                lsr.w   #$02, D1
                move.w  D1, ($FFFFEE08).w
                rts
;-------------------------------------------------------------------------------                
Bg_Scroll_Speed_DEz: ; Offset_0x00C366:
                rts
;-------------------------------------------------------------------------------                
Bg_Scroll_Speed_ARz: ; Offset_0x00C368:
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                beq.s   Bg_Scroll_Speed_ARz_2                  ; Offset_0x00C37A
                subi.w  #$00E0, D0
                lsr.w   #$01, D0
                move.w  D0, ($FFFFEE0C).w
                bra.s   Offset_0x00C382
Bg_Scroll_Speed_ARz_2: ; Offset_0x00C37A:
                subi.w  #$0180, D0
                move.w  D0, ($FFFFEE0C).w
Offset_0x00C382:
                muls.w  #$0119, D1
                asr.l   #$08, D1
                move.w  D1, ($FFFFEE08).w
                move.w  D1, ($FFFFF672).w
                clr.w   ($FFFFEE0A).w
                clr.w   ($FFFFF674).w
                clr.l   ($FFFFEE14).w
                clr.l   ($FFFFEE1C).w
                rts
;-------------------------------------------------------------------------------                 
Bg_Scroll_Speed_SCz: ; Offset_0x00C3A2:
                clr.l   ($FFFFEE08).w
                clr.l   ($FFFFEE0C).w
                rts    
;===============================================================================
; Rotina para inicializar a posição do plano de fundo das fases 
; [ Término ]
;===============================================================================    
                
                
 ;===============================================================================
; Rotina para rolar o tela durante o jogo também conhecido como rasterização ou
; [ Início ]    rolagem por software
;===============================================================================            
Background_Scroll_Layer: ; Offset_0x00C3AC:
                tst.b   ($FFFFEEDC).w
                beq.s   Offset_0x00C3B4
                rts
Offset_0x00C3B4:
                clr.w   ($FFFFEE50).w
                clr.w   ($FFFFEE52).w
                clr.w   ($FFFFEE54).w
                clr.w   ($FFFFEE56).w
                clr.w   ($FFFFEE58).w
                clr.w   ($FFFFEE5A).w
                clr.w   ($FFFFEE5C).w
                clr.w   ($FFFFEE5E).w
                clr.w   ($FFFFEEB0).w
                clr.w   ($FFFFEEB2).w
                clr.w   ($FFFFEEB8).w
                clr.w   ($FFFFEEBA).w
                cmpi.b  #$10, (Level_Id).w                           ; $FFFFFE10
                bne     Offset_0x00C3F6
                tst.w   ($FFFFFE08).w
                beq     Offset_0x00C4AC
Offset_0x00C3F6:
                tst.b   ($FFFFEEBE).w
                bne.s   Offset_0x00C45C
                lea     ($FFFFB000).w, A0
                lea     ($FFFFEE00).w, A1
                lea     ($FFFFEEC8).w, A2
                lea     ($FFFFEE50).w, A3
                lea     ($FFFFEEB0).w, A4
                lea     ($FFFFEED0).w, A5
                lea     ($FFFFE500).w, A6
                cmpi.w  #$0002, (Player_Selected_Flag).w             ; $FFFFFF7A
                bne.s   Offset_0x00C428
                lea     ($FFFFEED4).w, A5
                lea     ($FFFFE600).w, A6
Offset_0x00C428:
                bsr     Scroll_Horizontal                      ; Offset_0x00D6BC
                lea     ($FFFFEE40).w, A2
                bsr     Scroll_Horizontal_2                    ; Offset_0x00D69A
                lea     ($FFFFEE04).w, A1
                lea     ($FFFFEEC8).w, A2
                lea     ($FFFFEEB2).w, A4
                move.w  ($FFFFEED8).w, D3
                cmpi.w  #$0002, (Player_Selected_Flag).w             ; $FFFFFF7A
                bne.s   Offset_0x00C450
                move.w  ($FFFFEEDA).w, D3
Offset_0x00C450:
                bsr     Scroll_Vertical                        ; Offset_0x00D732
                lea     ($FFFFEE41).w, A2
                bsr     Scroll_Vertical_2                      ; Offset_0x00D830
Offset_0x00C45C:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x00C4AC
                tst.b   ($FFFFEEBF).w
                bne.s   Offset_0x00C4AC
                lea     ($FFFFB040).w, A0
                lea     ($FFFFEE20).w, A1
                lea     ($FFFFEEF8).w, A2
                lea     ($FFFFEE58).w, A3
                lea     ($FFFFEEB8).w, A4
                lea     ($FFFFEED4).w, A5
                lea     ($FFFFE600).w, A6
                bsr     Scroll_Horizontal                      ; Offset_0x00D6BC
                lea     ($FFFFEE48).w, A2
                bsr     Scroll_Horizontal_2                    ; Offset_0x00D69A
                lea     ($FFFFEE24).w, A1
                lea     ($FFFFEEF8).w, A2
                lea     ($FFFFEEBA).w, A4
                move.w  ($FFFFEEDA).w, D3
                bsr     Scroll_Vertical                        ; Offset_0x00D732
                lea     ($FFFFEE49).w, A2
                bsr     Scroll_Vertical_2                      ; Offset_0x00D830
Offset_0x00C4AC:
                bsr     Dyn_Screen_Boss_Loader                 ; Offset_0x00E588
                move.w  ($FFFFEE04).w, ($FFFFF616).w
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                move.l  ($FFFFEE00).w, ($FFFFEEF0).w
                move.l  ($FFFFEE04).w, ($FFFFEEF4).w
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                add.w   D0, D0
                move.w  Bg_Scroll_Index(PC, D0), D0            ; Offset_0x00C4D8
                jmp     Bg_Scroll_Index(PC, D0)               ;  Offset_0x00C4D8
Bg_Scroll_Index: ; Offset_0x00C4D8:
                dc.w    Bg_Scroll_EHz-Bg_Scroll_Index          ; Offset_0x00C55A
                dc.w    Bg_Scroll_Null-Bg_Scroll_Index         ; Offset_0x00D61E
                dc.w    Bg_Scroll_Wz-Bg_Scroll_Index           ; Offset_0x00C798
                dc.w    Bg_Scroll_Null-Bg_Scroll_Index         ; Offset_0x00D61E
                dc.w    Bg_Scroll_Mz-Bg_Scroll_Index           ; Offset_0x00C79A
                dc.w    Bg_Scroll_Mz-Bg_Scroll_Index           ; Offset_0x00C79A
                dc.w    Bg_Scroll_WFz-Bg_Scroll_Index          ; Offset_0x00C7D2
                dc.w    Bg_Scroll_HTz-Bg_Scroll_Index          ; Offset_0x00C90C
                dc.w    Bg_Scroll_HPz-Bg_Scroll_Index          ; Offset_0x00CB4A
                dc.w    Bg_Scroll_Null-Bg_Scroll_Index         ; Offset_0x00D61E
                dc.w    Bg_Scroll_OOz-Bg_Scroll_Index          ; Offset_0x00CC10
                dc.w    Bg_Scroll_MCz-Bg_Scroll_Index          ; Offset_0x00CCD6
                dc.w    Bg_Scroll_CNz-Bg_Scroll_Index          ; Offset_0x00D074
                dc.w    Bg_Scroll_CPz-Bg_Scroll_Index          ; Offset_0x00D22E
                dc.w    Bg_Scroll_DEz-Bg_Scroll_Index          ; Offset_0x00D336
                dc.w    Bg_Scroll_ARz-Bg_Scroll_Index          ; Offset_0x00D464
                dc.w    Bg_Scroll_SCz-Bg_Scroll_Index          ; Offset_0x00D596                                                                                    
;===============================================================================
; Rotina para rolar o fundo da tela titulo 
; [ Início ]
;===============================================================================                    
Bg_Scroll_Title_Screen: ; Offset_0x00C4FA: 
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                addq.w  #$01, ($FFFFEE00).w
                move.w  ($FFFFEE00).w, D2
                neg.w   D2
                asr.w   #$02, D2
                lea     ($FFFFE000).w, A1
                moveq   #$00, D0
                move.w  #$009F, D1
Offset_0x00C516:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00C516
                move.w  D2, D0
                move.w  #$001F, D1
Offset_0x00C522:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00C522
                move.w  D0, D3
                move.b  ($FFFFFE0F).w, D1
                andi.w  #$0007, D1
                bne.s   Offset_0x00C538
                subq.w  #$01, ($FFFFA800).w
Offset_0x00C538:
                move.w  ($FFFFA800).w, D1
                andi.w  #$001F, D1
                lea     Bg_Scroll_Data(PC), A2                 ; Offset_0x00C65E
                lea     $00(A2, D1), A2
                move.w  #$000F, D1
Offset_0x00C54C:
                move.b  (A2)+, D0
                ext.w   D0
                add.w   D3, D0
                move.l  D0, (A1)+                        
                dbra    D1, Offset_0x00C54C
                rts               
;===============================================================================
; Rotina para rolar o fundo da tela titulo 
; [ Término ]
;===============================================================================    

;===============================================================================
; Rotina para controlar a rolagem da Emerald Hill
; [ Início ]
;===============================================================================   
Bg_Scroll_EHz: ; Offset_0x00C55A:  
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne     Bg_Scroll_EHz_2P                       ; Offset_0x00C6A0
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                lea     ($FFFFE000).w, A1
                move.w  ($FFFFEE00).w, D0
                neg.w   D0
                move.w  D0, D2
                swap.w  D0
                move.w  #$0000, D0
                move.w  #$0015, D1
Offset_0x00C57E:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00C57E
                move.w  D2, D0
                asr.w   #$06, D0
                move.w  #$0039, D1
Offset_0x00C58C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00C58C
                move.w  D0, D3
                move.b  ($FFFFFE0F).w, D1
                andi.w  #$0007, D1
                bne.s   Offset_0x00C5A2
                subq.w  #$01, ($FFFFA800).w
Offset_0x00C5A2:
                move.w  ($FFFFA800).w, D1
                andi.w  #$001F, D1
                lea     (Bg_Scroll_Data), A2                   ; Offset_0x00C65E
                lea     $00(A2, D1), A2
                move.w  #$0014, D1
Offset_0x00C5B8:
                move.b  (A2)+, D0
                ext.w   D0
                add.w   D3, D0
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00C5B8
                move.w  #$0000, D0
                move.w  #$000A, D1
Offset_0x00C5CC:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00C5CC
                move.w  D2, D0
                asr.w   #$04, D0
                move.w  #$000F, D1
Offset_0x00C5DA:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00C5DA
                move.w  D2, D0
                asr.w   #$04, D0
                move.w  D0, D1
                asr.w   #$01, D1
                add.w   D1, D0
                move.w  #$000F, D1
Offset_0x00C5EE:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00C5EE
                move.l  D0, D4
                swap.w  D4
                move.w  D2, D0
                asr.w   #$01, D0
                move.w  D2, D1
                asr.w   #$03, D1
                sub.w   D1, D0
                ext.l   D0
                asl.l   #$08, D0
                divs.w  #$0030, D0
                ext.l   D0
                asl.l   #$08, D0
                moveq   #$00, D3
                move.w  D2, D3
                asr.w   #$03, D3
                move.w  #$000E, D1
Offset_0x00C618:
                move.w  D4, (A1)+
                move.w  D3, (A1)+
                swap.w  D3
                add.l   D0, D3
                swap.w  D3
                dbra    D1, Offset_0x00C618
                move.w  #$0008, D1
Offset_0x00C62A:
                move.w  D4, (A1)+
                move.w  D3, (A1)+
                move.w  D4, (A1)+
                move.w  D3, (A1)+
                swap.w  D3
                add.l   D0, D3
                add.l   D0, D3
                swap.w  D3
                dbra    D1, Offset_0x00C62A
                move.w  #$000E, D1
Offset_0x00C642:
                move.w  D4, (A1)+
                move.w  D3, (A1)+
                move.w  D4, (A1)+
                move.w  D3, (A1)+
                move.w  D4, (A1)+
                move.w  D3, (A1)+
                swap.w  D3
                add.l   D0, D3
                add.l   D0, D3
                add.l   D0, D3
                swap.w  D3
                dbra    D1, Offset_0x00C642
                rts    
;===============================================================================
; Rotina para controlar a rolagem da Emerald Hill
; [ Término ]
;=============================================================================== 

;=============================================================================== 
; Dados usados para efeito de rolagem de várias fases           
;===============================================================================                              
Bg_Scroll_Data: ; Offset_0x00C65E:  
                dc.b    $01, $02, $01, $03, $01, $02, $02, $01, $02, $03, $01, $02, $01, $02, $00, $00
                dc.b    $02, $00, $03, $02, $02, $03, $02, $02, $01, $03, $00, $00, $01, $00, $01, $03
                dc.b    $01, $02, $01, $03, $01, $02, $02, $01, $02, $03, $01, $02, $01, $02, $00, $00
                dc.b    $02, $00, $03, $02, $02, $03, $02, $02, $01, $03, $00, $00, $01, $00, $01, $03
                dc.b    $01, $02        
                             
;===============================================================================
; Rotina para controlar a rolagem da Emerald Hill no modo 2 jogadores
; [ Início ]
;===============================================================================  
Bg_Scroll_EHz_2P: ; Offset_0x00C6A0:
                move.b  ($FFFFFE0F).w, D1
                andi.w  #$0007, D1
                bne.s   Offset_0x00C6AE
                subq.w  #$01, ($FFFFA800).w
Offset_0x00C6AE:
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                andi.l  #$FFFEFFFE, ($FFFFF616).w
                lea     ($FFFFE000).w, A1
                move.w  ($FFFFEE00).w, D0
                move.w  #$000A, D1
                bsr.s   Offset_0x00C6F6
                moveq   #$00, D0
                move.w  D0, ($FFFFF620).w
                subi.w  #$00E0, ($FFFFF620).w
                move.w  ($FFFFEE24).w, ($FFFFF61E).w
                subi.w  #$00E0, ($FFFFF61E).w
                andi.l  #$FFFEFFFE, ($FFFFF61E).w
                lea     ($FFFFE1B0).w, A1
                move.w  ($FFFFEE20).w, D0
                move.w  #$000E, D1
Offset_0x00C6F6:
                neg.w   D0
                move.w  D0, D2
                swap.w  D0
                move.w  #$0000, D0
Offset_0x00C700:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00C700
                move.w  D2, D0
                asr.w   #$06, D0
                move.w  #$001C, D1
Offset_0x00C70E:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00C70E
                move.w  D0, D3
                move.w  ($FFFFA800).w, D1
                andi.w  #$001F, D1
                lea     (Bg_Scroll_Data), A2                   ; Offset_0x00C65E
                lea     $00(A2, D1), A2
                move.w  #$000A, D1
Offset_0x00C72C:
                move.b  (A2)+, D0
                ext.w   D0
                add.w   D3, D0
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00C72C
                move.w  #$0000, D0
                move.w  #$0004, D1
Offset_0x00C740:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00C740
                move.w  D2, D0
                asr.w   #$04, D0
                move.w  #$0007, D1
Offset_0x00C74E:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00C74E
                move.w  D2, D0
                asr.w   #$04, D0
                move.w  D0, D1
                asr.w   #$01, D1
                add.w   D1, D0
                move.w  #$0007, D1
Offset_0x00C762:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00C762
                move.w  D2, D0
                asr.w   #$01, D0
                move.w  D2, D1
                asr.w   #$03, D1
                sub.w   D1, D0
                ext.l   D0
                asl.l   #$08, D0
                divs.w  #$0030, D0
                ext.l   D0
                asl.l   #$08, D0
                moveq   #$00, D3
                move.w  D2, D3
                asr.w   #$03, D3
                move.w  #$0027, D1
Offset_0x00C788:
                move.w  D2, (A1)+
                move.w  D3, (A1)+
                swap.w  D3
                add.l   D0, D3
                swap.w  D3
                dbra    D1, Offset_0x00C788
                rts
;===============================================================================
; Rotina para controlar a rolagem da Emerald Hill no modo 2 jogadores
; [ Término ]
;===============================================================================  

;===============================================================================
; Rotina para controlar a rolagem da Wood
; [ Início ]
;===============================================================================    
Bg_Scroll_Wz: ; Offset_0x00C798:   
                rts
;===============================================================================
; Rotina para controlar a rolagem da Wood
; [ Término ]
;=============================================================================== 

;===============================================================================
; Rotina para controlar a rolagem da Metropolis
; [ Início ]
;=============================================================================== 
Bg_Scroll_Mz: ; Offset_0x00C79A:    
                move.w  ($FFFFEEB0).w, D4
                ext.l   D4
                asl.l   #$05, D4
                move.w  ($FFFFEEB2).w, D5
                ext.l   D5
                asl.l   #$06, D5
                bsr     Scroll_Block_1                         ; Offset_0x00D852
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                lea     ($FFFFE000).w, A1
                move.w  #$00DF, D1
                move.w  ($FFFFEE00).w, D0
                neg.w   D0
                swap.w  D0
                move.w  ($FFFFEE08).w, D0
                neg.w   D0
Offset_0x00C7CA:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00C7CA
                rts
;===============================================================================
; Rotina para controlar a rolagem da Metropolis
; [ Término ]
;=============================================================================== 

;===============================================================================
; Rotina para controlar a rolagem da Wing Fortress
; [ Início ]
;===============================================================================
Bg_Scroll_WFz: ; Offset_0x00C7D2:
                move.w  ($FFFFEEB4).w, D4
                ext.l   D4
                asl.l   #$08, D4
                moveq   #$02, D6
                bsr     Scroll_Block_2                         ; Offset_0x00D8BC
                move.w  ($FFFFEEB6).w, D5
                ext.l   D5
                lsl.l   #$08, D5
                moveq   #$06, D6
                bsr     Scroll_Block_3                         ; Offset_0x00D8F0
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                move.l  ($FFFFEE08).w, D0
                move.l  D0, D1
                lea     ($FFFFA800).w, A2
                move.l  D0, (A2)+
                move.l  D1, (A2)+
                addi.l  #$00008000, (A2)+
                addi.l  #$00004000, (A2)+
                addi.l  #$00002000, (A2)+
                lea     (WFz_Scroll_Data), A3                  ; Offset_0x00C872
                cmpi.w  #$2700, ($FFFFEE00).w
                bcc.s   Offset_0x00C828
                lea     (WFz_Scroll_Data_2), A3                ; Offset_0x00C8BE
Offset_0x00C828:
                lea     ($FFFFA800).w, A2
                lea     ($FFFFE000).w, A1
                move.w  ($FFFFEE0C).w, D1
                andi.w  #$07FF, D1
                moveq   #$00, D0
                moveq   #$00, D3
Offset_0x00C83C:
                move.b  (A3)+, D0
                addq.w  #$01, A3
                sub.w   D0, D1
                bcc.s   Offset_0x00C83C
                neg.w   D1
                move.w  #$00DF, D2
                move.w  ($FFFFEE00).w, D0
                neg.w   D0
                swap.w  D0
                move.b  $FFFF(A3), D3
                move.w  $00(A2, D3), D0
                neg.w   D0
Offset_0x00C85C:
                move.l  D0, (A1)+
                subq.w  #$01, D1
                bne.s   Offset_0x00C86C
                move.b  (A3)+, D1
                move.b  (A3)+, D3
                move.w  $00(A2, D3), D0
                neg.w   D0
Offset_0x00C86C:
                dbra    D2, Offset_0x00C85C
                rts
;-------------------------------------------------------------------------------                
WFz_Scroll_Data: ; Offset_0x00C872:      
                dc.b    $C0, $00, $C0, $00, $80, $00, $20, $08, $30, $0C, $30, $10, $20, $08, $30, $0C
                dc.b    $30, $10, $20, $08, $30, $0C, $30, $10, $20, $08, $30, $0C, $30, $10, $20, $08
                dc.b    $30, $0C, $30, $10, $20, $08, $30, $0C, $30, $10, $20, $08, $30, $0C, $30, $10
                dc.b    $80, $04, $80, $04, $20, $08, $30, $0C, $30, $10, $20, $08, $30, $0C, $30, $10
                dc.b    $20, $08, $30, $0C, $30, $10, $C0, $00, $C0, $00, $80, $00
;-------------------------------------------------------------------------------                         
WFz_Scroll_Data_2: ; Offset_0x00C8BE:   
                dc.b    $C0, $00, $C0, $00, $80, $00, $20, $08, $30, $0C, $30, $10, $20, $08, $30, $0C
                dc.b    $30, $10, $20, $08, $30, $0C, $30, $10, $20, $08, $30, $0C, $30, $10, $20, $08
                dc.b    $30, $0C, $30, $10, $20, $08, $30, $0C, $30, $10, $20, $08, $30, $0C, $30, $10
                dc.b    $20, $08, $30, $0C, $30, $10, $20, $08, $30, $0C, $30, $10, $20, $08, $30, $0C
                dc.b    $30, $10, $20, $08, $30, $0C, $30, $10, $C0, $00, $C0, $00, $80, $00                
;===============================================================================
; Rotina para controlar a rolagem da Wing Fortress
; [ Término ]
;===============================================================================

;===============================================================================
; Rotina para controlar a rolagem da Hill Top
; [ Início ]
;=============================================================================== 
Bg_Scroll_HTz: ; Offset_0x00C90C:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne     Bg_Scroll_HTz_2P                       ; Offset_0x00CABA
                tst.b   ($FFFFEEBC).w
                bne     Offset_0x00CA3A
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                lea     ($FFFFE000).w, A1
                move.w  ($FFFFEE00).w, D0
                neg.w   D0
                move.w  D0, D2
                swap.w  D0
                move.w  D2, D0
                asr.w   #$03, D0
                move.w  #$007F, D1
Offset_0x00C938:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00C938
                move.l  D0, D4
                move.w  ($FFFFA822).w, D0
                addq.w  #$04, ($FFFFA822).w
                sub.w   D0, D2
                move.w  D2, D0
                move.w  D0, D1
                asr.w   #$01, D0
                asr.w   #$04, D1
                sub.w   D1, D0
                ext.l   D0
                asl.l   #$08, D0
                divs.w  #$0070, D0
                ext.l   D0
                asl.l   #$08, D0
                lea     ($FFFFA800).w, A2
                moveq   #$00, D3
                move.w  D1, D3
                swap.w  D3
                add.l   D0, D3
                swap.w  D3
                move.w  D3, (A2)+
                swap.w  D3
                add.l   D0, D3
                swap.w  D3
                move.w  D3, (A2)+
                swap.w  D3
                add.l   D0, D3
                swap.w  D3
                move.w  D3, (A2)+
                move.w  D3, (A2)+
                swap.w  D3
                add.l   D0, D3
                add.l   D0, D3
                swap.w  D3
                moveq   #$03, D1
Offset_0x00C98C:
                move.w  D3, (A2)+
                move.w  D3, (A2)+
                move.w  D3, (A2)+
                swap.w  D3
                add.l   D0, D3
                add.l   D0, D3
                add.l   D0, D3
                swap.w  D3
                dbra    D1, Offset_0x00C98C
                add.l   D0, D0
                add.l   D0, D0
                move.w  D3, D4
                move.l  D4, (A1)+
                move.l  D4, (A1)+
                move.l  D4, (A1)+
                swap.w  D3
                add.l   D0, D3
                swap.w  D3
                move.w  D3, D4
                move.l  D4, (A1)+
                move.l  D4, (A1)+
                move.l  D4, (A1)+
                move.l  D4, (A1)+
                move.l  D4, (A1)+
                swap.w  D3
                add.l   D0, D3
                swap.w  D3
                move.w  D3, D4
                move.w  #$0006, D1
Offset_0x00C9CA:
                move.l  D4, (A1)+
                dbra    D1, Offset_0x00C9CA
                swap.w  D3
                add.l   D0, D3
                add.l   D0, D3
                swap.w  D3
                move.w  D3, D4
                move.w  #$0007, D1
Offset_0x00C9DE:
                move.l  D4, (A1)+
                dbra    D1, Offset_0x00C9DE
                swap.w  D3
                add.l   D0, D3
                add.l   D0, D3
                swap.w  D3
                move.w  D3, D4
                move.w  #$0009, D1
Offset_0x00C9F2:
                move.l  D4, (A1)+
                dbra    D1, Offset_0x00C9F2
                swap.w  D3
                add.l   D0, D3
                add.l   D0, D3
                add.l   D0, D3
                swap.w  D3
                move.w  D3, D4
                move.w  #$000E, D1
Offset_0x00CA08:
                move.l  D4, (A1)+
                dbra    D1, Offset_0x00CA08
                swap.w  D3
                add.l   D0, D3
                add.l   D0, D3
                add.l   D0, D3
                swap.w  D3
                move.w  #$0002, D2
Offset_0x00CA1C:
                move.w  D3, D4
                move.w  #$000F, D1
Offset_0x00CA22:
                move.l  D4, (A1)+
                dbra    D1, Offset_0x00CA22
                swap.w  D3
                add.l   D0, D3
                add.l   D0, D3
                add.l   D0, D3
                add.l   D0, D3
                swap.w  D3
                dbra    D2, Offset_0x00CA1C
                rts
Offset_0x00CA3A:
                move.w  ($FFFFEEB4).w, D4
                ext.l   D4
                lsl.l   #$08, D4
                moveq   #$02, D6
                bsr     Scroll_Block_2                         ; Offset_0x00D8BC
                move.w  ($FFFFEEB6).w, D5
                ext.l   D5
                lsl.l   #$08, D5
                moveq   #$00, D6
                bsr     Scroll_Block_3                         ; Offset_0x00D8F0
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                move.w  ($FFFFEE04).w, ($FFFFF616).w
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                moveq   #$00, D2
                tst.b   ($FFFFEEBD).w
                beq.s   Offset_0x00CA98
                move.w  ($FFFFFE04).w, D0
                andi.w  #$003F, D0
                lea     (Bg_Scroll_Data), A1                   ; Offset_0x00C65E
                lea     $00(A1, D0), A1
                moveq   #$00, D0
                move.b  (A1)+, D0
                add.w   D0, ($FFFFF616).w
                add.w   D0, ($FFFFF618).w
                add.w   D0, ($FFFFEEF4).w
                move.b  (A1)+, D2
                add.w   D2, ($FFFFEEF0).w
Offset_0x00CA98:
                lea     ($FFFFE000).w, A1
                move.w  #$00DF, D1
                move.w  ($FFFFEE00).w, D0
                add.w   D2, D0
                neg.w   D0
                swap.w  D0
                move.w  ($FFFFEE08).w, D0
                add.w   D2, D0
                neg.w   D0
Offset_0x00CAB2:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00CAB2
                rts
;===============================================================================
; Rotina para controlar a rolagem da Hill Top
; [ Término ]
;=============================================================================== 
                
;===============================================================================
; Rotina para controlar a rolagem da Hill Top no modo 2 Jogadores
; [ Início ]
;===============================================================================                 
Bg_Scroll_HTz_2P: ; Offset_0x00CABA:
                move.w  ($FFFFEEB0).w, D4
                ext.l   D4
                asl.l   #$06, D4
                move.w  ($FFFFEEB2).w, D5
                ext.l   D5
                asl.l   #$02, D5
                moveq   #$00, D5
                bsr     Scroll_Block_1                         ; Offset_0x00D852
                move.b  #$00, ($FFFFEE52).w
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                andi.l  #$FFFEFFFE, ($FFFFF616).w
                lea     ($FFFFE000).w, A1
                move.w  #$006F, D1
                move.w  ($FFFFEE00).w, D0
                neg.w   D0
                swap.w  D0
                move.w  ($FFFFEE08).w, D0
                neg.w   D0
Offset_0x00CAFA:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00CAFA
                move.w  ($FFFFEEB8).w, D4
                ext.l   D4
                asl.l   #$06, D4
                add.l   D4, ($FFFFEE28).w
                moveq   #$00, D0
                move.w  D0, ($FFFFF620).w
                subi.w  #$00E0, ($FFFFF620).w
                move.w  ($FFFFEE24).w, ($FFFFF61E).w
                subi.w  #$00E0, ($FFFFF61E).w
                andi.l  #$FFFEFFFE, ($FFFFF61E).w
                lea     ($FFFFE1B0).w, A1
                move.w  #$0073, D1
                move.w  ($FFFFEE20).w, D0
                neg.w   D0
                swap.w  D0
                move.w  ($FFFFEE28).w, D0
                neg.w   D0
Offset_0x00CB42:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00CB42
                rts
;===============================================================================
; Rotina para controlar a rolagem da Hill Top no modo 2 Jogadores
; [ Término ]
;=============================================================================== 

;===============================================================================
; Rotina para controlar a rolagem da Hidden Palace
; [ Início ]
;=============================================================================== 
Bg_Scroll_HPz: ; Offset_0x00CB4A:
                move.w  ($FFFFEEB0).w, D4
                ext.l   D4
                asl.l   #$06, D4
                moveq   #$02, D6
                bsr     Scroll_Block_2                         ; Offset_0x00D8BC
                move.w  ($FFFFEEB2).w, D5
                ext.l   D5
                asl.l   #$07, D5
                moveq   #$06, D6
                bsr     Scroll_Block_3                         ; Offset_0x00D8F0
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                lea     ($FFFFA800).w, A1
                move.w  ($FFFFEE00).w, D2
                neg.w   D2
                move.w  D2, D0
                asr.w   #$01, D0
                move.w  #$0007, D1
Offset_0x00CB7E:
                move.w  D0, (A1)+
                dbra    D1, Offset_0x00CB7E
                move.w  D2, D0
                asr.w   #$03, D0
                sub.w   D2, D0
                ext.l   D0
                asl.l   #$03, D0
                divs.w  #$0008, D0
                ext.l   D0
                asl.l   #$04, D0
                asl.l   #$08, D0
                moveq   #$00, D3
                move.w  D2, D3
                asr.w   #$01, D3
                lea     ($FFFFA860).w, A2
                swap.w  D3
                add.l   D0, D3
                swap.w  D3
                move.w  D3, (A1)+
                move.w  D3, (A1)+
                move.w  D3, (A1)+
                move.w  D3, -(A2)
                move.w  D3, -(A2)
                move.w  D3, -(A2)
                swap.w  D3
                add.l   D0, D3
                swap.w  D3
                move.w  D3, (A1)+
                move.w  D3, (A1)+
                move.w  D3, -(A2)
                move.w  D3, -(A2)
                swap.w  D3
                add.l   D0, D3
                swap.w  D3
                move.w  D3, (A1)+
                move.w  D3, -(A2)
                swap.w  D3
                add.l   D0, D3
                swap.w  D3
                move.w  D3, (A1)+
                move.w  D3, -(A2)
                move.w  ($FFFFEE08).w, D0
                neg.w   D0
                move.w  #$0019, D1
Offset_0x00CBE0:
                move.w  D0, (A1)+
                dbra    D1, Offset_0x00CBE0
                adda.w  #$000E, A1
                move.w  D2, D0
                asr.w   #$01, D0
                move.w  #$0017, D1
Offset_0x00CBF2:
                move.w  D0, (A1)+
                dbra    D1, Offset_0x00CBF2
                lea     ($FFFFA800).w, A2
                move.w  ($FFFFEE0C).w, D0
                move.w  D0, D2
                andi.w  #$03F0, D0
                lsr.w   #$03, D0
                lea     $00(A2, D0), A2
                bra     Offset_0x00D656
;===============================================================================
; Rotina para controlar a rolagem da Hidden Palace
; [ Término ]
;=============================================================================== 

;===============================================================================
; Rotina para controlar a rolagem da Oil Ocean
; [ Início ]
;=============================================================================== 
Bg_Scroll_OOz: ; Offset_0x00CC10:
                move.w  ($FFFFEEB0).w, D0
                ext.l   D0
                asl.l   #$05, D0
                add.l   D0, ($FFFFEE08).w
                move.w  ($FFFFEEB2).w, D0
                ext.l   D0
                asl.l   #$05, D0
                move.l  ($FFFFEE0C).w, D3
                add.l   D3, D0
                moveq   #$04, D6
                bsr     Scroll_Block_3_D0                      ; Offset_0x00D8F8
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                lea     ($FFFFE380).w, A1
                move.w  ($FFFFEE00).w, D0
                neg.w   D0
                swap.w  D0
                move.w  ($FFFFEE08).w, D7
                neg.w   D7
                move.w  ($FFFFEE0C).w, D1
                subi.w  #$0050, D1
                bcc.s   Offset_0x00CC54
                moveq   #$00, D1
Offset_0x00CC54:
                subi.w  #$00B0, D1
                bcs.s   Offset_0x00CC5C
                moveq   #$00, D1
Offset_0x00CC5C:
                move.w  #$00DF, D6
                add.w   D6, D1
                move.w  D7, D0
                bsr.s   Offset_0x00CCC6
                bsr.s   Offset_0x00CCBA
                bsr.s   Offset_0x00CCC0
                bsr.s   Offset_0x00CCB4
                move.w  D7, D0
                asr.w   #$04, D0
                moveq   #$06, D1
                bsr.s   Offset_0x00CCC6
                move.b  ($FFFFFE0F).w, D1
                andi.w  #$0007, D1
                bne.s   Offset_0x00CC82
                subq.w  #$01, ($FFFFA800).w
Offset_0x00CC82:
                move.w  ($FFFFA800).w, D1
                andi.w  #$001F, D1
                lea     Bg_Scroll_Data(PC), A2                 ; Offset_0x00C65E
                lea     $00(A2, D1), A2
                moveq   #$20, D1
Offset_0x00CC94:
                move.b  (A2)+, D0
                ext.w   D0
                move.l  D0, -(A1)
                subq.w  #$01, D6
                bmi.s   Offset_0x00CCB2
                dbra    D1, Offset_0x00CC94
                bsr.s   Offset_0x00CCBA
                bsr.s   Offset_0x00CCC0
                bsr.s   Offset_0x00CCB4
                bsr.s   Offset_0x00CCC0
                bsr.s   Offset_0x00CCBA
                move.w  D7, D0
                moveq   #$47, D1
                bsr.s   Offset_0x00CCC6
Offset_0x00CCB2:
                rts
Offset_0x00CCB4:
                move.w  D7, D0
                asr.w   #$02, D0
                bra.s   Offset_0x00CCC4
Offset_0x00CCBA:
                move.w  D7, D0
                asr.w   #$03, D0
                bra.s   Offset_0x00CCC4
Offset_0x00CCC0:
                move.w  D7, D0
                asr.w   #$04, D0
Offset_0x00CCC4:
                moveq   #$07, D1
Offset_0x00CCC6:
                move.l  D0, -(A1)
                subq.w  #$01, D6
                bmi.s   Offset_0x00CCD2
                dbra    D1, Offset_0x00CCC6
                rts
Offset_0x00CCD2:
                addq.l  #$04, A7
                rts
;===============================================================================
; Rotina para controlar a rolagem da Oil Ocean
; [ Término ]
;=============================================================================== 

;===============================================================================
; Rotina para controlar a rolagem da Mystic Cave
; [ Início ]
;=============================================================================== 
Bg_Scroll_MCz: ; Offset_0x00CCD6:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne     Bg_Scroll_MCz_2P                       ; Offset_0x00CE30
                move.w  ($FFFFEE04).w, D0
                move.l  ($FFFFEE0C).w, D3
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   Bg_Scroll_MCz_Act_2                    ; Offset_0x00CCF6
                divu.w  #$0003, D0
                subi.w  #$0140, D0
                bra.s   Offset_0x00CCFE
;-------------------------------------------------------------------------------                
Bg_Scroll_MCz_Act_2: ; Offset_0x00CCF6:
                divu.w  #$0006, D0
                subi.w  #$0010, D0
Offset_0x00CCFE:
                swap.w  D0
                moveq   #$06, D6
                bsr     Scroll_Block_3_D0                      ; Offset_0x00D8F8
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                moveq   #$00, D2
                tst.b   ($FFFFEEBD).w
                beq.s   Offset_0x00CD3C
                move.w  ($FFFFFE04).w, D0
                andi.w  #$003F, D0
                lea     (Bg_Scroll_Data), A1                   ; Offset_0x00C65E
                lea     $00(A1, D0), A1
                moveq   #$00, D0
                move.b  (A1)+, D0
                add.w   D0, ($FFFFF616).w
                add.w   D0, ($FFFFF618).w
                add.w   D0, ($FFFFEEF4).w
                move.b  (A1)+, D2
                add.w   D2, ($FFFFEEF0).w
Offset_0x00CD3C:
                lea     ($FFFFA800).w, A2
                lea     $001E(A2), A3
                move.w  ($FFFFEE00).w, D0
                ext.l   D0
                asl.l   #$04, D0
                divs.w  #$000A, D0
                ext.l   D0
                asl.l   #$04, D0
                asl.l   #$08, D0
                move.l  D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $000E(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $000C(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $000A(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $0008(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $0006(A2)
                move.w  D1, $0010(A2)
                move.w  D1, $001C(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $0004(A2)
                move.w  D1, $0012(A2)
                move.w  D1, $001A(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $0002(A2)
                move.w  D1, $0014(A2)
                move.w  D1, $0018(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, (A2)
                move.w  D1, $0016(A2)
                lea     (MCz_Bg_Scroll_Data), A3               ; Offset_0x00CE18
                lea     ($FFFFA800).w, A2
                lea     ($FFFFE000).w, A1
                move.w  ($FFFFEE0C).w, D1
                moveq   #$00, D0
Offset_0x00CDEA:
                move.b  (A3)+, D0
                addq.w  #$02, A2
                sub.w   D0, D1
                bcc.s   Offset_0x00CDEA
                neg.w   D1
                subq.w  #$02, A2
                move.w  #$00DF, D2
                move.w  ($FFFFEE00).w, D0
                neg.w   D0
                swap.w  D0
                move.w  (A2)+, D0
                neg.w   D0
Offset_0x00CE06:
                move.l  D0, (A1)+
                subq.w  #$01, D1
                bne.s   Offset_0x00CE12
                move.b  (A3)+, D1
                move.w  (A2)+, D0
                neg.w   D0
Offset_0x00CE12:
                dbra    D2, Offset_0x00CE06
                rts  
;------------------------------------------------------------------------------- 
MCz_Bg_Scroll_Data: ; Offset_0x00CE18:
                dc.b    $25, $17, $12, $07, $07, $02, $02, $30, $0D, $13, $20, $40, $20, $13, $0D, $30
                dc.b    $02, $02, $07, $07, $20, $12, $17, $25     
;===============================================================================
; Rotina para controlar a rolagem da Mystic Cave
; [ Término ]
;=============================================================================== 

;===============================================================================
; Rotina para controlar a rolagem da Mystic Cave no modo 2 jogadores
; [ Início ]
;===============================================================================                 
Bg_Scroll_MCz_2P: ; Offset_0x00CE30:
                moveq   #$00, D0
                move.w  ($FFFFEE04).w, D0
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   Bg_Scroll_MCz_Act_2_2P                 ; Offset_0x00CE46
                divu.w  #$0003, D0
                subi.w  #$0140, D0
                bra.s   Offset_0x00CE4E
;-------------------------------------------------------------------------------                
Bg_Scroll_MCz_Act_2_2P: ; Offset_0x00CE46:
                divu.w  #$0006, D0
                subi.w  #$0010, D0
Offset_0x00CE4E:
                move.w  D0, ($FFFFEE0C).w
                move.w  D0, ($FFFFF618).w
                andi.l  #$FFFEFFFE, ($FFFFF616).w
                lea     ($FFFFA800).w, A2
                lea     $001E(A2), A3
                move.w  ($FFFFEE00).w, D0
                ext.l   D0
                asl.l   #$04, D0
                divs.w  #$000A, D0
                ext.l   D0
                asl.l   #$04, D0
                asl.l   #$08, D0
                move.l  D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $000E(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $000C(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $000A(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $0008(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $0006(A2)
                move.w  D1, $0010(A2)
                move.w  D1, $001C(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $0004(A2)
                move.w  D1, $0012(A2)
                move.w  D1, $001A(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $0002(A2)
                move.w  D1, $0014(A2)
                move.w  D1, $0018(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, (A2)
                move.w  D1, $0016(A2)
                lea     (MCz_Bg_Scroll_Data_2P), A3            ; Offset_0x00CF3C
                lea     ($FFFFA800).w, A2
                lea     ($FFFFE000).w, A1
                move.w  ($FFFFEE0C).w, D1
                lsr.w   #$01, D1
                moveq   #$00, D0
Offset_0x00CF0E:
                move.b  (A3)+, D0
                addq.w  #$02, A2
                sub.w   D0, D1
                bcc.s   Offset_0x00CF0E
                neg.w   D1
                subq.w  #$02, A2
                move.w  #$006F, D2
                move.w  ($FFFFEE00).w, D0
                neg.w   D0
                swap.w  D0
                move.w  (A2)+, D0
                neg.w   D0
Offset_0x00CF2A:
                move.l  D0, (A1)+
                subq.w  #$01, D1
                bne.s   Offset_0x00CF36
                move.b  (A3)+, D1
                move.w  (A2)+, D0
                neg.w   D0
Offset_0x00CF36:
                dbra    D2, Offset_0x00CF2A
                bra.s   Offset_0x00CF54
;-------------------------------------------------------------------------------                 
MCz_Bg_Scroll_Data_2P: ; Offset_0x00CF3C:                                  
                dc.b    $13, $0B, $09, $04, $03, $01, $01, $18, $06, $0A, $10, $20, $10, $0A, $06, $18
                dc.b    $01, $01, $03, $04, $10, $09, $0B, $13
;------------------------------------------------------------------------------- 
Offset_0x00CF54:
                moveq   #$00, D0
                move.w  ($FFFFEE24).w, D0
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   Bg_Scroll_MCz_Act_2_2P_2               ; Offset_0x00CF6A
                divu.w  #$0003, D0
                subi.w  #$0140, D0
                bra.s   Offset_0x00CF72
;-------------------------------------------------------------------------------                
Bg_Scroll_MCz_Act_2_2P_2: ; Offset_0x00CF6A:
                divu.w  #$0006, D0
                subi.w  #$0010, D0
Offset_0x00CF72:
                move.w  D0, ($FFFFEE2C).w
                move.w  D0, ($FFFFF620).w
                subi.w  #$00E0, ($FFFFF620).w
                move.w  ($FFFFEE24).w, ($FFFFF61E).w
                subi.w  #$00E0, ($FFFFF61E).w
                andi.l  #$FFFEFFFE, ($FFFFF61E).w
                lea     ($FFFFA800).w, A2
                lea     $001E(A2), A3
                move.w  ($FFFFEE20).w, D0
                ext.l   D0
                asl.l   #$04, D0
                divs.w  #$000A, D0
                ext.l   D0
                asl.l   #$04, D0
                asl.l   #$08, D0
                move.l  D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $000E(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $000C(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $000A(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $0008(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $0006(A2)
                move.w  D1, $0010(A2)
                move.w  D1, $001C(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $0004(A2)
                move.w  D1, $0012(A2)
                move.w  D1, $001A(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, $0002(A2)
                move.w  D1, $0014(A2)
                move.w  D1, $0018(A2)
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, (A2)
                move.w  D1, $0016(A2)
                lea     (MCz_Bg_Scroll_Data_2P+$01), A3        ; Offset_0x00CF3D
                lea     ($FFFFA800).w, A2
                lea     ($FFFFE1B0).w, A1
                move.w  ($FFFFEE2C).w, D1
                lsr.w   #$01, D1
                moveq   #$17, D0
                bra.s   Offset_0x00D048
Offset_0x00D046:
                move.b  (A3)+, D0
Offset_0x00D048:
                addq.w  #$02, A2
                sub.w   D0, D1
                bcc.s   Offset_0x00D046
                neg.w   D1
                subq.w  #$02, A2
                move.w  #$0073, D2
                move.w  ($FFFFEE20).w, D0
                neg.w   D0
                swap.w  D0
                move.w  (A2)+, D0
                neg.w   D0
Offset_0x00D062:
                move.l  D0, (A1)+
                subq.w  #$01, D1
                bne.s   Offset_0x00D06E
                move.b  (A3)+, D1
                move.w  (A2)+, D0
                neg.w   D0
Offset_0x00D06E:
                dbra    D2, Offset_0x00D062
                rts
;===============================================================================
; Rotina para controlar a rolagem da Mystic Cave no modo 2 jogadores
; [ Término ]
;=============================================================================== 

;===============================================================================
; Rotina para controlar a rolagem da Casino Night
; [ Início ]
;=============================================================================== 
Bg_Scroll_CNz: ; Offset_0x00D074: 
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne     Bg_Scroll_CNz_2P                       ; Offset_0x00D144
                move.w  ($FFFFEE04).w, D0
                lsr.w   #$06, D0
                move.w  D0, ($FFFFEE0C).w
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                move.w  ($FFFFEE00).w, D2
                bsr     Offset_0x00D110
                lea     (CNz_Bg_Scroll_Data), A3               ; Offset_0x00D106
                lea     ($FFFFA800).w, A2
                lea     ($FFFFE000).w, A1
                move.w  ($FFFFEE0C).w, D1
                moveq   #$00, D0
Offset_0x00D0A8:
                move.b  (A3)+, D0
                addq.w  #$02, A2
                sub.w   D0, D1
                bcc.s   Offset_0x00D0A8
                neg.w   D1
                subq.w  #$02, A2
                move.w  #$00DF, D2
                move.w  ($FFFFEE00).w, D0
                neg.w   D0
                swap.w  D0
                move.w  (A2)+, D0
                neg.w   D0
Offset_0x00D0C4:
                move.l  D0, (A1)+
                subq.w  #$01, D1
                bne.s   Offset_0x00D0D2
Offset_0x00D0CA:
                move.w  (A2)+, D0
                neg.w   D0
                move.b  (A3)+, D1
                beq.s   Offset_0x00D0D8
Offset_0x00D0D2:
                dbra    D2, Offset_0x00D0C4
                rts
Offset_0x00D0D8:
                move.w  #$000F, D1
                move.w  D0, D3
                move.b  ($FFFFFE0F).w, D0
                lsr.w   #$03, D0
                neg.w   D0
                andi.w  #$001F, D0
                lea     (Bg_Scroll_Data), A4                   ; Offset_0x00C65E
                lea     $00(A4, D0), A4
Offset_0x00D0F4:
                move.b  (A4)+, D0
                ext.w   D0
                add.w   D3, D0
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00D0F4
                subi.w  #$0010, D2
                bra.s   Offset_0x00D0CA
;-------------------------------------------------------------------------------                
CNz_Bg_Scroll_Data: ; Offset_0x00D106:
                dc.b    $10, $10, $10, $10, $10, $10, $10, $10, $00, $F0
;-------------------------------------------------------------------------------                   
Offset_0x00D110:
                lea     ($FFFFA800).w, A1
                move.w  D2, D0
                asr.w   #$03, D0
                sub.w   D2, D0
                ext.l   D0
                asl.l   #$05, D0
                asl.l   #$08, D0
                moveq   #$00, D3
                move.w  D2, D3
                move.w  #$0006, D1
Offset_0x00D128:
                move.w  D3, (A1)+
                swap.w  D3
                add.l   D0, D3
                swap.w  D3
                dbra    D1, Offset_0x00D128
                move.w  D2, D0
                asr.w   #$03, D0
                move.w  D0, $0004(A1)
                asr.w   #$01, D0
                move.w  D0, (A1)+
                move.w  D0, (A1)+
                rts                
;===============================================================================
; Rotina para controlar a rolagem da Casino Night
; [ Término ]
;===============================================================================
 
;===============================================================================
; Rotina para controlar a rolagem da Casino Night no modo 2 jogadores
; [ Início ]
;=============================================================================== 
Bg_Scroll_CNz_2P: ; Offset_0x00D144:
                move.w  ($FFFFEE04).w, D0
                lsr.w   #$06, D0
                move.w  D0, ($FFFFEE0C).w
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                andi.l  #$FFFEFFFE, ($FFFFF616).w
                move.w  ($FFFFEE00).w, D2
                bsr     Offset_0x00D110
                lea     ($FFFFE000).w, A1
                move.w  ($FFFFEE0C).w, D1
                moveq   #$00, D0
                move.w  ($FFFFEE00).w, D0
                move.w  #$006F, D2
                lea     (CNz_Bg_Scroll_Data_2P+$02), A3        ; Offset_0x00D224
                bsr.s   Offset_0x00D1C6
                move.w  ($FFFFEE24).w, D0
                lsr.w   #$06, D0
                move.w  D0, ($FFFFEE2C).w
                move.w  D0, ($FFFFF620).w
                subi.w  #$00E0, ($FFFFF620).w
                move.w  ($FFFFEE24).w, ($FFFFF61E).w
                subi.w  #$00E0, ($FFFFF61E).w
                andi.l  #$FFFEFFFE, ($FFFFF61E).w
                move.w  ($FFFFEE20).w, D2
                bsr     Offset_0x00D110
                lea     ($FFFFE1B0).w, A1
                move.w  ($FFFFEE2C).w, D1
                moveq   #$00, D0
                move.w  ($FFFFEE20).w, D0
                move.w  #$0073, D2
                lea     (CNz_Bg_Scroll_Data_2P+$01), A3        ; Offset_0x00D223
Offset_0x00D1C6:
                lsr.w   #$01, D1
                lea     ($FFFFA800).w, A2
                moveq   #$00, D3
Offset_0x00D1CE:
                move.b  (A3)+, D3
                addq.w  #$02, A2
                sub.w   D3, D1
                bcc.s   Offset_0x00D1CE
                neg.w   D1
                subq.w  #$02, A2
                neg.w   D0
                swap.w  D0
                move.w  (A2)+, D0
                neg.w   D0
Offset_0x00D1E2:
                move.l  D0, (A1)+
                subq.w  #$01, D1
                bne.s   Offset_0x00D1F0
Offset_0x00D1E8:
                move.w  (A2)+, D0
                neg.w   D0
                move.b  (A3)+, D1
                beq.s   Offset_0x00D1F6
Offset_0x00D1F0:
                dbra    D2, Offset_0x00D1E2
                rts
Offset_0x00D1F6:
                move.w  #$0007, D1
                move.w  D0, D3
                move.b  ($FFFFFE0F).w, D0
                lsr.w   #$03, D0
                neg.w   D0
                andi.w  #$001F, D0
                lea     (Bg_Scroll_Data), A4                   ; Offset_0x00C65E
                lea     $00(A4, D0), A4
Offset_0x00D212:
                move.b  (A4)+, D0
                ext.w   D0
                add.w   D3, D0
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00D212
                subq.w  #$08, D2
                bra.s   Offset_0x00D1E8 
;-------------------------------------------------------------------------------                
CNz_Bg_Scroll_Data_2P: ; Offset_0x00D222:  
                dc.b    $04, $04, $08, $08, $08, $08, $08, $08, $08, $08, $00, $78                
;===============================================================================
; Rotina para controlar a rolagem da Casino Night no modo 2 jogadores
; [ Término ]
;=============================================================================== 

;===============================================================================
; Rotina para controlar a rolagem da Chemical Plant
; [ Início ]
;=============================================================================== 
Bg_Scroll_CPz: ; Offset_0x00D22E: 
                move.w  ($FFFFEEB0).w, D4
                ext.l   D4
                asl.l   #$05, D4
                move.w  ($FFFFEEB2).w, D5
                ext.l   D5
                asl.l   #$06, D5
                bsr     Scroll_Block_1                         ; Offset_0x00D852
                move.w  ($FFFFEEB0).w, D4
                ext.l   D4
                asl.l   #$07, D4
                moveq   #$04, D6
                bsr     Scroll_Block_5                         ; Offset_0x00D980
                move.w  ($FFFFEE0C).w, D0
                move.w  D0, ($FFFFEE14).w
                move.w  D0, ($FFFFF618).w
                move.b  ($FFFFEE52).w, D0
                or.b    ($FFFFEE54).w, D0
                move.b  D0, ($FFFFEE56).w
                clr.b   ($FFFFEE52).w
                clr.b   ($FFFFEE54).w
                move.b  ($FFFFFE0F).w, D1
                andi.w  #$0007, D1
                bne.s   Offset_0x00D27E
                subq.w  #$01, ($FFFFA800).w
Offset_0x00D27E:
                lea     (Draw_CPz_Bg_Data+$01), A0             ; Offset_0x00DD8C
                move.w  ($FFFFEE0C).w, D0
                move.w  D0, D2
                andi.w  #$03F0, D0
                lsr.w   #$04, D0
                lea     $00(A0, D0), A0
                move.w  D0, D4
                lea     ($FFFFE000).w, A1
                move.w  #$000E, D1
                move.w  ($FFFFEE00).w, D0
                neg.w   D0
                swap.w  D0
                andi.w  #$000F, D2
                move.w  ($FFFFEE08).w, D0
                cmpi.b  #$12, D4
                beq.s   Offset_0x00D2FC
                bcs.s   Offset_0x00D2BA
                move.w  ($FFFFEE10).w, D0
Offset_0x00D2BA:
                neg.w   D0
                add.w   D2, D2
                jmp     Offset_0x00D2D4(PC, D2)
Offset_0x00D2C2:
                move.w  ($FFFFEE08).w, D0
                cmpi.b  #$12, D4
                beq.s   Offset_0x00D306
                bcs.s   Offset_0x00D2D2
                move.w  ($FFFFEE10).w, D0
Offset_0x00D2D2:
                neg.w   D0
Offset_0x00D2D4:                
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                addq.b  #$01, D4
                dbra    D1, Offset_0x00D2C2
                rts
Offset_0x00D2FC:
                move.w  #$000F, D0
                sub.w   D2, D0
                move.w  D0, D2
                bra.s   Offset_0x00D30A
Offset_0x00D306:
                move.w  #$000F, D2
Offset_0x00D30A:
                move.w  ($FFFFEE08).w, D3
                neg.w   D3
                move.w  ($FFFFA800).w, D0
                andi.w  #$001F, D0
                lea     (Bg_Scroll_Data), A2                   ; Offset_0x00C65E
                lea     $00(A2, D0), A2
Offset_0x00D322:
                move.b  (A2)+, D0
                ext.w   D0
                add.w   D3, D0
                move.l  D0, (A1)+
                dbra    D2, Offset_0x00D322
                addq.b  #$01, D4
                dbra    D1, Offset_0x00D2C2
                rts
;===============================================================================
; Rotina para controlar a rolagem da Chemical Plant
; [ Término ]
;=============================================================================== 

;===============================================================================
; Rotina para controlar a rolagem da Death Egg
; [ Início ]
;=============================================================================== 
Bg_Scroll_DEz: ; Offset_0x00D336:
                move.w  ($FFFFEEB0).w, D4
                ext.l   D4
                asl.l   #$08, D4
                move.w  ($FFFFEEB2).w, D5
                ext.l   D5
                asl.l   #$08, D5
                bsr     Scroll_Block_1                         ; Offset_0x00D852
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                move.w  ($FFFFEE00).w, D4
                lea     ($FFFFA800).w, A2
                move.w  D4, (A2)+
                addq.w  #$03, (A2)+
                addq.w  #$02, (A2)+
                addq.w  #$04, (A2)+
                addq.w  #$01, (A2)+
                addq.w  #$02, (A2)+
                addq.w  #$04, (A2)+
                addq.w  #$03, (A2)+
                addq.w  #$04, (A2)+
                addq.w  #$02, (A2)+
                addq.w  #$06, (A2)+
                addq.w  #$03, (A2)+
                addq.w  #$04, (A2)+
                addq.w  #$01, (A2)+
                addq.w  #$02, (A2)+
                addq.w  #$04, (A2)+
                addq.w  #$03, (A2)+
                addq.w  #$02, (A2)+
                addq.w  #$03, (A2)+
                addq.w  #$04, (A2)+
                addq.w  #$01, (A2)+
                addq.w  #$03, (A2)+
                addq.w  #$04, (A2)+
                addq.w  #$02, (A2)+
                addq.w  #$01, (A2)
                move.w  (A2)+, D0
                moveq   #$00, D1
                move.w  D0, D1
                lsr.w   #$01, D0
                move.w  D0, (A2)+
                addq.w  #$03, (A2)+
                addq.w  #$02, (A2)+
                addq.w  #$04, (A2)+
                swap.w  D1
                move.l  D1, D0
                lsr.l   #$03, D1
                sub.l   D1, D0
                swap.w  D0
                move.w  D0, $0004(A2)
                swap.w  D0
                sub.l   D1, D0
                swap.w  D0
                move.w  D0, $0002(A2)
                swap.w  D0
                sub.l   D1, D0
                swap.w  D0
                move.w  D0, (A2)+
                addq.w  #$04, A2
                addq.w  #$01, (A2)+
                move.w  D4, (A2)+
                move.w  D4, (A2)+
                move.w  D4, (A2)+
                lea     (DEz_Bg_Scroll_Data), A3               ; Offset_0x00D440
                lea     ($FFFFA800).w, A2
                lea     ($FFFFE000).w, A1
                move.w  ($FFFFEE0C).w, D1
                moveq   #$00, D0
Offset_0x00D3D8:
                move.b  (A3)+, D0
                addq.w  #$02, A2
                sub.w   D0, D1
                bcc.s   Offset_0x00D3D8
                neg.w   D1
                subq.w  #$02, A2
                move.w  #$00DF, D2
                move.w  ($FFFFEE00).w, D0
                neg.w   D0
                swap.w  D0
                move.w  (A2)+, D0
                neg.w   D0
Offset_0x00D3F4:
                move.l  D0, (A1)+
                subq.w  #$01, D1
                bne.s   Offset_0x00D400
                move.b  (A3)+, D1
                move.w  (A2)+, D0
                neg.w   D0
Offset_0x00D400:
                dbra    D2, Offset_0x00D3F4
                moveq   #$00, D2
                tst.b   ($FFFFEEBD).w
                beq.s   Offset_0x00D43E
                subq.w  #$01, ($FFFFF660).w
                bpl.s   Offset_0x00D416
                clr.b   ($FFFFEEBD).w
Offset_0x00D416:
                move.w  ($FFFFFE04).w, D0
                andi.w  #$003F, D0
                lea     (Bg_Scroll_Data), A1                   ; Offset_0x00C65E
                lea     $00(A1, D0), A1
                moveq   #$00, D0
                move.b  (A1)+, D0
                add.w   D0, ($FFFFF616).w
                add.w   D0, ($FFFFF618).w
                add.w   D0, ($FFFFEEF4).w
                move.b  (A1)+, D2
                add.w   D2, ($FFFFEEF0).w
Offset_0x00D43E:
                rts
;-------------------------------------------------------------------------------                
DEz_Bg_Scroll_Data: ; Offset_0x00D440:
                dc.b    $80, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
                dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $03, $05, $08
                dc.b    $10, $80, $80, $80
;===============================================================================
; Rotina para controlar a rolagem da Death Egg
; [ Término ]
;=============================================================================== 

;===============================================================================
; Rotina para controlar a rolagem da Aquatic Ruin
; [ Início ]
;=============================================================================== 
Bg_Scroll_ARz: ; Offset_0x00D464:  
                move.w  ($FFFFEEB0).w, D4
                ext.l   D4
                muls.w  #$0119, D4
                moveq   #$02, D6
                bsr     Scroll_Block_4                         ; Offset_0x00D924
                move.w  ($FFFFEEB2).w, D5
                ext.l   D5
                asl.l   #$07, D5
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   Bg_Scroll_ARz_Act_2                    ; Offset_0x00D484
                asl.l   #$01, D5
Bg_Scroll_ARz_Act_2: ; Offset_0x00D484:
                moveq   #$06, D6
                bsr     Scroll_Block_3                         ; Offset_0x00D8F0
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                moveq   #$00, D2
                tst.b   ($FFFFEEBD).w
                beq.s   Offset_0x00D4C0
                move.w  ($FFFFFE04).w, D0
                andi.w  #$003F, D0
                lea     (Bg_Scroll_Data), A1                   ; Offset_0x00C65E
                lea     $00(A1, D0), A1
                moveq   #$00, D0
                move.b  (A1)+, D0
                add.w   D0, ($FFFFF616).w
                add.w   D0, ($FFFFF618).w
                add.w   D0, ($FFFFEEF4).w
                move.b  (A1)+, D2
                add.w   D2, ($FFFFEEF0).w
Offset_0x00D4C0:
                lea     ($FFFFA800).w, A2
                lea     $0006(A2), A3
                move.w  ($FFFFEE00).w, D0
                ext.l   D0
                asl.l   #$04, D0
                divs.w  #$000A, D0
                ext.l   D0
                asl.l   #$04, D0
                asl.l   #$08, D0
                move.l  D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                swap.w  D1
                add.l   D1, D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                swap.w  D1
                add.l   D0, D1
                swap.w  D1
                move.w  D1, (A3)+
                move.w  D1, (A2)
                move.w  D1, $0004(A2)
                move.w  ($FFFFEE08).w, D0
                move.w  D0, $0002(A2)
                move.w  D0, $0016(A2)
                move.w  D0, $0000(A2)
                move.w  D0, $0004(A2)
                move.w  D0, $0018(A2)
                move.w  D0, $001A(A2)
                move.w  D0, $001C(A2)
                move.w  D0, $001E(A2)
                lea     (ARz_Bg_Scroll_Data), A3               ; Offset_0x00D586
                lea     ($FFFFA800).w, A2
                lea     ($FFFFE000).w, A1
                move.w  ($FFFFEE0C).w, D1
                moveq   #$00, D0
Offset_0x00D558:
                move.b  (A3)+, D0
                addq.w  #$02, A2
                sub.w   D0, D1
                bcc.s   Offset_0x00D558
                neg.w   D1
                subq.w  #$02, A2
                move.w  #$00DF, D2
                move.w  ($FFFFEE00).w, D0
                neg.w   D0
                swap.w  D0
                move.w  (A2)+, D0
                neg.w   D0
Offset_0x00D574:
                move.l  D0, (A1)+
                subq.w  #$01, D1
                bne.s   Offset_0x00D580
                move.b  (A3)+, D1
                move.w  (A2)+, D0
                neg.w   D0
Offset_0x00D580:
                dbra    D2, Offset_0x00D574
                rts
;-------------------------------------------------------------------------------
ARz_Bg_Scroll_Data: ; Offset_0x00D586:
                dc.b    $B0, $70, $30, $60, $15, $0C, $0E, $06, $0C, $1F, $30, $C0, $F0, $F0, $F0, $F0                
;===============================================================================
; Rotina para controlar a rolagem da Aquatic Ruin
; [ Término ]
;=============================================================================== 

;===============================================================================
; Rotina para controlar a rolagem da Sky Chase
; [ Início ]
;===============================================================================
Bg_Scroll_SCz: ; Offset_0x00D596:    
                tst.w   ($FFFFFE08).w
                bne     Bg_Scroll_Null                         ; Offset_0x00D61E
                lea     ($FFFFEE00).w, A1
                lea     ($FFFFEE50).w, A3
                lea     ($FFFFEEB0).w, A4
                move.w  ($FFFFF736).w, D0
                move.w  (A1), D4
                add.w   (A1), D0
                move.w  D0, D1
                sub.w   (A1), D1
                asl.w   #$08, D1
                move.w  D0, (A1)
                move.w  D1, (A4)
                lea     ($FFFFEE40).w, A2
                bsr     Scroll_Horizontal_2                    ; Offset_0x00D69A
                lea     ($FFFFEE04).w, A1
                lea     ($FFFFEEB2).w, A4
                move.w  ($FFFFF738).w, D0
                move.w  (A1), D4
                add.w   (A1), D0
                move.w  D0, D1
                sub.w   (A1), D1
                asl.w   #$08, D1
                move.w  D0, (A1)
                move.w  D1, (A4)
                lea     ($FFFFEE41).w, A2
                bsr     Scroll_Vertical_2                      ; Offset_0x00D830
                move.w  ($FFFFEEB0).w, D4
                beq.s   Offset_0x00D5F0
                move.w  #$0100, D4
Offset_0x00D5F0:
                ext.l   D4
                asl.l   #$07, D4
                moveq   #$00, D5
                bsr     Scroll_Block_1                         ; Offset_0x00D852
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                lea     ($FFFFE000).w, A1
                move.w  #$00DF, D1
                move.w  ($FFFFEE00).w, D0
                neg.w   D0
                swap.w  D0
                move.w  ($FFFFEE08).w, D0
                neg.w   D0
Offset_0x00D616:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00D616
                rts
;===============================================================================
; Rotina para controlar a rolagem da Sky Chase
; [ Término ]
;===============================================================================

;===============================================================================
; Rotina para controlar a rolagem das fases não terminadas ou excluídas do jogo
; [ Início ]
;===============================================================================            
Bg_Scroll_Null: ; Offset_0x00D61E: 
                move.w  ($FFFFEEB0).w, D4
                ext.l   D4
                asl.l   #$05, D4
                move.w  ($FFFFEEB2).w, D5
                ext.l   D5
                asl.l   #$06, D5
                bsr     Scroll_Block_1                         ; Offset_0x00D852
                move.w  ($FFFFEE0C).w, ($FFFFF618).w
                lea     ($FFFFE000).w, A1
                move.w  #$00DF, D1
                move.w  ($FFFFEE00).w, D0
                neg.w   D0
                swap.w  D0
                move.w  ($FFFFEE08).w, D0
                neg.w   D0
Offset_0x00D64E:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00D64E  
                rts 
;===============================================================================
; Rotina para controlar a rolagem das fases não terminadas ou excluídas do jogo
; [ Término ]
;===============================================================================                                    
Offset_0x00D656:
                lea     ($FFFFE000).w, A1
                move.w  #$000E, D1
                move.w  ($FFFFEE00).w, D0
                neg.w   D0
                swap.w  D0
                andi.w  #$000F, D2
                add.w   D2, D2
                move.w  (A2)+, D0
                jmp     Offset_0x00D674(PC, D2)
Offset_0x00D672:
                move.w  (A2)+, D0
Offset_0x00D674:                
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00D672
                rts                                  
;===============================================================================
; Rotinas para rolar a tela horizontalmente
; [ Início ]
;===============================================================================                        
Scroll_Horizontal_2: ; Offset_0x00D69A:
                move.w  (A1), D0
                andi.w  #$0010, D0
                move.b  (A2), D1
                eor.b   D1, D0
                bne.s   Offset_0x00D6BA
                eori.b  #$10, (A2)
                move.w  (A1), D0
                sub.w   D4, D0
                bpl.s   Offset_0x00D6B6
                bset    #$02, (A3)
                rts
Offset_0x00D6B6:
                bset    #$03, (A3)
Offset_0x00D6BA:                
                rts
;===============================================================================                            
Scroll_Horizontal: ; Offset_0x00D6BC:
                move.w  (A1), D4
                tst.b   ($FFFFF623).w
                bne.s   Offset_0x00D6FA
                move.w  (A5), D1
                beq.s   Offset_0x00D6E6
                subi.w  #$0100, D1
                move.w  D1, (A5)
                moveq   #$00, D1
                move.b  (A5), D1
                lsl.b   #$02, D1
                addq.b  #$04, D1
                move.w  $0002(A5), D0
                sub.b   D1, D0
                move.w  $00(A6, D0), D0
                andi.w  #$3FFF, D0
                bra.s   Offset_0x00D6EA
Offset_0x00D6E6:
                move.w  $0008(A0), D0
Offset_0x00D6EA:
                sub.w   (A1), D0
                subi.w  #$0090, D0
                blt.s   Offset_0x00D6FC
                subi.w  #$0010, D0
                bge.s   Offset_0x00D710
                clr.w   (A4)
Offset_0x00D6FA:
                rts          
;-------------------------------------------------------------------------------
Offset_0x00D6FC:
                cmpi.w  #$FFF0, D0
                bgt.s   Offset_0x00D706
                move.w  #$FFF0, D0
Offset_0x00D706:
                add.w   (A1), D0
                cmp.w   (A2), D0
                bgt.s   Offset_0x00D726
                move.w  (A2), D0
                bra.s   Offset_0x00D726
;------------------------------------------------------------------------------- 
Offset_0x00D710:                
                cmpi.w  #$0010, D0
                bcs.s   Offset_0x00D71A
                move.w  #$0010, D0
Offset_0x00D71A:
                add.w   (A1), D0
                cmp.w   $0002(A2), D0
                blt.s   Offset_0x00D726
                move.w  $0002(A2), D0
Offset_0x00D726:
                move.w  D0, D1
                sub.w   (A1), D1
                asl.w   #$08, D1
                move.w  D0, (A1)
                move.w  D1, (A4)
                rts                            
;===============================================================================
; Rotinas para rolar a tela horizontalmente
; [ Término ]
;===============================================================================                        
        
;===============================================================================
; Rotinas para rolar a tela verticalmente
; [ Inicio ]
;===============================================================================     
Scroll_Vertical: ; Offset_0x00D732:
                moveq   #$00, D1
                move.w  $000C(A0), D0
                sub.w   (A1), D0
                cmpi.w  #$FF00, ($FFFFEECC).w
                bne.s   Offset_0x00D746
                andi.w  #$07FF, D0
Offset_0x00D746:
                btst    #$02, $0022(A0)
                beq.s   Offset_0x00D750
                subq.w  #$05, D0
Offset_0x00D750:
                btst    #$01, $0022(A0)
                beq.s   Offset_0x00D76E
                addi.w  #$0020, D0
                sub.w   D3, D0
                bcs.s   Offset_0x00D7B4
                subi.w  #$0040, D0
                bcc.s   Offset_0x00D7B4
                tst.b   ($FFFFEEDE).w
                bne.s   Offset_0x00D7C6
                bra.s   Offset_0x00D778
Offset_0x00D76E:
                sub.w   D3, D0
                bne.s   Offset_0x00D77C
                tst.b   ($FFFFEEDE).w
                bne.s   Offset_0x00D7C6
Offset_0x00D778:
                clr.w   (A4)
                rts
;-------------------------------------------------------------------------------                
Offset_0x00D77C:
                cmpi.w  #$0060, D3
                bne.s   Offset_0x00D7A2
                move.w  $0014(A0), D1
                bpl.s   Offset_0x00D78A
                neg.w   D1
Offset_0x00D78A:
                cmpi.w  #$0800, D1
                bcc.s   Offset_0x00D7B4
                move.w  #$0600, D1
                cmpi.w  #$0006, D0
                bgt.s   Offset_0x00D802
                cmpi.w  #$FFFA, D0
                blt.s   Offset_0x00D7DC
                bra.s   Offset_0x00D7CC
Offset_0x00D7A2:
                move.w  #$0200, D1
                cmpi.w  #$0002, D0
                bgt.s   Offset_0x00D802
                cmpi.w  #$FFFE, D0
                blt.s   Offset_0x00D7DC
                bra.s   Offset_0x00D7CC
Offset_0x00D7B4:
                move.w  #$1000, D1
                cmpi.w  #$0010, D0
                bgt.s   Offset_0x00D802
                cmpi.w  #$FFF0, D0
                blt.s   Offset_0x00D7DC
                bra.s   Offset_0x00D7CC
Offset_0x00D7C6:
                moveq   #$00, D0
                move.b  D0, ($FFFFEEDE).w
Offset_0x00D7CC:
                moveq   #$00, D1
                move.w  D0, D1
                add.w   (A1), D1
                tst.w   D0
                bpl     Offset_0x00D80A
                bra     Offset_0x00D7E6
;-------------------------------------------------------------------------------  
Offset_0x00D7DC:
                neg.w   D1
                ext.l   D1
                asl.l   #$08, D1
                add.l   (A1), D1
                swap.w  D1
Offset_0x00D7E6:
                cmp.w   $0004(A2), D1
                bgt.s   Offset_0x00D820
                cmpi.w  #$FF00, D1
                bgt.s   Offset_0x00D7FC
                andi.w  #$07FF, D1
                andi.w  #$07FF, (A1)
                bra.s   Offset_0x00D820
Offset_0x00D7FC:
                move.w  $0004(A2), D1
                bra.s   Offset_0x00D820
Offset_0x00D802:
                ext.l   D1
                asl.l   #$08, D1
                add.l   (A1), D1
                swap.w  D1
Offset_0x00D80A:
                cmp.w   $0006(A2), D1
                blt.s   Offset_0x00D820
                subi.w  #$0800, D1
                bcs.s   Offset_0x00D81C
                subi.w  #$0800, (A1)
                bra.s   Offset_0x00D820
Offset_0x00D81C:
                move.w  $0006(A2), D1
Offset_0x00D820:
                move.w  (A1), D4
                swap.w  D1
                move.l  D1, D3
                sub.l   (A1), D3
                ror.l   #$08, D3
                move.w  D3, (A4)
                move.l  D1, (A1)
                rts   
;===============================================================================                
Scroll_Vertical_2: ; Offset_0x00D830:
                move.w  (A1), D0
                andi.w  #$0010, D0
                move.b  (A2), D1
                eor.b   D1, D0
                bne.s   Offset_0x00D850
                eori.b  #$10, (A2)
                move.w  (A1), D0
                sub.w   D4, D0
                bpl.s   Offset_0x00D84C
                bset    #$00, (A3)
                rts
Offset_0x00D84C:
                bset    #$01, (A3)
Offset_0x00D850:
                rts                
;===============================================================================
; Rotinas para rolar a tela verticalmente
; [ Término ]
;===============================================================================        
       
;===============================================================================
; Sub Rotina Scroll_Block_1
; [ Início ]
;===============================================================================        
Scroll_Block_1: ; Offset_0x00D852:
                move.l  ($FFFFEE08).w, D2
                move.l  D2, D0
                add.l   D4, D0
                move.l  D0, ($FFFFEE08).w
                move.l  D0, D1
                swap.w  D1
                andi.w  #$0010, D1
                move.b  ($FFFFEE42).w, D3
                eor.b   D3, D1
                bne.s   Offset_0x00D886
                eori.b  #$10, ($FFFFEE42).w
                sub.l   D2, D0
                bpl.s   Offset_0x00D880
                bset    #$02, ($FFFFEE52).w
                bra.s   Offset_0x00D886
Offset_0x00D880:
                bset    #$03, ($FFFFEE52).w
Offset_0x00D886:
                move.l  ($FFFFEE0C).w, D3
                move.l  D3, D0
                add.l   D5, D0
                move.l  D0, ($FFFFEE0C).w
                move.l  D0, D1
                swap.w  D1
                andi.w  #$0010, D1
                move.b  ($FFFFEE43).w, D2
                eor.b   D2, D1
                bne.s   Offset_0x00D8BA
                eori.b  #$10, ($FFFFEE43).w
                sub.l   D3, D0
                bpl.s   Offset_0x00D8B4
                bset    #$00, ($FFFFEE52).w
                rts 
Offset_0x00D8B4:
                bset    #$01, ($FFFFEE52).w
Offset_0x00D8BA:
                rts                      
;===============================================================================
; Sub Rotina Scroll_Block_1
; [ Término ]
;===============================================================================       

;===============================================================================
; Sub Rotina Scroll_Block_2
; [ Início ]
;===============================================================================
Scroll_Block_2: ; Offset_0x00D8BC:
                move.l  ($FFFFEE08).w, D2
                move.l  D2, D0
                add.l   D4, D0
                move.l  D0, ($FFFFEE08).w
                move.l  D0, D1
                swap.w  D1
                andi.w  #$0010, D1
                move.b  ($FFFFEE42).w, D3
                eor.b   D3, D1
                bne.s   Offset_0x00D8EE
                eori.b  #$10, ($FFFFEE42).w
                sub.l   D2, D0
                bpl.s   Offset_0x00D8E8
                bset    D6, ($FFFFEE52).w
                bra.s   Offset_0x00D8EE
Offset_0x00D8E8:
                addq.b  #$01, D6
                bset    D6, ($FFFFEE52).w
Offset_0x00D8EE:
                rts          
;===============================================================================
; Sub Rotina Scroll_Block_2
; [ Término ]
;===============================================================================       
              
;===============================================================================
; Sub Rotina Scroll_Block_3
; [ Início ]
;===============================================================================                    
Scroll_Block_3: ; Offset_0x00D8F0:
                move.l  ($FFFFEE0C).w, D3
                move.l  D3, D0
                add.l   D5, D0
Scroll_Block_3_D0: ; Offset_0x00D8F8:                
                move.l  D0, ($FFFFEE0C).w
                move.l  D0, D1
                swap.w  D1
                andi.w  #$0010, D1
                move.b  ($FFFFEE43).w, D2
                eor.b   D2, D1
                bne.s   Offset_0x00D922
                eori.b  #$10, ($FFFFEE43).w
                sub.l   D3, D0
                bpl.s   Offset_0x00D91C
                bset    D6, ($FFFFEE52).w
                rts
Offset_0x00D91C:
                addq.b  #$01, D6
                bset    D6, ($FFFFEE52).w
Offset_0x00D922:
                rts              
;===============================================================================
; Sub Rotina Scroll_Block_3
; [ Término ]
;===============================================================================  
  
;===============================================================================
; Sub Rotina Scroll_Block_4
; [ Início ]
;=============================================================================== 
Scroll_Block_4: ; Offset_0x00D924:
                move.l  ($FFFFF672).w, D0
                add.l   D4, D0
                move.l  D0, ($FFFFF672).w
                lea     ($FFFFEE08).w, A1
                move.w  (A1), D2
                move.w  ($FFFFF672).w, D0
                sub.w   D2, D0
                bcs.s   Offset_0x00D940
                bhi.s   Offset_0x00D94C
                rts
Offset_0x00D940:
                cmpi.w  #$FFF0, D0
                bgt.s   Offset_0x00D956
                move.w  #$FFF0, D0
                bra.s   Offset_0x00D956
Offset_0x00D94C:
                cmpi.w  #$0010, D0
                bcs.s   Offset_0x00D956
                move.w  #$0010, D0
Offset_0x00D956:
                add.w   (A1), D0
                move.w  D0, (A1)
                move.w  D0, D1
                andi.w  #$0010, D1
                move.b  ($FFFFEE42).w, D3
                eor.b   D3, D1
                bne.s   Offset_0x00D97E
                eori.b  #$10, ($FFFFEE42).w
                sub.w   D2, D0
                bpl.s   Offset_0x00D978
                bset    D6, ($FFFFEE52).w
                bra.s   Offset_0x00D97E
Offset_0x00D978:
                addq.b  #$01, D6
                bset    D6, ($FFFFEE52).w
Offset_0x00D97E:
                rts    
;===============================================================================
; Sub Rotina Scroll_Block_4
; [ Término ]
;=============================================================================== 

;===============================================================================
; Sub Rotina Scroll_Block_5
; [ Início ]
;=============================================================================== 
Scroll_Block_5: ; Offset_0x00D980:
                move.l  ($FFFFEE10).w, D2
                move.l  D2, D0
                add.l   D4, D0
                move.l  D0, ($FFFFEE10).w
                move.l  D0, D1
                swap.w  D1
                andi.w  #$0010, D1
                move.b  ($FFFFEE44).w, D3
                eor.b   D3, D1
                bne.s   Offset_0x00D9B2
                eori.b  #$10, ($FFFFEE44).w
                sub.l   D2, D0
                bpl.s   Offset_0x00D9AC
                bset    D6, ($FFFFEE54).w
                bra.s   Offset_0x00D9B2
Offset_0x00D9AC:
                addq.b  #$01, D6
                bset    D6, ($FFFFEE54).w
Offset_0x00D9B2:
                rts
;===============================================================================
; Sub Rotina Scroll_Block_5
; [ Término ]
;===============================================================================   
                                     
;===============================================================================
; Rotina para rolar o tela durante o jogo também conhecido como rasterização ou
; [ Término ]   rolagem por software
;===============================================================================    
               
; Offset_0x00D9B4: ; Rotina não usada no jogo (Left over)
                move.l  ($FFFFEE18).w, D2
                move.l  D2, D0
                add.l   D4, D0
                move.l  D0, ($FFFFEE18).w
                move.l  D0, D1
                swap.w  D1
                andi.w  #$0010, D1
                move.b  ($FFFFEE46).w, D3
                eor.b   D3, D1
                bne.s   Offset_0x00D9E6
                eori.b  #$10, ($FFFFEE46).w
                sub.l   D2, D0
                bpl.s   Offset_0x00D9E0
                bset    D6, ($FFFFEE56).w
                bra.s   Offset_0x00D9E6
Offset_0x00D9E0:
                addq.b  #$01, D6
                bset    D6, ($FFFFEE56).w
Offset_0x00D9E6:
                rts
                lea     (VDP_Control_Port), A5                       ; $00C00004
                lea     (VDP_Data_Port), A6                          ; $00C00000
                lea     ($FFFFEE52).w, A2                
                lea     ($FFFFEE08).w, A3
                lea     (Bg_Mem_Start_Address).w, A4                 ; $FFFF8080
                move.w  #$6000, D2
                bsr     Offset_0x00DB7A
                lea     ($FFFFEE54).w, A2
                lea     ($FFFFEE10).w, A3
                bra     Offset_0x00DC4A              
                              
;===============================================================================    
; Início das rotinas de desenho da tela
;===============================================================================
                
;===============================================================================
; Sub Rotina LoadTilesAsYouMove - Rotina para recarregar os tiles ao se mover
; [ Início ]                      na tela
;=============================================================================== 
LoadTilesAsYouMove: ; Offset_0x00DA14
                lea     (VDP_Control_Port), A5                       ; $00C00004
                lea     (VDP_Data_Port), A6                          ; $00C00000
                lea     ($FFFFEEA2).w, A2
                lea     ($FFFFEE68).w, A3
                lea     (Bg_Mem_Start_Address).w, A4                 ; $FFFF8080
                move.w  #$6000, D2
                bsr     Offset_0x00DB7A
                lea     ($FFFFEEA4).w, A2
                lea     ($FFFFEE70).w, A3
                bsr     Offset_0x00DC4A
                lea     ($FFFFEEA6).w, A2
                lea     ($FFFFEE78).w, A3
                bsr     Offset_0x00DD3E
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x00DA66
                lea     ($FFFFEEA8).w, A2
                lea     ($FFFFEE80).w, A3
                lea     (Fg_Mem_Start_Address).w, A4                 ; $FFFF8000
                move.w  #$6000, D2
                bsr     Offset_0x00DB14
Offset_0x00DA66:
                lea     ($FFFFEEA0).w, A2
                lea     ($FFFFEE60).w, A3
                lea     (Fg_Mem_Start_Address).w, A4                 ; $FFFF8000
                move.w  #$4000, D2
                tst.b   (Refresh_Level_Layout).w                     ; $FFFFF72C
                beq.s   Draw_FG                                ; Offset_0x00DAAE
                move.b  #$00, (Refresh_Level_Layout).w               ; $FFFFF72C
                moveq   #$FFFFFFF0, D4
                moveq   #$0F, D6
Draw_All: ; Offset_0x00DA86:                
                movem.l D4-D6, -(A7)
                moveq   #$FFFFFFF0, D5
                move.w  D4, D1
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                move.w  D1, D4
                moveq   #$FFFFFFF0, D5
                bsr     DrawTiles_LeftRight                    ; Offset_0x00DF52
                movem.l (A7)+, D4-D6
                addi.w  #$0010, D4
                dbra    D6, Draw_All                           ; Offset_0x00DA86
                move.b  #$00, ($FFFFEEA0).w
                rts
Draw_FG: ; Offset_0x00DAAE:
                tst.b   (A2)
                beq.s   Offset_0x00DB12
                bclr    #$00, (A2)
                beq.s   Offset_0x00DAC8
                moveq   #$FFFFFFF0, D4
                moveq   #$FFFFFFF0, D5
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                moveq   #$FFFFFFF0, D4
                moveq   #$FFFFFFF0, D5
                bsr     DrawTiles_LeftRight                    ; Offset_0x00DF52
Offset_0x00DAC8:
                bclr    #$01, (A2)
                beq.s   Offset_0x00DAE2
                move.w  #$00E0, D4
                moveq   #$FFFFFFF0, D5
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                move.w  #$00E0, D4
                moveq   #$FFFFFFF0, D5
                bsr     DrawTiles_LeftRight                    ; Offset_0x00DF52
Offset_0x00DAE2:
                bclr    #$02, (A2)
                beq.s   Offset_0x00DAF8
                moveq   #$FFFFFFF0, D4
                moveq   #$FFFFFFF0, D5
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                moveq   #$FFFFFFF0, D4
                moveq   #$FFFFFFF0, D5
                bsr     DrawTiles_TopBottom                    ; Offset_0x00DEC4
Offset_0x00DAF8:
                bclr    #$03, (A2)
                beq.s   Offset_0x00DB12
                moveq   #$FFFFFFF0, D4
                move.w  #$0140, D5
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                moveq   #$FFFFFFF0, D4
                move.w  #$0140, D5
                bsr     DrawTiles_TopBottom                    ; Offset_0x00DEC4
Offset_0x00DB12:
                rts
Offset_0x00DB14:
                tst.b   (A2)
                beq.s   Offset_0x00DB78
                bclr    #$00, (A2)
                beq.s   Offset_0x00DB2E
                moveq   #$FFFFFFF0, D4
                moveq   #$FFFFFFF0, D5
                bsr     Calc_VRAM_Pos_2                        ; Offset_0x00E282
                moveq   #$FFFFFFF0, D4
                moveq   #$FFFFFFF0, D5
                bsr     DrawTiles_LeftRight                    ; Offset_0x00DF52
Offset_0x00DB2E:
                bclr    #$01, (A2)
                beq.s   Offset_0x00DB48
                move.w  #$00E0, D4
                moveq   #$FFFFFFF0, D5
                bsr     Calc_VRAM_Pos_2                        ; Offset_0x00E282
                move.w  #$00E0, D4
                moveq   #$FFFFFFF0, D5
                bsr     DrawTiles_LeftRight                    ; Offset_0x00DF52
Offset_0x00DB48:
                bclr    #$02, (A2)
                beq.s   Offset_0x00DB5E
                moveq   #$FFFFFFF0, D4
                moveq   #$FFFFFFF0, D5
                bsr     Calc_VRAM_Pos_2                        ; Offset_0x00E282
                moveq   #$FFFFFFF0, D4
                moveq   #$FFFFFFF0, D5
                bsr     DrawTiles_TopBottom                    ; Offset_0x00DEC4
Offset_0x00DB5E:
                bclr    #$03, (A2)
                beq.s   Offset_0x00DB78
                moveq   #$FFFFFFF0, D4
                move.w  #$0140, D5
                bsr     Calc_VRAM_Pos_2                        ; Offset_0x00E282
                moveq   #$FFFFFFF0, D4
                move.w  #$0140, D5
                bsr     DrawTiles_TopBottom                    ; Offset_0x00DEC4
Offset_0x00DB78:
                rts
Offset_0x00DB7A:
                tst.b   (A2)
                beq     Offset_0x00DC48
                bclr    #$00, (A2)
                beq.s   Offset_0x00DB96
                moveq   #$FFFFFFF0, D4
                moveq   #$FFFFFFF0, D5
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                moveq   #$FFFFFFF0, D4
                moveq   #$FFFFFFF0, D5
                bsr     DrawTiles_LeftRight                    ; Offset_0x00DF52
Offset_0x00DB96:
                bclr    #$01, (A2)
                beq.s   Offset_0x00DBB0
                move.w  #$00E0, D4
                moveq   #$FFFFFFF0, D5
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                move.w  #$00E0, D4
                moveq   #$FFFFFFF0, D5
                bsr     DrawTiles_LeftRight                    ; Offset_0x00DF52
Offset_0x00DBB0:
                bclr    #$02, (A2)
                beq.s   Offset_0x00DBC6
                moveq   #$FFFFFFF0, D4
                moveq   #$FFFFFFF0, D5
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                moveq   #$FFFFFFF0, D4
                moveq   #$FFFFFFF0, D5
                bsr     DrawTiles_TopBottom                    ; Offset_0x00DEC4
Offset_0x00DBC6:
                bclr    #$03, (A2)
                beq.s   Offset_0x00DBE0
                moveq   #$FFFFFFF0, D4
                move.w  #$0140, D5
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                moveq   #$FFFFFFF0, D4
                move.w  #$0140, D5
                bsr     DrawTiles_TopBottom                    ; Offset_0x00DEC4
Offset_0x00DBE0:
                bclr    #$04, (A2)
                beq.s   Offset_0x00DBF8
                moveq   #$FFFFFFF0, D4
                moveq   #$00, D5
                bsr     Calc_VRAM_Pos_D5                       ; Offset_0x00E248
                moveq   #$FFFFFFF0, D4
                moveq   #$00, D5
                moveq   #$1F, D6
                bsr     DrawTiles_LeftRight_D6                 ; Offset_0x00DF56
Offset_0x00DBF8:
                bclr    #$05, (A2)
                beq.s   Offset_0x00DC14
                move.w  #$00E0, D4
                moveq   #$00, D5
                bsr     Calc_VRAM_Pos_D5                       ; Offset_0x00E248
                move.w  #$00E0, D4
                moveq   #$00, D5
                moveq   #$1F, D6
                bsr     DrawTiles_LeftRight_D6                 ; Offset_0x00DF56
Offset_0x00DC14:
                bclr    #$06, (A2)
                beq.s   Offset_0x00DC2C
                moveq   #$FFFFFFF0, D4
                moveq   #$FFFFFFF0, D5
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                moveq   #$FFFFFFF0, D4
                moveq   #$FFFFFFF0, D5
                moveq   #$1F, D6
                bsr     Offset_0x00DF4A
Offset_0x00DC2C:
                bclr    #$07, (A2)
                beq.s   Offset_0x00DC48
                move.w  #$00E0, D4
                moveq   #$FFFFFFF0, D5
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                move.w  #$00E0, D4
                moveq   #$FFFFFFF0, D5
                moveq   #$1F, D6
                bsr     Offset_0x00DF4A
Offset_0x00DC48:
                rts
Offset_0x00DC4A:
                tst.b   (A2)
                beq     Offset_0x00DC8C
                bclr    #$00, (A2)
                beq.s   Offset_0x00DC6C
                move.w  #$0070, D4
                moveq   #$FFFFFFF0, D5
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                move.w  #$0070, D4
                moveq   #$FFFFFFF0, D5
                moveq   #$02, D6
                bsr     DrawTiles_TopBottom_D6                 ; Offset_0x00DEC6
Offset_0x00DC6C:
                bclr    #$01, (A2)
                beq.s   Offset_0x00DC8C
                move.w  #$0070, D4
                move.w  #$0140, D5
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                move.w  #$0070, D4
                move.w  #$0140, D5
                moveq   #$02, D6
                bsr     DrawTiles_TopBottom_D6                 ; Offset_0x00DEC6
Offset_0x00DC8C:                                            
                rts
;=============================================================================== 
; Rotinas de desenho do fundo da Scrap Brain                 
; [ Início ]
;===============================================================================                    
Draw_SBz_Bg_Data: ; Offset_0x00DC8E: 
                dc.b    $00, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $04
                dc.b    $04, $04, $04, $04, $04, $04, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
                dc.b    $02, $00  
;-------------------------------------------------------------------------------   
; Draw_SBz_Bg: ; Offset_0x00DCB0:  Rotina não usada no jogo (left over do Sonic 1)
                moveq   #$FFFFFFF0, D4
                bclr    #$00, (A2)
                bne.s   Draw_SBz_Bg_00                         ; Offset_0x00DCC2
                bclr    #$01, (A2)
                beq.s   Draw_SBz_Bg_02                         ; Offset_0x00DD0C
                move.w  #$00E0, D4
Draw_SBz_Bg_00: ; Offset_0x00DCC2:
                lea     (Draw_SBz_Bg_Data+$01), A0             ; Offset_0x00DC8E
                move.w  ($FFFFEE0C).w, D0
                add.w   D4, D0
                andi.w  #$01F0, D0
                lsr.w   #$04, D0
                move.b  $00(A0, D0), D0
                lea     (Scroll_Mem_Address_Data), A3          ; Offset_0x00DE3E
                move.w  $00(A3, D0), A3
                beq.s   Draw_SBz_Bg_01                         ; Offset_0x00DCF8
                moveq   #$FFFFFFF0, D5
                movem.l D4/D5, -(A7)
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                movem.l (A7)+, D4/D5
                bsr     DrawTiles_LeftRight                    ; Offset_0x00DF52
                bra.s   Draw_SBz_Bg_02                         ; Offset_0x00DD0C
Draw_SBz_Bg_01: ; Offset_0x00DCF8:
                moveq   #$00, D5
                movem.l D4/D5, -(A7)
                bsr     Calc_VRAM_Pos_D5                       ; Offset_0x00E248
                movem.l (A7)+, D4/D5
                moveq   #$1F, D6
                bsr     DrawTiles_LeftRight_D6                 ; Offset_0x00DF56
Draw_SBz_Bg_02: ; Offset_0x00DD0C:
                tst.b   (A2)
                bne.s   Draw_SBz_Bg_03                         ; Offset_0x00DD12
                rts
Draw_SBz_Bg_03: ; Offset_0x00DD12:
                moveq   #$FFFFFFF0, D4
                moveq   #$FFFFFFF0, D5
                move.b  (A2), D0
                andi.b  #$A8, D0
                beq.s   Draw_SBz_Bg_04                         ; Offset_0x00DD26
                lsr.b   #$01, D0
                move.b  D0, (A2)
                move.w  #$0140, D5
Draw_SBz_Bg_04: ; Offset_0x00DD26:
                lea     (Draw_SBz_Bg_Data), A0                 ; Offset_0x00DC8E
                move.w  ($FFFFEE0C).w, D0
                andi.w  #$01F0, D0
                lsr.w   #$04, D0
                lea     $00(A0, D0), A0
                bra     Offset_0x00DE46
;=============================================================================== 
; Rotinas de desenho do fundo da Scrap Brain                 
; [ Término ]
;===============================================================================                    
Offset_0x00DD3E:
                tst.b   (A2)
                beq     Offset_0x00DD8A
                cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
                beq     Draw_CPz_Bg                            ; Offset_0x00DDCE
                bclr    #$00, (A2)
                beq.s   Offset_0x00DD6A
                move.w  #$0040, D4
                moveq   #$FFFFFFF0, D5
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                move.w  #$0040, D4
                moveq   #$FFFFFFF0, D5
                moveq   #$02, D6
                bsr     DrawTiles_TopBottom_D6                 ; Offset_0x00DEC6
Offset_0x00DD6A:
                bclr    #$01, (A2)
                beq.s   Offset_0x00DD8A
                move.w  #$0040, D4
                move.w  #$0140, D5
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                move.w  #$0040, D4
                move.w  #$0140, D5
                moveq   #$02, D6
                bsr     DrawTiles_TopBottom_D6                 ; Offset_0x00DEC6
Offset_0x00DD8A:
                rts
;=============================================================================== 
; Rotinas de desenho do fundo da Chemical Plant
; [ Início ]
;===============================================================================                    
Draw_CPz_Bg_Data: ; Offset_0x00DD8C:
                dc.b    $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
                dc.b    $02, $02, $02, $02, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
                dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
                dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
                dc.b    $04, $00   
;-------------------------------------------------------------------------------   
Draw_CPz_Bg: ; Offset_0x00DDCE:
                moveq   #$FFFFFFF0, D4
                bclr    #$00, (A2)
                bne.s   Draw_CPz_Bg_00                         ; Offset_0x00DDE0
                bclr    #$01, (A2)
                beq.s   Draw_CPz_Bg_01                         ; Offset_0x00DE0C
                move.w  #$00E0, D4
Draw_CPz_Bg_00: ; Offset_0x00DDE0:
                lea     (Draw_CPz_Bg_Data+$01), A0             ; Offset_0x00DD8C
                move.w  ($FFFFEE0C).w, D0
                add.w   D4, D0
                andi.w  #$03F0, D0
                lsr.w   #$04, D0
                move.b  $00(A0, D0), D0
                move.w  Scroll_Mem_Address_Data(PC, D0), A3    ; Offset_0x00DE3E
                moveq   #$FFFFFFF0, D5
                movem.l D4/D5, -(A7)
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                movem.l (A7)+, D4/D5
                bsr     DrawTiles_LeftRight                    ; Offset_0x00DF52
Draw_CPz_Bg_01: ; Offset_0x00DE0C:
                tst.b   (A2)
                bne.s   Draw_CPz_Bg_02                         ; Offset_0x00DE12
                rts
Draw_CPz_Bg_02: ; Offset_0x00DE12:
                moveq   #$FFFFFFF0, D4
                moveq   #$FFFFFFF0, D5
                move.b  (A2), D0
                andi.b  #$A8, D0
                beq.s   Draw_CPz_Bg_03                         ; Offset_0x00DE26
                lsr.b   #$01, D0
                move.b  D0, (A2)
                move.w  #$0140, D5
Draw_CPz_Bg_03: ; Offset_0x00DE26:
                lea     (Draw_CPz_Bg_Data), A0                 ; Offset_0x00DD8C
                move.w  ($FFFFEE0C).w, D0
                andi.w  #$07F0, D0
                lsr.w   #$04, D0
                lea     $00(A0, D0), A0
                bra     Offset_0x00DE46   
;=============================================================================== 
; Rotinas de desenho do fundo da Chemical Plant                 
; [ Término ]
;===============================================================================  
                
;-------------------------------------------------------------------------------                                   
Scroll_Mem_Address_Data: ; Offset_0x00DE3E:
                dc.w    $EE68, $EE68, $EE70, $EE78   
;-------------------------------------------------------------------------------    
Offset_0x00DE46:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   Offset_0x00DE88
                moveq   #$0F, D6
                move.l  #$00800000, D7
Offset_0x00DE54:                
                moveq   #$00, D0
                move.b  (A0)+, D0
                btst    D0, (A2)
                beq.s   Offset_0x00DE7C
                move.w  Scroll_Mem_Address_Data(PC, D0), A3    ; Offset_0x00DE3E
                movem.l D4/D5/A0, -(A7)
                movem.l D4/D5, -(A7)
                bsr     Draw_Blocks                            ; Offset_0x00E204
                movem.l (A7)+, D4/D5
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                bsr     Draw_Tiles_3                           ; Offset_0x00E134
                movem.l (A7)+, D4/D5/A0
Offset_0x00DE7C:
                addi.w  #$0010, D4
                dbra    D6, Offset_0x00DE54
                clr.b   (A2)
                rts  
Offset_0x00DE88:
                moveq   #$0F, D6
                move.l  #$00800000, D7
Offset_0x00DE90:                
                moveq   #$00, D0
                move.b  (A0)+, D0
                btst    D0, (A2)
                beq.s   Offset_0x00DEB8
                move.w  Scroll_Mem_Address_Data(PC, D0), A3    ; Offset_0x00DE3E
                movem.l D4/D5/A0, -(A7)
                movem.l D4/D5, -(A7)
                bsr     Draw_Blocks                            ; Offset_0x00E204
                movem.l (A7)+, D4/D5
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                bsr     Draw_Tiles_4                           ; Offset_0x00E1BA
                movem.l (A7)+, D4/D5/A0
Offset_0x00DEB8:
                addi.w  #$0010, D4
                dbra    D6, Offset_0x00DE90
                clr.b   (A2)
                rts                                      
;===============================================================================
; Sub Rotina LoadTilesAsYouMove - Rotina para recarregar os tiles ao se mover
; [ Término ]                     na tela
;=============================================================================== 
              
;===============================================================================
; Sub Rotina DrawTiles_TopBottom - Rotina para desenhar os tiles na Vertical     
; [ Início ]
;===============================================================================                
DrawTiles_TopBottom: ; Offset_0x00DEC4:
                moveq   #$0F, D6
DrawTiles_TopBottom_D6: ; Offset_0x00DEC6:
                add.w   (A3), D5
                add.w   $0004(A3), D4
                move.l  #$00800000, D7
                move.l  D0, D1
                bsr     Offset_0x00E05E
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   DrawTiles_TopBottom_2P                 ; Offset_0x00DF14
Offset_0x00DEDE                
                move.w  (A0), D3
                andi.w  #$03FF, D3
                lsl.w   #$03, D3
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
                adda.w  D3, A1
                move.l  D1, D0
                bsr     Draw_Tiles_3                           ; Offset_0x00E134
                adda.w  #$0010, A0           
                addi.w  #$0100, D1
                andi.w  #$0FFF, D1
                addi.w  #$0010, D4
                move.w  D4, D0
                andi.w  #$0070, D0
                bne.s   Offset_0x00DF0E
                bsr     Offset_0x00E05E
Offset_0x00DF0E:
                dbra    D6, Offset_0x00DEDE
                rts 
DrawTiles_TopBottom_2P: ; Offset_0x00DF14:
                move.w  (A0), D3
                andi.w  #$03FF, D3
                lsl.w   #$03, D3
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
                adda.w  D3, A1
                move.l  D1, D0
                bsr     Draw_Tiles_4                           ; Offset_0x00E1BA
                adda.w  #$0010, A0
                addi.w  #$0080, D1
                andi.w  #$0FFF, D1
                addi.w  #$0010, D4
                move.w  D4, D0
                andi.w  #$0070, D0
                bne.s   Offset_0x00DF44
                bsr     Offset_0x00E05E
Offset_0x00DF44:
                dbra    D6, DrawTiles_TopBottom_2P             ; Offset_0x00DF14
                rts                
;===============================================================================
; Sub Rotina DrawTiles_TopBottom - Rotina para desenhar os tiles na Vertical     
; [ Término ]
;===============================================================================  
Offset_0x00DF4A:
                add.w   (A3), D5
                add.w   $0004(A3), D4
                bra.s   Offset_0x00DF5A
;===============================================================================
; Sub Rotina DrawTiles_LeftRight - Rotina para desenhar os tiles na Horizontal     
; [ Início ]
;=============================================================================== 
DrawTiles_LeftRight: ; Offset_0x00DF52:
                moveq   #$15, D6
                add.w   (A3), D5
DrawTiles_LeftRight_D6: ; Offset_0x00DF56:
                add.w   $0004(A3), D4
Offset_0x00DF5A:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   Offset_0x00DFD8
                move.l  A2, -(A7)
                move.w  D6, -(A7)
                lea     ($FFFFEF00).w, A2
                move.l  D0, D1
                or.w    D2, D1
                swap.w  D1
                move.l  D1, -(A7)
                move.l  D1, (A5)
                swap.w  D1
                bsr     Offset_0x00E05E
Offset_0x00DF78                
                move.w  (A0), D3
                andi.w  #$03FF, D3
                lsl.w   #$03, D3
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
                adda.w  D3, A1
                bsr     Draw_Tiles                             ; Offset_0x00E094
                addq.w  #$02, A0
                addq.b  #$04, D1
                bpl.s   Offset_0x00DF9A
                andi.b  #$7F, D1
                swap.w  D1
                move.l  D1, (A5)
                swap.w  D1
Offset_0x00DF9A:
                addi.w  #$0010, D5
                move.w  D5, D0
                andi.w  #$0070, D0
                bne.s   Offset_0x00DFAA
                bsr     Offset_0x00E05E
Offset_0x00DFAA:
                dbra    D6, Offset_0x00DF78
                move.l  (A7)+, D1
                addi.l  #$00800000, D1
                lea     ($FFFFEF00).w, A2
                move.l  D1, (A5)
                swap.w  D1
                move.w  (A7)+, D6
Offset_0x00DFC0:                
                move.l  (A2)+, (A6)
                addq.b  #$04, D1
                bmi.s   Offset_0x00DFD0
                ori.b   #$80, D1
                swap.w  D1
                move.l  D1, (A5)
                swap.w  D1
Offset_0x00DFD0:
                dbra    D6, Offset_0x00DFC0
                move.l  (A7)+, A2
                rts
Offset_0x00DFD8:
                move.l  D0, D1
                or.w    D2, D1
                swap.w  D1
                move.l  D1, (A5)
                swap.w  D1
                tst.b   D1
                bmi.s   Offset_0x00E022
                bsr     Offset_0x00E05E
Offset_0x00DFEA:                
                move.w  (A0), D3
                andi.w  #$03FF, D3
                lsl.w   #$03, D3
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
                adda.w  D3, A1
                bsr     Draw_Tiles_2                           ; Offset_0x00E0F6
                addq.w  #$02, A0
                addq.b  #$04, D1
                bpl.s   Offset_0x00E00C
                andi.b  #$7F, D1
                swap.w  D1
                move.l  D1, (A5)
                swap.w  D1
Offset_0x00E00C:
                addi.w  #$0010, D5
                move.w  D5, D0
                andi.w  #$0070, D0
                bne.s   Offset_0x00E01C
                bsr     Offset_0x00E05E
Offset_0x00E01C:
                dbra    D6, Offset_0x00DFEA
                rts
Offset_0x00E022:
                bsr     Offset_0x00E05E
Offset_0x00E026:                
                move.w  (A0), D3
                andi.w  #$03FF, D3
                lsl.w   #$03, D3
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
                adda.w  D3, A1
                bsr     Draw_Tiles_2                           ; Offset_0x00E0F6
                addq.w  #$02, A0
                addq.b  #$04, D1
                bmi.s   Offset_0x00E048
                ori.b   #$80, D1
                swap.w  D1
                move.l  D1, (A5)
                swap.w  D1
Offset_0x00E048:
                addi.w  #$0010, D5
                move.w  D5, D0
                andi.w  #$0070, D0
                bne.s   Offset_0x00E058
                bsr     Offset_0x00E05E
Offset_0x00E058:
                dbra    D6, Offset_0x00E026
                rts    
Offset_0x00E05E:
                movem.l D4/D5, -(A7)
                move.w  D4, D3
                add.w   D3, D3
                andi.w  #$0F00, D3
                lsr.w   #$03, D5
                move.w  D5, D0
                lsr.w   #$04, D0
                andi.w  #$007F, D0
                add.w   D3, D0
                moveq   #$FFFFFFFF, D3
                clr.w   D3
                move.b  $00(A4, D0), D3
                lsl.w   #$07, D3
                andi.w  #$0070, D4
                andi.w  #$000E, D5
                add.w   D4, D3
                add.w   D5, D3
                move.l  D3, A0
                movem.l (A7)+, D4/D5
                rts                
;===============================================================================
; Sub Rotina DrawTiles_LeftRight - Rotina para desenhar os tiles na Horizontal     
; [ Término ]
;=============================================================================== 

;===============================================================================
; Sub Rotina DrawTiles - Rotina para desenhar os tiles   
; [ Início ]
;===============================================================================
Draw_Tiles: ; Offset_0x00E094:
                btst    #$03, (A0)              ; Y Flip ?
                bne.s   Draw_FlipY                             ; Offset_0x00E0C0
                btst    #$02, (A0)              ; X Flip ?
                bne.s   Draw_FlipX                             ; Offset_0x00E0A6
                move.l  (A1)+, (A6)
                move.l  (A1)+, (A2)+
                rts
Draw_FlipX: ; Offset_0x00E0A6:
                move.l  (A1)+, D3
                eori.l  #$08000800, D3
                swap.w  D3
                move.l  D3, (A6)
                move.l  (A1)+, D3
                eori.l  #$08000800, D3
                swap.w  D3
                move.l  D3, (A2)+
                rts
Draw_FlipY: ; Offset_0x00E0C0:
                btst    #$02, (A0)              ; X_Flip ?
                bne.s   Draw_FlipXY                            ; Offset_0x00E0DC
                move.l  (A1)+, D0
                move.l  (A1)+, D3
                eori.l  #$10001000, D3
                move.l  D3, (A6)
                eori.l  #$10001000, D0
                move.l  D0, (A2)+
                rts    
Draw_FlipXY: ; Offset_0x00E0DC:
                move.l  (A1)+, D0
                move.l  (A1)+, D3
                eori.l  #$18001800, D3
                swap.w  D3
                move.l  D3, (A6)
                eori.l  #$18001800, D0
                swap.w  D0
                move.l  D0, (A2)+
                rts                
;===============================================================================
; Sub Rotina DrawTiles - Rotina para desenhar os tiles   
; [ Término ]
;===============================================================================  

;===============================================================================
; Sub Rotina DrawTiles_2 - Rotina para desenhar os tiles   
; [ Início ]
;===============================================================================
Draw_Tiles_2: ; Offset_0x00E0F6:
                btst    #$03, (A0)              ; Y Flip ?
                bne.s   Draw_FlipY_2                           ; Offset_0x00E114
                btst    #$02, (A0)              ; X Flip ?
                bne.s   Draw_FlipX_2                           ; Offset_0x00E106
                move.l  (A1)+, (A6)
                rts
Draw_FlipX_2: ; Offset_0x00E106:
                move.l  (A1)+, D3
                eori.l  #$08000800, D3
                swap.w  D3
                move.l  D3, (A6)
                rts
Draw_FlipY_2: ; Offset_0x00E114:
                btst    #$02, (A0)              ; X Flip ?
                bne.s   Draw_FlipXY_2                          ; Offset_0x00E126
                move.l  (A1)+, D3
                eori.l  #$10001000, D3
                move.l  D3, (A6)
                rts
Draw_FlipXY_2: ; Offset_0x00E126:
                move.l  (A1)+, D3
                eori.l  #$18001800, D3
                swap.w  D3
                move.l  D3, (A6)
                rts
;===============================================================================
; Sub Rotina DrawTiles_2 - Rotina para desenhar os tiles   
; [ Término ]
;===============================================================================

;===============================================================================
; Sub Rotina DrawTiles_3 - Rotina para desenhar os tiles   
; [ Início ]
;===============================================================================
Draw_Tiles_3: ; Offset_0x00E134:
                or.w    D2, D0
                swap.w  D0
                btst    #$03, (A0)              ; Y Flip ?
                bne.s   Draw_FlipY_3                           ; Offset_0x00E170
                btst    #$02, (A0)              ; X Flip ?
                bne.s   Draw_FlipX_3                           ; Offset_0x00E150
                move.l  D0, (A5)
                move.l  (A1)+, (A6)
                add.l   D7, D0
                move.l  D0, (A5)
                move.l  (A1)+, (A6)
                rts
Draw_FlipX_3: ; Offset_0x00E150:
                move.l  D0, (A5)
                move.l  (A1)+, D3
                eori.l  #$08000800, D3
                swap.w  D3
                move.l  D3, (A6)
                add.l   D7, D0
                move.l  D0, (A5)
                move.l  (A1)+, D3
                eori.l  #$08000800, D3
                swap.w  D3
                move.l  D3, (A6)
                rts
Draw_FlipY_3: ; Offset_0x00E170:
                btst    #$02, (A0)              ; X Flip ?
                bne.s   Draw_FlipXY_3                          ; Offset_0x00E196
                move.l  D5, -(A7)
                move.l  D0, (A5)
                move.l  (A1)+, D5
                move.l  (A1)+, D3
                eori.l  #$10001000, D3
                move.l  D3, (A6)
                add.l   D7, D0
                move.l  D0, (A5)
                eori.l  #$10001000, D5
                move.l  D5, (A6)
                move.l  (A7)+, D5
                rts
Draw_FlipXY_3: ; Offset_0x00E196:
                move.l  D5, -(A7)
                move.l  D0, (A5)
                move.l  (A1)+, D5
                move.l  (A1)+, D3
                eori.l  #$18001800, D3
                swap.w  D3
                move.l  D3, (A6)
                add.l   D7, D0
                move.l  D0, (A5)
                eori.l  #$18001800, D5
                swap.w  D5
                move.l  D5, (A6)
                move.l  (A7)+, D5
                rts
;===============================================================================
; Sub Rotina DrawTiles_3 - Rotina para desenhar os tiles   
; [ Término ]
;===============================================================================

;===============================================================================
; Sub Rotina DrawTiles_4 - Rotina para desenhar os tiles   
; [ Início ]
;===============================================================================
Draw_Tiles_4: ; Offset_0x00E1BA:
                or.w    D2, D0
                swap.w  D0
                btst    #$03, (A0)              ; Y Flip ?
                bne.s   Draw_FlipY_4                           ; Offset_0x00E1E0
                btst    #$02, (A0)              ; X Flip ?
                bne.s   Draw_FlipX_4                           ; Offset_0x00E1D0
                move.l  D0, (A5)
                move.l  (A1)+, (A6)
                rts
Draw_FlipX_4: ; Offset_0x00E1D0:
                move.l  D0, (A5)
                move.l  (A1)+, D3
                eori.l  #$08000800, D3
                swap.w  D3
                move.l  D3, (A6)
                rts
Draw_FlipY_4: ; Offset_0x00E1E0:
                btst    #$02, (A0)              ; X Flip ?
                bne.s   Draw_FlipXY_4                          ; Offset_0x00E1F4
                move.l  D0, (A5)
                move.l  (A1)+, D3
                eori.l  #$10001000, D3
                move.l  D3, (A6)
                rts
Draw_FlipXY_4: ; Offset_0x00E1F4:
                move.l  D0, (A5)
                move.l  (A1)+, D3
                eori.l  #$18001800, D3
                swap.w  D3
                move.l  D3, (A6)
                rts
;===============================================================================
; Sub Rotina DrawTiles_4 - Rotina para desenhar os tiles   
; [ Término ]
;===============================================================================  

;===============================================================================
; Sub Rotina Draw_Blocks - Rotina para desenhar os blocos  
; [ Início ]
;===============================================================================
Draw_Blocks: ; Offset_0x00E204:
                add.w   (A3), D5
                add.w   $0004(A3), D4
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
                move.w  D4, D3
                add.w   D3, D3
                andi.w  #$0F00, D3
                lsr.w   #$03, D5
                move.w  D5, D0
                lsr.w   #$04, D0
                andi.w  #$007F, D0
                add.w   D3, D0
                moveq   #$FFFFFFFF, D3
                clr.w   D3
                move.b  $00(A4, D0), D3
                lsl.w   #$07, D3
                andi.w  #$0070, D4
                andi.w  #$000E, D5
                add.w   D4, D3
                add.w   D5, D3
                move.l  D3, A0
                move.w  (A0), D3
                andi.w  #$03FF, D3
                lsl.w   #$03, D3
                adda.w  D3, A1
                rts
;===============================================================================
; Sub Rotina Draw_Blocks - Rotina para desenhar os blocos  
; [ Término ]
;===============================================================================
 
;===============================================================================
; Sub Rotina Calc_VRAM_Pos - Rotina para calcular a posição de Buffer na VRAM     
; [ Início ]
;===============================================================================  
Calc_VRAM_Pos: ; Offset_0x00E246:
                add.w   (A3), D5
Calc_VRAM_Pos_D5: ; Offset_0x00E248:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   Calc_VRAM_Pos_2P                       ; Offset_0x00E268
                add.w   $0004(A3), D4
                andi.w  #$00F0, D4
                andi.w  #$01F0, D5
                lsl.w   #$04, D4
                lsr.w   #$02, D5
                add.w   D5, D4
                moveq   #$03, D0
                swap.w  D0
                move.w  D4, D0
                rts
Calc_VRAM_Pos_2P: ; Offset_0x00E268:
                add.w   $0004(A3), D4
Calc_VRAM_Pos_2P_D4: ; Offset_0x00E26C:                
                andi.w  #$01F0, D4
                andi.w  #$01F0, D5
                lsl.w   #$03, D4
                lsr.w   #$02, D5
                add.w   D5, D4
                moveq   #$03, D0
                swap.w  D0
                move.w  D4, D0
                rts
;===============================================================================
; Sub Rotina Calc_VRAM_Pos - Rotina para calcular a posição de Buffer na VRAM     
; [ Término ]
;=============================================================================== 
 
;===============================================================================
; Sub Rotina Calc_VRAM_Pos_2 - Rotina para calcular a posição de Buffer na VRAM     
; [ Início ]
;===============================================================================                     
Calc_VRAM_Pos_2: ; Offset_0x00E282:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   Calc_VRAM_Pos_2_2P                     ; Offset_0x00E2A4
                add.w   $0004(A3), D4
                add.w   (A3), D5
                andi.w  #$00F0, D4
                andi.w  #$01F0, D5
                lsl.w   #$04, D4
                lsr.w   #$02, D5
                add.w   D5, D4
                moveq   #$02, D0
                swap.w  D0
                move.w  D4, D0
                rts
Calc_VRAM_Pos_2_2P: ; Offset_0x00E2A4:
                add.w   $0004(A3), D4
                add.w   (A3), D5
                andi.w  #$01F0, D4
                andi.w  #$01F0, D5
                lsl.w   #$03, D4
                lsr.w   #$02, D5
                add.w   D5, D4
                moveq   #$02, D0
                swap.w  D0
                move.w  D4, D0
                rts
;===============================================================================
; Sub Rotina Calc_VRAM_Pos_2 - Rotina para calcular a posição de Buffer na VRAM     
; [ Término ]
;===============================================================================  

;===============================================================================
; Sub Rotina Load_Tiles_From_Start - Rotina para carregar os tiles da posição     
; [ Início ]                         inicial do jogador
;===============================================================================  
Load_Tiles_From_Start: ; 
                lea     (VDP_Control_Port), A5                       ; $00C00004
                lea     (VDP_Data_Port), A6                          ; $00C00000
                lea     ($FFFFEE08).w, A3
                lea     (Bg_Mem_Start_Address).w, A4                 ; $FFFF8080
                move.w  #$6000, D2
                moveq   #$00, D4
                cmpi.b  #$0C, (Level_Id).w                           ; $FFFFFE10
                beq     Draw_CNz_Bg                            ; Offset_0x00E2F8
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq     Draw_Bg                                ; Offset_0x00E2F6
                cmpi.b  #$0B, (Level_Id).w                           ; $FFFFFE10
                beq     Draw_MCz_2P_Bg                         ; Offset_0x00E356
Draw_Bg: ; Offset_0x00E2F6:
                moveq   #$FFFFFFF0, D4
Draw_CNz_Bg: ; Offset_0x00E2F8:
                moveq   #$0F, D6
Offset_0x00E2FA:
                movem.l D4-D6, -(A7)
                moveq   #$00, D5
                move.w  D4, D1
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                move.w  D1, D4
                moveq   #$00, D5
                moveq   #$1F, D6
                move    #$2700, SR
                bsr     Offset_0x00DF4A
                move    #$2300, SR
                movem.l (A7)+, D4-D6
                addi.w  #$0010, D4
                dbra    D6, Offset_0x00E2FA
                rts
;-------------------------------------------------------------------------------                
; Offset_0x00E326:               
                moveq   #$FFFFFFF0, D4
                moveq   #$0F, D6
Offset_0x00E32A:
                movem.l D4-D6, -(A7)
                moveq   #$00, D5
                move.w  D4, D1
                bsr     Calc_VRAM_Pos_2                        ; Offset_0x00E282
                move.w  D1, D4
                moveq   #$00, D5
                moveq   #$1F, D6
                move    #$2700, SR
                bsr     Offset_0x00DF4A
                move    #$2300, SR
                movem.l (A7)+, D4-D6
                addi.w  #$0010, D4
                dbra    D6, Offset_0x00E32A
                rts
;-------------------------------------------------------------------------------                   
Draw_MCz_2P_Bg: ; Offset_0x00E356:
                moveq   #$00, D4
                moveq   #$1F, D6
Offset_0x00E35A:
                movem.l D4-D6, -(A7)
                moveq   #$00, D5
                move.w  D4, D1
                bsr     Calc_VRAM_Pos_2P_D4                    ; Offset_0x00E26C
                move.w  D1, D4
                moveq   #$00, D5
                moveq   #$1F, D6
                move    #$2700, SR
                bsr     Offset_0x00DF5A
                move    #$2300, SR
                movem.l (A7)+, D4-D6
                addi.w  #$0010, D4
                dbra    D6, Offset_0x00E35A
                rts
;===============================================================================
; Sub Rotina Load_Tiles_From_Start - Rotina para carregar os tiles da posição     
; [ Término ]                        inicial do jogador
;=============================================================================== 
;===============================================================================
; Término das rotinas de desenho da tela
;===============================================================================  

;===============================================================================
; Rotina para carregar os Chunks (128x128) e Blocos (16x16) da Tela
; [ Início ]
;=============================================================================== 
Main_Level_Load_16_128_Blocks: ; Offset_0x00E386:
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                add.w   D0, D0
                add.w   D0, D0
                move.w  D0, D1
                add.w   D0, D0
                add.w   D1, D0
                lea     (TilesMainTable), A2                   ; Offset_0x0422DE
                lea     $00(A2, D0), A2
                move.l  A2, -(A7)
                addq.w  #$04, A2
                move.l  (A2)+, D0
                andi.l  #$00FFFFFF, D0
                move.l  D0, A0
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
                jsr     (KosinskiDec)                          ; Offset_0x0018F8
                cmpi.b  #$07, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x00E3D0
                lea     (Blocks_Mem_Address+$0980).w, A1             ; $FFFF9980
                lea     (Hill_Top_Blocks), A0                  ; Offset_0x0985A4
                jsr     (KosinskiDec)                          ; Offset_0x0018F8
Offset_0x00E3D0:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x00E3F4
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
                move.w  #$0BFF, D2
Offset_0x00E3DE:
                move.w  (A1), D0
                move.w  D0, D1
                andi.w  #$F800, D0
                andi.w  #$07FF, D1
                lsr.w   #$01, D1
                or.w    D1, D0
                move.w  D0, (A1)+
                dbra    D2, Offset_0x00E3DE
Offset_0x00E3F4:
                move.l  (A2)+, D0
                andi.l  #$00FFFFFF, D0
                move.l  D0, A0
                lea     ($FFFF0000), A1
                jsr     (KosinskiDec)                          ; Offset_0x0018F8
                bsr     Load_Level_Layout                      ; Offset_0x00E42C
                move.l  (A7)+, A2
                addq.w  #$04, A2
                moveq   #$00, D0
                move.b  (A2), D0
                beq.s   Load_Level_Palette                     ; Offset_0x00E41E
                jsr     (LoadPLC)                              ; Offset_0x0015DA
Load_Level_Palette: ; Offset_0x00E41E:
                addq.w  #$04, A2
                moveq   #$00, D0
                move.b  (A2), D0
                jsr     (PalLoad2)                             ; Offset_0x0026EA
                rts
;===============================================================================
; Rotina para carregar os Chunks (128x128) e Blocos (16x16) da Tela
; [ Término ]
;=============================================================================== 

;===============================================================================
; Rotina para carregar os leiautes das fases
; [ Início ]
;=============================================================================== 
Load_Level_Layout: ; Offset_0x00E42C:
                moveq   #$00, D0
                move.w  (Level_Id).w, D0                             ; $FFFFFE10
                ror.b   #$01, D0
                lsr.w   #$06, D0
                lea     (Level_Layout), A0                     ; Offset_0x045A80
                move.w  $00(A0, D0), D0
                lea     $00(A0, D0.l), A0
                lea     (Fg_Mem_Start_Address).w, A1                 ; $FFFF8000
                jmp     (KosinskiDec)                          ; Offset_0x0018F8
;===============================================================================
; Rotina para carregar os leiautes das fases
; [ Término ]
;===============================================================================    

;===============================================================================
; Rotina para carregar os leiautes das fases direto do Rom para a memória
; [ Início ]  usado no Sonic 2 Beta (Left over)
;=============================================================================== 
; Offset_0x00E44E: ; Rotina não usada no jogo (Left over)
                lea     (Fg_Mem_Start_Address).w, A3                 ; $FFFF8000
                move.w  #$03FF, D1
                moveq   #$00, D0
Offset_0x00E458:
                move.l  D0, (A3)+
                dbra    D1, Offset_0x00E458
                lea     (Fg_Mem_Start_Address).w, A3                 ; $FFFF8000
                moveq   #$00, D1
                bsr     Offset_0x00E46E
                lea     (Bg_Mem_Start_Address).w, A3                 ; $FFFF8080
                moveq   #$02, D1
Offset_0x00E46E:
                moveq   #$00, D0
                move.w  (Level_Id).w, D0                             ; $FFFFFE10
                ror.b   #$01, D0
                lsr.w   #$05, D0
                add.w   D1, D0
                lea     (Level_Layout), A1                     ; Offset_0x045A80
                move.w  $00(A1, D0), D0
                lea     $00(A1, D0.l), A1
                moveq   #$00, D1
                move.w  D1, D2
                move.b  (A1)+, D1
                move.b  (A1)+, D2
                move.l  D1, D5
                addq.l  #$01, D5
                moveq   #$00, D3
                move.w  #$0080, D3
                divu.w  D5, D3
                subq.w  #$01, D3
Offset_0x00E49E:
                move.l  A3, A0
                move.w  D3, D4
Offset_0x00E4A2:
                move.l  A1, -(A7)
                move.w  D1, D0
Offset_0x00E4A6:
                move.b  (A1)+, (A0)+
                dbra    D0, Offset_0x00E4A6
                move.l  (A7)+, A1
                dbra    D4, Offset_0x00E4A2
                lea     $00(A1, D5), A1
                lea     $0100(A3), A3
                dbra    D2, Offset_0x00E49E
                rts
;===============================================================================
; Rotina para carregar os leiautes das fases direto do Rom para a memória
; [ Término ] usado no Sonic 2 Beta (Left over)
;=============================================================================== 
; Offset_0x00E4C0: ; Rotina não usada no jogo (Left over)                
                lea     ($00FE0000), A1
                lea     ($00FE0080), A2
                lea     ($FFFF0000), A3
                move.w  #$003F, D1
Offset_0x00E4D6:
                bsr     Offset_0x00E568
                bsr     Offset_0x00E568
                dbra    D1, Offset_0x00E4D6
                lea     ($00FE0000), A1
                lea     ($00FF0000), A2
                move.w  #$003F, D1
Offset_0x00E4F2:
                move.w  #$0000, (A2)+
                dbra    D1, Offset_0x00E4F2
                move.w  #$3FBF, D1
Offset_0x00E4FE:
                move.w  (A1)+, (A2)+
                dbra    D1, Offset_0x00E4FE
                rts
;-------------------------------------------------------------------------------                
; Offset_0x00E506: ; Rotina não usada no jogo (Left over)                
                lea     ($00FE0000), A1
                lea     ($FFFF0000), A3
                moveq   #$1F, D0
Offset_0x00E514:
                move.l  (A1)+, (A3)+
                dbra    D0, Offset_0x00E514
                moveq   #$00, D7
                lea     ($00FE0000), A1
                move.w  #$00FF, D5
Offset_0x00E526:
                lea     ($FFFF0000), A3
                move.w  D7, D6
Offset_0x00E52E:
                movem.l A1-A3, -(A7)
                move.w  #$003F, D0
Offset_0x00E536:
                cmpm.w  (A1)+, (A3)+
                bne.s   Offset_0x00E54C
                dbra    D0, Offset_0x00E536
                movem.l (A7)+, A1-A3
                adda.w  #$0080, A1
                dbra    D5, Offset_0x00E526
                bra.s   Offset_0x00E566
Offset_0x00E54C:
                movem.l (A7)+, A1-A3
                adda.w  #$0080, A3
                dbra    D6, Offset_0x00E52E
                moveq   #$1F, D0
Offset_0x00E55A:
                move.l  (A1)+, (A3)+
                dbra    D0, Offset_0x00E55A
                addq.l  #$01, D7
                dbra    D5, Offset_0x00E526
Offset_0x00E566:
                bra.s   Offset_0x00E566
Offset_0x00E568:
                moveq   #$07, D0
Offset_0x00E56A:
                move.l  (A3)+, (A1)+
                move.l  (A3)+, (A1)+
                move.l  (A3)+, (A1)+
                move.l  (A3)+, (A1)+
                move.l  (A3)+, (A2)+
                move.l  (A3)+, (A2)+
                move.l  (A3)+, (A2)+
                move.l  (A3)+, (A2)+
                dbra    D0, Offset_0x00E56A
                adda.w  #$0080, A1
                adda.w  #$0080, A2
                rts  

;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Início ]       fase
;===============================================================================  
Dyn_Screen_Boss_Loader: ; Offset_0x00E588:
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                add.w   D0, D0
                move.w  DynResize_Index(PC, D0), D0            ; Offset_0x00E5EC
                jsr     DynResize_Index(PC, D0)                ; Offset_0x00E5EC
                moveq   #$02, D1
                move.w  ($FFFFEEC6).w, D0
                sub.w   ($FFFFEECE).w, D0
                beq.s   Offset_0x00E5C6
                bcc.s   Offset_0x00E5C8
                neg.w   D1
                move.w  ($FFFFEE04).w, D0
                cmp.w   ($FFFFEEC6).w, D0
                bls.s   Offset_0x00E5BC
                move.w  D0, ($FFFFEECE).w
                andi.w  #$FFFE, ($FFFFEECE).w
Offset_0x00E5BC:
                add.w   D1, ($FFFFEECE).w
                move.b  #$01, ($FFFFEEDE).w
Offset_0x00E5C6:
                rts
Offset_0x00E5C8:
                move.w  ($FFFFEE04).w, D0
                addq.w  #$08, D0
                cmp.w   ($FFFFEECE).w, D0
                bcs.s   Offset_0x00E5E0
                btst    #$01, ($FFFFB022).w
                beq.s   Offset_0x00E5E0
                add.w   D1, D1
                add.w   D1, D1
Offset_0x00E5E0:
                add.w   D1, ($FFFFEECE).w
                move.b  #$01, ($FFFFEEDE).w
                rts  
;-------------------------------------------------------------------------------
DynResize_Index: ; Offset_0x00E5EC:
                dc.w    DynResize_EHz-DynResize_Index          ; Offset_0x00E60E
                dc.w    DynResize_Null_1-DynResize_Index       ; Offset_0x00E710
                dc.w    DynResize_Wz-DynResize_Index           ; Offset_0x00E712
                dc.w    DynResize_Null_2-DynResize_Index       ; Offset_0x00E714
                dc.w    DynResize_Null_3-DynResize_Index       ; Offset_0x00E716
                dc.w    DynResize_Mz-DynResize_Index           ; Offset_0x00E718
                dc.w    DynResize_WFz-DynResize_Index          ; Offset_0x00E808
                dc.w    DynResize_HTz-DynResize_Index          ; Offset_0x00E94E
                dc.w    DynResize_HPz-DynResize_Index          ; Offset_0x00F02A
                dc.w    DynResize_Null_4-DynResize_Index       ; Offset_0x00F02C
                dc.w    DynResize_OOz-DynResize_Index          ; Offset_0x00F02E
                dc.w    DynResize_MCz-DynResize_Index          ; Offset_0x00F118
                dc.w    DynResize_CNz-DynResize_Index          ; Offset_0x00F250
                dc.w    DynResize_CPz-DynResize_Index          ; Offset_0x00F368
                dc.w    DynResize_DEz-DynResize_Index          ; Offset_0x00F43E
                dc.w    DynResize_ARz-DynResize_Index          ; Offset_0x00F4CE
                dc.w    DynResize_SCz-DynResize_Index          ; Offset_0x00F5A4
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Início ]      fase da Emerald Hill
;===============================================================================                  
DynResize_EHz: ; Offset_0x00E60E:
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   DynResize_EHz_Act_2                    ; Offset_0x00E616
                rts
;-------------------------------------------------------------------------------                
DynResize_EHz_Act_2: ; Offset_0x00E616:
                moveq   #$00, D0
                move.b  ($FFFFEEDF).w, D0
                move.w  DynResize_EHz_Idx(PC, D0), D0          ; Offset_0x00E624
                jmp     DynResize_EHz_Idx(PC, D0)              ; Offset_0x00E624
DynResize_EHz_Idx: ; Offset_0x00E624:
                dc.w    Offset_0x00E62C-DynResize_EHz_Idx
                dc.w    Offset_0x00E666-DynResize_EHz_Idx
                dc.w    Offset_0x00E6A8-DynResize_EHz_Idx
                dc.w    Offset_0x00E6F6-DynResize_EHz_Idx
Offset_0x00E62C:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   Offset_0x00E658
                cmpi.w  #$2780, ($FFFFEE00).w
                bcs.s   Offset_0x00E656
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                move.w  ($FFFFEE00).w, ($FFFFEEF8).w
                move.w  #$0390, ($FFFFEEC6).w
                move.w  #$0390, ($FFFFEEFE).w
                addq.b  #$02, ($FFFFEEDF).w
Offset_0x00E656:
                rts
Offset_0x00E658:
                move.w  #$2920, ($FFFFEECA).w
                move.w  #$2920, ($FFFFEEFA).w
                rts
Offset_0x00E666:                
                cmpi.w  #$28F0, ($FFFFEE00).w
                bcs.s   Offset_0x00E6A6
                move.w  #$28F0, ($FFFFEEC8).w
                move.w  #$2940, ($FFFFEECA).w
                move.w  #$28F0, ($FFFFEEF8).w
                move.w  #$2940, ($FFFFEEFA).w
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #Volume_Down, D0        ; $00F9
                jsr     (Play_Music)                           ; Offset_0x00131A
                clr.b   ($FFFFF73A).w
                move.b  #$02, ($FFFFF7AA).w
                moveq   #$29, D0
                jsr     (LoadPLC)                              ; Offset_0x0015DA
Offset_0x00E6A6:
                rts
Offset_0x00E6A8:                
                cmpi.w  #$0388, ($FFFFEE04).w
                bcs.s   Offset_0x00E6BC
                move.w  #$0388, ($FFFFEECC).w
                move.w  #$0388, ($FFFFEEFC).w
Offset_0x00E6BC:
                addq.b  #$01, ($FFFFF73A).w
                cmpi.b  #$5A, ($FFFFF73A).w
                bcs.s   Offset_0x00E6F4
                jsr     (SingleObjectLoad)                     ; Offset_0x017F48
                bne.s   Offset_0x00E6E6
                move.b  #$56, (A1)        ; Carrega o objeto 0x56 - Chefe da EHz
                move.b  #$81, $0028(A1)
                move.w  #$29D0, $0008(A1)
                move.w  #$0426, $000C(A1)
Offset_0x00E6E6:
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #Boss_Snd, D0           ; $0093
                jsr     (Play_Music)                           ; Offset_0x00131A
Offset_0x00E6F4:
                rts
Offset_0x00E6F6:                
                tst.b   ($FFFFF7A7).w
                beq.s   Offset_0x00E70E
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                move.w  ($FFFFEECA).w, ($FFFFEEFA).w
                move.w  ($FFFFEE00).w, ($FFFFEEF8).w
Offset_0x00E70E:
                rts             
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Término ]     fase da Emerald Hill
;===============================================================================  

DynResize_Null_1: ; Offset_0x00E710:
                rts
                
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Início ]      fase da Wood
;=============================================================================== 
DynResize_Wz: ; Offset_0x00E712:
                rts
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Término ]     fase da Wood
;===============================================================================  

DynResize_Null_2: ; Offset_0x00E714:
                rts
;-------------------------------------------------------------------------------                      
DynResize_Null_3: ; Offset_0x00E716:
                rts
                
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Início ]      fase da Metropolis
;===============================================================================  
DynResize_Mz: ; Offset_0x00E718:
                moveq   #$00, D0
                move.b  ($FFFFEEDF).w, D0
                move.w  DynResize_Mz_Idx(PC, D0), D0           ; Offset_0x00E726
                jmp     DynResize_Mz_Idx(PC, D0)               ; Offset_0x00E726
DynResize_Mz_Idx: ; Offset_0x00E726:
                dc.w    Offset_0x00E730-DynResize_Mz_Idx
                dc.w    Offset_0x00E750-DynResize_Mz_Idx
                dc.w    Offset_0x00E776-DynResize_Mz_Idx
                dc.w    Offset_0x00E7B8-DynResize_Mz_Idx
                dc.w    Offset_0x00E7F4-DynResize_Mz_Idx
Offset_0x00E730:
                cmpi.w  #$2530, ($FFFFEE00).w
                bcs.s   Offset_0x00E74E
                move.w  #$0500, ($FFFFEECE).w
                move.w  #$0450, ($FFFFEEC6).w
                move.w  #$0450, ($FFFFEEFE).w
                addq.b  #$02, ($FFFFEEDF).w
Offset_0x00E74E:
                rts
Offset_0x00E750:
                cmpi.w  #$2980, ($FFFFEE00).w
                bcs.s   Offset_0x00E774
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                move.w  ($FFFFEE00).w, ($FFFFEEF8).w
                move.w  #$0400, ($FFFFEEC6).w
                move.w  #$0400, ($FFFFEEFE).w
                addq.b  #$02, ($FFFFEEDF).w
Offset_0x00E774:
                rts
Offset_0x00E776:
                cmpi.w  #$2A80, ($FFFFEE00).w
                bcs.s   Offset_0x00E7B6
                move.w  #$2AB0, ($FFFFEEC8).w
                move.w  #$2AB0, ($FFFFEECA).w
                move.w  #$2AB0, ($FFFFEEF8).w
                move.w  #$2AB0, ($FFFFEEFA).w
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #Volume_Down, D0        ; $00F9
                jsr     (Play_Music)                           ; Offset_0x00131A
                clr.b   ($FFFFF73A).w
                move.b  #$07, ($FFFFF7AA).w
                moveq   #$2E, D0
                jsr     (LoadPLC)                              ; Offset_0x0015DA
Offset_0x00E7B6:
                rts
Offset_0x00E7B8:
                cmpi.w  #$0400, ($FFFFEE04).w
                bcs.s   Offset_0x00E7CC
                move.w  #$0400, ($FFFFEECC).w
                move.w  #$0400, ($FFFFEEFC).w
Offset_0x00E7CC:
                addq.b  #$01, ($FFFFF73A).w
                cmpi.b  #$5A, ($FFFFF73A).w
                bcs.s   Offset_0x00E7F2
                jsr     (SingleObjectLoad)                     ; Offset_0x017F48
                bne.s   Offset_0x00E7E4
                move.b  #$54, (A1)         ; Carrega o objeto 0x54 - Chefe da Mz
Offset_0x00E7E4:
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #Boss_Snd, D0           ; $0093
                jsr     (Play_Music)                           ; Offset_0x00131A
Offset_0x00E7F2:
                rts
Offset_0x00E7F4:
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                move.w  ($FFFFEECA).w, ($FFFFEEFA).w
                move.w  ($FFFFEE00).w, ($FFFFEEF8).w
                rts
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Término ]     fase da Metropolis
;=============================================================================== 

;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Início ]      fase da Wing Fortress
;===============================================================================    
DynResize_WFz: ; Offset_0x00E808:    
                moveq   #$00, D0
                move.b  ($FFFFEEDF).w, D0
                move.w  DynResize_WFz_Idx_2(PC, D0), D0        ; Offset_0x00E828
                jsr     DynResize_WFz_Idx_2(PC, D0)            ; Offset_0x00E828
                move.w  ($FFFFF660).w, D0
                move.w  DynResize_WFz_Idx(PC, D0), D0          ; Offset_0x00E822
                jmp     DynResize_WFz_Idx(PC, D0)              ; Offset_0x00E822
DynResize_WFz_Idx: ; Offset_0x00E822:
                dc.w    Offset_0x00E90E-DynResize_WFz_Idx
                dc.w    Offset_0x00E932-DynResize_WFz_Idx
                dc.w    Offset_0x00E94C-DynResize_WFz_Idx
DynResize_WFz_Idx_2: ; Offset_0x00E828:
                dc.w    Offset_0x00E830-DynResize_WFz_Idx_2
                dc.w    Offset_0x00E854-DynResize_WFz_Idx_2
                dc.w    Offset_0x00E886-DynResize_WFz_Idx_2
                dc.w    Offset_0x00E8CA-DynResize_WFz_Idx_2
Offset_0x00E830:
                move.l  ($FFFFEE00).w, ($FFFFEE08).w
                move.l  ($FFFFEE04).w, ($FFFFEE0C).w
                moveq   #$00, D0
                move.w  D0, ($FFFFEEB4).w
                move.w  D0, ($FFFFEEB6).w
                move.w  D0, ($FFFFEEE2).w
                move.w  D0, ($FFFFEEE4).w
                addq.b  #$02, ($FFFFEEDF).w
                rts
Offset_0x00E854:
                cmpi.w  #$2BC0, ($FFFFEE00).w
                bcs.s   Offset_0x00E86E
                cmpi.w  #$0580, ($FFFFEE04).w
                bcs.s   Offset_0x00E86E
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #$0000, ($FFFFF662).w
Offset_0x00E86E:
                move.w  ($FFFFEEB0).w, ($FFFFEEB4).w
                move.w  ($FFFFEEB2).w, ($FFFFEEB6).w
                move.w  ($FFFFEE00).w, D0
                move.w  ($FFFFEE04).w, D1
                bra     Offset_0x00EB40
Offset_0x00E886:
                cmpi.w  #$0800, ($FFFFEEE2).w
                beq.s   Offset_0x00E892
                addq.w  #$02, ($FFFFEEE2).w
Offset_0x00E892:
                cmpi.w  #$0600, ($FFFFEEE2).w
                blt.s   Offset_0x00E8B2
                move.w  ($FFFFF662).w, D0
                moveq   #$04, D1
                cmpi.w  #$0840, D0
                bcc.s   Offset_0x00E8AC
                add.w   D1, D0
                move.w  D0, ($FFFFF662).w
Offset_0x00E8AC:
                lsr.w   #$08, D0
                add.w   D0, ($FFFFEEE4).w
Offset_0x00E8B2:
                move.w  ($FFFFEEB0).w, ($FFFFEEB4).w
                move.w  ($FFFFEEB2).w, ($FFFFEEB6).w
                move.w  ($FFFFEE00).w, D0
                move.w  ($FFFFEE04).w, D1
                bra     Offset_0x00EB40
Offset_0x00E8CA:
                cmpi.w  #$FD40, ($FFFFEEE2).w
                beq.s   Offset_0x00E8F6
                subq.w  #$02, ($FFFFEEE2).w
                cmpi.w  #$1B81, ($FFFFEEE4).w
                beq.s   Offset_0x00E8F6
                move.w  ($FFFFF662).w, D0
                beq.s   Offset_0x00E8F0
                moveq   #$04, D1
                neg.w   D1
                add.w   D1, D0
                move.w  D0, ($FFFFF662).w
                lsr.w   #$08, D0
Offset_0x00E8F0:
                addq.w  #$01, D0
                add.w   D0, ($FFFFEEE4).w
Offset_0x00E8F6:
                move.w  ($FFFFEEB0).w, ($FFFFEEB4).w
                move.w  ($FFFFEEB2).w, ($FFFFEEB6).w
                move.w  ($FFFFEE00).w, D0
                move.w  ($FFFFEE04).w, D1
                bra     Offset_0x00EB40
Offset_0x00E90E:
                cmpi.w  #$2880, ($FFFFEE00).w
                bcs.s   Offset_0x00E930
                cmpi.w  #$0400, ($FFFFEE04).w
                bcs.s   Offset_0x00E930
                addq.w  #$02, ($FFFFF660).w
                moveq   #$3E, D0
                jsr     (LoadPLC)                              ; Offset_0x0015DA
                move.w  #$2880, ($FFFFEEC8).w
Offset_0x00E930:
                rts
Offset_0x00E932:
                cmpi.w  #$0500, ($FFFFEE04).w
                bcs.s   Offset_0x00E94A
                addq.w  #$02, ($FFFFF660).w
                st      ($FFFFF7CC).w
                moveq   #$3F, D0
                jsr     (LoadPLC)                              ; Offset_0x0015DA
Offset_0x00E94A:
                rts
Offset_0x00E94C:
                rts
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Término ]     fase da Wing Fortress
;=============================================================================== 

;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Início ]      fase da Hill Top
;=============================================================================== 
DynResize_HTz: ; Offset_0x00E94E:   
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne     DynResize_HTz_Act_2                    ; Offset_0x00EBB2
                moveq   #$00, D0
                move.b  ($FFFFEEDF).w, D0
                move.w  DynResize_HTz_1_Idx(PC, D0), D0        ; Offset_0x00E964
                jmp     DynResize_HTz_1_Idx(PC, D0)            ; Offset_0x00E964
DynResize_HTz_1_Idx: ; Offset_0x00E964:
                dc.w    Offset_0x00E96A-DynResize_HTz_1_Idx
                dc.w    Offset_0x00E9D6-DynResize_HTz_1_Idx
                dc.w    Offset_0x00EADC-DynResize_HTz_1_Idx
Offset_0x00E96A:
                cmpi.w  #$0400, ($FFFFEE04).w
                bcs.s   Offset_0x00E9B2
                cmpi.w  #$1800, ($FFFFEE00).w
                bcs.s   Offset_0x00E9B2
                move.b  #$01, ($FFFFEEBC).w
                move.l  ($FFFFEE00).w, ($FFFFEE08).w
                move.l  ($FFFFEE04).w, ($FFFFEE0C).w
                moveq   #$00, D0
                move.w  D0, ($FFFFEEB4).w
                move.w  D0, ($FFFFEEB6).w
                move.w  D0, ($FFFFEEE2).w
                move.w  #$0140, ($FFFFEEE4).w
                subi.w  #$0100, ($FFFFEE0C).w
                move.w  #$0000, ($FFFFEEE6).w
                addq.b  #$02, ($FFFFEEDF).w
Offset_0x00E9B0:
                rts
Offset_0x00E9B2:
                tst.b   ($FFFFEEBC).w
                beq.s   Offset_0x00E9B0
                move.w  #$0200, D0
                moveq   #$00, D1
                move.w  D1, ($FFFFEEB4).w
                move.w  D1, ($FFFFEEB6).w
                bsr     Offset_0x00EB40
                or.w    D0, D1
                bne.s   Offset_0x00E9B0
                move.b  #$00, ($FFFFEEBC).w
                rts
Offset_0x00E9D6:
                cmpi.w  #$1978, ($FFFFEE00).w
                bcs     Offset_0x00EA68
                cmpi.w  #$1E00, ($FFFFEE00).w
                bcs.s   Offset_0x00E9F0
                move.b  #$00, ($FFFFEEBD).w
                bra.s   Offset_0x00EA68
Offset_0x00E9F0:
                tst.b   ($FFFFEEE8).w
                bne.s   Offset_0x00EA20
                cmpi.w  #$0140, ($FFFFEEE4).w
                beq.s   Offset_0x00EA4A
                move.w  ($FFFFFE04).w, D0
                move.w  D0, D1
                andi.w  #$0003, D0
                bne.s   Offset_0x00EA68
                addq.w  #$01, ($FFFFEEE4).w
                andi.w  #$003F, D1
                bne.s   Offset_0x00EA68
                move.w  #Earthquake_Sfx, D0     ; $00E1
                jsr     (Play_Sfx)                             ; Offset_0x00132C
                bra.s   Offset_0x00EA68
Offset_0x00EA20:
                cmpi.w  #$00E0, ($FFFFEEE4).w
                beq.s   Offset_0x00EA4A
                move.w  ($FFFFFE04).w, D0
                move.w  D0, D1
                andi.w  #$0003, D0
                bne.s   Offset_0x00EA68
                subq.w  #$01, ($FFFFEEE4).w
                andi.w  #$003F, D1
                bne.s   Offset_0x00EA68
                move.w  #Earthquake_Sfx, D0     ; $00E1
                jsr     (Play_Sfx)                             ; Offset_0x00132C
                bra.s   Offset_0x00EA68
Offset_0x00EA4A:
                move.b  #$00, ($FFFFEEBD).w
                subq.w  #$01, ($FFFFEEE6).w
                bpl.s   Offset_0x00EA68
                move.w  #$0078, ($FFFFEEE6).w
                eori.b  #$01, ($FFFFEEE8).w
                move.b  #$01, ($FFFFEEBD).w
Offset_0x00EA68:
                cmpi.w  #$1800, ($FFFFEE00).w
                bcs.s   Offset_0x00EA90
                cmpi.w  #$1F00, ($FFFFEE00).w
                bcc.s   Offset_0x00EAB6
                move.w  ($FFFFEEB0).w, ($FFFFEEB4).w
                move.w  ($FFFFEEB2).w, ($FFFFEEB6).w
                move.w  ($FFFFEE00).w, D0
                move.w  ($FFFFEE04).w, D1
                bra     Offset_0x00EB40
Offset_0x00EA90:
                move.l  #$04000000, ($FFFFEE08).w
                moveq   #$00, D0
                move.l  D0, ($FFFFEE0C).w
                move.l  D0, ($FFFFEEE2).w
                move.b  D0, ($FFFFEEE8).w
                subq.b  #$02, ($FFFFEEDF).w
                move.w  #$00F8, D0
                jsr     (Play_Sfx)                             ; Offset_0x00132C
                rts
Offset_0x00EAB6:
                move.l  #$04000000, ($FFFFEE08).w
                moveq   #$00, D0
                move.l  D0, ($FFFFEE0C).w
                move.l  D0, ($FFFFEEE2).w
                move.b  D0, ($FFFFEEE8).w
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #$00F8, D0
                jsr     (Play_Sfx)                             ; Offset_0x00132C
                rts
Offset_0x00EADC:
                cmpi.w  #$1F00, ($FFFFEE00).w
                bcc.s   Offset_0x00EB1C
                move.b  #$01, ($FFFFEEBC).w
                move.l  ($FFFFEE00).w, ($FFFFEE08).w
                move.l  ($FFFFEE04).w, ($FFFFEE0C).w
                moveq   #$00, D0
                move.w  D0, ($FFFFEEB4).w
                move.w  D0, ($FFFFEEB6).w
                move.w  D0, ($FFFFEEE2).w
                move.w  #$0140, ($FFFFEEE4).w
                subi.w  #$0100, ($FFFFEE0C).w
                move.w  #$0000, ($FFFFEEE6).w
                subq.b  #$02, ($FFFFEEDF).w
Offset_0x00EB1A:
                rts
Offset_0x00EB1C:
                tst.b   ($FFFFEEBC).w
                beq.s   Offset_0x00EB1A
                move.w  #$0200, D0
                moveq   #$00, D1
                move.w  D1, ($FFFFEEB4).w
                move.w  D1, ($FFFFEEB6).w
                bsr     Offset_0x00EB40
                or.w    D0, D1
                bne.s   Offset_0x00EB1A
                move.b  #$00, ($FFFFEEBC).w
                rts
Offset_0x00EB40:
                sub.w   ($FFFFEE08).w, D0
                sub.w   ($FFFFEEE2).w, D0
                bpl.s   Offset_0x00EB56
                cmpi.w  #$FFF0, D0
                bgt.s   Offset_0x00EB54
                move.w  #$FFF0, D0
Offset_0x00EB54:
                bra.s   Offset_0x00EB60
Offset_0x00EB56:
                cmpi.w  #$0010, D0
                bcs.s   Offset_0x00EB60
                move.w  #$0010, D0
Offset_0x00EB60:
                move.b  D0, ($FFFFEEB4).w
                sub.w   ($FFFFEE0C).w, D1
                sub.w   ($FFFFEEE4).w, D1
                bpl.s   Offset_0x00EB7A
                cmpi.w  #$FFF0, D1
                bgt.s   Offset_0x00EB78
                move.w  #$FFF0, D1
Offset_0x00EB78:
                bra.s   Offset_0x00EB84
Offset_0x00EB7A:
                cmpi.w  #$0010, D1
                bcs.s   Offset_0x00EB84
                move.w  #$0010, D1
Offset_0x00EB84:
                move.b  D1, ($FFFFEEB6).w
                rts
                btst    #$00, ($FFFFF606).w
                beq.s   Offset_0x00EB9C
                tst.w   ($FFFFEEE4).w
                beq.s   Offset_0x00EB9C
                subq.w  #$01, ($FFFFEEE4).w
Offset_0x00EB9C:
                btst    #$01, ($FFFFF606).w
                beq.s   Offset_0x00EBB0
                cmpi.w  #$0700, ($FFFFEEE4).w
                beq.s   Offset_0x00EBB0
                addq.w  #$01, ($FFFFEEE4).w
Offset_0x00EBB0:
                rts
;-------------------------------------------------------------------------------                             
DynResize_HTz_Act_2 ; Offset_0x00EBB2:
                bsr     Offset_0x00EF2E
                moveq   #$00, D0
                move.b  ($FFFFEEDF).w, D0
                move.w  DynResize_HTz_2_Idx(PC, D0), D0        ; Offset_0x00EBC4
                jmp     DynResize_HTz_2_Idx(PC, D0)            ; Offset_0x00EBC4
DynResize_HTz_2_Idx: ; Offset_0x00EBC4:
                dc.w    Offset_0x00EBD6-DynResize_HTz_2_Idx
                dc.w    Offset_0x00EC58-DynResize_HTz_2_Idx
                dc.w    Offset_0x00ED5E-DynResize_HTz_2_Idx
                dc.w    Offset_0x00EDC2-DynResize_HTz_2_Idx
                dc.w    Offset_0x00EEC0-DynResize_HTz_2_Idx
                dc.w    Offset_0x00EF4C-DynResize_HTz_2_Idx
                dc.w    Offset_0x00EF72-DynResize_HTz_2_Idx
                dc.w    Offset_0x00EFB4-DynResize_HTz_2_Idx
                dc.w    Offset_0x00EFF0-DynResize_HTz_2_Idx
Offset_0x00EBD6:
                cmpi.w  #$14C0, ($FFFFEE00).w
                bcs.s   Offset_0x00EC34
                move.b  #$01, ($FFFFEEBC).w
                move.l  ($FFFFEE00).w, ($FFFFEE08).w
                move.l  ($FFFFEE04).w, ($FFFFEE0C).w
                moveq   #$00, D0
                move.w  D0, ($FFFFEEB4).w
                move.w  D0, ($FFFFEEB6).w
                move.w  D0, ($FFFFEEE2).w
                move.w  #$02C0, ($FFFFEEE4).w
                subi.w  #$0100, ($FFFFEE0C).w
                move.w  #$0000, ($FFFFEEE6).w
                addq.b  #$02, ($FFFFEEDF).w
                cmpi.w  #$0380, ($FFFFEE04).w
                bcs.s   Offset_0x00EC32
                move.w  #$F980, ($FFFFEEE2).w
                addi.w  #$0480, ($FFFFEE08).w
                move.w  #$0300, ($FFFFEEE4).w
                addq.b  #$06, ($FFFFEEDF).w
Offset_0x00EC32:
                rts
Offset_0x00EC34:
                tst.b   ($FFFFEEBC).w
                beq.s   Offset_0x00EC32
                move.w  #$0200, D0
                moveq   #$00, D1
                move.w  D1, ($FFFFEEB4).w
                move.w  D1, ($FFFFEEB6).w
                bsr     Offset_0x00EB40
                or.w    D0, D1
                bne.s   Offset_0x00EC32
                move.b  #$00, ($FFFFEEBC).w
                rts
Offset_0x00EC58:
                cmpi.w  #$1678, ($FFFFEE00).w
                bcs     Offset_0x00ECEA
                cmpi.w  #$1A00, ($FFFFEE00).w
                bcs.s   Offset_0x00EC72
                move.b  #$00, ($FFFFEEBD).w
                bra.s   Offset_0x00ECEA
Offset_0x00EC72:
                tst.b   ($FFFFEEE8).w
                bne.s   Offset_0x00ECA2
                cmpi.w  #$02C0, ($FFFFEEE4).w
                beq.s   Offset_0x00ECCC
                move.w  ($FFFFFE04).w, D0
                move.w  D0, D1
                andi.w  #$0003, D0
                bne.s   Offset_0x00ECEA
                addq.w  #$01, ($FFFFEEE4).w
                andi.w  #$003F, D1
                bne.s   Offset_0x00ECEA
                move.w  #Earthquake_Sfx, D0     ; $00E1
                jsr     (Play_Sfx)                             ; Offset_0x00132C
                bra.s   Offset_0x00ECEA
Offset_0x00ECA2:
                cmpi.w  #$0000, ($FFFFEEE4).w
                beq.s   Offset_0x00ECCC
                move.w  ($FFFFFE04).w, D0
                move.w  D0, D1
                andi.w  #$0003, D0
                bne.s   Offset_0x00ECEA
                subq.w  #$01, ($FFFFEEE4).w
                andi.w  #$003F, D1
                bne.s   Offset_0x00ECEA
                move.w  #Earthquake_Sfx, D0     ; $00E1
                jsr     (Play_Sfx)                             ; Offset_0x00132C
                bra.s   Offset_0x00ECEA
Offset_0x00ECCC:
                move.b  #$00, ($FFFFEEBD).w
                subq.w  #$01, ($FFFFEEE6).w
                bpl.s   Offset_0x00ECEA
                move.w  #$0078, ($FFFFEEE6).w
                eori.b  #$01, ($FFFFEEE8).w
                move.b  #$01, ($FFFFEEBD).w
Offset_0x00ECEA:
                cmpi.w  #$14C0, ($FFFFEE00).w
                bcs.s   Offset_0x00ED12
                cmpi.w  #$1B00, ($FFFFEE00).w
                bcc.s   Offset_0x00ED38
                move.w  ($FFFFEEB0).w, ($FFFFEEB4).w
                move.w  ($FFFFEEB2).w, ($FFFFEEB6).w
                move.w  ($FFFFEE00).w, D0
                move.w  ($FFFFEE04).w, D1
                bra     Offset_0x00EB40
Offset_0x00ED12:
                move.l  #$04000000, ($FFFFEE08).w
                moveq   #$00, D0
                move.l  D0, ($FFFFEE0C).w
                move.l  D0, ($FFFFEEE2).w
                move.b  D0, ($FFFFEEE8).w
                subq.b  #$02, ($FFFFEEDF).w
                move.w  #$00F8, D0
                jsr     (Play_Sfx)                             ; Offset_0x00132C
                rts
Offset_0x00ED38:
                move.l  #$04000000, ($FFFFEE08).w
                moveq   #$00, D0
                move.l  D0, ($FFFFEE0C).w
                move.l  D0, ($FFFFEEE2).w
                move.b  D0, ($FFFFEEE8).w
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #$00F8, D0
                jsr     (Play_Sfx)                             ; Offset_0x00132C
                rts
Offset_0x00ED5E:
                cmpi.w  #$1B00, ($FFFFEE00).w
                bcc.s   Offset_0x00ED9E
                move.b  #$01, ($FFFFEEBC).w
                move.l  ($FFFFEE00).w, ($FFFFEE08).w
                move.l  ($FFFFEE04).w, ($FFFFEE0C).w
                moveq   #$00, D0
                move.w  D0, ($FFFFEEB4).w
                move.w  D0, ($FFFFEEB6).w
                move.w  D0, ($FFFFEEE2).w
                move.w  #$02C0, ($FFFFEEE4).w
                subi.w  #$0100, ($FFFFEE0C).w
                move.w  #$0000, ($FFFFEEE6).w
                subq.b  #$02, ($FFFFEEDF).w
Offset_0x00ED9C:
                rts
Offset_0x00ED9E:
                tst.b   ($FFFFEEBC).w
                beq.s   Offset_0x00ED9C
                move.w  #$0200, D0
                moveq   #$00, D1
                move.w  D1, ($FFFFEEB4).w
                move.w  D1, ($FFFFEEB6).w
                bsr     Offset_0x00EB40
                or.w    D0, D1
                bne.s   Offset_0x00ED9C
                move.b  #$00, ($FFFFEEBC).w
                rts
Offset_0x00EDC2:
                cmpi.w  #$15F0, ($FFFFEE00).w
                bcs     Offset_0x00EE4C
                cmpi.w  #$1AC0, ($FFFFEE00).w
                bcc.s   Offset_0x00EE4C
                tst.b   ($FFFFEEE8).w
                bne.s   Offset_0x00EE04
                cmpi.w  #$0300, ($FFFFEEE4).w
                beq.s   Offset_0x00EE2E
                move.w  ($FFFFFE04).w, D0
                move.w  D0, D1
                andi.w  #$0003, D0
                bne.s   Offset_0x00EE4C
                addq.w  #$01, ($FFFFEEE4).w
                andi.w  #$003F, D1
                bne.s   Offset_0x00EE4C
                move.w  #Earthquake_Sfx, D0     ; $00E1
                jsr     (Play_Sfx)                             ; Offset_0x00132C
                bra.s   Offset_0x00EE4C
Offset_0x00EE04:
                cmpi.w  #$0000, ($FFFFEEE4).w
                beq.s   Offset_0x00EE2E
                move.w  ($FFFFFE04).w, D0
                move.w  D0, D1
                andi.w  #$0003, D0
                bne.s   Offset_0x00EE4C
                subq.w  #$01, ($FFFFEEE4).w
                andi.w  #$003F, D1
                bne.s   Offset_0x00EE4C
                move.w  #Earthquake_Sfx, D0     ; $00E1
                jsr     (Play_Sfx)                             ; Offset_0x00132C
                bra.s   Offset_0x00EE4C
Offset_0x00EE2E:
                move.b  #$00, ($FFFFEEBD).w
                subq.w  #$01, ($FFFFEEE6).w
                bpl.s   Offset_0x00EE4C
                move.w  #$0078, ($FFFFEEE6).w
                eori.b  #$01, ($FFFFEEE8).w
                move.b  #$01, ($FFFFEEBD).w
Offset_0x00EE4C:
                cmpi.w  #$14C0, ($FFFFEE00).w
                bcs.s   Offset_0x00EE74
                cmpi.w  #$1B00, ($FFFFEE00).w
                bcc.s   Offset_0x00EE9A
                move.w  ($FFFFEEB0).w, ($FFFFEEB4).w
                move.w  ($FFFFEEB2).w, ($FFFFEEB6).w
                move.w  ($FFFFEE00).w, D0
                move.w  ($FFFFEE04).w, D1
                bra     Offset_0x00EB40
Offset_0x00EE74:
                move.l  #$04000000, ($FFFFEE08).w
                moveq   #$00, D0
                move.l  D0, ($FFFFEE0C).w
                move.l  D0, ($FFFFEEE2).w
                move.b  D0, ($FFFFEEE8).w
                subq.b  #$06, ($FFFFEEDF).w
                move.w  #$00F8, D0
                jsr     (Play_Sfx)                             ; Offset_0x00132C
                rts
Offset_0x00EE9A:
                move.l  #$04000000, ($FFFFEE08).w
                moveq   #$00, D0
                move.l  D0, ($FFFFEE0C).w
                move.l  D0, ($FFFFEEE2).w
                move.b  D0, ($FFFFEEE8).w
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #$00F8, D0
                jsr     (Play_Sfx)                             ; Offset_0x00132C
                rts
Offset_0x00EEC0:
                cmpi.w  #$1B00, ($FFFFEE00).w
                bcc.s   Offset_0x00EF08
                move.b  #$01, ($FFFFEEBC).w
                move.l  ($FFFFEE00).w, ($FFFFEE08).w
                move.l  ($FFFFEE04).w, ($FFFFEE0C).w
                moveq   #$00, D0
                move.w  D0, ($FFFFEEB4).w
                move.w  D0, ($FFFFEEB6).w
                move.w  #$F980, ($FFFFEEE2).w
                addi.w  #$0480, ($FFFFEE08).w
                move.w  #$0300, ($FFFFEEE4).w
                subi.w  #$0100, ($FFFFEE0C).w
                move.w  #$0000, ($FFFFEEE6).w
                subq.b  #$02, ($FFFFEEDF).w
Offset_0x00EF06:
                rts
Offset_0x00EF08:
                tst.b   ($FFFFEEBC).w
                beq.s   Offset_0x00EF06
                move.w  #$0200, D0
                moveq   #$00, D1
                move.w  D1, ($FFFFEEB4).w
                move.w  D1, ($FFFFEEB6).w
                bsr     Offset_0x00EB40
                or.w    D0, D1
                bne.s   Offset_0x00EF06
                move.b  #$00, ($FFFFEEBC).w
                rts
                rts
Offset_0x00EF2E:
                cmpi.w  #$2B00, ($FFFFEE00).w
                bcs.s   Offset_0x00EF4A
                cmpi.b  #$0A, ($FFFFEEDF).w
                bge.s   Offset_0x00EF4A
                move.b  #$0A, ($FFFFEEDF).w
                move.b  #$00, ($FFFFEEBC).w
Offset_0x00EF4A:
                rts
Offset_0x00EF4C:
                cmpi.w  #$2C50, ($FFFFEE00).w
                bcs.s   Offset_0x00EF70
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                move.w  ($FFFFEE00).w, ($FFFFEEF8).w
                move.w  #$0480, ($FFFFEEC6).w
                move.w  #$0480, ($FFFFEEFE).w
                addq.b  #$02, ($FFFFEEDF).w
Offset_0x00EF70:
                rts
Offset_0x00EF72:
                cmpi.w  #$2EDF, ($FFFFEE00).w
                bcs.s   Offset_0x00EFB2
                move.w  #$2EE0, ($FFFFEEC8).w
                move.w  #$2F5E, ($FFFFEECA).w
                move.w  #$2EE0, ($FFFFEEF8).w
                move.w  #$2F5E, ($FFFFEEFA).w
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #Volume_Down, D0        ; $00F9
                jsr     (Play_Music)                           ; Offset_0x00131A
                clr.b   ($FFFFF73A).w
                move.b  #$03, ($FFFFF7AA).w
                moveq   #$2A, D0
                jmp     (LoadPLC)                              ; Offset_0x0015DA
Offset_0x00EFB2:
                rts
Offset_0x00EFB4:
                cmpi.w  #$0478, ($FFFFEE04).w
                bcs.s   Offset_0x00EFC8
                move.w  #$0478, ($FFFFEECC).w
                move.w  #$0478, ($FFFFEEFC).w
Offset_0x00EFC8:
                addq.b  #$01, ($FFFFF73A).w
                cmpi.b  #$5A, ($FFFFF73A).w
                bcs.s   Offset_0x00EFEE
                jsr     (SingleObjectLoad)                     ; Offset_0x017F48
                bne.s   Offset_0x00EFE0
                move.b  #$52, (A1)        ; Carrega o objeto 0x52 - Chefe da HTz
Offset_0x00EFE0:
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #Boss_Snd, D0           ; $0093
                jsr     (Play_Music)                           ; Offset_0x00131A
Offset_0x00EFEE:
                rts
Offset_0x00EFF0:
                tst.b   ($FFFFF7A7).w
                beq.s   Offset_0x00F028
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                move.w  ($FFFFEECA).w, ($FFFFEEFA).w
                move.w  ($FFFFEE00).w, ($FFFFEEF8).w
                cmpi.w  #$30E0, ($FFFFEE00).w
                bcs.s   Offset_0x00F028
                cmpi.w  #$0428, ($FFFFEECC).w
                bcs.s   Offset_0x00F01C
                subq.w  #$02, ($FFFFEECC).w
Offset_0x00F01C:
                cmpi.w  #$0430, ($FFFFEEC6).w
                bcs.s   Offset_0x00F028
                subq.w  #$02, ($FFFFEEC6).w
Offset_0x00F028:
                rts
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Término ]     fase da Hill Top
;=============================================================================== 

;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Início ]      fase da Hidden Palace
;===============================================================================  
DynResize_HPz: ; Offset_0x00F02A:               
                rts
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Término ]     fase da Hidden Palace                                           
;===============================================================================

DynResize_Null_4: ; Offset_0x00F02C:
                rts
                
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Início ]      fase da Oil Ocean
;===============================================================================                  
DynResize_OOz: ; Offset_0x00F02E:    
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   DynResize_OOz_Act_2                    ; Offset_0x00F036
                rts
;-------------------------------------------------------------------------------                
DynResize_OOz_Act_2: ; Offset_0x00F036:
                moveq   #$00, D0
                move.b  ($FFFFEEDF).w, D0
                move.w  DynResize_OOz_Idx(PC, D0), D0          ; Offset_0x00F044
                jmp     DynResize_OOz_Idx(PC, D0)              ; Offset_0x00F044
DynResize_OOz_Idx: ; Offset_0x00F044:
                dc.w    Offset_0x00F04C-DynResize_OOz_Idx
                dc.w    Offset_0x00F078-DynResize_OOz_Idx
                dc.w    Offset_0x00F0C2-DynResize_OOz_Idx
                dc.w    Offset_0x00F0FE-DynResize_OOz_Idx
Offset_0x00F04C:
                cmpi.w  #$2668, ($FFFFEE00).w
                bcs.s   Offset_0x00F076
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                move.w  ($FFFFEE00).w, ($FFFFEEF8).w
                move.w  #$02D8, ($FFFFB38C).w
                move.w  #$01E0, ($FFFFEEC6).w
                move.w  #$01E0, ($FFFFEEFE).w
                addq.b  #$02, ($FFFFEEDF).w
Offset_0x00F076:
                rts
Offset_0x00F078:
                cmpi.w  #$2880, ($FFFFEE00).w
                bcs.s   Offset_0x00F0C0
                move.w  #$2880, ($FFFFEEC8).w
                move.w  #$28C0, ($FFFFEECA).w
                move.w  #$2880, ($FFFFEEF8).w
                move.w  #$28C0, ($FFFFEEFA).w
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #Volume_Down, D0        ; $00F9
                jsr     (Play_Music)                           ; Offset_0x00131A
                clr.b   ($FFFFF73A).w
                move.b  #$08, ($FFFFF7AA).w
                moveq   #$2F, D0
                jsr     (LoadPLC)                              ; Offset_0x0015DA
                moveq   #$25, D0
                jsr     (PalLoad2)                             ; Offset_0x0026EA
Offset_0x00F0C0:
                rts
Offset_0x00F0C2:
                cmpi.w  #$01D8, ($FFFFEE04).w
                bcs.s   Offset_0x00F0D6
                move.w  #$01D8, ($FFFFEECC).w
                move.w  #$01D8, ($FFFFEEFC).w
Offset_0x00F0D6:
                addq.b  #$01, ($FFFFF73A).w
                cmpi.b  #$5A, ($FFFFF73A).w
                bcs.s   Offset_0x00F0FC
                jsr     (SingleObjectLoad)                     ; Offset_0x017F48
                bne.s   Offset_0x00F0EE
                move.b  #$55, (A1)        ; Carrega o objeto 0x55 - Chefe da OOz
Offset_0x00F0EE:
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #Boss_Snd, D0           ; $0093
                jsr     (Play_Music)                           ; Offset_0x00131A
Offset_0x00F0FC:
                rts
Offset_0x00F0FE:
                tst.b   ($FFFFF7A7).w
                beq.s   Offset_0x00F116
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                move.w  ($FFFFEECA).w, ($FFFFEEFA).w
                move.w  ($FFFFEE00).w, ($FFFFEEF8).w
Offset_0x00F116:
                rts
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Término ]     fase da Oil Ocean
;===============================================================================
 
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Início ]      fase da Mystic Cave
;===============================================================================                
DynResize_MCz: ; Offset_0x00F118: 
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   DynResize_MCz_Act_2                    ; Offset_0x00F120
                rts
;-------------------------------------------------------------------------------                
DynResize_MCz_Act_2: ; Offset_0x00F120:
                moveq   #$00, D0
                move.b  ($FFFFEEDF).w, D0
                move.w  DynResize_MCz_Idx(PC, D0), D0          ; Offset_0x00F12E
                jmp     DynResize_MCz_Idx(PC, D0)              ; Offset_0x00F12E
DynResize_MCz_Idx: ; Offset_0x00F12E:
                dc.w    Offset_0x00F136-DynResize_MCz_Idx
                dc.w    Offset_0x00F170-DynResize_MCz_Idx
                dc.w    Offset_0x00F1E6-DynResize_MCz_Idx
                dc.w    Offset_0x00F222-DynResize_MCz_Idx
Offset_0x00F136:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   Offset_0x00F162
                cmpi.w  #$2080, ($FFFFEE00).w
                bcs.s   Offset_0x00F160
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                move.w  ($FFFFEE00).w, ($FFFFEEF8).w
                move.w  #$05D0, ($FFFFEEC6).w
                move.w  #$05D0, ($FFFFEEFE).w
                addq.b  #$02, ($FFFFEEDF).w
Offset_0x00F160:
                rts
Offset_0x00F162:
                move.w  #$2100, ($FFFFEECA).w
                move.w  #$2100, ($FFFFEEFA).w
                rts
Offset_0x00F170:
                cmpi.w  #$20F0, ($FFFFEE00).w
                bcs.s   Offset_0x00F1E4
                move.w  #$20F0, ($FFFFEECA).w
                move.w  #$20F0, ($FFFFEEC8).w
                move.w  #$20F0, ($FFFFEEFA).w
                move.w  #$20F0, ($FFFFEEF8).w
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #Volume_Down, D0        ; $00F9
                jsr     (Play_Music)                           ; Offset_0x00131A
                clr.b   ($FFFFF73A).w
                move.l  #$6C000002, (VDP_Control_Port)               ; $00C00004
                lea     (VDP_Data_Port), A6                          ; $00C00000
                lea     (MCz_Boss_Rocks), A2                   ; Offset_0x0894E4
                moveq   #$07, D0
Loop_Load_Rocks_To_VRam: ; Offset_0x00F1BA:
                move.l  (A2)+, (A6)
                move.l  (A2)+, (A6)
                move.l  (A2)+, (A6)
                move.l  (A2)+, (A6)
                move.l  (A2)+, (A6)
                move.l  (A2)+, (A6)
                move.l  (A2)+, (A6)
                move.l  (A2)+, (A6)
                dbra    D0, Loop_Load_Rocks_To_VRam            ; Offset_0x00F1BA
                move.b  #$05, ($FFFFF7AA).w
                moveq   #$2C, D0
                jsr     (LoadPLC)                              ; Offset_0x0015DA
                moveq   #$19, D0
                jsr     (PalLoad2)                             ; Offset_0x0026EA
Offset_0x00F1E4:
                rts
Offset_0x00F1E6:
                cmpi.w  #$05C8, ($FFFFEE04).w
                bcs.s   Offset_0x00F1FA
                move.w  #$05C8, ($FFFFEECC).w
                move.w  #$05C8, ($FFFFEEFC).w
Offset_0x00F1FA:
                addq.b  #$01, ($FFFFF73A).w
                cmpi.b  #$5A, ($FFFFF73A).w
                bcs.s   Offset_0x00F220
                jsr     (SingleObjectLoad)                     ; Offset_0x017F48
                bne.s   Offset_0x00F212
                move.b  #$57, (A1)        ; Carrega o objeto 0x51 - Chefe da MCz
Offset_0x00F212:
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #Boss_Snd, D0           ; $0093
                jsr     (Play_Music)                           ; Offset_0x00131A
Offset_0x00F220:
                rts
Offset_0x00F222:
                tst.b   ($FFFFEEBD).w
                beq.s   Offset_0x00F23C
                move.w  ($FFFFFE04).w, D0
                andi.w  #$001F, D0
                bne.s   Offset_0x00F23C
                move.w  #Earthquake_Sfx, D0     ; $00E1
                jsr     (Play_Sfx)                             ; Offset_0x00132C
Offset_0x00F23C:
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                move.w  ($FFFFEECA).w, ($FFFFEEFA).w
                move.w  ($FFFFEE00).w, ($FFFFEEF8).w
                rts
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Término ]     fase da Mystic Cave
;===============================================================================

;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Início ]      fase da Casino Night
;===============================================================================                
DynResize_CNz: ; Offset_0x00F250: 
                jsr     (Process_Slot_Machine)                 ; Offset_0x02BB58
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   DynResize_CNz_Act_2                    ; Offset_0x00F25E
                rts
;-------------------------------------------------------------------------------                
DynResize_CNz_Act_2: ; Offset_0x00F25E:
                moveq   #$00, D0
                move.b  ($FFFFEEDF).w, D0
                move.w  DynResize_CNz_Idx(PC, D0), D0          ; Offset_0x00F26C
                jmp     DynResize_CNz_Idx(PC, D0)              ; Offset_0x00F26C
DynResize_CNz_Idx: ; Offset_0x00F26C:
                dc.w    Offset_0x00F274-DynResize_CNz_Idx
                dc.w    Offset_0x00F2B4-DynResize_CNz_Idx
                dc.w    Offset_0x00F304-DynResize_CNz_Idx
                dc.w    Offset_0x00F340-DynResize_CNz_Idx
Offset_0x00F274:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   Offset_0x00F2A6
                cmpi.w  #$27C0, ($FFFFEE00).w
                bcs.s   Offset_0x00F2A4
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                move.w  ($FFFFEE00).w, ($FFFFEEF8).w
                move.w  #$062E, ($FFFFEEC6).w
                move.w  #$062E, ($FFFFEEFE).w
                move.b  #$F9, ($FFFF8C54).w
                addq.b  #$02, ($FFFFEEDF).w
Offset_0x00F2A4:
                rts
Offset_0x00F2A6:
                move.w  #$26A0, ($FFFFEECA).w
                move.w  #$26A0, ($FFFFEEFA).w
                rts
Offset_0x00F2B4:
                cmpi.w  #$2890, ($FFFFEE00).w
                bcs.s   Offset_0x00F302
                move.b  #$F9, ($FFFF8C50).w
                move.w  #$2860, ($FFFFEEC8).w
                move.w  #$28E0, ($FFFFEECA).w
                move.w  #$2860, ($FFFFEEF8).w
                move.w  #$28E0, ($FFFFEEFA).w
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #Volume_Down, D0        ; $00F9
                jsr     (Play_Music)                           ; Offset_0x00131A
                clr.b   ($FFFFF73A).w
                move.b  #$06, ($FFFFF7AA).w
                moveq   #$2D, D0
                jsr     (LoadPLC)                              ; Offset_0x0015DA
                moveq   #$1A, D0
                jsr     (PalLoad2)                             ; Offset_0x0026EA
Offset_0x00F302:
                rts
Offset_0x00F304:
                cmpi.w  #$04E0, ($FFFFEE04).w
                bcs.s   Offset_0x00F318
                move.w  #$04E0, ($FFFFEECC).w
                move.w  #$04E0, ($FFFFEEFC).w
Offset_0x00F318:
                addq.b  #$01, ($FFFFF73A).w
                cmpi.b  #$5A, ($FFFFF73A).w
                bcs.s   Offset_0x00F33E
                jsr     (SingleObjectLoad)                     ; Offset_0x017F48
                bne.s   Offset_0x00F330
                move.b  #$51, (A1)        ; Carrega o objeto 0x51 - Chefe da CNz
Offset_0x00F330:
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #Boss_Snd, D0           ; $0093
                jsr     (Play_Music)                           ; Offset_0x00131A
Offset_0x00F33E:
                rts
Offset_0x00F340:
                cmpi.w  #$2A00, ($FFFFEE00).w
                bcs.s   Offset_0x00F366
                move.w  #$05D0, ($FFFFEEC6).w
                move.w  #$05D0, ($FFFFEEFE).w
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                move.w  ($FFFFEECA).w, ($FFFFEEFA).w
                move.w  ($FFFFEE00).w, ($FFFFEEF8).w
Offset_0x00F366:
                rts
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Término ]     fase da Casino Night
;===============================================================================

;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Início ]      fase da Chemical Plant
;===============================================================================                              
DynResize_CPz: ; Offset_0x00F368:     
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   DynResize_CPz_Act_2                    ; Offset_0x00F370
                rts
;-------------------------------------------------------------------------------                
DynResize_CPz_Act_2: ; Offset_0x00F370:
                moveq   #$00, D0
                move.b  ($FFFFEEDF).w, D0
                move.w  DynResize_CPz_Idx(PC, D0), D0          ; Offset_0x00F37E
                jmp     DynResize_CPz_Idx(PC, D0)              ; Offset_0x00F37E
DynResize_CPz_Idx: ; Offset_0x00F37E:
                dc.w    Offset_0x00F386-DynResize_CPz_Idx
                dc.w    Offset_0x00F3AC-DynResize_CPz_Idx
                dc.w    Offset_0x00F3EE-DynResize_CPz_Idx
                dc.w    Offset_0x00F42A-DynResize_CPz_Idx
Offset_0x00F386:
                cmpi.w  #$2680, ($FFFFEE00).w
                bcs.s   Offset_0x00F3AA
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                move.w  ($FFFFEE00).w, ($FFFFEEF8).w
                move.w  #$0450, ($FFFFEEC6).w
                move.w  #$0450, ($FFFFEEFE).w
                addq.b  #$02, ($FFFFEEDF).w
Offset_0x00F3AA:
                rts
Offset_0x00F3AC:
                cmpi.w  #$2A20, ($FFFFEE00).w
                bcs.s   Offset_0x00F3EC
                move.w  #$2A20, ($FFFFEEC8).w
                move.w  #$2A20, ($FFFFEECA).w
                move.w  #$2A20, ($FFFFEEF8).w
                move.w  #$2A20, ($FFFFEEFA).w
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #Volume_Down, D0        ; $00F9
                jsr     (Play_Music)                           ; Offset_0x00131A
                clr.b   ($FFFFF73A).w
                move.b  #$01, ($FFFFF7AA).w
                moveq   #$28, D0
                jmp     (LoadPLC)                              ; Offset_0x0015DA
Offset_0x00F3EC:
                rts
Offset_0x00F3EE:
                cmpi.w  #$0448, ($FFFFEE04).w
                bcs.s   Offset_0x00F402
                move.w  #$0448, ($FFFFEECC).w
                move.w  #$0448, ($FFFFEEFC).w
Offset_0x00F402:
                addq.b  #$01, ($FFFFF73A).w
                cmpi.b  #$5A, ($FFFFF73A).w
                bcs.s   Offset_0x00F428
                jsr     (SingleObjectLoad)                     ; Offset_0x017F48
                bne.s   Offset_0x00F41A
                move.b  #$5D, (A1)        ; Carrega o objeto 0x5D - Chefe da CPz
Offset_0x00F41A:
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #Boss_Snd, D0           ; $0093
                jsr     (Play_Music)                           ; Offset_0x00131A
Offset_0x00F428:
                rts
Offset_0x00F42A:
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                move.w  ($FFFFEECA).w, ($FFFFEEFA).w
                move.w  ($FFFFEE00).w, ($FFFFEEF8).w
                rts
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Término ]     fase da Chemical Plant
;===============================================================================

;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Início ]      fase da Death Egg
;===============================================================================                               
DynResize_DEz: ; Offset_0x00F43E: 
                moveq   #$00, D0
                move.b  ($FFFFEEDF).w, D0
                move.w  DynResize_DEz_Idx(PC, D0), D0          ; Offset_0x00F44C
                jmp     DynResize_DEz_Idx(PC, D0)              ; Offset_0x00F44C
DynResize_DEz_Idx: ; Offset_0x00F44C:
                dc.w    Offset_0x00F456-DynResize_DEz_Idx
                dc.w    Offset_0x00F48C-DynResize_DEz_Idx
                dc.w    Offset_0x00F48E-DynResize_DEz_Idx
                dc.w    Offset_0x00F4AA-DynResize_DEz_Idx
                dc.w    Offset_0x00F4CC-DynResize_DEz_Idx
Offset_0x00F456:
                move.w  #$0140, D0
                cmp.w   ($FFFFEE00).w, D0
                bhi.s   Offset_0x00F48A
                addq.b  #$02, ($FFFFEEDF).w
                jsr     (SingleObjectLoad)                     ; Offset_0x017F48
                bne.s   Offset_0x00F48A
                move.b  #$AF, (A1)        ; Carrega o objeto 0xAF - Chefe da DEz
                move.b  #$48, $0028(A1)
                move.w  #$0348, $0008(A1)
                move.w  #$00A0, $000C(A1)
                moveq   #$30, D0
                jmp     (LoadPLC)                              ; Offset_0x0015DA
Offset_0x00F48A:
                rts
Offset_0x00F48C:
                rts
Offset_0x00F48E:
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                cmpi.w  #$0300, ($FFFFEE00).w
                bcs.s   Offset_0x00F4A8
                addq.b  #$02, ($FFFFEEDF).w
                moveq   #$31, D0
                jmp     (LoadPLC)                              ; Offset_0x0015DA
Offset_0x00F4A8:
                rts
Offset_0x00F4AA:
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                move.w  #$0680, D0
                cmp.w   ($FFFFEE00).w, D0
                bhi.s   Offset_0x00F4CA
                addq.b  #$02, ($FFFFEEDF).w
                move.w  D0, ($FFFFEEC8).w
                addi.w  #$00C0, D0
                move.w  D0, ($FFFFEECA).w
Offset_0x00F4CA:
                rts
Offset_0x00F4CC:
                rts
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Término ]      fase da Death Egg
;===============================================================================

;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Início ]       fase da Aquatic Ruin
;===============================================================================                               
DynResize_ARz: ; Offset_0x00F4CE:  
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   DynResize_ARz_Act_2                    ; Offset_0x00F4D6
                rts
;-------------------------------------------------------------------------------                
DynResize_ARz_Act_2: ; Offset_0x00F4D6:
                moveq   #$00, D0
                move.b  ($FFFFEEDF).w, D0
                move.w  DynResize_ARz_Idx(PC, D0), D0          ; Offset_0x00F4E4
                jmp     DynResize_ARz_Idx(PC, D0)              ; Offset_0x00F4E4
DynResize_ARz_Idx: ; Offset_0x00F4E4:
                dc.w    Offset_0x00F4EC-DynResize_ARz_Idx
                dc.w    Offset_0x00F520-DynResize_ARz_Idx
                dc.w    Offset_0x00F560-DynResize_ARz_Idx
                dc.w    Offset_0x00F590-DynResize_ARz_Idx
Offset_0x00F4EC:
                cmpi.w  #$2810, ($FFFFEE00).w
                bcs.s   Offset_0x00F51E
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                move.w  ($FFFFEE00).w, ($FFFFEEF8).w
                move.w  #$0400, ($FFFFEEC6).w
                move.w  #$0400, ($FFFFEEFE).w
                addq.b  #$02, ($FFFFEEDF).w
                move.b  #$04, ($FFFFF7AA).w
                moveq   #$2B, D0
                jsr     (LoadPLC)                              ; Offset_0x0015DA
Offset_0x00F51E:
                rts
Offset_0x00F520:
                cmpi.w  #$2A40, ($FFFFEE00).w
                bcs.s   Offset_0x00F55E
                move.w  #$2A40, ($FFFFEECA).w
                move.w  #$2A40, ($FFFFEEC8).w
                move.w  #$2A40, ($FFFFEEFA).w
                move.w  #$2A40, ($FFFFEEF8).w
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #Volume_Down, D0        ; $00F9
                jsr     (Play_Music)                           ; Offset_0x00131A
                clr.b   ($FFFFF73A).w
                jsr     (SingleObjectLoad)                     ; Offset_0x017F48
                bne.s   Offset_0x00F55E
                move.b  #$89, (A1)        ; Carrega o objeto 0x89 - Chefe da ARz
Offset_0x00F55E:
                rts
Offset_0x00F560:
                cmpi.w  #$03F8, ($FFFFEE04).w
                bcs.s   Offset_0x00F574
                move.w  #$03F8, ($FFFFEECC).w
                move.w  #$03F8, ($FFFFEEFC).w
Offset_0x00F574:
                addq.b  #$01, ($FFFFF73A).w
                cmpi.b  #$5A, ($FFFFF73A).w                     
                bcs.s   Offset_0x00F58E
                addq.b  #$02, ($FFFFEEDF).w
                move.w  #Boss_Snd, D0           ; $0093
                jsr     (Play_Music)                           ; Offset_0x00131A
Offset_0x00F58E:
                rts
Offset_0x00F590:
                move.w  ($FFFFEE00).w, ($FFFFEEC8).w
                move.w  ($FFFFEECA).w, ($FFFFEEFA).w
                move.w  ($FFFFEE00).w, ($FFFFEEF8).w
                rts
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Término ]     fase da Aquatic Ruin
;===============================================================================

;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Início ]      fase da Sky Chase
;===============================================================================                
DynResize_SCz: ; Offset_0x00F5A4: 
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne     DynResize_SCz_Act_2                    ; Offset_0x00F62A
                moveq   #$00, D0
                move.b  ($FFFFEEDF).w, D0
                move.w  DynResize_SCz_Idx(PC, D0), D0          ; Offset_0x00F5BA
                jmp     DynResize_SCz_Idx(PC, D0)              ; Offset_0x00F5BA
DynResize_SCz_Idx: ; Offset_0x00F5BA:
                dc.w    Offset_0x00F5C4-DynResize_SCz_Idx
                dc.w    Offset_0x00F5D6-DynResize_SCz_Idx
                dc.w    Offset_0x00F5F6-DynResize_SCz_Idx
                dc.w    Offset_0x00F610-DynResize_SCz_Idx
                dc.w    Offset_0x00F628-DynResize_SCz_Idx
Offset_0x00F5C4:
                move.w  #$0001, ($FFFFF736).w
                move.w  #$0000, ($FFFFF738).w
                addq.b  #$02, ($FFFFEEDF).w
                rts
Offset_0x00F5D6:
                cmpi.w  #$1180, ($FFFFEE00).w
                bcs.s   Offset_0x00F5F4
                move.w  #$FFFF, ($FFFFF736).w
                move.w  #$0001, ($FFFFF738).w
                move.w  #$0500, ($FFFFEEC6).w
                addq.b  #$02, ($FFFFEEDF).w
Offset_0x00F5F4:
                rts
Offset_0x00F5F6:
                cmpi.w  #$0500, ($FFFFEE04).w
                bcs.s   Offset_0x00F60E
                move.w  #$0001, ($FFFFF736).w
                move.w  #$0000, ($FFFFF738).w
                addq.b  #$02, ($FFFFEEDF).w
Offset_0x00F60E:
                rts
Offset_0x00F610:
                cmpi.w  #$1400, ($FFFFEE00).w
                bcs.s   Offset_0x00F628
                move.w  #$0000, ($FFFFF736).w
                move.w  #$0000, ($FFFFF738).w
                addq.b  #$02, ($FFFFEEDF).w
Offset_0x00F628:
                rts
DynResize_SCz_Act_2: ; Offset_0x00F62A:
                rts                
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Término ]     fase da Sky Chase
;=============================================================================== 
                            
;===============================================================================
; Sub Rotina para redimensonar a tela dinamicamente e carregar os chefes de
; [ Término ]     fase
;=============================================================================== 

;===============================================================================
; Rotina utilizada para restaurar a música da fase após derrotar os chefes.  
; [ Início ]        
;===============================================================================
Boss_Defeated_Music_Restore: ; Offset_0x00F62C:
                move.w  (Level_Music_Buffer).w, D0                   ; $FFFFFF70
                jmp     (Play_Music)                           ; Offset_0x00131A
;===============================================================================
; Rotina utilizada para restaurar a música da fase após derrotar os chefes.
; [ Término ]       
;===============================================================================
            
;===============================================================================
; Rotina utilizada para restaurar os flickies da fase após derrotar os chefes.  
; [ Início ]        
;===============================================================================
Boss_Defeated_Load_Flickies: ; Offset_0x00F636:
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                lea     (Flickies_Select_Array), A2            ; Offset_0x013F00
                move.b  $00(A2, D0), D0
                jsr     (LoadPLC)                              ; Offset_0x0015DA
                moveq   #$41, D0
                jsr     (LoadPLC)                              ; Offset_0x0015DA
                rts
;===============================================================================
; Rotina utilizada para restaurar os flickies da fase após derrotar os chefes.  
; [ Término ]        
;===============================================================================

Obj_0x11_Bridge: ; Offset_0x00F656:
                include 'data\objects\obj_0x11.asm'    
;-------------------------------------------------------------------------------   
Obj_0x15_Swing_Platform: ; Offset_0x00FC76:
                include 'data\objects\obj_0x15.asm'   
;-------------------------------------------------------------------------------  
Obj_0x17_Unknow: ; Offset_0x0102DA:  
                include 'data\objects\obj_0x17.asm'   
;-------------------------------------------------------------------------------  
Obj_0x18_Platforms: ; Offset_0x010474:    
                include 'data\objects\obj_0x18.asm'   
;-------------------------------------------------------------------------------
Obj_0x1A_Collapsing_Platforms: ; Offset_0x010874:    
                include 'data\objects\obj_0x1A.asm'     
;-------------------------------------------------------------------------------  
Obj_0x1F_Collapsing_Platforms: ; Offset_0x0109C2:
                include 'data\objects\obj_0x1F.asm'   
;-------------------------------------------------------------------------------               
Collapse_Platform: ; Offset_0x010B24:      ; Usado pelo objeto 0x1A
                addq.b  #$02, $001A(A0)
Collapse_Platform_2: ; Offset_0x010B28:    ; Usado pelo objeto 0x1F
                move.l  $0034(A0), A4
                moveq   #$00, D0
                move.b  $001A(A0), D0
                add.w   D0, D0
                move.l  $0004(A0), A3
                adda.w  $00(A3, D0), A3
                move.w  (A3)+, D1
                subq.w  #$01, D1
                bset    #$05, $0001(A0)
                move.b  $0000(A0), D4
                move.b  $0001(A0), D5
                move.l  A0, A1
                bra.s   Offset_0x010B5A
Loop_Collapse_Platform: ; Offset_0x010B52:
                bsr     SingleObjectLoad                       ; Offset_0x017F48
                bne.s   Offset_0x010BA0
                addq.w  #$08, A3
Offset_0x010B5A:
                move.b  #$04, $0024(A1)
                move.b  D4, $0000(A1)      ; Nova instância do objeto na memória
                move.l  A3, $0004(A1)
                move.b  D5, $0001(A1)
                move.w  $0008(A0), $0008(A1)
                move.w  $000C(A0), $000C(A1)
                move.w  $0002(A0), $0002(A1)
                move.b  $0018(A0), $0018(A1)
                move.b  $0019(A0), $0019(A1)
                move.b  $0016(A0), $0016(A1)   
                move.b  (A4)+, $0038(A1)
                cmpa.l  A0, A1
                bcc.s   Offset_0x010B9C
                bsr     Display_A1_Sprite                      ; Offset_0x016498
Offset_0x010B9C:
                dbra    D1, Loop_Collapse_Platform             ; Offset_0x010B52
Offset_0x010BA0:
                bsr     DisplaySprite                          ; Offset_0x01647A
                move.w  #Collapse_Sfx, D0       ; $00B9
                jmp     (Play_Sfx)                             ; Offset_0x00132C                
;-------------------------------------------------------------------------------   
Offset_0x010BAE:
                dc.b    $1C, $18, $14, $10, $1A, $16, $12, $0E, $0A, $06, $18, $14, $10, $0C, $08, $04
                dc.b    $16, $12, $0E, $0A, $06, $02, $14, $10, $0C, $00
;-------------------------------------------------------------------------------                  
Offset_0x010BC8:
                dc.b    $18, $1C, $20, $1E, $1A, $16, $06, $0E, $14, $12, $0A, $02
;-------------------------------------------------------------------------------                  
Offset_0x010BD4:
                dc.b    $1E, $16, $0E, $06, $1A, $12, $0A, $02
;-------------------------------------------------------------------------------                  
Offset_0x010BDC:
                dc.b    $16, $1E, $1A, $12, $06, $0E, $0A, $02
;-------------------------------------------------------------------------------                  
OOz_Collapsing_Platforms_Data: ; Offset_0x010BE4:
                dc.b    $1A, $12, $0A, $02, $16, $0E, $06, $00
;-------------------------------------------------------------------------------                  
MCz_Collapsing_Platforms_Data: ; Offset_0x010BEC:
                dc.b    $1A, $16, $12, $0E, $0A, $02
;-------------------------------------------------------------------------------                  
ARz_Collapsing_Platforms_Data: ; Offset_0x010BF2:
                dc.b    $16, $1A, $18, $12, $06, $0E, $0A, $02
;-------------------------------------------------------------------------------                  
Offset_0x010BFA:
                dc.b    $20, $20, $20, $20, $20, $20, $20, $20, $21, $21, $22, $22, $23, $23, $24, $24
                dc.b    $25, $25, $26, $26, $27, $27, $28, $28, $29, $29, $2A, $2A, $2B, $2B, $2C, $2C
                dc.b    $2D, $2D, $2E, $2E, $2F, $2F, $30, $30, $30, $30, $30, $30, $30, $30, $30, $30
;-------------------------------------------------------------------------------                  
Collapsing_Platforms_Mappings_1A: ; Offset_0x010C2A:  
                dc.w    Offset_0x010C32-Collapsing_Platforms_Mappings_1A
                dc.w    Offset_0x010CB4-Collapsing_Platforms_Mappings_1A
                dc.w    Offset_0x010D36-Collapsing_Platforms_Mappings_1A
                dc.w    Offset_0x010E00-Collapsing_Platforms_Mappings_1A
Offset_0x010C32:
                dc.w    $0010
                dc.l    $C80E0057, $002B0010, $D00D0063, $0031FFF0
                dc.l    $E00D006B, $00350010, $E00D0073, $0039FFF0
                dc.l    $D806007B, $003DFFE0, $D8060081, $0040FFD0
                dc.l    $F00D0087, $00430010, $F00D008F, $0047FFF0
                dc.l    $F0050097, $004BFFE0, $F005009B, $004DFFD0
                dc.l    $000D009F, $004F0010, $000500A7, $00530000
                dc.l    $000D00AB, $0055FFE0, $000500B3, $0059FFD0
                dc.l    $100D00AB, $00550010, $100500B7, $005B0000
Offset_0x010CB4:
                dc.w    $0010
                dc.l    $C80E0057, $002B0010, $D00D0063, $0031FFF0
                dc.l    $E00D006B, $00350010, $E00D0073, $0039FFF0
                dc.l    $D806007B, $003DFFE0, $D80600BB, $005DFFD0
                dc.l    $F00D0087, $00430010, $F00D008F, $0047FFF0
                dc.l    $F0050097, $004BFFE0, $F00500C1, $0060FFD0
                dc.l    $000D009F, $004F0010, $000500A7, $00530000
                dc.l    $000D00AB, $0055FFE0, $000500B7, $005BFFD0
                dc.l    $100D00AB, $00550010, $100500B7, $005B0000
Offset_0x010D36:
                dc.w    $0019
                dc.l    $C806005D, $002E0020, $C8060057, $002B0010
                dc.l    $D0050067, $00330000, $D0050063, $0031FFF0
                dc.l    $E005006F, $00370020, $E005006B, $00350010
                dc.l    $E0050077, $003B0000, $E0050073, $0039FFF0
                dc.l    $D806007B, $003DFFE0, $D8060081, $0040FFD0
                dc.l    $F005008B, $00450020, $F0050087, $00430010
                dc.l    $F0050093, $00490000, $F005008F, $0047FFF0
                dc.l    $F0050097, $004BFFE0, $F005009B, $004DFFD0
                dc.l    $0005008B, $00450020, $0005008B, $00450010
                dc.l    $000500A7, $00530000, $000500AB, $0055FFF0
                dc.l    $000500AB, $0055FFE0, $000500B3, $0059FFD0
                dc.l    $100500AB, $00550020, $100500AB, $00550010
                dc.l    $100500B7, $005B0000
Offset_0x010E00:
                dc.w    $0019
                dc.l    $C806005D, $002E0020, $C8060057, $002B0010
                dc.l    $D0050067, $00330000, $D0050063, $0031FFF0
                dc.l    $E005006F, $00370020, $E005006B, $00350010
                dc.l    $E0050077, $003B0000, $E0050073, $0039FFF0
                dc.l    $D806007B, $003DFFE0, $D80600BB, $005DFFD0
                dc.l    $F005008B, $00450020, $F0050087, $00430010
                dc.l    $F0050093, $00490000, $F005008F, $0047FFF0
                dc.l    $F0050097, $004BFFE0, $F00500C1, $0060FFD0
                dc.l    $0005008B, $00450020, $0005008B, $00450010
                dc.l    $000500A7, $00530000, $000500AB, $0055FFF0
                dc.l    $000500AB, $0055FFE0, $000500B7, $005BFFD0
                dc.l    $100500AB, $00550020, $100500AB, $00550010
                dc.l    $100500B7, $005B0000     
;-------------------------------------------------------------------------------                    
Collapsing_Platforms_Mappings_1F; ; Offset_0x010ECA:
                dc.w    Offset_0x010ED2-Collapsing_Platforms_Mappings_1F
                dc.w    Offset_0x010EF4-Collapsing_Platforms_Mappings_1F
                dc.w    Offset_0x010F36-Collapsing_Platforms_Mappings_1F
                dc.w    Offset_0x010F58-Collapsing_Platforms_Mappings_1F
Offset_0x010ED2:
                dc.w    $0004
                dc.l    $F80D0000, $0000FFE0, $080D0000, $0000FFE0
                dc.l    $F80D0000, $00000000, $080D0000, $00000000
Offset_0x010EF4:
                dc.w    $0008
                dc.l    $F8050000, $0000FFE0, $F8050000, $0000FFF0
                dc.l    $F8050000, $00000000, $F8050000, $00000010
                dc.l    $08050000, $0000FFE0, $08050000, $0000FFF0
                dc.l    $08050000, $00000000, $08050000, $00000010
Offset_0x010F36:
                dc.w    $0004
                dc.l    $F80D0000, $0000FFE0, $080D0008, $0004FFE0
                dc.l    $F80D0000, $00000000, $080D0008, $00040000
Offset_0x010F58:
                dc.w    $0008
                dc.l    $F8050000, $0000FFE0, $F8050004, $0002FFF0
                dc.l    $F8050000, $00000000, $F8050004, $00020010
                dc.l    $08050008, $0004FFE0, $0805000C, $0006FFF0
                dc.l    $08050008, $00040000, $0805000C, $00060010         
;-------------------------------------------------------------------------------              
Offset_0x010F9A:
                dc.b    $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10
;-------------------------------------------------------------------------------                        
Offset_0x010FAA:
                dc.b    $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10
                dc.b    $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10
                dc.b    $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10                                       
;-------------------------------------------------------------------------------                    
HPz_Collapsing_Platforms_Mappings: ; Offset_0x010FDA:
                dc.w    Offset_0x010FE0-HPz_Collapsing_Platforms_Mappings
                dc.w    Offset_0x011022-HPz_Collapsing_Platforms_Mappings
                dc.w    Offset_0x011022-HPz_Collapsing_Platforms_Mappings
Offset_0x010FE0:
                dc.w    $0008
                dc.l    $F00D0000, $0000FFD0, $000D0008, $0004FFD0
                dc.l    $F0050004, $0002FFF0, $F0050804, $08020000
                dc.l    $0005000C, $0006FFF0, $0005080C, $08060000
                dc.l    $F00D0800, $08000010, $000D0808, $08040010
Offset_0x011022:
                dc.w    $000C
                dc.l    $F0050000, $0000FFD0, $F0050004, $0002FFE0
                dc.l    $F0050004, $0002FFF0, $F0050804, $08020000
                dc.l    $F0050804, $08020010, $F0050800, $08000020
                dc.l    $00050008, $0004FFD0, $0005000C, $0006FFE0
                dc.l    $0005000C, $0006FFF0, $0005080C, $08060000
                dc.l    $0005080C, $08060010, $00050808, $08040020    
;-------------------------------------------------------------------------------                                        
OOz_Collapsing_Platforms_Mappings: ; Offset_0x011084:
                dc.w    Offset_0x01108A-OOz_Collapsing_Platforms_Mappings
                dc.w    Offset_0x01108A-OOz_Collapsing_Platforms_Mappings
                dc.w    Offset_0x01108A-OOz_Collapsing_Platforms_Mappings
Offset_0x01108A:
                dc.w    $0007
                dc.l    $F00F0810, $0808FFC0, $F00F0810, $0808FFE0
                dc.l    $F00F0810, $08080000, $F00F0800, $08000020
                dc.l    $100D0820, $0810FFC0, $100D0820, $0810FFE0
                dc.l    $100D0820, $08100000   
;-------------------------------------------------------------------------------                  
MCz_Collapsing_Platforms_Mappings: ; Offset_0x0110C4:
                dc.w    Offset_0x0110C8-MCz_Collapsing_Platforms_Mappings
                dc.w    Offset_0x0110EA-MCz_Collapsing_Platforms_Mappings
Offset_0x0110C8:
                dc.w    $0004
                dc.l    $F00D0000, $0000FFE0, $F00D0800, $08000000
                dc.l    $00090008, $0004FFF0, $000B000E, $00070008
Offset_0x0110EA:
                dc.w    $0006
                dc.l    $F0050000, $0000FFE0, $F0050004, $0002FFF0
                dc.l    $F0050804, $08020000, $F0050800, $08000010
                dc.l    $00090008, $0004FFF0, $000B000E, $00070008                                                                           
;-------------------------------------------------------------------------------  
ARz_Collapsing_Platforms_Mappings: ; Offset_0x01111C:
                dc.w    Offset_0x011120-ARz_Collapsing_Platforms_Mappings
                dc.w    Offset_0x011142-ARz_Collapsing_Platforms_Mappings
Offset_0x011120:
                dc.w    $0004
                dc.l    $F00D0055, $002AFFE0, $F00D0855, $082A0000
                dc.l    $000D00A3, $0051FFE0, $000D08A3, $08510000
Offset_0x011142:
                dc.w    $0008
                dc.l    $F0050055, $002AFFE0, $F0050059, $002CFFF0
                dc.l    $F0050859, $082C0000, $F0050855, $082A0010
                dc.l    $000500A3, $0051FFE0, $000500A7, $0053FFF0
                dc.l    $000508A7, $08530000, $000508A3, $08510010 
;-------------------------------------------------------------------------------   
Obj_0x1C_Misc: ; Offset_0x011184:   
                include 'data\objects\obj_0x1C.asm'  
;-------------------------------------------------------------------------------
Obj_0x71_Mz_Hpz_Misc: ; Offset_0x0112A0:
                include 'data\objects\obj_0x71.asm'                   
;-------------------------------------------------------------------------------  
HTz_Misc_Mappings: ; Offset_0x011388:
                dc.w    Offset_0x01138C-HTz_Misc_Mappings
                dc.w    Offset_0x011396-HTz_Misc_Mappings
Offset_0x01138C:
                dc.w    $0001
                dc.l    $F8050002, $0001FFF8
Offset_0x011396:
                dc.w    $0001
                dc.l    $F8050006, $0003FFF8
;-------------------------------------------------------------------------------
Offset_0x0113A0:
                dc.w    Offset_0x0113A4-Offset_0x0113A0
                dc.w    Offset_0x0113AE-Offset_0x0113A0
Offset_0x0113A4:
                dc.w    $0001
                dc.l    $F8010000, $0000FFFC
Offset_0x0113AE:
                dc.w    $0001
                dc.l    $F8010002, $0001FFFC                  
;-------------------------------------------------------------------------------   
OOz_Misc_Mappings: ; Offset_0x0113B8:
                dc.w    Offset_0x0113C4-OOz_Misc_Mappings
                dc.w    Offset_0x0113CE-OOz_Misc_Mappings
                dc.w    Offset_0x0113D8-OOz_Misc_Mappings
                dc.w    Offset_0x0113EA-OOz_Misc_Mappings
                dc.w    Offset_0x011404-OOz_Misc_Mappings
                dc.w    Offset_0x011426-OOz_Misc_Mappings
Offset_0x0113C4:
                dc.w    $0001
                dc.l    $F8010000, $0000FFFC
Offset_0x0113CE:
                dc.w    $0001
                dc.l    $F0030000, $0000FFFC
Offset_0x0113D8:
                dc.w    $0002
                dc.l    $E8010000, $0000FFFC, $F8030000, $0000FFFC
Offset_0x0113EA:
                dc.w    $0003
                dc.l    $D0030000, $0000FFFC, $F0030000, $0000FFFC
                dc.l    $10030000, $0000FFFC
Offset_0x011404:
                dc.w    $0004
                dc.l    $C0030000, $0000FFFC, $E0030000, $0000FFFC
                dc.l    $00030000, $0000FFFC, $20030000, $0000FFFC
Offset_0x011426:
                dc.w    $0007
                dc.l    $98000004, $0002FFFC, $A0030000, $0000FFFC
                dc.l    $C0030000, $0000FFFC, $E0030000, $0000FFFC
                dc.l    $00030000, $0000FFFC, $20030000, $0000FFFC
                dc.l    $40030000, $0000FFFC                
;-------------------------------------------------------------------------------                   
OOz_Misc_Mappings_01: ; Offset_0x011460:
                dc.w    Offset_0x01146A-OOz_Misc_Mappings_01
                dc.w    Offset_0x01147C-OOz_Misc_Mappings_01
                dc.w    Offset_0x01149E-OOz_Misc_Mappings_01
                dc.w    Offset_0x0114B8-OOz_Misc_Mappings_01
                dc.w    Offset_0x0114DA-OOz_Misc_Mappings_01
Offset_0x01146A:
                dc.w    $0002
                dc.l    $F0070005, $0002FFE8, $F0070005, $00020008
Offset_0x01147C:
                dc.w    $0004
                dc.l    $E0070005, $0002FFE8, $E0070005, $00020008
                dc.l    $00070005, $0002FFE8, $00070005, $00020008
Offset_0x01149E:
                dc.w    $0003
                dc.l    $D0070005, $0002FFF8, $F0070005, $0002FFF8
                dc.l    $10070005, $0002FFF8
Offset_0x0114B8:
                dc.w    $0004
                dc.l    $C0070005, $0002FFF8, $E0070005, $0002FFF8
                dc.l    $00070005, $0002FFF8, $20070005, $0002FFF8
Offset_0x0114DA:
                dc.w    $0005
                dc.l    $B0070005, $0002FFF8, $D0070005, $0002FFF8
                dc.l    $F0070005, $0002FFF8, $10070005, $0002FFF8
                dc.l    $30070005, $0002FFF8                
;-------------------------------------------------------------------------------    
Mz_Misc_Mappings: ; Offset_0x011504:
                dc.w    Offset_0x01150A-Mz_Misc_Mappings
                dc.w    Offset_0x011514-Mz_Misc_Mappings
                dc.w    Offset_0x01151E-Mz_Misc_Mappings
Offset_0x01150A:
                dc.w    $0001
                dc.l    $F8010004, $0002FFFC
Offset_0x011514:
                dc.w    $0001
                dc.l    $F8010006, $0003FFFC
Offset_0x01151E:
                dc.w    $0001
                dc.l    $FC0C0000, $0000FFF0     
;-------------------------------------------------------------------------------
Mz_Lava_Bubble_Mappings: ; Offset_0x011528:
                dc.w    Offset_0x011536-Mz_Lava_Bubble_Mappings
                dc.w    Offset_0x011540-Mz_Lava_Bubble_Mappings
                dc.w    Offset_0x01154A-Mz_Lava_Bubble_Mappings
                dc.w    Offset_0x011554-Mz_Lava_Bubble_Mappings
                dc.w    Offset_0x01155E-Mz_Lava_Bubble_Mappings
                dc.w    Offset_0x011568-Mz_Lava_Bubble_Mappings
                dc.w    Offset_0x011572-Mz_Lava_Bubble_Mappings
Offset_0x011536:
                dc.w    $0001
                dc.l    $02040000, $0000FFF8
Offset_0x011540:
                dc.w    $0001
                dc.l    $00040000, $0000FFF8
Offset_0x01154A:
                dc.w    $0001
                dc.l    $FE040000, $0000FFF8
Offset_0x011554:
                dc.w    $0001
                dc.l    $FC040000, $0000FFF8
Offset_0x01155E:
                dc.w    $0001
                dc.l    $FC080002, $0001FFF4
Offset_0x011568:
                dc.w    $0001
                dc.l    $FC0C0005, $0002FFF0
Offset_0x011572:
                dc.w    $0000  
;-------------------------------------------------------------------------------
Obj_0x2A_Up_Down_Pillar: ; Offset_0x011574: 
                include 'data\objects\obj_0x2A.asm'                     
;-------------------------------------------------------------------------------    
Obj_0x2D_Automatic_Door: ; Offset_0x01164C: 
                include 'data\objects\obj_0x2D.asm'  
;-------------------------------------------------------------------------------                                                                                       
Obj_0x28_Flickies: ; Offset_0x011836:
                include 'data\objects\obj_0x28.asm' 
;-------------------------------------------------------------------------------  
Obj_0x29_Enemy_Points: ; Offset_0x011D72:
                include 'data\objects\obj_0x29.asm'   
;-------------------------------------------------------------------------------      
Flickies_Mappings: ; Offset_0x011DC8:
                dc.w    Offset_0x011DD8-Flickies_Mappings
                dc.w    Offset_0x011DE2-Flickies_Mappings
                dc.w    Offset_0x011DCE-Flickies_Mappings
Offset_0x011DCE:
                dc.w    $0001
                dc.l    $EC070000, $0000FFF8
Offset_0x011DD8:
                dc.w    $0001
                dc.l    $F8050008, $0004FFF8
Offset_0x011DE2:
                dc.w    $0001
                dc.l    $F805000C, $0006FFF8
;-------------------------------------------------------------------------------        
Flickies_Mappings_01: ; Offset_0x011DEC: 
                dc.w    Offset_0x011DFC-Flickies_Mappings_01
                dc.w    Offset_0x011E06-Flickies_Mappings_01
                dc.w    Offset_0x011DF2-Flickies_Mappings_01
Offset_0x011DF2:
                dc.w    $0001
                dc.l    $EC070000, $0000FFF8
Offset_0x011DFC:
                dc.w    $0001
                dc.l    $F8090008, $0004FFF4
Offset_0x011E06:
                dc.w    $0001
                dc.l    $F809000E, $0007FFF4  
;-------------------------------------------------------------------------------                   
Flickies_Mappings_02: ; Offset_0x011E10:
                dc.w    Offset_0x011E20-Flickies_Mappings_02
                dc.w    Offset_0x011E2A-Flickies_Mappings_02
                dc.w    Offset_0x011E16-Flickies_Mappings_02
Offset_0x011E16:
                dc.w    $0001
                dc.l    $F4060000, $0000FFF8
Offset_0x011E20:
                dc.w    $0001
                dc.l    $F8090006, $0003FFF4
Offset_0x011E2A:
                dc.w    $0001
                dc.l    $F809000C, $0006FFF4
;-------------------------------------------------------------------------------                   
Flickies_Mappings_03: ; Offset_0x011E34:
                dc.w    Offset_0x011E44-Flickies_Mappings_03
                dc.w    Offset_0x011E4E-Flickies_Mappings_03
                dc.w    Offset_0x011E3A-Flickies_Mappings_03
Offset_0x011E3A:
                dc.w    $0001
                dc.l    $F4060000, $0000FFF8
Offset_0x011E44:
                dc.w    $0001
                dc.l    $F8050006, $0003FFF8
Offset_0x011E4E:
                dc.w    $0001
                dc.l    $F805000A, $0005FFF8          
;-------------------------------------------------------------------------------                   
Flickies_Mappings_04: ; Offset_0x011E58:  
                dc.w    Offset_0x011E68-Flickies_Mappings_04
                dc.w    Offset_0x011E72-Flickies_Mappings_04
                dc.w    Offset_0x011E5E-Flickies_Mappings_04
Offset_0x011E5E:
                dc.w    $0001
                dc.l    $F4060000, $0000FFF8
Offset_0x011E68:
                dc.w    $0001
                dc.l    $F4060006, $0003FFF8
Offset_0x011E72:
                dc.w    $0001
                dc.l    $F406000C, $0006FFF8         
;-------------------------------------------------------------------------------                   
Enemy_Points_Mappings: ; Offset_0x011E7C:
                dc.w    Offset_0x011E8A-Enemy_Points_Mappings
                dc.w    Offset_0x011E94-Enemy_Points_Mappings
                dc.w    Offset_0x011E9E-Enemy_Points_Mappings
                dc.w    Offset_0x011EA8-Enemy_Points_Mappings
                dc.w    Offset_0x011EBA-Enemy_Points_Mappings
                dc.w    Offset_0x011EC4-Enemy_Points_Mappings
                dc.w    Offset_0x011ED6-Enemy_Points_Mappings
Offset_0x011E8A:
                dc.w    $0001
                dc.l    $F8050002, $0001FFF8
Offset_0x011E94:
                dc.w    $0001
                dc.l    $F8050006, $0003FFF8
Offset_0x011E9E:
                dc.w    $0001
                dc.l    $F805000A, $0005FFF8
Offset_0x011EA8:
                dc.w    $0002
                dc.l    $F8010000, $0000FFF8, $F805000E, $00070000
Offset_0x011EBA:
                dc.w    $0001
                dc.l    $F8010000, $0000FFFC
Offset_0x011EC4:
                dc.w    $0002
                dc.l    $F8050002, $0001FFF0, $F805000E, $00070000
Offset_0x011ED6:
                dc.w    $0002
                dc.l    $F805000A, $0005FFF0, $F805000E, $00070000                                               
;-------------------------------------------------------------------------------                     
Obj_0x25_Rings: ; Offset_0x011EE8:        
                include 'data\objects\obj_0x25.asm'                                           
;===============================================================================   
; Sub Rotina para adicionar e testar o limite máximo de anéis no contador
; [ Início ]      
;=============================================================================== 
Add_Rings: ; Offset_0x011F66:
                tst.b   $003F(A0)
                bne.s   Add_Rings_Player_Two                   ; Offset_0x011FC2
Add_Rings_Player_One: ; Offset_0x011F6C:
                cmpi.w  #$03E7, ($FFFFFEF0).w
                bcc.s   Offset_0x011F78
                addq.w  #$01, ($FFFFFEF0).w
Offset_0x011F78:
                move.w  #Ring_Sfx, D0           ; $00B5
                cmpi.w  #$03E7, ($FFFFFE20).w
                bcc.s   Offset_0x011FBA
                addq.w  #$01, ($FFFFFE20).w
                ori.b   #$01, ($FFFFFE1D).w
                cmpi.w  #$0064, ($FFFFFE20).w
                bcs.s   Offset_0x011FBA
                bset    #$01, ($FFFFFE1B).w
                beq.s   Offset_0x011FAE
                cmpi.w  #$00C8, ($FFFFFE20).w
                bcs.s   Offset_0x011FBA
                bset    #$02, ($FFFFFE1B).w
                bne.s   Offset_0x011FBA
Offset_0x011FAE:
                addq.b  #$01, ($FFFFFE12).w
                addq.b  #$01, ($FFFFFE1C).w
                move.w  #Extra_Life_Snd, D0     ; $0098
Offset_0x011FBA:
                jmp     (Play_Sfx_Stereo)                      ; Offset_0x001332
;===============================================================================   
; Sub Rotina para adicionar e testar o limite máximo de anéis no contador
; [ Término ]      
;===============================================================================                  
                rts                ; Retorno sem uso   
;===============================================================================   
; Sub Rotina para adicionar e testar o limite máximo de anéis no contador
; [ Início ]       no modo 2 jogadores
;=============================================================================== 
Add_Rings_Player_Two: ; Offset_0x011FC2:
                cmpi.w  #$03E7, ($FFFFFEF2).w
                bcc.s   Offset_0x011FCE
                addq.w  #$01, ($FFFFFEF2).w
Offset_0x011FCE:
                cmpi.w  #$03E7, ($FFFFFED0).w
                bcc.s   Offset_0x011FDA
                addq.w  #$01, ($FFFFFED0).w
Offset_0x011FDA:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x011F78
                ori.b   #$01, ($FFFFFEC9).w
                move.w  #Ring_Sfx, D0           ; $00B5
                cmpi.w  #$0064, ($FFFFFED0).w
                bcs.s   Offset_0x012016
                bset    #$01, ($FFFFFEC7).w
                beq.s   Offset_0x01200A
                cmpi.w  #$00C8, ($FFFFFED0).w
                bcs.s   Offset_0x012016
                bset    #$02, ($FFFFFEC7).w
                bne.s   Offset_0x012016
Offset_0x01200A:
                addq.b  #$01, ($FFFFFEC6).w
                addq.b  #$01, ($FFFFFEC8).w
                move.w  #Extra_Life_Snd, D0     ; $0098
Offset_0x012016:
                jmp     (Play_Sfx_Stereo)                      ; Offset_0x001332
;===============================================================================   
; Sub Routina para adicionar e testar o limite máximo de anéis no contador
; [ Término ]      no modo 2 jogadores
;===============================================================================
Obj_0x37_Rings_Lost: ; Offset_0x01201C:
                include 'data\objects\obj_0x37.asm'  
;------------------------------------------------------------------------------- 
Obj_S1_0x4B_Big_Ring: ; Offset_0x0121A6:  ; Objeto não usado no jogo (Left over)
                include 'data\objects\objs1_4B.asm'
;-------------------------------------------------------------------------------
Obj_S1_0x7C_Big_Ring_Flash: ; Offset_0x01226A: ; Objeto não usado no jogo (Left over)
                include 'data\objects\objs1_7C.asm'                
;-------------------------------------------------------------------------------  
Rings_Animate_Data: ; Offset_0x012320:
                dc.w    Offset_0x012322-Rings_Animate_Data
Offset_0x012322:
                dc.b    $05, $04, $05, $06, $07, $FC
;-------------------------------------------------------------------------------                
Rings_Mappings: ; Offset_0x012328:
                dc.w    Offset_0x01233A-Rings_Mappings
                dc.w    Offset_0x012344-Rings_Mappings
                dc.w    Offset_0x01234E-Rings_Mappings
                dc.w    Offset_0x012358-Rings_Mappings
                dc.w    Offset_0x012362-Rings_Mappings
                dc.w    Offset_0x01236C-Rings_Mappings
                dc.w    Offset_0x012376-Rings_Mappings
                dc.w    Offset_0x012380-Rings_Mappings
                dc.w    Offset_0x01238A-Rings_Mappings
Offset_0x01233A:
                dc.w    $0001
                dc.l    $F8050000, $0000FFF8
Offset_0x012344:
                dc.w    $0001
                dc.l    $F8050004, $0002FFF8
Offset_0x01234E:
                dc.w    $0001
                dc.l    $F8010008, $0004FFFC
Offset_0x012358:
                dc.w    $0001
                dc.l    $F8050804, $0802FFF8
Offset_0x012362:
                dc.w    $0001
                dc.l    $F805000A, $0005FFF8
Offset_0x01236C:
                dc.w    $0001
                dc.l    $F805180A, $1805FFF8
Offset_0x012376:
                dc.w    $0001
                dc.l    $F805080A, $0805FFF8
Offset_0x012380:
                dc.w    $0001
                dc.l    $F805100A, $1005FFF8
Offset_0x01238A:
                dc.w    $0000
;-------------------------------------------------------------------------------                                
Big_Ring_Mappings: ; Offset_0x01238C:
                dc.w    Offset_0x012394-Big_Ring_Mappings
                dc.w    Offset_0x0123E6-Big_Ring_Mappings
                dc.w    Offset_0x012428-Big_Ring_Mappings
                dc.w    Offset_0x01244A-Big_Ring_Mappings
Offset_0x012394:
                dc.w    $000A
                dc.l    $E0080000, $0000FFE8, $E0080003, $00010000
                dc.l    $E80C0006, $0003FFE0, $E80C000A, $00050000
                dc.l    $F007000E, $0007FFE0, $F0070016, $000B0010
                dc.l    $100C001E, $000FFFE0, $100C0022, $00110000
                dc.l    $18080026, $0013FFE8, $18080029, $00140000
Offset_0x0123E6:
                dc.w    $0008
                dc.l    $E00C002C, $0016FFF0, $E8080030, $0018FFE8
                dc.l    $E8090033, $00190000, $F0070039, $001CFFE8
                dc.l    $F8050041, $00200008, $08090045, $00220000
                dc.l    $1008004B, $0025FFE8, $180C004E, $0027FFF0
Offset_0x012428:
                dc.w    $0004
                dc.l    $E0070052, $0029FFF4, $E0030852, $08290004
                dc.l    $0007005A, $002DFFF4, $0003085A, $082D0004
Offset_0x01244A:
                dc.w    $0008
                dc.l    $E00C082C, $0816FFF0, $E8080830, $08180000
                dc.l    $E8090833, $0819FFE8, $F0070839, $081C0008
                dc.l    $F8050841, $0820FFE8, $08090845, $0822FFE8
                dc.l    $1008084B, $08250000, $180C084E, $0827FFF0                
;-------------------------------------------------------------------------------
Big_Ring_Flash_Mappings: ; Offset_0x01248C:
                dc.w    Offset_0x01249C-Big_Ring_Flash_Mappings
                dc.w    Offset_0x0124AE-Big_Ring_Flash_Mappings
                dc.w    Offset_0x0124D0-Big_Ring_Flash_Mappings
                dc.w    Offset_0x0124F2-Big_Ring_Flash_Mappings
                dc.w    Offset_0x012514-Big_Ring_Flash_Mappings
                dc.w    Offset_0x012536-Big_Ring_Flash_Mappings
                dc.w    Offset_0x012558-Big_Ring_Flash_Mappings
                dc.w    Offset_0x01256A-Big_Ring_Flash_Mappings
Offset_0x01249C:
                dc.w    $0002
                dc.l    $E00F0000, $00000000, $000F1000, $10000000
Offset_0x0124AE:
                dc.w    $0004
                dc.l    $E00F0010, $0008FFF0, $E0070020, $00100010
                dc.l    $000F1010, $1008FFF0, $00071020, $10100010
Offset_0x0124D0:
                dc.w    $0004
                dc.l    $E00F0028, $0014FFE8, $E00B0038, $001C0008
                dc.l    $000F1028, $1014FFE8, $000B1038, $101C0008
Offset_0x0124F2:
                dc.w    $0004
                dc.l    $E00F0834, $081AFFE0, $E00F0034, $001A0000
                dc.l    $000F1834, $181AFFE0, $000F1034, $101A0000
Offset_0x012514:
                dc.w    $0004
                dc.l    $E00B0838, $081CFFE0, $E00F0828, $0814FFF8
                dc.l    $000B1838, $181CFFE0, $000F1828, $1814FFF8
Offset_0x012536:
                dc.w    $0004
                dc.l    $E0070820, $0810FFE0, $E00F0810, $0808FFF0
                dc.l    $00071820, $1810FFE0, $000F1810, $1808FFF0
Offset_0x012558:
                dc.w    $0002
                dc.l    $E00F0800, $0800FFE0, $000F1800, $1800FFE0
Offset_0x01256A:
                dc.w    $0004
                dc.l    $E00F0044, $0022FFE0, $E00F0844, $08220000
                dc.l    $000F1044, $1022FFE0, $000F1844, $18220000                  
;-------------------------------------------------------------------------------  
Obj_0xDC_Slot_Machine_Ring: ; Offset_0x01258C:
                include 'data\objects\obj_0xDC.asm' 
;-------------------------------------------------------------------------------                
Obj_0x26_Monitors: ; Offset_0x01260A:
                include 'data\objects\obj_0x26.asm' 
;-------------------------------------------------------------------------------                    
Obj_0x2E_Monitors_Contents: ; Offset_0x0127EE:  
                include 'data\objects\obj_0x2E.asm'                
;-------------------------------------------------------------------------------                  
Monitors_AnimateData: ; Offset_0x012C68:
                dc.w    Offset_0x012C7E-Monitors_AnimateData
                dc.w    Offset_0x012C82-Monitors_AnimateData
                dc.w    Offset_0x012C8A-Monitors_AnimateData
                dc.w    Offset_0x012C92-Monitors_AnimateData
                dc.w    Offset_0x012C9A-Monitors_AnimateData
                dc.w    Offset_0x012CA2-Monitors_AnimateData
                dc.w    Offset_0x012CAA-Monitors_AnimateData
                dc.w    Offset_0x012CB2-Monitors_AnimateData
                dc.w    Offset_0x012CBA-Monitors_AnimateData
                dc.w    Offset_0x012CC2-Monitors_AnimateData
                dc.w    Offset_0x012CCA-Monitors_AnimateData
Offset_0x012C7E:
                dc.b    $01, $00, $01, $FF
Offset_0x012C82:
                dc.b    $01, $00, $02, $02, $01, $02, $02, $FF
Offset_0x012C8A:
                dc.b    $01, $00, $03, $03, $01, $03, $03, $FF
Offset_0x012C92:
                dc.b    $01, $00, $04, $04, $01, $04, $04, $FF
Offset_0x012C9A:
                dc.b    $01, $00, $05, $05, $01, $05, $05, $FF
Offset_0x012CA2:
                dc.b    $01, $00, $06, $06, $01, $06, $06, $FF
Offset_0x012CAA:
                dc.b    $01, $00, $07, $07, $01, $07, $07, $FF
Offset_0x012CB2:
                dc.b    $01, $00, $08, $08, $01, $08, $08, $FF
Offset_0x012CBA:
                dc.b    $01, $00, $09, $09, $01, $09, $09, $FF
Offset_0x012CC2:
                dc.b    $01, $00, $0A, $0A, $01, $0A, $0A, $FF
Offset_0x012CCA:
                dc.b    $02, $00, $01, $0B, $FE, $01                
;-------------------------------------------------------------------------------  
Monitors_Mappings: ; Offset_0x012CD0:
                dc.w    Offset_0x012CE8-Monitors_Mappings
                dc.w    Offset_0x012CF2-Monitors_Mappings
                dc.w    Offset_0x012D04-Monitors_Mappings
                dc.w    Offset_0x012D16-Monitors_Mappings
                dc.w    Offset_0x012D28-Monitors_Mappings
                dc.w    Offset_0x012D3A-Monitors_Mappings
                dc.w    Offset_0x012D4C-Monitors_Mappings
                dc.w    Offset_0x012D5E-Monitors_Mappings
                dc.w    Offset_0x012D70-Monitors_Mappings
                dc.w    Offset_0x012D82-Monitors_Mappings
                dc.w    Offset_0x012D94-Monitors_Mappings
                dc.w    Offset_0x012DA6-Monitors_Mappings
Offset_0x012CE8:
                dc.w    $0001
                dc.l    $EF0F0000, $0000FFF0
Offset_0x012CF2:
                dc.w    $0002
                dc.l    $F5050018, $000CFFF8, $EF0F0000, $0000FFF0
Offset_0x012D04:
                dc.w    $0002
                dc.l    $F5050154, $00AAFFF8, $EF0F0000, $0000FFF0
Offset_0x012D16:
                dc.w    $0002
                dc.l    $F505001C, $000EFFF8, $EF0F0000, $0000FFF0
Offset_0x012D28:
                dc.w    $0002
                dc.l    $F5050020, $0010FFF8, $EF0F0000, $0000FFF0
Offset_0x012D3A:
                dc.w    $0002
                dc.l    $F5052024, $2012FFF8, $EF0F0000, $0000FFF0
Offset_0x012D4C:
                dc.w    $0002
                dc.l    $F5050028, $0014FFF8, $EF0F0000, $0000FFF0
Offset_0x012D5E:
                dc.w    $0002
                dc.l    $F505002C, $0016FFF8, $EF0F0000, $0000FFF0
Offset_0x012D70:
                dc.w    $0002
                dc.l    $F5050030, $0018FFF8, $EF0F0000, $0000FFF0
Offset_0x012D82:
                dc.w    $0002
                dc.l    $F5050038, $001CFFF8, $EF0F0000, $0000FFF0
Offset_0x012D94:
                dc.w    $0002
                dc.l    $F5050034, $001AFFF8, $EF0F0000, $0000FFF0
Offset_0x012DA6:
                dc.w    $0001
                dc.l    $FF0D0010, $0008FFF0
;-------------------------------------------------------------------------------  
Obj_0x0E_Sonic_Miles_In_Title_Screen: ; Offset_0x012DB0:
                include 'data\objects\obj_0x0E.asm'         
;-------------------------------------------------------------------------------                
Obj_0xC9_TitleScreen_Pal_Changer: ; Offset_0x01328E:
                include 'data\objects\obj_0xC9.asm'    
;-------------------------------------------------------------------------------  
Offset_0x01338A:
                dc.w    $0E20, $0C00, $0E22, $0E44, $0E66, $0E88, $0EEE, $0AAA
                dc.w    $0888, $0666, $0024, $0248, $08AE, $068C, $0000, $0000
Offset_0x0133AA:                             
                dc.w    $0E20, $0E42, $0E64, $0EA6, $0ECA, $0E64, $0EEE, $00EA
                dc.w    $00C6, $00A2, $0280, $08CE, $06AE, $008C, $0468, $0000
Offset_0x0133CA:                 
                dc.w    $0C00, $0000, $0C00, $0E44, $0E66, $0E88, $00EE, $00AE
                dc.w    $006A, $0026, $0EEE, $0EAA, $000C, $0006, $0002, $00E8
;-------------------------------------------------------------------------------  
Offset_0x0133EA:
                move.b  (A1)+, D2
                andi.b  #$0E, D2
                move.b  (A0), D3
                cmp.b   D2, D3
                bls.s   Offset_0x0133FA
                subq.b  #$02, D3
                move.b  D3, (A0)
Offset_0x0133FA:
                addq.w  #$01, A0
                move.b  (A1)+, D2
                move.b  D2, D3
                andi.b  #$E0, D2
                andi.b  #$0E, D3
                move.b  (A0), D4
                move.b  D4, D5
                andi.b  #$E0, D4
                andi.b  #$0E, D5
                cmp.b   D2, D4
                bls.s   Offset_0x01341C
                subi.b  #$20, D4
Offset_0x01341C:
                cmp.b   D3, D5
                bls.s   Offset_0x013422
                subq.b  #$02, D5
Offset_0x013422:
                or.b    D4, D5
                move.b  D5, (A0)+
                rts
;-------------------------------------------------------------------------------      
Offset_0x013428:
                moveq   #$0E, D2
                move.b  (A0), D3
                and.b   D2, D3
                cmp.b   D2, D3
                bcc.s   Offset_0x013436
                addq.b  #$02, D3
                move.b  D3, (A0)
Offset_0x013436:
                addq.w  #$01, A0
                move.b  (A0), D3
                move.b  D3, D4
                andi.b  #$E0, D3
                andi.b  #$0E, D4
                cmpi.b  #$E0, D3
                bcc.s   Offset_0x01344E
                addi.b  #$20, D3
Offset_0x01344E:
                cmp.b   D2, D4
                bcc.s   Offset_0x013454
                addq.b  #$02, D4
Offset_0x013454:
                or.b    D3, D4
                move.b  D4, (A0)+
                rts
;-------------------------------------------------------------------------------      
Offset_0x01345A: ; Usado pelo objeto 0x0E
                tst.b   $002F(A0)
                bne     Offset_0x01358E
                move.b  ($FFFFF605).w, D0
                or.b    ($FFFFF607).w, D0
                andi.b  #$7F, ($FFFFF605).w
                andi.b  #$7F, ($FFFFF607).w
                andi.b  #$80, D0
                beq     Offset_0x01358E
                st      $002F(A0)
                move.b  #$10, $0025(A0)
                move.b  #$12, $001A(A0)
                move.w  #$0108, $0008(A0)
                move.w  #$0098, $000A(A0)
                lea     ($FFFFB1C0).w, A1
                bsr     Offset_0x013590
                move.b  #$0E, (A1)            ; Carrega o objeto 0x0E na memória
                move.b  #$0A, $0024(A1)
                move.b  #$02, $0018(A1)
                move.b  #$09, $001A(A1)
                move.b  #$04, $0025(A1)
                move.w  #$0141, $0008(A1)
                move.w  #$00C1, $000A(A1)
                lea     ($FFFFB080).w, A1
                bsr     Offset_0x013590
                move.b  #$0E, (A1)            ; Carrega o objeto 0x0E na memória
                move.b  #$04, $0024(A1)
                move.b  #$04, $001A(A1)
                move.b  #$06, $0025(A1)
                move.b  #$03, $0018(A1)
                move.w  #$00C8, $0008(A1)
                move.w  #$00A0, $000A(A1)
                lea     ($FFFFB200).w, A1
                bsr     Offset_0x013590
                move.b  #$0E, (A1)            ; Carrega o objeto 0x0E na memória
                move.b  #$10, $0024(A1)
                move.b  #$02, $0018(A1)
                move.b  #$13, $001A(A1)
                move.b  #$04, $0025(A1)
                move.w  #$010D, $0008(A1)
                move.w  #$00D1, $000A(A1)
                lea     ($FFFFB140).w, A1
                move.b  #$0E, (A1)            ; Carrega o objeto 0x0E na memória
                move.b  #$06, $0028(A1)
                bsr     Offset_0x012EA4
                move.b  #$0F, ($FFFFB400).w
                lea     ($FFFFB0C0).w, A1
                bsr     Delete_A1_Object                       ; Offset_0x01646E
                lea     (Offset_0x0133CA), A1
                lea     ($FFFFFB60).w, A2
                moveq   #$07, D6
Offset_0x013556:
                move.l  (A1)+, (A2)+
                dbra    D6, Offset_0x013556
                lea     (Offset_0x0133AA), A1
                lea     ($FFFFFB40).w, A2
                moveq   #$07, D6
Offset_0x013568:
                move.l  (A1)+, (A2)+
                dbra    D6, Offset_0x013568
                lea     (Offset_0x01338A), A1
                lea     ($FFFFFB00).w, A2
                moveq   #$07, D6
Offset_0x01357A:
                move.l  (A1)+, (A2)+
                dbra    D6, Offset_0x01357A
                tst.b   $0030(A0)
                bne.s   Offset_0x01358E
                moveq   #Title_Screen_Snd, D0   ; $99
                jsr     (Play_Music)                           ; Offset_0x00131A
Offset_0x01358E:
                rts    
Offset_0x013590:
                move.l  #TS_Sonic_Miles_Mappings, $0004(A1)    ; Offset_0x013650
                move.w  #$0150, $0002(A1)
                move.b  #$04, $0018(A1)
                rts   
;-------------------------------------------------------------------------------                  
Obj_0x0F_1Player2Vs_Options: ; Offset_0x0135A6:                     
                include 'data\objects\obj_0x0F.asm'                                          
;-------------------------------------------------------------------------------   
Offset_0x01362E:
                dc.w    Offset_0x013636-Offset_0x01362E
                dc.w    Offset_0x01363C-Offset_0x01362E
                dc.w    Offset_0x013644-Offset_0x01362E
                dc.w    Offset_0x01364C-Offset_0x01362E
Offset_0x013636:
                dc.b    $01, $05, $06, $07, $08, $FA
Offset_0x01363C:
                dc.b    $01, $00, $01, $02, $03, $04, $FA, $00
Offset_0x013644:
                dc.b    $01, $0C, $0D, $0E, $0D, $0C, $FA, $00
Offset_0x01364C:
                dc.b    $03, $0C, $0F, $FF       
;-------------------------------------------------------------------------------                                            
TS_Sonic_Miles_Mappings: ; Offset_0x013650:
                dc.w    Offset_0x013678-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x0136AA-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x0136F4-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x013736-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x0137A0-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x01380A-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x013874-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x0138DE-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x013958-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x0139C2-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x0139DC-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x013A0E-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x013A48-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x013A52-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x013A5C-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x013A66-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x013A70-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x013A7A-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x013A9C-TS_Sonic_Miles_Mappings
                dc.w    Offset_0x013B0E-TS_Sonic_Miles_Mappings
Offset_0x013678:
                dc.w    $0006
                dc.l    $100CA000, $A0000030, $180FA004, $A0020018
                dc.l    $180BA014, $A00A0038, $3804A020, $A0100020
                dc.l    $4000A022, $A0110028, $380EA023, $A0110030
Offset_0x0136AA:
                dc.w    $0009
                dc.l    $1004A02F, $A0170048, $180FA031, $A0180020
                dc.l    $180BA041, $A0200040, $1801A04D, $A0260058
                dc.l    $3801A04F, $A0270000, $380EA051, $A0280008
                dc.l    $380AA05D, $A02E0028, $3805A066, $A0330040
                dc.l    $3800A06A, $A0350050
Offset_0x0136F4:
                dc.w    $0008
                dc.l    $100AA06B, $A0350028, $180DA074, $A03A0040
                dc.l    $280FA07C, $A03E0008, $280FA08C, $A0460028
                dc.l    $2807A09C, $A04E0048, $2801A0A4, $A0520058
                dc.l    $480CA0A6, $A0530010, $4804A0AA, $A0550030
Offset_0x013736:
                dc.w    $000D
                dc.l    $1000A0AC, $A0560020, $100EA0AD, $A0560028
                dc.l    $1000A0B9, $A05C0048, $1809A0BA, $A05D0048
                dc.l    $2004A0C0, $A0600010, $3800A0C2, $A0610000
                dc.l    $280EA0C3, $A0610008, $280EA0CF, $A0670028
                dc.l    $2806A0DB, $A06D0048, $2800A0E1, $A0700058
                dc.l    $400DA0E2, $A0710010, $4005A0EA, $A0750030
                dc.l    $4008A0EE, $A0770040
Offset_0x0137A0:
                dc.w    $000D
                dc.l    $0804A0F1, $A0780040, $1000B0AC, $B0560018
                dc.l    $100EA0F3, $A0790020, $100DA0FF, $A07F0040
                dc.l    $2000A107, $A0830058, $2004A108, $A0840040
                dc.l    $2800A10A, $A0850008, $280FA10B, $A0850010
                dc.l    $3805A11B, $A08D0000, $280FA11F, $A08F0030
                dc.l    $2801A12F, $A0970050, $480CA131, $A0980010
                dc.l    $4804A135, $A09A0030
Offset_0x01380A:
                dc.w    $000D
                dc.l    $080C8137, $809B0020, $1000813B, $809D0040
                dc.l    $100F813C, $809E0008, $300D814C, $80A60000
                dc.l    $18028154, $80AA0000, $100B8157, $80AB0028
                dc.l    $28008163, $80B10040, $30008164, $80B20048
                dc.l    $300D8165, $80B20020, $4000816D, $80B60008
                dc.l    $400D816E, $80B70010, $40058176, $80BB0030
                dc.l    $3002817A, $80BD0040
Offset_0x013874:
                dc.w    $000D
                dc.l    $080C817D, $80BE0018, $08078181, $80C00038
                dc.l    $10008189, $80C40048, $200F818A, $80C50000
                dc.l    $1800819A, $80CD0008, $1005819B, $80CD0010
                dc.l    $100A819F, $80CF0020, $280F81A8, $80D40020
                dc.l    $280781B8, $80DC0040, $400881C0, $80E00008
                dc.l    $500181C3, $80E10008, $480A81C5, $80E20010
                dc.l    $480D81CE, $80E70028
Offset_0x0138DE:
                dc.w    $000F
                dc.l    $080C81D6, $80EB0028, $080081DA, $80ED0048
                dc.l    $180381DB, $80ED0010, $100F81DF, $80EF0018
                dc.l    $100F81EF, $80F70038, $100081FF, $80FF0058
                dc.l    $28008200, $81000058, $38008201, $81000010
                dc.l    $300D8202, $81010018, $300D820A, $81050038
                dc.l    $40008212, $81090020, $40018213, $81090028
                dc.l    $400E8215, $810A0030, $40028221, $81100050
                dc.l    $38018224, $81120058
Offset_0x013958:
                dc.w    $000D
                dc.l    $080F8226, $81130028, $10008236, $811B0020
                dc.l    $18078237, $811B0018, $0807823F, $811F0048
                dc.l    $10008247, $81230058, $38048248, $81240018
                dc.l    $280F824A, $81250028, $2809825A, $812D0048
                dc.l    $38058260, $81300048, $40018264, $81320058
                dc.l    $48048266, $81330028, $50008268, $81340030
                dc.l    $480D8269, $81340038
Offset_0x0139C2:
                dc.w    $0003
                dc.l    $000D8271, $81380008, $10098279, $813C0008
                dc.l    $2005827F, $813F0010
Offset_0x0139DC:
                dc.w    $0006
                dc.l    $000CE283, $E141FFB0, $0008E287, $E143FFD0
                dc.l    $0008E28A, $E1450018, $000CE28D, $E1460030
                dc.l    $000C0010, $0008FFE8, $00040010, $00080008
Offset_0x013A0E:
                dc.w    $0007
                dc.l    $000CE283, $E141FFB0, $0008E287, $E143FFD0
                dc.l    $0008E28A, $E1450018, $000CE28D, $E1460030
                dc.l    $000C0010, $0008FFE8, $00040010, $00080008
                dc.l    $0804E2A0, $E1500058
Offset_0x013A48:
                dc.w    $0001
                dc.l    $FC002291, $2148FFFC
Offset_0x013A52:
                dc.w    $0001
                dc.l    $F8052292, $2149FFF8
Offset_0x013A5C:
                dc.w    $0001
                dc.l    $F40A2296, $214BFFF4
Offset_0x013A66:
                dc.w    $0001
                dc.l    $FC00229F, $214FFFFC
Offset_0x013A70:
                dc.w    $0001
                dc.l    $FC0482A0, $8150FFF8
Offset_0x013A7A:
                dc.w    $0004
                dc.l    $00030000, $00000008, $00030000, $00000000
                dc.l    $20030000, $00000008, $20030000, $00000000
Offset_0x013A9C:
                dc.w    $000E
                dc.l    $080F8226, $81130028, $10008236, $811B0020
                dc.l    $18078237, $811B0018, $0807823F, $811F0048
                dc.l    $10008247, $81230058, $38048248, $81240018
                dc.l    $280F824A, $81250028, $2809825A, $812D0048
                dc.l    $38058260, $81300048, $40018264, $81320058
                dc.l    $48048266, $81330028, $50008268, $81340030
                dc.l    $480D8269, $81340038, $480482A2, $81510020
Offset_0x013B0E:
                dc.w    $0001
                dc.l    $0006A2A4, $A1520008     
;-------------------------------------------------------------------------------      
_1Player2Vs_Options_Mappings: ; Offset_0x013B18:
                dc.w    Map_1Player_Highlight-_1Player2Vs_Options_Mappings   ; Offset_0x013B1E
                dc.w    Map_2PlayerVs_Highlight-_1Player2Vs_Options_Mappings ; Offset_0x013B60
                dc.w    Map_Options_Highlight-_1Player2Vs_Options_Mappings   ; Offset_0x013BA2
Map_1Player_Highlight: ; Offset_0x013B1E:                      
                dc.w    $0008
                dc.l    $F4006402, $6201FFD4, $F40C6403, $6201FFE4
                dc.l    $F4046407, $62030004, $04000409, $0204FFD4
                dc.l    $040C0403, $0201FFE4, $04040407, $02030004
                dc.l    $0404040A, $0205001C, $F40463FA, $61FDFFBC
Map_2PlayerVs_Highlight: ; Offset_0x013B60:
                dc.w    $0008
                dc.l    $F4000402, $0201FFD4, $F40C0403, $0201FFE4
                dc.l    $F4040407, $02030004, $04006409, $6204FFD4
                dc.l    $040C6403, $6201FFE4, $04046407, $62030004
                dc.l    $0404640A, $6205001C, $040463FA, $61FDFFBC
Map_Options_Highlight: ; Offset_0x013BA2:
                dc.w    $0008
                dc.l    $F800669C, $634EFFDC, $F800669D, $634EFFE4
                dc.l    $F80066A1, $6350FFEC, $F8006696, $634BFFF4
                dc.l    $F800669C, $634EFFFC, $F800669B, $634D0004
                dc.l    $F80066A0, $6350000C, $F80463FA, $61FDFFBC            
;-------------------------------------------------------------------------------                   
Obj_0x34_Title_Cards: ; Offset_0x013BE4:                
                include 'data\objects\obj_0x34.asm' 
;-------------------------------------------------------------------------------
Obj_0x39_Time_Over_Game_Over: ; Offset_0x013F12:
                include 'data\objects\obj_0x39.asm'                    
;-------------------------------------------------------------------------------                  
Obj_0x3A_Level_Results: ; Offset_0x014026:     
                include 'data\objects\obj_0x3A.asm'  
;-------------------------------------------------------------------------------   
Obj_0x6F_Special_Stage_Results: ; Offset_0x01435E: 
                include 'data\objects\obj_0x6F.asm'                                               
;-------------------------------------------------------------------------------   
Title_Cards_Mappings: ; Offset_0x014758
                dc.w    TC_EHz_Map-Title_Cards_Mappings        ; Offset_0x014786
                dc.w    TC_EHz_Map-Title_Cards_Mappings        ; Offset_0x014786
                dc.w    TC_EHz_Map-Title_Cards_Mappings        ; Offset_0x014786
                dc.w    TC_EHz_Map-Title_Cards_Mappings        ; Offset_0x014786
                dc.w    TC_Mz_Map-Title_Cards_Mappings         ; Offset_0x0147E0
                dc.w    TC_Mz_Map-Title_Cards_Mappings         ; Offset_0x0147E0
                dc.w    TC_WFz_Map-Title_Cards_Mappings        ; Offset_0x014AC2
                dc.w    TC_HTz_Map-Title_Cards_Mappings        ; Offset_0x014832
                dc.w    TC_HPz_Map-Title_Cards_Mappings        ; Offset_0x01486C
                dc.w    TC_EHz_Map-Title_Cards_Mappings        ; Offset_0x014786
                dc.w    TC_OOz_Map-Title_Cards_Mappings        ; Offset_0x0148CE
                dc.w    TC_MCz_Map-Title_Cards_Mappings        ; Offset_0x014910
                dc.w    TC_CNz_Map-Title_Cards_Mappings        ; Offset_0x014962
                dc.w    TC_CPz_Map-Title_Cards_Mappings        ; Offset_0x0149BC
                dc.w    TC_DEz_Map-Title_Cards_Mappings        ; Offset_0x014B24
                dc.w    TC_ARz_Map-Title_Cards_Mappings        ; Offset_0x014A26
                dc.w    TC_SCz_Map-Title_Cards_Mappings        ; Offset_0x014A80
                dc.w    TC_Zone_Map-Title_Cards_Mappings       ; Offset_0x014B66
                dc.w    TC_Act1_Map-Title_Cards_Mappings       ; Offset_0x014B88
                dc.w    TC_Act2_Map-Title_Cards_Mappings       ; Offset_0x014B92
                dc.w    TC_Act3_Map-Title_Cards_Mappings       ; Offset_0x014B9C
                dc.w    TC_STH_Map-Title_Cards_Mappings        ; Offset_0x014BA6
                dc.w    TC_Red_Bar_Map-Title_Cards_Mappings    ; Offset_0x014BD0
TC_EHz_Map: ; Offset_0x014786:
                dc.w    $000B
                dc.l    $00058580, $82C0FFC3, $000985DE, $82EFFFD0
                dc.l    $00058580, $82C0FFE8, $000585E4, $82F2FFF8
                dc.l    $000585E8, $82F40008, $000585EC, $82F60018
                dc.l    $000585F0, $82F80028, $000585F4, $82FA0048
                dc.l    $000185F8, $82FC0058, $000585EC, $82F60060
                dc.l    $000585EC, $82F60070
TC_Mz_Map: ; Offset_0x0147E0:
                dc.w    $000A
                dc.l    $000985DE, $82EFFFE0, $00058580, $82C0FFF8
                dc.l    $000585E4, $82F20008, $000585E8, $82F40018
                dc.l    $00058588, $82C40028, $000585EC, $82F60038
                dc.l    $00058588, $82C40048, $000585F0, $82F80058
                dc.l    $000185F4, $82FA0068, $000585F6, $82FB0070
TC_HTz_Map: ; Offset_0x014832:
                dc.w    $0007
                dc.l    $000585DE, $82EF0008, $000185E2, $82F10018
                dc.l    $000585E4, $82F20020, $000585E4, $82F20030
                dc.l    $000585E8, $82F40051, $00058588, $82C40060
                dc.l    $000585EC, $82F60070
TC_HPz_Map: ; Offset_0x01486C:
                dc.w    $000C
                dc.l    $000585DE, $82EFFFB8, $000185E2, $82F1FFC8
                dc.l    $000585E4, $82F2FFD0, $000585E4, $82F2FFE0
                dc.l    $00058580, $82C0FFF0, $00058584, $82C20000
                dc.l    $000585E8, $82F40020, $000585EC, $82F60030
                dc.l    $000585F0, $82F80040, $000585EC, $82F60050
                dc.l    $000585F4, $82FA0060, $00058580, $82C00070
TC_OOz_Map: ; Offset_0x0148CE:
                dc.w    $0008
                dc.l    $00058588, $82C4FFFB, $000185DE, $82EF000B
                dc.l    $000585E0, $82F00013, $00058588, $82C40033
                dc.l    $000585E4, $82F20043, $00058580, $82C00053
                dc.l    $000585E8, $82F40060, $00058584, $82C20070
TC_MCz_Map: ; Offset_0x014910:
                dc.w    $000A
                dc.l    $000985DE, $82EFFFD0, $000585E4, $82F2FFE8
                dc.l    $000585E8, $82F4FFF8, $000585EC, $82F60008
                dc.l    $000185F0, $82F80018, $000585F2, $82F90020
                dc.l    $000585F2, $82F90041, $000585F6, $82FB0050
                dc.l    $000585FA, $82FD0060, $00058580, $82C00070
TC_CNz_Map: ; Offset_0x014962:
                dc.w    $000B
                dc.l    $000585DE, $82EFFFD1, $000585E2, $82F1FFE0
                dc.l    $000585E6, $82F3FFF0, $000185EA, $82F50000
                dc.l    $00058584, $82C20008, $00058588, $82C40018
                dc.l    $00058584, $82C20038, $000185EA, $82F50048
                dc.l    $000585EC, $82F60050, $000585F0, $82F80060
                dc.l    $000585F4, $82FA0070
TC_CPz_Map: ; Offset_0x0149BC:
                dc.w    $000D
                dc.l    $000585DE, $82EFFFA4, $000585E2, $82F1FFB4
                dc.l    $00058580, $82C0FFC4, $000985E6, $82F3FFD1
                dc.l    $000185EC, $82F6FFE9, $000585DE, $82EFFFF1
                dc.l    $000585EE, $82F70000, $000585F2, $82F90010
                dc.l    $000585F6, $82FB0031, $000585F2, $82F90041
                dc.l    $000585EE, $82F70050, $00058584, $82C20060
                dc.l    $000585FA, $82FD0070
TC_ARz_Map: ; Offset_0x014A26:
                dc.w    $000B
                dc.l    $000585DE, $82EFFFD2, $000585E2, $82F1FFE2
                dc.l    $000585E6, $82F3FFF2, $000585DE, $82EF0000
                dc.l    $000585EA, $82F50010, $000185EE, $82F70020
                dc.l    $000585F0, $82F80028, $000585F4, $82FA0048
                dc.l    $000585E6, $82F30058, $000185EE, $82F70068
                dc.l    $00058584, $82C20070
TC_SCz_Map: ; Offset_0x014A80:
                dc.w    $0008
                dc.l    $000585DE, $82EFFFF0, $000585E2, $82F10000
                dc.l    $000585E6, $82F30010, $000585EA, $82F50030
                dc.l    $000585EE, $82F70040, $000585F2, $82F90050
                dc.l    $000585DE, $82EF0060, $00058580, $82C00070
TC_WFz_Map: ; Offset_0x014AC2:
                dc.w    $000C
                dc.l    $000985DE, $82EFFFB1, $000185E4, $82F2FFC8
                dc.l    $00058584, $82C2FFD0, $000585E6, $82F3FFE0
                dc.l    $000585EA, $82F50001, $00058588, $82C40010
                dc.l    $000585EE, $82F70020, $000585F2, $82F90030
                dc.l    $000585EE, $82F70040, $00058580, $82C00050
                dc.l    $000585F6, $82FB005F, $000585F6, $82FB006F
TC_DEz_Map: ; Offset_0x014B24:
                dc.w    $0008
                dc.l    $000585DE, $82EFFFF2, $00058580, $82C00002
                dc.l    $000585E2, $82F10010, $000585E6, $82F30020
                dc.l    $000585EA, $82F50030, $00058580, $82C00051
                dc.l    $000585EE, $82F70060, $000585EE, $82F70070
TC_Zone_Map: ; Offset_0x014B66:
                dc.w    $0004
                dc.l    $0005858C, $82C60001, $00058588, $82C40010
                dc.l    $00058584, $82C20020, $00058580, $82C00030
TC_Act1_Map: ; Offset_0x014B88:
                dc.w    $0001
                dc.l    $0007A590, $A2C80000
TC_Act2_Map: ; Offset_0x014B92:
                dc.w    $0001
                dc.l    $000BA598, $A2CC0000
TC_Act3_Map: ; Offset_0x014B9C:
                dc.w    $0001
                dc.l    $000BA5A4, $A2D20000
TC_STH_Map: ; Offset_0x014BA6:
                dc.w    $0005
                dc.l    $000D85B0, $82D8FFB8, $000D85B8, $82DCFFD8
                dc.l    $000D85C0, $82E0FFF8, $000D85C8, $82E40018
                dc.l    $000585D0, $82E80038
TC_Red_Bar_Map: ; Offset_0x014BD0:
                dc.w    $0007
                dc.l    $900385D4, $82EA0000, $B00385D4, $82EA0000
                dc.l    $D00385D4, $82EA0000, $F00385D4, $82EA0000
                dc.l    $100385D4, $82EA0000, $300385D4, $82EA0000
                dc.l    $500385D4, $82EA0000
;-------------------------------------------------------------------------------                 
Time_Over_Game_Over_Mappings: ; Offset_0x014C0A:
                dc.w    Map_Game-Time_Over_Game_Over_Mappings  ; Offset_0x014C12
                dc.w    Map_Over-Time_Over_Game_Over_Mappings  ; Offset_0x014C24
                dc.w    Map__Time-Time_Over_Game_Over_Mappings ; Offset_0x014C36
                dc.w    Map__Over-Time_Over_Game_Over_Mappings ; Offset_0x014C48
Map_Game: ; Offset_0x014C12: 
                dc.w    $0002
                dc.l    $F80D0000, $0000FFB8, $F80D0008, $0004FFD8
Map_Over: ; Offset_0x014C24:
                dc.w    $0002
                dc.l    $F80D0014, $000A0008, $F80D000C, $00060028
Map__Time: ; Offset_0x014C36:
                dc.w    $0002
                dc.l    $F809001C, $000EFFC4, $F80D0008, $0004FFDC
Map__Over: ; Offset_0x014C48:
                dc.w    $0002
                dc.l    $F80D0014, $000A000C, $F80D000C, $0006002C                
;-------------------------------------------------------------------------------                
Level_Results_Mappings: ; Offset_0x014C5A:
                dc.w    LR_Sonic_Got_Map-Level_Results_Mappings ; Offset_0x014C78
                dc.w    LR_Miles_Got_Map-Level_Results_Mappings ; Offset_0x014CBA
                dc.w    LR_Tails_Got_Map-Level_Results_Mappings ; Offset_0x014CFC    
                dc.w    Offset_0x014D3E-Level_Results_Mappings
                dc.w    Offset_0x014D78-Level_Results_Mappings                  
                dc.w    TC_Zone_Map-Level_Results_Mappings      ; Offset_0x014B66
                dc.w    TC_Act1_Map-Level_Results_Mappings      ; Offset_0x014B88
                dc.w    TC_Act2_Map-Level_Results_Mappings      ; Offset_0x014B92
                dc.w    TC_Act3_Map-Level_Results_Mappings      ; Offset_0x014B9C
                dc.w    Offset_0x014D92-Level_Results_Mappings
                dc.w    Offset_0x014DBC-Level_Results_Mappings
                dc.w    Offset_0x014DEE-Level_Results_Mappings
                dc.w    Offset_0x014E20-Level_Results_Mappings
                dc.w    Offset_0x014E2A-Level_Results_Mappings
                dc.w    Offset_0x014E34-Level_Results_Mappings     
LR_Sonic_Got_Map: ; Offset_0x014C78:
                dc.w    $0008
                dc.l    $000585D0, $82E8FFC0, $00058588, $82C4FFD0
                dc.l    $00058584, $82C2FFE0, $000185C0, $82E0FFF0
                dc.l    $000585B4, $82DAFFF8, $000585B8, $82DC0010
                dc.l    $00058588, $82C40020, $000585D4, $82EA002F
LR_Miles_Got_Map: ; Offset_0x014CBA:
                dc.w    $0008
                dc.l    $000985C6, $82E3FFBC, $000185C0, $82E0FFD4
                dc.l    $000585C2, $82E1FFDC, $00058580, $82C0FFEC
                dc.l    $000585D0, $82E8FFFC, $000585B8, $82DC0014
                dc.l    $00058588, $82C40024, $000585D4, $82EA0033
LR_Tails_Got_Map: ; Offset_0x014CFC:
                dc.w    $0008
                dc.l    $000585D4, $82EAFFC3, $000585B0, $82D8FFD0
                dc.l    $000185C0, $82E0FFE0, $000585C2, $82E1FFE8
                dc.l    $000585D0, $82E8FFF8, $000585B8, $82DC0010
                dc.l    $00058588, $82C40020, $000585D4, $82EA002F
Offset_0x014D3E:
                dc.w    $0007
                dc.l    $000585D4, $82EAFFC8, $000585BC, $82DEFFD8
                dc.l    $000585CC, $82E6FFE8, $00058588, $82C4FFF8
                dc.l    $000585D8, $82EC0008, $000585B8, $82DC0018
                dc.l    $000585BC, $82DE0028
Offset_0x014D78:
                dc.w    $0003
                dc.l    $000585B0, $82D80000, $000585B4, $82DA0010
                dc.l    $000585D4, $82EA001F
Offset_0x014D92:
                dc.w    $0005
                dc.l    $0009A5E6, $A2F3FFB8, $0005A5EC, $A2F6FFD0
                dc.l    $000585F0, $82F8FFD4, $000D8520, $82900038
                dc.l    $000186F0, $83780058
Offset_0x014DBC:
                dc.w    $0006
                dc.l    $000DA6DA, $A36DFFA4, $000DA5DE, $A2EFFFCC
                dc.l    $0001A6CA, $A365FFEC, $000585F0, $82F8FFE8
                dc.l    $000D8528, $82940038, $000186F0, $83780058
Offset_0x014DEE:
                dc.w    $0006
                dc.l    $000DA6D2, $A369FFA4, $000DA5DE, $A2EFFFCC
                dc.l    $0001A6CA, $A365FFEC, $000585F0, $82F8FFE8
                dc.l    $000D8530, $82980038, $000186F0, $83780058
Offset_0x014E20:
                dc.w    $0001
                dc.l    $000685F4, $82FA0000
Offset_0x014E2A:
                dc.w    $0001
                dc.l    $000685FA, $82FD0000
Offset_0x014E34:
                dc.w    $0007
                dc.l    $000DA540, $A2A0FF98, $0009A548, $A2A4FFB8
                dc.l    $000DA5DE, $A2EFFFD8, $0001A6CA, $A365FFF8
                dc.l    $000585F0, $82F8FFF4, $000D8538, $829C0038
                dc.l    $000186F0, $83780058  
;-------------------------------------------------------------------------------
Special_Stage_Results_Mappings: ; Offset_0x014E6E:
                dc.w    Offset_0x014EA8-Special_Stage_Results_Mappings
                dc.w    Offset_0x014F0A-Special_Stage_Results_Mappings
                dc.w    Offset_0x014F54-Special_Stage_Results_Mappings
                dc.w    Offset_0x014F9E-Special_Stage_Results_Mappings
                dc.w    Offset_0x014FE8-Special_Stage_Results_Mappings
                dc.w    Offset_0x01504A-Special_Stage_Results_Mappings
                dc.w    Offset_0x015054-Special_Stage_Results_Mappings
                dc.w    Offset_0x01505E-Special_Stage_Results_Mappings
                dc.w    Offset_0x015068-Special_Stage_Results_Mappings
                dc.w    Offset_0x015072-Special_Stage_Results_Mappings
                dc.w    Offset_0x01507C-Special_Stage_Results_Mappings
                dc.w    Offset_0x015086-Special_Stage_Results_Mappings
                dc.w    Offset_0x015090-Special_Stage_Results_Mappings
                dc.w    Offset_0x0150BA-Special_Stage_Results_Mappings
                dc.w    Offset_0x01511E-Special_Stage_Results_Mappings
                dc.w    Offset_0x015150-Special_Stage_Results_Mappings
                dc.w    Offset_0x0151E6-Special_Stage_Results_Mappings
                dc.w    Offset_0x015218-Special_Stage_Results_Mappings
                dc.w    Offset_0x0150EC-Special_Stage_Results_Mappings
                dc.w    Offset_0x015182-Special_Stage_Results_Mappings
                dc.w    Offset_0x0151B4-Special_Stage_Results_Mappings
                dc.w    Offset_0x015252-Special_Stage_Results_Mappings
                dc.w    Offset_0x015264-Special_Stage_Results_Mappings
                dc.w    Offset_0x0152D6-Special_Stage_Results_Mappings
                dc.w    Offset_0x015348-Special_Stage_Results_Mappings
                dc.w    Offset_0x0153BA-Special_Stage_Results_Mappings
                dc.w    Offset_0x015424-Special_Stage_Results_Mappings
                dc.w    Offset_0x01547E-Special_Stage_Results_Mappings
                dc.w    Offset_0x0154D0-Special_Stage_Results_Mappings
Offset_0x014EA8:
                dc.w    $000C
                dc.l    $0005802A, $8015FFA0, $00058022, $8011FFB0
                dc.l    $00058580, $82C0FFC0, $00058006, $8003FFD0
                dc.l    $00018016, $800BFFE0, $00058002, $8001FFE8
                dc.l    $00058018, $800CFFF8, $0005802A, $80150010
                dc.l    $0005802E, $80170020, $00058002, $8001002C
                dc.l    $0005800E, $8007003C, $00058580, $82C0004C
Offset_0x014F0A:
                dc.w    $0009
                dc.l    $0005802A, $8015FFB8, $00058588, $82C4FFC8
                dc.l    $00058584, $82C2FFD8, $00018016, $800BFFE8
                dc.l    $00058006, $8003FFF0, $0005800E, $80070008
                dc.l    $00058588, $82C40018, $0005802E, $80170028
                dc.l    $00058002, $80010040
Offset_0x014F54:
                dc.w    $0009
                dc.l    $0009801C, $800EFFB4, $00018016, $800BFFCC
                dc.l    $00058018, $800CFFD4, $00058580, $82C0FFE4
                dc.l    $0005802A, $8015FFF4, $0005800E, $8007000C
                dc.l    $00058588, $82C4001C, $0005802E, $8017002C
                dc.l    $00058002, $80010044
Offset_0x014F9E:
                dc.w    $0009
                dc.l    $0005802E, $8017FFBB, $00058002, $8001FFC8
                dc.l    $00018016, $800BFFD8, $00058018, $800CFFE0
                dc.l    $0005802A, $8015FFF0, $0005800E, $80070008
                dc.l    $00058588, $82C40018, $0005802E, $80170028
                dc.l    $00058002, $80010040
Offset_0x014FE8:
                dc.w    $000C
                dc.l    $00058006, $8003FF98, $00058012, $8009FFA8
                dc.l    $00058002, $8001FFB8, $00058588, $82C4FFC8
                dc.l    $0005802A, $8015FFD8, $00058580, $82C0FFF3
                dc.l    $0009801C, $800E0000, $00058580, $82C00018
                dc.l    $00058026, $80130028, $00058002, $80010038
                dc.l    $00058018, $800C0048, $0005800A, $80050058
Offset_0x01504A:
                dc.w    $0001
                dc.l    $0005C5A4, $C2D20000
Offset_0x015054:
                dc.w    $0001
                dc.l    $0005E5A4, $E2D20000
Offset_0x01505E:
                dc.w    $0001
                dc.l    $0005C5AC, $C2D60000
Offset_0x015068:
                dc.w    $0001
                dc.l    $0005E5AC, $E2D60000
Offset_0x015072:
                dc.w    $0001
                dc.l    $0005E5A8, $E2D40000
Offset_0x01507C:
                dc.w    $0001
                dc.l    $0005C5A8, $C2D40000
Offset_0x015086:
                dc.w    $0001
                dc.l    $0005A5A8, $A2D40000
Offset_0x015090:
                dc.w    $0005
                dc.l    $000DA6CA, $A365FFA0, $0001A6E0, $A370FFC0
                dc.l    $000585A0, $82D0FFBC, $000986E4, $83720028
                dc.l    $000D86EA, $83750040
Offset_0x0150BA:
                dc.w    $0006
                dc.l    $0001A6CA, $A365FFA0, $000DA5B0, $A2D8FFA8
                dc.l    $000DA6D2, $A369FFD0, $0001A6CA, $A365FFF0
                dc.l    $000585A0, $82D0FFEC, $000D8528, $82940040
Offset_0x0150EC:
                dc.w    $0006
                dc.l    $0001A6CA, $A365FFA0, $000DA5B0, $A2D8FFA8
                dc.l    $000DA6D2, $A369FFD0, $0001A6CA, $A365FFF0
                dc.l    $000585A0, $82D0FFEC, $000186F0, $83780058
Offset_0x01511E:
                dc.w    $0006
                dc.l    $000DA5B8, $A2DCFFA0, $0001A6CA, $A365FFC0
                dc.l    $000DA6D2, $A369FFD0, $0001A6CA, $A365FFF0
                dc.l    $000585A0, $82D0FFEC, $000D8530, $82980040
Offset_0x015150:
                dc.w    $0006
                dc.l    $0009A5CE, $A2E7FFA0, $0005A5D4, $A2EAFFB8
                dc.l    $000DA6D2, $A369FFD0, $0001A6CA, $A365FFF0
                dc.l    $000585A0, $82D0FFEC, $000D8530, $82980040
Offset_0x015182:
                dc.w    $0006
                dc.l    $000DA5B8, $A2DCFFA0, $0001A6CA, $A365FFC0
                dc.l    $000DA6D2, $A369FFD0, $0001A6CA, $A365FFF0
                dc.l    $000585A0, $82D0FFEC, $000186F0, $83780058
Offset_0x0151B4:
                dc.w    $0006
                dc.l    $0009A5CE, $A2E7FFA0, $0005A5D4, $A2EAFFB8
                dc.l    $000DA6D2, $A369FFD0, $0001A6CA, $A365FFF0
                dc.l    $000585A0, $82D0FFEC, $000186F0, $83780058
Offset_0x0151E6:
                dc.w    $0006
                dc.l    $000DA598, $A2CCFFA0, $000DA590, $A2C8FFD0
                dc.l    $0001A6CA, $A365FFF0, $000585A0, $82D0FFEC
                dc.l    $000D8520, $82900038, $000186F0, $83780058
Offset_0x015218:
                dc.w    $0007
                dc.l    $000DA5C0, $A2E0FF90, $0009A5C8, $A2E4FFB0
                dc.l    $000DA590, $A2C8FFD0, $0001A6CA, $A365FFF0
                dc.l    $000585A0, $82D0FFEC, $000D8528, $82940038
                dc.l    $000186F0, $83780058
Offset_0x015252:
                dc.w    $0002
                dc.l    $000D8528, $82940038, $000186F0, $83780058
Offset_0x015264:
                dc.w    $000E
                dc.l    $0005802A, $8015FF88, $00058588, $82C4FF98
                dc.l    $00058584, $82C2FFA8, $00018016, $800BFFB8
                dc.l    $00058006, $8003FFC0, $00058012, $8009FFD8
                dc.l    $00058002, $8001FFE8, $0005802A, $8015FFF8
                dc.l    $00058002, $80010010, $00058018, $800C0020
                dc.l    $00058018, $800C0030, $0005802E, $80170048
                dc.l    $00058012, $80090058, $00058580, $82C00068
Offset_0x0152D6:
                dc.w    $000E
                dc.l    $0009801C, $800EFF84, $00018016, $800BFF9C
                dc.l    $00058018, $800CFFA4, $00058580, $82C0FFB4
                dc.l    $0005802A, $8015FFC4, $00058012, $8009FFDC
                dc.l    $00058002, $8001FFEC, $0005802A, $8015FFFC
                dc.l    $00058002, $80010014, $00058018, $800C0024
                dc.l    $00058018, $800C0034, $0005802E, $8017004C
                dc.l    $00058012, $8009005C, $00058580, $82C0006C
Offset_0x015348:
                dc.w    $000E
                dc.l    $0005802E, $8017FF8B, $00058002, $8001FF98
                dc.l    $00018016, $800BFFA8, $00058018, $800CFFB0
                dc.l    $0005802A, $8015FFC0, $00058012, $8009FFD8
                dc.l    $00058002, $8001FFE8, $0005802A, $8015FFF8
                dc.l    $00058002, $80010010, $00058018, $800C0020
                dc.l    $00058018, $800C0030, $0005802E, $80170048
                dc.l    $00058012, $80090058, $00058580, $82C00068
Offset_0x0153BA:
                dc.w    $000D
                dc.l    $00058006, $8003FF90, $00058012, $8009FFA0
                dc.l    $00058002, $8001FFB0, $00058588, $82C4FFC0
                dc.l    $0005802A, $8015FFD0, $00058580, $82C0FFEB
                dc.l    $0009801C, $800EFFF8, $00058580, $82C00010
                dc.l    $00058026, $80130020, $00058002, $80010030
                dc.l    $00058018, $800C0040, $0005800A, $80050050
                dc.l    $0005802A, $80150060
Offset_0x015424:
                dc.w    $000B
                dc.l    $00058584, $82C2FFA0, $00058588, $82C4FFB0
                dc.l    $00098036, $801BFFC0, $0005802A, $8015FFE0
                dc.l    $00058588, $82C4FFF0, $00058584, $82C20000
                dc.l    $00018016, $800B0010, $00058006, $80030018
                dc.l    $00058006, $80030030, $00058002, $80010040
                dc.l    $00058584, $82C20050
Offset_0x01547E:
                dc.w    $000A
                dc.l    $00058006, $8003FFB0, $00058012, $8009FFC0
                dc.l    $00058002, $8001FFD0, $00058584, $82C2FFE0
                dc.l    $0005800E, $8007FFF0, $00058580, $82C00000
                dc.l    $00018016, $800B0018, $00058584, $82C20020
                dc.l    $0005802E, $80170030, $00058588, $82C40040
Offset_0x0154D0:
                dc.w    $000A
                dc.l    $0005802A, $8015FFB0, $00058032, $8019FFC0
                dc.l    $00058022, $8011FFD0, $00058580, $82C0FFE0
                dc.l    $00058026, $8013FFF0, $0005802A, $80150008
                dc.l    $00058588, $82C40018, $00058584, $82C20028
                dc.l    $00018016, $800B0038, $00058006, $80030040                                            
;===============================================================================
; Sub Rotina para carregar os mapeamentos das barras Vermelha, Azul e Amarela  
; [ Início ]               dos Title Cards
;===============================================================================                       
Load_Title_Cards_Mappings: ; Offset_0x015522:
                lea     (VDP_Data_Port), A6                          ; $00C00000
                tst.w   ($FFFFB0BE).w
                bne     Offset_0x01560E
                moveq   #$3F, D5
                move.l  #$85DA85DA, D6
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x015546
                moveq   #$1F, D5
                move.l  #$82ED82ED, D6
Offset_0x015546:
                lea     ($FFFFB176).w, A0
                moveq   #$01, D7
Offset_0x01554C:
                move.w  (A0)+, D0
                beq.s   Offset_0x015564
                clr.w   $FFFE(A0)
                jsr     Offset_0x015730(PC)
                move.l  D0, $0004(A6)
                move.w  D5, D4
Offset_0x01555E:
                move.l  D6, (A6)
                dbra    D4, Offset_0x01555E
Offset_0x015564:
                dbra    D7, Offset_0x01554C
                moveq   #$26, D1
                sub.w   ($FFFFB1BA).w, D1
                lsr.w   #$01, D1
                subq.w  #$01, D1
                moveq   #$07, D5
                move.l  #$A5DCA5DC, D6
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x015588
                moveq   #$03, D5
                move.l  #$A2EEA2EE, D6
Offset_0x015588:
                lea     ($FFFFB1B6).w, A0
                moveq   #$01, D7
Offset_0x01558E:
                move.w  (A0)+, D0
                beq.s   Offset_0x0155B2
                clr.w   $FFFE(A0)
                jsr     Offset_0x015730(PC)
                move.w  D5, D4
Offset_0x01559C:
                move.l  D0, $0004(A6)
                move.w  D1, D3
Offset_0x0155A2:
                move.l  D6, (A6)
                dbra    D3, Offset_0x0155A2
                addi.l  #$00800000, D0
                dbra    D4, Offset_0x01559C
Offset_0x0155B2:
                dbra    D7, Offset_0x01558E
                move.w  ($FFFFB1FA).w, D1
                subq.w  #$01, D1
                moveq   #$0D, D5
                move.l  #$85D885D8, D6
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x0155D2
                moveq   #$06, D5
                move.l  #$82EC82EC, D6
Offset_0x0155D2:
                lea     ($FFFFB1F6).w, A0
                moveq   #$01, D7
                move.w  #$8F80, $0004(A6)
Offset_0x0155DE:
                move.w  (A0)+, D0
                beq.s   Offset_0x015602
                clr.w   $FFFE(A0)
                jsr     Offset_0x015730(PC)
                move.w  D1, D4
Offset_0x0155EC:
                move.l  D0, $0004(A6)
                move.w  D5, D3
Offset_0x0155F2:
                move.l  D6, (A6)
                dbra    D3, Offset_0x0155F2
                addi.l  #$00020000, D0
                dbra    D4, Offset_0x0155EC
Offset_0x015602:
                dbra    D7, Offset_0x0155DE
                move.w  #$8F02, $0004(A6)
                rts
Offset_0x01560E:
                moveq   #$09, D3
                moveq   #$03, D4
                move.l  #$85DA85DA, D5
                move.l  #$A5DCA5DC, D6
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x015634
                moveq   #$04, D3
                moveq   #$01, D4
                move.l  #$82ED82ED, D5
                move.l  #$A2EEA2EE, D6
Offset_0x015634:
                lea     ($FFFFB1F6).w, A0
                moveq   #$01, D7
                move.w  #$8F80, $0004(A6)
Offset_0x015640:
                move.w  (A0)+, D0
                beq.s   Offset_0x01566C
                clr.w   $FFFE(A0)
                jsr     Offset_0x015730(PC)
                moveq   #$03, D2
Offset_0x01564E:
                move.l  D0, $0004(A6)
                move.w  D3, D1
Offset_0x015654:
                move.l  D5, (A6)
                dbra    D1, Offset_0x015654
                move.w  D4, D1
Offset_0x01565C:
                move.l  D6, (A6)
                dbra    D1, Offset_0x01565C
                addi.l  #$00020000, D0
                dbra    D2, Offset_0x01564E
Offset_0x01566C:
                dbra    D7, Offset_0x015640
                move.w  #$8F02, $0004(A6)
                moveq   #$07, D5
                move.l  #$85DA85DA, D6
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x01568C
                moveq   #$03, D5
                move.l  #$82ED82ED, D6
Offset_0x01568C:
                lea     ($FFFFB1B6).w, A0
                moveq   #$01, D7
Offset_0x015692:
                move.w  (A0)+, D0
                beq.s   Offset_0x0156B2
                clr.w   $FFFE(A0)
                jsr     Offset_0x015730(PC)
                move.w  D5, D4
Offset_0x0156A0:
                move.l  D0, $0004(A6)
                move.l  D6, (A6)
                move.l  D6, (A6)
                addi.l  #$00800000, D0
                dbra    D4, Offset_0x0156A0
Offset_0x0156B2:
                dbra    D7, Offset_0x015692
                move.w  ($FFFFB176).w, D4
                beq.s   Offset_0x01572A
                lea     $0004(A6), A5
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x0156F6
                lea     ($FFFFEE20).w, A3
                lea     (Fg_Mem_Start_Address).w, A4                 ; $FFFF8000
                move.w  #$6000, D2
                moveq   #$01, D6
Offset_0x0156D4:
                movem.l D4-D6, -(A7)
                moveq   #$FFFFFFF0, D5
                move.w  D4, D1
                bsr     Calc_VRAM_Pos_2                        ; Offset_0x00E282
                move.w  D1, D4
                moveq   #$FFFFFFF0, D5
                moveq   #$1F, D6
                bsr     Offset_0x00DF4A
                movem.l (A7)+, D4-D6
                addi.w  #$0010, D4
                dbra    D6, Offset_0x0156D4
Offset_0x0156F6:
                lea     ($FFFFEE00).w, A3
                lea     (Fg_Mem_Start_Address).w, A4                 ; $FFFF8000
                move.w  #$4000, D2
                move.w  ($FFFFB176).w, D4
                moveq   #$01, D6
Offset_0x015708:
                movem.l D4-D6, -(A7)
                moveq   #$FFFFFFF0, D5
                move.w  D4, D1
                bsr     Calc_VRAM_Pos                          ; Offset_0x00E246
                move.w  D1, D4
                moveq   #$FFFFFFF0, D5
                moveq   #$1F, D6
                bsr     Offset_0x00DF4A
                movem.l (A7)+, D4-D6
                addi.w  #$0010, D4
                dbra    D6, Offset_0x015708
Offset_0x01572A:
                clr.w   ($FFFFB176).w
                rts                    
Offset_0x015730:
                andi.l  #$0000FFFF, D0
                lsl.l   #$02, D0
                lsr.w   #$02, D0
                ori.w   #$4000, D0
                swap.w  D0
                rts                      
;===============================================================================
; Sub Rotina para carregar os mapeamentos das barras Vermelha, Azul e Amarela  
; [ Término ]              dos Title Cards
;===============================================================================                       
     
;===============================================================================
; Sub Rotina para carregar a fonte dos Title Cards
; [ Início ]
;===============================================================================     
Init_SS_Title_Card_Art: ; Offset_0x015742:
                movem.l D0/A0, -(A7)
                bsr.s   Init_Title_Card_Art                    ; Offset_0x01574E
                movem.l (A7)+, D0/A0
                bra.s   Load_SS_Title_Cards_Art                ; Offset_0x01578E
;------------------------------------------------------------------------------- 
Init_Title_Card_Art: ; Offset_0x01574E:
                move.l  #$70000002, (VDP_Control_Port)               ; $00C00004
                lea     (Title_Card_ZONE_123), A0              ; Offset_0x07D22C
                jsr     (NemesisDec)                           ; Offset_0x00149A
                lea     (Fg_Mem_Start_Address).w, A4                 ; $FFFF8000
                lea     (Title_Card_AY), A0                    ; Offset_0x07D58A
                jmp     (NemesisDec_ToRAM)                     ; Offset_0x0014AC
Load_Title_Cards_Art: ; Offset_0x015774:
                bsr.s   Init_Title_Card_Art                    ; Offset_0x01574E
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                move.b  TC_Idx(PC, D0), D0                     ; Offset_0x0157C2
                lea     TC_Loader(PC), A0                      ; Offset_0x0157D4
                lea     $00(A0, D0), A0
                move.l  #$7BC00002, D0
Load_SS_Title_Cards_Art: ; Offset_0x01578E:
                move    #$2700, SR
                lea     ($FFFF8000).w, A1
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  D0, $0004(A6)
Offset_0x0157A0:
                moveq   #$00, D0
                move.b  (A0)+, D0
                bmi.s   Offset_0x0157BC
                lsl.w   #$05, D0
                lea     $00(A1, D0), A2
                moveq   #$00, D1
                move.b  (A0)+, D1
                lsl.w   #$03, D1
                subq.w  #$01, D1
Offset_0x0157B4:
                move.l  (A2)+, (A6)
                dbra    D1, Offset_0x0157B4
                bra.s   Offset_0x0157A0
Offset_0x0157BC:
                move    #$2300, SR
                rts  
;-------------------------------------------------------------------------------                
TC_Idx: ; Offset_0x0157C2:                  
                dc.b    Load_EHz-TC_Loader                     ; Offset_0x0157D4
                dc.b    Load_EHz-TC_Loader                     ; Offset_0x0157D4
                dc.b    Load_EHz-TC_Loader                     ; Offset_0x0157D4
                dc.b    Load_EHz-TC_Loader                     ; Offset_0x0157D4
                dc.b    Load_Mz-TC_Loader                      ; Offset_0x0157E4
                dc.b    Load_Mz-TC_Loader                      ; Offset_0x0157E4
                dc.b    Load_WFz-TC_Loader                     ; Offset_0x01586C 
                dc.b    Load_HTz-TC_Loader                     ; Offset_0x0157F4
                dc.b    Load_HPz-TC_Loader                     ; Offset_0x015800
                dc.b    Load_EHz-TC_Loader                     ; Offset_0x0157D4
                dc.b    Load_OOz-TC_Loader                     ; Offset_0x015810
                dc.b    Load_MCz-TC_Loader                     ; Offset_0x01581A
                dc.b    Load_CNz-TC_Loader                     ; Offset_0x01582C
                dc.b    Load_CPz-TC_Loader                     ; Offset_0x01583C
                dc.b    Load_DEz-TC_Loader                     ; Offset_0x01587C
                dc.b    Load_ARz-TC_Loader                     ; Offset_0x01584E
                dc.b    Load_SCz-TC_Loader                     ; Offset_0x01585E
                dc.b    $00                     ; Filler      
;-------------------------------------------------------------------------------                 
TC_Loader:
Load_EHz: ; Offset_0x0157D4:
                dc.w    TC_M, TC_R, TC_A, TC_L, TC_D, TC_H, TC_I, TC_Break 
Load_Mz: ; Offset_0x0157E4:
                dc.w    TC_M, TC_T, TC_R, TC_P, TC_L, TC_I, TC_S, TC_Break
Load_HTz: ; Offset_0x0157F4:
                dc.w    TC_H, TC_I, TC_L, TC_T, TC_P, TC_Break  
Load_HPz: ; Offset_0x015800:
                dc.w    TC_H, TC_I, TC_D, TC_P, TC_A, TC_L, TC_C, TC_Break 
Load_OOz: ; Offset_0x015810:
                dc.w    TC_I, TC_L, TC_C, TC_A, TC_Break 
Load_MCz: ; Offset_0x01581A:
                dc.w    TC_M, TC_Y, TC_S, TC_T, TC_I, TC_C, TC_A, TC_V, TC_Break 
Load_CNz: ; Offset_0x01582C:
                dc.w    TC_C, TC_A, TC_S, TC_I, TC_G, TC_H, TC_T, TC_Break  
Load_CPz: ; Offset_0x01583C:
                dc.w    TC_C, TC_H, TC_M, TC_I, TC_A, TC_L, TC_P, TC_T, TC_Break 
Load_ARz: ; Offset_0x01584E:
                dc.w    TC_A, TC_Q, TC_U, TC_T, TC_I, TC_C, TC_R, TC_Break 
Load_SCz: ; Offset_0x01585E:
                dc.w    TC_S, TC_K, TC_Y, TC_C, TC_H, TC_A, TC_Break 
Load_WFz: ; Offset_0x01586C:
                dc.w    TC_W, TC_I, TC_G, TC_F, TC_R, TC_T, TC_S, TC_Break  
Load_DEz: ; Offset_0x01587C: 
                dc.w    TC_D, TC_A, TC_T, TC_H, TC_G, TC_Break 
;===============================================================================
; Sub Rotina para carregar a fonte dos Title Cards
; [ Término ]
;===============================================================================    
Obj_0x36_Spikes: ; Offset_0x015888:
                include 'data\objects\obj_0x36.asm'                          
;-------------------------------------------------------------------------------                              
Obj_0x3B_Rock: ; Offset_0x015C52:  
                include 'data\objects\obj_0x3B.asm' 
;-------------------------------------------------------------------------------                              
Obj_0x3C_Breakable_Wall: ; Offset_0x015CCC:  
                include 'data\objects\obj_0x3C.asm'                      
;===============================================================================
; Sub Rotina para destruir objetos
; [ Início ]
;===============================================================================  
Smash_Object: ; Offset_0x015D9E:
                moveq   #$00, D0
                move.b  $001A(A0), D0
                add.w   D0, D0
                move.l  $0004(A0), A3
                adda.w  $00(A3, D0), A3
                move.w  (A3)+, D1
                subq.w  #$01, D1
                bset    #$05, $0001(A0)
                move.b  $0000(A0), D4
                move.b  $0001(A0), D5
                move.l  A0, A1
                bra.s   Offset_0x015DCC
Offset_0x015DC4:
                bsr     SingleObjectLoad_2                     ; Offset_0x017F68
                bne.s   Offset_0x015E08
                addq.w  #$08, A3
Offset_0x015DCC:
                move.b  #$04, $0024(A1)
                move.b  D4, $0000(A1)      ; Nova instância do objeto na memória
                move.l  A3, $0004(A1)
                move.b  D5, $0001(A1)
                move.w  $0008(A0), $0008(A1)
                move.w  $000C(A0), $000C(A1)
                move.w  $0002(A0), $0002(A1)
                move.b  $0018(A0), $0018(A1)
                move.b  $0019(A0), $0019(A1)
                move.w  (A4)+, $0010(A1)
                move.w  (A4)+, $0012(A1)
                dbra    D1, Offset_0x015DC4
Offset_0x015E08:
                move.w  #Break_Wall_Sfx, D0     ; $00CB
                jmp     (Play_Sfx)                             ; Offset_0x00132C     
;===============================================================================
; Sub Rotina para destruir objetos
; [ Término ]
;===============================================================================    
Obj_0x30_Data: ; Offset_0x015E12:
                dc.w    $0400, $FB00, $0600, $FF00, $0600, $0100, $0400, $0500
                dc.w    $0600, $FA00, $0800, $FE00, $0800, $0200, $0600, $0600
;-------------------------------------------------------------------------------                
Obj_0x30_Data_1: ; Offset_0x015E32:
                dc.w    $FA00, $FA00, $F800, $FE00, $F800, $0200, $FA00, $0600
                dc.w    $FC00, $FB00, $FA00, $FF00, $FA00, $0100, $FC00, $0500
;-------------------------------------------------------------------------------                
Obj_0x30_Mappings: ; Offset_0x015E52:
                dc.w    Offset_0x015E58-Obj_0x30_Mappings
                dc.w    Offset_0x015E9A-Obj_0x30_Mappings
                dc.w    Offset_0x015EDC-Obj_0x30_Mappings               
Offset_0x015E58:
                dc.w    $0008
                dc.l    $E0050000, $0000FFF0, $F0050000, $0000FFF0
                dc.l    $00050000, $0000FFF0, $10050000, $0000FFF0
                dc.l    $E0050004, $00020000, $F0050004, $00020000
                dc.l    $00050004, $00020000, $10050004, $00020000
Offset_0x015E9A:
                dc.w    $0008
                dc.l    $E0050004, $0002FFF0, $F0050004, $0002FFF0
                dc.l    $00050004, $0002FFF0, $10050004, $0002FFF0
                dc.l    $E0050004, $00020000, $F0050004, $00020000
                dc.l    $00050004, $00020000, $10050004, $00020000
Offset_0x015EDC:
                dc.w    $0008
                dc.l    $E0050004, $0002FFF0, $F0050004, $0002FFF0
                dc.l    $00050004, $0002FFF0, $10050004, $0002FFF0
                dc.l    $E0050008, $00040000, $F0050008, $00040000
                dc.l    $00050008, $00040000, $10050008, $00040000                                
;-------------------------------------------------------------------------------                
; Offset_0x015F1E:                       ; branch não utilizado  
                bra     Obj_Null                               ; Offset_0x016302                
;===============================================================================
; Sub Rotina Load_Objects - Rotina para carregar os objetos na memória
; [ Início ]
;===============================================================================
Load_Objects: ; Offset_0x015F22:
                tst.b   ($FFFFF623).w
                bne.s   Offset_0x015F6A
                lea     ($FFFFB000).w, A0
                moveq   #$7F, D7
                moveq   #$00, D0
                cmpi.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
                beq.s   Offset_0x015F40
                cmpi.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
                bne.s   Loop_Load_Object                       ; Offset_0x015F52
Offset_0x015F40:
                move.w  #$008F, D7
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   Loop_Load_Object                       ; Offset_0x015F52
                cmpi.b  #$06, ($FFFFB024).w
                bcc.s   Offset_0x015F6C
Loop_Load_Object: ; Offset_0x015F52:
                move.b  (A0), D0
                beq.s   Loop_Find_Free_Ram_0                   ; Offset_0x015F62
                add.w   D0, D0
                add.w   D0, D0
                move.l  Object_Array-$04(PC, D0), A1           ; Offset_0x015F8E
                jsr     (A1)
                moveq   #$00, D0
Loop_Find_Free_Ram_0: ; Offset_0x015F62:
                lea     $0040(A0), A0
                dbra    D7, Loop_Load_Object                   ; Offset_0x015F52
Offset_0x015F6A:
                rts
Offset_0x015F6C:
                moveq   #$0F, D7
                bsr.s   Loop_Load_Object                       ; Offset_0x015F52
                moveq   #$6F, D7
                bsr.s   Offset_0x015F78
                moveq   #$0F, D7
                bra.s   Loop_Load_Object                       ; Offset_0x015F52
Offset_0x015F78:
                moveq   #$00, D0
                move.b  (A0), D0
                beq.s   Offset_0x015F88
                tst.b   $0001(A0)
                bpl.s   Offset_0x015F88
                bsr     DisplaySprite                          ; Offset_0x01647A
Offset_0x015F88:
                lea     $0040(A0), A0
                dbra    D7, Offset_0x015F78
                rts             
;-------------------------------------------------------------------------------                
Object_Array: ; Offset_0x015F92:
                dc.l    Obj_0x01_Sonic                   ; $01 - Offset_0x019EBE
                dc.l    Obj_0x02_Miles                   ; $02 - Offset_0x01B81E
                dc.l    Obj_0x03_Layer_Switch            ; $03 - Offset_0x01FC38
                dc.l    Obj_0x04_Water_Surface           ; $04 - Offset_0x020804
                dc.l    Obj_0x05_Miles_Tail              ; $05 - Offset_0x01D18C
                dc.l    Obj_0x06_Spiral_Attributes       ; $06 - Offset_0x0213F6
                dc.l    Obj_0x07_0il_Attributes          ; $07 - Offset_0x023EDA
                dc.l    Obj_0x08_Dust_Water_Splash       ; $08 - Offset_0x01DCB6
                dc.l    Obj_0x09_Sonic_In_Special_Stage  ; $09 - Offset_0x033348
                dc.l    Obj_0x0A_Sonic_Miles_Underwater  ; $0A - Offset_0x01D2AC
                dc.l    Obj_0x0B_Open_Close_Platform     ; $0B - Offset_0x01FFF2
                dc.l    Obj_0x0C_Unknow                  ; $0C - Offset_0x020160
                dc.l    Obj_0x0D_End_Panel               ; $0D - Offset_0x019126
                dc.l    Obj_0x0E_Sonic_Miles_In_Title_Screen ; $0E - Offset_0x012DB0
                dc.l    Obj_0x0F_1Player2Vs_Options      ; $0F - Offset_0x0135A6
                dc.l    Obj_0x10_Miles_In_Special_Stage  ; $10 - Offset_0x034238
                dc.l    Obj_0x11_Bridge                  ; $11 - Offset_0x00F656
                dc.l    Obj_0x12_HPz_Master_Emerald      ; $12 - Offset_0x02025A
                dc.l    Obj_0x13_HPz_Waterfalls          ; $13 - Offset_0x0202DE
                dc.l    Obj_0x14_See_saw                 ; $14 - Offset_0x021854
                dc.l    Obj_0x15_Swing_Platform          ; $15 - Offset_0x00FC76
                dc.l    Obj_0x16_Teleferics              ; $16 - Offset_0x021CCE
                dc.l    Obj_0x17_Unknow                  ; $17 - Offset_0x0102DA
                dc.l    Obj_0x18_Platforms               ; $18 - Offset_0x010474
                dc.l    Obj_0x19_Rotating_Platforms      ; $19 - Offset_0x021F2A
                dc.l    Obj_0x1A_Collapsing_Platforms    ; $1A - Offset_0x010874
                dc.l    Obj_0x1B_Speed_Booster           ; $1B - Offset_0x0221AC
                dc.l    Obj_0x1C_Misc                    ; $1C - Offset_0x011184
                dc.l    Obj_0x1D_Worms                   ; $1D - Offset_0x022300
                dc.l    Obj_0x1E_Tube_Attributes         ; $1E - Offset_0x022488
                dc.l    Obj_0x1F_Collapsing_Platforms    ; $1F - Offset_0x0109C2
                dc.l    Obj_0x20_HTz_Boss_FireBall       ; $20 - Offset_0x022EE0
                dc.l    Obj_0x21_2P_Versus_Results       ; $21 - Offset_0x00803E
                dc.l    Obj_0x22_Arrow_Shooter           ; $22 - Offset_0x0254F6
                dc.l    Obj_0x23_Pillar                  ; $23 - Offset_0x0256E0
                dc.l    Obj_0x24_Oxygen_Bubbles          ; $24 - Offset_0x01F810
                dc.l    Obj_0x25_Rings                   ; $25 - Offset_0x011EE8
                dc.l    Obj_0x26_Monitors                ; $26 - Offset_0x01260A
                dc.l    Obj_0x27_Object_Hit              ; $27 - Offset_0x020FC4
                dc.l    Obj_0x28_Flickies                ; $28 - Offset_0x011836
                dc.l    Obj_0x29_Enemy_Points            ; $29 - Offset_0x011D72
                dc.l    Obj_0x2A_Up_Down_Pillar          ; $2A - Offset_0x011574
                dc.l    Obj_0x2B_Raising_Pillar          ; $2B - Offset_0x0258B8
                dc.l    Obj_0x2C_Leaves                  ; $2C - Offset_0x025F46
                dc.l    Obj_0x2D_Automatic_Door          ; $2D - Offset_0x01164C
                dc.l    Obj_0x2E_Monitors_Contents       ; $2E - Offset_0x0127EE
                dc.l    Obj_0x2F_Breakable_Floor         ; $2F - Offset_0x0231E8
                dc.l    Obj_0x30_Unknow                  ; $30 - Offset_0x0237B2
                dc.l    Obj_0x31_Lava_Attributes         ; $31 - Offset_0x020D20
                dc.l    Obj_0x32_Breakable_Obstacle      ; $32 - Offset_0x02340E
                dc.l    Obj_0x33_Touch_Booster           ; $33 - Offset_0x0239C2
                dc.l    Obj_0x34_Title_Cards             ; $34 - Offset_0x013BE4
                dc.l    Obj_0x35_Invincibility           ; $35 - Offset_0x01D910
                dc.l    Obj_0x36_Spikes                  ; $36 - Offset_0x015888
                dc.l    Obj_0x37_Rings_Lost              ; $37 - Offset_0x01201C
                dc.l    Obj_0x38_Shield                  ; $38 - Offset_0x01D884
                dc.l    Obj_0x39_Time_Over_Game_Over     ; $39 - Offset_0x013F12
                dc.l    Obj_0x3A_Level_Results           ; $3A - Offset_0x014026
                dc.l    Obj_0x3B_Rock                    ; $3B - Offset_0x015C52
                dc.l    Obj_0x3C_Breakable_Wall          ; $3C - Offset_0x015CCC
                dc.l    Obj_0x3D_Break_Boost             ; $3D - Offset_0x024C58
                dc.l    Obj_0x3E_Egg_Prison              ; $3E - Offset_0x03EF50
                dc.l    Obj_0x3F_Fans                    ; $3F - Offset_0x02A42E
                dc.l    Obj_0x40_Diagonal_Springs        ; $40 - Offset_0x02619C
                dc.l    Obj_0x41_Springs                 ; $41 - Offset_0x0187F6
                dc.l    Obj_0x42_Steam_Vent              ; $42 - Offset_0x026454
                dc.l    Obj_0x43_Giant_Spikeball         ; $43 - Offset_0x023D02
                dc.l    Obj_0x44_Red_Ball_Bumper         ; $44 - Offset_0x01F6A8
                dc.l    Obj_0x45_Spring_Push_Boost       ; $45 - Offset_0x023FAA
                dc.l    Obj_0x46_Spring_Ball             ; $46 - Offset_0x0248D0
                dc.l    Obj_0x47_Switch                  ; $47 - Offset_0x024B8C
                dc.l    Obj_0x48_Cannon                  ; $48 - Offset_0x0250B2
                dc.l    Obj_0x49_Waterfall               ; $49 - Offset_0x020ACC
                dc.l    Obj_0x4A_Octus                   ; $4A - Offset_0x02C5F8
                dc.l    Obj_0x4B_Buzzer                  ; $4B - Offset_0x02CC2C
                dc.l    Obj_Null                         ; $4C - Offset_0x016302
                dc.l    Obj_Null                         ; $4D - Offset_0x016302
                dc.l    Obj_Null                         ; $4E - Offset_0x016302
                dc.l    Obj_Null                         ; $4F - Offset_0x016302
                dc.l    Obj_0x50_Aquis                   ; $50 - Offset_0x02C89E
                dc.l    Obj_0x51_CNz_Boss                ; $51 - Offset_0x0313BE
                dc.l    Obj_0x52_HTz_Boss                ; $52 - Offset_0x02F780
                dc.l    Obj_0x53_Mz_Boss_Balls_Robotniks ; $53 - Offset_0x0323FE
                dc.l    Obj_0x54_Mz_Boss                 ; $54 - Offset_0x031D32
                dc.l    Obj_0x55_OOz_Boss                ; $55 - Offset_0x032A1E
                dc.l    Obj_0x56_EHz_Boss                ; $56 - Offset_0x02EA7C
                dc.l    Obj_0x57_MCz_Boss                ; $57 - Offset_0x030A8E
                dc.l    Obj_0x58_Boss_Explosions         ; $58 - Offset_0x02D03A
                dc.l    Obj_0x59_SS_End_Check            ; $59 - Offset_0x035A0A
                dc.l    Obj_0x5A_SS_Check_Point          ; $5A - Offset_0x034FAC
                dc.l    Obj_0x5B_SS_Ring_Out             ; $5B - Offset_0x034E50
                dc.l    Obj_0x5C_Masher                  ; $5C - Offset_0x02CF4C
                dc.l    Obj_0x5D_CPz_Boss                ; $5D - Offset_0x02D2C0
                dc.l    Obj_0x5E_SS_Head_Up_Display      ; $5E - Offset_0x006F62
                dc.l    Obj_0x5F_SS_Flag_START_Flag      ; $5F - Offset_0x007092
                dc.l    Obj_0x60_SS_Rings                ; $60 - Offset_0x0349E8
                dc.l    Obj_0x61_SS_Bomb                 ; $61 - Offset_0x0348F6
                dc.l    Obj_Null                         ; $62 - Offset_0x016302
                dc.l    Obj_0x63_SS_Objects_Shadow       ; $63 - Offset_0x033AFC
                dc.l    Obj_0x64_Pistons                 ; $64 - Offset_0x02672E
                dc.l    Obj_0x65_Platform_Over_Gear      ; $65 - Offset_0x0268E6
                dc.l    Obj_0x66_Springs_Wall            ; $66 - Offset_0x026D4C
                dc.l    Obj_0x67_Teleport_Attributes     ; $67 - Offset_0x026F48
                dc.l    Obj_0x68_Block_Harpon            ; $68 - Offset_0x027376
                dc.l    Obj_0x69_Screw_Nut               ; $69 - Offset_0x027654
                dc.l    Obj_0x6A_MCz_Three_Boxes_Mz_Ptfrm ; $6A - Offset_0x027868
                dc.l    Obj_0x6B_Mz_Platform             ; $6B - Offset_0x027B1A
                dc.l    Obj_0x6C_Mz_Moving_Platforms     ; $6C - Offset_0x027DCE
                dc.l    Obj_0x6D_Harpoon                 ; $6D - Offset_0x027580
                dc.l    Obj_0x6E_Machine                 ; $6E - Offset_0x02812C
                dc.l    Obj_0x6F_Special_Stage_Results   ; $6F - Offset_0x01435E
                dc.l    Obj_0x70_Rotating_Gears          ; $70 - Offset_0x02833A
                dc.l    Obj_0x71_Mz_Hpz_Misc             ; $71 - Offset_0x0112A0
                dc.l    Obj_0x72_Conveyor_Belt_Attributes ; $72 - Offset_0x0286A6
                dc.l    Obj_0x73_Rotating_Rings          ; $73 - Offset_0x028738
                dc.l    Obj_0x74_Invisible_Block         ; $74 - Offset_0x020E16
                dc.l    Obj_0x75_Spikeball_Chain         ; $75 - Offset_0x02891A
                dc.l    Obj_0x76_Platform_Spikes         ; $76 - Offset_0x028B24
                dc.l    Obj_0x77_Bridge                  ; $77 - Offset_0x028CA4
                dc.l    Obj_0x78_Stair_Case_Platforms    ; $78 - Offset_0x028EDC
                dc.l    Obj_0x79_Star_Post               ; $79 - Offset_0x01F044
                dc.l    Obj_0x7A_Platform_Horizontal     ; $7A - Offset_0x0290A0
                dc.l    Obj_0x7B_Spring_Tubes            ; $7B - Offset_0x029280
                dc.l    Obj_0x7C_Metal_Structure         ; $7C - Offset_0x020F0A
                dc.l    Obj_0x7D_Hidden_Bonus            ; $7D - Offset_0x01F5A4
                dc.l    Obj_0x7E_Super_Sonic_Stars       ; $7E - Offset_0x01E084
                dc.l    Obj_0x7F_Vines_Switch            ; $7F - Offset_0x0294C4
                dc.l    Obj_0x80_Vines_Chain_Hook        ; $80 - Offset_0x029654
                dc.l    Obj_0x81_Vertical_Bridge         ; $81 - Offset_0x029CD4
                dc.l    Obj_0x82_Falling_Pillar          ; $82 - Offset_0x029F44
                dc.l    Obj_0x83_Three_Rotating_Platforms ; $83 - Offset_0x02A198
                dc.l    Obj_0x84_Auto_Spin               ; $84 - Offset_0x02109E
                dc.l    Obj_0x85_CNz_Pinball_Spring      ; $85 - Offset_0x02A7FA
                dc.l    Obj_0x86_CNz_Flippers            ; $86 - Offset_0x02ADA8
                dc.l    Obj_0x87_SS_Ring_Count_Display   ; $87 - Offset_0x007306
                dc.l    Obj_0x88_Miles_Tail_In_SS        ; $88 - Offset_0x0344A8
                dc.l    Obj_0x89_ARz_Boss                ; $89 - Offset_0x02FF92
                dc.l    Obj_0x8A_S1_Credits              ; $8A - Offset_0x03E83A
                dc.l    Obj_0x8B_Palette_Cycling_Switch  ; $8B - Offset_0x0212D6
                dc.l    Obj_0x8C_ARz_Whisp               ; $8C - Offset_0x03634A
                dc.l    Obj_0x8D_Hidden_Grounder         ; $8D - Offset_0x03649C
                dc.l    Obj_0x8E_Grounder                ; $8E - Offset_0x03649C
                dc.l    Obj_0x8F_Wall_Hidden_Grounder    ; $8F - Offset_0x0365C4
                dc.l    Obj_0x90_Rock_Hidden_Grounder    ; $90 - Offset_0x036614
                dc.l    Obj_0x91_Chop_Chop               ; $91 - Offset_0x0367F6
                dc.l    Obj_0x92_Spiker                  ; $92 - Offset_0x036966
                dc.l    Obj_0x93_Spiker_Drill            ; $93 - Offset_0x036A50
                dc.l    Obj_0x94_Rexon_Body              ; $94 - Offset_0x036DAC
                dc.l    Obj_0x95_Sol                     ; $95 - Offset_0x036B6C
                dc.l    Obj_0x96_Rexon_Body              ; $96 - Offset_0x036DAC
                dc.l    Obj_0x97_Rexon_Head              ; $97 - Offset_0x036E66
                dc.l    Obj_0x98_Enemies_Weapons         ; $98 - Offset_0x037190
                dc.l    Obj_0x99_Nebula                  ; $99 - Offset_0x037286
                dc.l    Obj_0x9A_Turtloid                ; $9A - Offset_0x0373FC
                dc.l    Obj_0x9B_Turtloid_Rider          ; $9B - Offset_0x0374D0
                dc.l    Obj_0x9C_Enemy_Boost             ; $9C - Offset_0x03754E
                dc.l    Obj_0x9D_Coconuts                ; $9D - Offset_0x0376CE
                dc.l    Obj_0x9E_Crawlton                ; $9E - Offset_0x0378FE
                dc.l    Obj_0x9F_Shellcracker            ; $9F - Offset_0x037B08
                dc.l    Obj_0xA0_Shellcracker_Craw       ; $A0 - Offset_0x037C68
                dc.l    Obj_0xA1_Slicer                  ; $A1 - Offset_0x037ECC
                dc.l    Obj_0xA2_Slicer_Pincers          ; $A2 - Offset_0x037FCE
                dc.l    Obj_0xA3_Flasher                 ; $A3 - Offset_0x03827A
                dc.l    Obj_0xA4_Asteron                 ; $A4 - Offset_0x0384F4
                dc.l    Obj_0xA5_Horizontal_Spiny        ; $A5 - Offset_0x038650
                dc.l    Obj_0xA6_Vertical_Spiny          ; $A6 - Offset_0x0386F8
                dc.l    Obj_0xA7_Grabber                 ; $A7 - Offset_0x038940
                dc.l    Obj_0xA8_Grabber_Sub             ; $A8 - Offset_0x038AF0
                dc.l    Obj_0xA9_Grabber_Sub             ; $A9 - Offset_0x038BC4
                dc.l    Obj_0xAA_Grabber_Sub             ; $AA - Offset_0x038BFA
                dc.l    Obj_0xAB_Grabber_Sub             ; $AB - Offset_0x038C38
                dc.l    Obj_0xAC_Balkiry                 ; $AC - Offset_0x038F18
                dc.l    Obj_0xAD_Clucker_Platform        ; $AD - Offset_0x038FBE
                dc.l    Obj_0xAE_Clucker                 ; $AE - Offset_0x038FF8
                dc.l    Obj_0xAF_Metal_Sonic             ; $AF - Offset_0x0392EE
                dc.l    Obj_0xB0_SegaScreen              ; $B0 - Offset_0x039DE6
                dc.l    Obj_0xB1_Sonic_In_SegaScreen     ; $B1 - Offset_0x03A00E
                dc.l    Obj_0xB2_Tornado                 ; $B2 - Offset_0x03A3A8
                dc.l    Obj_0xB3_Clouds                  ; $B3 - Offset_0x03AF30
                dc.l    Obj_0xB4_Vertical_Helix          ; $B4 - Offset_0x03AFBE
                dc.l    Obj_0xB5_Horizontal_Helix        ; $B5 - Offset_0x03B054
                dc.l    Obj_0xB6_Platform_Helix          ; $B6 - Offset_0x03B232
                dc.l    Obj_0xB7_Vertical_Large_Laser    ; $B7 - Offset_0x03B51E
                dc.l    Obj_0xB8_Cannon                  ; $B8 - Offset_0x03B5E2
                dc.l    Obj_0xB9_Laser                   ; $B9 - Offset_0x03B73E
                dc.l    Obj_0xBA_Conveyor_Belt_Wheels    ; $BA - Offset_0x03B7D6
                dc.l    Obj_0xBB                         ; $BB - Offset_0x03B808
                dc.l    Obj_0xBC_Rocket_Boost            ; $BC - Offset_0x03B84A
                dc.l    Obj_0xBD_WFz_Elevators           ; $BD - Offset_0x03B8AC
                dc.l    Obj_0xBE_Hatchways               ; $BE - Offset_0x03BA18
                dc.l    Obj_0xBF_Engine_Part             ; $BF - Offset_0x03BB58
                dc.l    Obj_0xC0_Speed_Booster           ; $C0 - Offset_0x03BBB6
                dc.l    Obj_0xC1_WFz_Breakable_Wall      ; $C1 - Offset_0x03BD66
                dc.l    Obj_0xC2_WFz_Boss_Access_Switch  ; $C2 - Offset_0x03BFEA
                dc.l    Obj_0xC3_WFz_Tornado_Smoke       ; $C3 - Offset_0x03C09E
                dc.l    Obj_0xC4_WFz_Tornado_Smoke       ; $C4 - Offset_0x03C09E
                dc.l    Obj_0xC5_WFz_Boss                ; $C5 - Offset_0x03C110
                dc.l    Obj_0xC6_Robotnik_Running        ; $C6 - Offset_0x03CC22
                dc.l    Obj_0xC7_DEz_Final_Boss          ; $C7 - Offset_0x03D252
                dc.l    Obj_0xC8_Crawl                   ; $C8 - Offset_0x03CFB4
                dc.l    Obj_0xC9_TitleScreen_Pal_Changer ; $C9 - Offset_0x01328E
                dc.l    Obj_0xCA_Ending_Movie            ; $CA - Offset_0x00A18A
                dc.l    Obj_0xCB_Clouds_In_Ending        ; $CB - Offset_0x00A9CC
                dc.l    Obj_0xCC_Tornado_In_Ending       ; $CC - Offset_0x00A382
                dc.l    Obj_0xCD_Flickies_In_Ending      ; $CD - Offset_0x00AA90
                dc.l    Obj_0xCE_Sonic_Miles_In_Ending   ; $CE - Offset_0x00A860
                dc.l    Obj_0xCF_Tornado_Helix_In_Ending ; $CF - Offset_0x00A95E
                dc.l    Obj_Null                         ; $D0 - Offset_0x016302
                dc.l    Obj_Null                         ; $D1 - Offset_0x016302
                dc.l    Obj_0xD2_Green_Platform          ; $D2 - Offset_0x02B17E
                dc.l    Obj_0xD3_CNz_Spikeball           ; $D3 - Offset_0x02B490
                dc.l    Obj_0xD4_CNz_Box                 ; $D4 - Offset_0x02B52C
                dc.l    Obj_0xD5_CNz_Elevator            ; $D5 - Offset_0x02B636
                dc.l    Obj_0xD6_CNz_Slot_Machine_Bonus  ; $D6 - Offset_0x02B78A
                dc.l    Obj_0xD7_CNz_Blue_Bumper         ; $D7 - Offset_0x02C04E
                dc.l    Obj_0xD8_CNz_Green_Bumper        ; $D8 - Offset_0x02C2A4
                dc.l    Obj_0xD9_WFz_Hang_Attributes     ; $D9 - Offset_0x02C518
                dc.l    Obj_0xDA_Continue_Counter        ; $DA - Offset_0x0079E6
                dc.l    Obj_0xDB_Sonic_Miles_Continue    ; $DB - Offset_0x007B06
                dc.l    Obj_0xDC_Slot_Machine_Ring       ; $DC - Offset_0x01258C  
;===============================================================================
; Sub Rotina Load_Objects - Rotina para carregar os objetos na memória
; [ Término ]
;===============================================================================     
Obj_Null: ; Offset_0x016302:
                bra     DeleteObject                           ; Offset_0x01646C   
           
;===============================================================================
; Sub Rotina ObjectFall
; [ Início ]
;===============================================================================
ObjectFall: ; Offset_0x016306:
                move.l  $0008(A0), D2
                move.l  $000C(A0), D3
                move.w  $0010(A0), D0
                ext.l   D0
                asl.l   #$08, D0
                add.l   D0, D2
                move.w  $0012(A0), D0
                addi.w  #$0038, $0012(A0)
                ext.l   D0
                asl.l   #$08, D0
                add.l   D0, D3
                move.l  D2, $0008(A0)
                move.l  D3, $000C(A0)
                rts
;===============================================================================
; Sub Rotina ObjectFall
; [ Término ]
;===============================================================================           
           
;===============================================================================
; Sub Rotina SpeedToPos
; [ Início ]
;===============================================================================
SpeedToPos: ; Offset_0x016332:
                move.l  $0008(A0), D2
                move.l  $000C(A0), D3
                move.w  $0010(A0), D0
                ext.l   D0
                asl.l   #$08, D0
                add.l   D0, D2
                move.w  $0012(A0), D0
                ext.l   D0
                asl.l   #$08, D0
                add.l   D0, D3
                move.l  D2, $0008(A0)
                move.l  D3, $000C(A0)
                rts                
;===============================================================================
; Sub Rotina SpeedToPos
; [ Término ]
;===============================================================================

;===============================================================================
; Sub Rotina MarkObjGone
; [ Início ]
;===============================================================================
MarkObjGone: ; Offset_0x016358:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x016362
                bra     DisplaySprite                          ; Offset_0x01647A
Offset_0x016362:
                move.w  $0008(A0), D0
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi     Offset_0x01637A
                bra     DisplaySprite                          ; Offset_0x01647A
Offset_0x01637A:
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D0
                move.b  $0023(A0), D0
                beq.s   Offset_0x01638C
                bclr    #$07, $02(A2, D0)
Offset_0x01638C:
                bra     DeleteObject                           ; Offset_0x01646C
;===============================================================================
; Sub Rotina MarkObjGone
; [ Término ]
;===============================================================================                 
                
;===============================================================================
; Sub Rotina MarkObjGone_2
; [ Início ]
;===============================================================================
MarkObjGone_2: ; Offset_0x016390:                
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x01639A
                bra     DisplaySprite                          ; Offset_0x01647A
Offset_0x01639A:
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi     Offset_0x0163AE
                bra     DisplaySprite                          ; Offset_0x01647A
Offset_0x0163AE:
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D0
                move.b  $0023(A0), D0
                beq.s   Offset_0x0163C0
                bclr    #$07, $02(A2, D0)
Offset_0x0163C0:
                bra     DeleteObject                           ; Offset_0x01646C
;===============================================================================
; Sub Rotina MarkObjGone_2
; [ Término ]
;===============================================================================  

;===============================================================================
; Sub Rotina MarkObjGone_3
; [ Início ]
;===============================================================================
MarkObjGone_3: ; Offset_0x0163C4:                
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x0163CC
                rts
Offset_0x0163CC:
                move.w  $0008(A0), D0
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi     Offset_0x0163E2
                rts
Offset_0x0163E2:
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D0
                move.b  $0023(A0), D0
                beq.s   Offset_0x0163F4
                bclr    #$07, $02(A2, D0)
Offset_0x0163F4:
                bra     DeleteObject                           ; Offset_0x01646C
;===============================================================================
; Sub Rotina MarkObjGone_3
; [ Término ]
;===============================================================================                                
 
;===============================================================================
; Sub Rotina MarkObjGone_4
; [ Início ]
;===============================================================================
MarkObjGone_4: ; Offset_0x0163F8:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   MarkObjGone_4_2P                       ; Offset_0x01642C
                move.w  $0008(A0), D0
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi     Offset_0x016416
                bra     DisplaySprite                          ; Offset_0x01647A
Offset_0x016416:
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D0
                move.b  $0023(A0), D0
                beq.s   Offset_0x016428
                bclr    #$07, $02(A2, D0)
Offset_0x016428:
                bra     DeleteObject                           ; Offset_0x01646C
;===============================================================================
; Sub Rotina MarkObjGone_4
; [ Término ]
;=============================================================================== 

;===============================================================================
; Sub Rotina MarkObjGone_4_2P   
; [ Início ]
;===============================================================================                 
MarkObjGone_4_2P: ; Offset_0x01642C:
                move.w  $0008(A0), D0
                andi.w  #$FF00, D0
                move.w  D0, D1
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0300, D0
                bhi     Offset_0x016446
                bra     DisplaySprite                          ; Offset_0x01647A
Offset_0x016446:
                sub.w   ($FFFFF7DC).w, D1
                cmpi.w  #$0300, D1
                bhi     Offset_0x016456
                bra     DisplaySprite                          ; Offset_0x01647A
Offset_0x016456:
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D0
                move.b  $0023(A0), D0
                beq.s   Offset_0x016468
                bclr    #$07, $02(A2, D0)
Offset_0x016468:
                bra     DeleteObject                           ; Offset_0x01646C
;===============================================================================
; Sub Rotina MarkObjGone_4_2P
; [ Término ]
;===============================================================================  
                
;=============================================================================== 
; Sub Rotina para liberar a memória utilizada pelo Objeto em A0 ou A1
; [ Início ]                         
;===============================================================================                 
DeleteObject: ; Offset_0x01646C:
                move.l  A0, A1
Delete_A1_Object: ; Offset_0x01646E:
                moveq   #$00, D1
                moveq   #$0F, D0
DeleteObject_FreeRam: ; Offset_0x016472:
                move.l  D1, (A1)+
                dbra    D0, DeleteObject_FreeRam               ; Offset_0x016472
                rts
;=============================================================================== 
; Sub Rotina para liberar a memória utilizada pelo Objeto em A0 ou A1
; [ Término ]                         
;===============================================================================  
                
;===============================================================================
; Sub Rotina DisplaySprite
; [ Início ]
;===============================================================================
DisplaySprite: ; Offset_0x01647A:
                lea     ($FFFFAC00).w, A1
                move.w  $0018(A0), D0
                lsr.w   #$01, D0
                andi.w  #$0380, D0
                adda.w  D0, A1
                cmpi.w  #$007E, (A1)
                bcc.s   Exit_DisplaySprite                     ; Offset_0x016496
                addq.w  #$02, (A1)
                adda.w  (A1), A1
                move.w  A0, (A1)
Exit_DisplaySprite: ; Offset_0x016496:
                rts    
;===============================================================================
; Sub Rotina DisplaySprite
; [ Término ]
;===============================================================================  

;===============================================================================
; Sub Rotina Display_A1_Sprite
; [ Início ]
;===============================================================================  
Display_A1_Sprite: ; Offset_0x016498:
                lea     ($FFFFAC00).w, A2
                move.w  $0018(A1), D0
                lsr.w   #$01, D0
                andi.w  #$0380, D0
                adda.w  D0, A2
                cmpi.w  #$007E, (A2)
                bcc.s   Exit_Display_A1_Sprite                 ; Offset_0x0164B4
                addq.w  #$02, (A2)
                adda.w  (A2), A2
                move.w  A1, (A2)
Exit_Display_A1_Sprite: ; Offset_0x0164B4:
                rts 
;===============================================================================
; Sub Rotina Display_A1_Sprite
; [ Término ]
;===============================================================================  
            
;===============================================================================
; Sub Rotina DisplaySprite_Param
; [ Início ]
;===============================================================================
DisplaySprite_Param: ; Offset_0x0164B6:
                lea     ($FFFFAC00).w, A1
                adda.w  D0, A1
                cmpi.w  #$007E, (A1)
                bcc.s   Exit_DisplaySprite_Param               ; Offset_0x0164C8
                addq.w  #$02, (A1)
                adda.w  (A1), A1
                move.w  A0, (A1)
Exit_DisplaySprite_Param: ; Offset_0x0164C8:
                rts              
;===============================================================================
; Sub Rotina DisplaySprite_Param
; [ Término ]
;===============================================================================
               
;===============================================================================
; Sub Routina AnimateSprite - Usada para animar os objetos
; [ Início ]
;===============================================================================
AnimateSprite: ; Offset_0x0164CA:
                moveq   #$00, D0
                move.b  $001C(A0), D0
                cmp.b   $001D(A0), D0
                beq.s   Offset_0x0164E6
                move.b  D0, $001D(A0)
                move.b  #$00, $001B(A0)
                move.b  #$00, $001E(A0)
Offset_0x0164E6:
                subq.b  #$01, $001E(A0)
                bpl.s   Offset_0x016520
                add.w   D0, D0
                adda.w  $00(A1, D0), A1
                move.b  (A1), $001E(A0)
                moveq   #$00, D1
                move.b  $001B(A0), D1
                move.b  $01(A1, D1), D0
                bmi.s   Offset_0x016522
Offset_0x016502:                
                andi.b  #$7F, D0
                move.b  D0, $001A(A0)
                move.b  $0022(A0), D1
                andi.b  #$03, D1
                andi.b  #$FC, $0001(A0)
                or.b    D1, $0001(A0)
                addq.b  #$01, $001B(A0)
Offset_0x016520:
                rts
Offset_0x016522:
                addq.b  #$01, D0
                bne.s   Offset_0x016532
                move.b  #$00, $001B(A0)
                move.b  $0001(A1), D0
                bra.s   Offset_0x016502
Offset_0x016532:
                addq.b  #$01, D0
                bne.s   Offset_0x016546
                move.b  $02(A1, D1), D0
                sub.b   D0, $001B(A0)
                sub.b   D0, D1
                move.b  $01(A1, D1), D0
                bra.s   Offset_0x016502
Offset_0x016546:
                addq.b  #$01, D0
                bne.s   Offset_0x016552
                move.b  $02(A1, D1), $001C(A0)
                rts
Offset_0x016552:
                addq.b  #$01, D0
                bne.s   Offset_0x016566
                addq.b  #$02, $0024(A0)
                move.b  #$00, $001E(A0)
                addq.b  #$01, $001B(A0)
                rts
Offset_0x016566:
                addq.b  #$01, D0
                bne.s   Offset_0x016576
                move.b  #$00, $001B(A0)
                clr.b   $0025(A0)
                rts
Offset_0x016576:
                addq.b  #$01, D0
                bne.s   Offset_0x016580
                addq.b  #$02, $0025(A0)
                rts
Offset_0x016580:
                addq.b  #$01, D0
                bne.s   Offset_0x016588
                addq.b  #$02, $002A(A0)
Offset_0x016588:
                rts
;===============================================================================
; Sub Routina AnimateSprite - Usada para animar os objetos
; [ Término ]
;===============================================================================               
               
               
;===============================================================================
; Sub Rotina Build_Sprites
; [ Início ]
;===============================================================================
Build_Sprites: ; Offset_0x01658A:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne     Build_Sprites_2P                       ; Offset_0x0168D6
                lea     ($FFFFF800).w, A2
                moveq   #$00, D5
                moveq   #$00, D4
                tst.b   ($FFFFF711).w
                beq.s   Offset_0x0165AA
                jsr     (Build_HUD)                            ; Offset_0x04054A
                bsr     Build_Rings                            ; Offset_0x0170EC
Offset_0x0165AA:
                lea     ($FFFFAC00).w, A4
                moveq   #$07, D7
Offset_0x0165B0:
                tst.w   (A4)
                beq     Offset_0x016682
                moveq   #$02, D6
Offset_0x0165B8:
                move.w  $00(A4, D6), A0
                tst.b   (A0)
                beq     Offset_0x01667A
                andi.b  #$7F, $0001(A0)
                move.b  $0001(A0), D0
                move.b  D0, D4
                btst    #$06, D0
                bne     Offset_0x0166A4
                andi.w  #$000C, D0
                beq.s   Offset_0x01662E
                lea     ($FFFFEEF0).w, A1
                moveq   #$00, D0
                move.b  $0019(A0), D0
                move.w  $0008(A0), D3
                sub.w   (A1), D3
                move.w  D3, D1
                add.w   D0, D1
                bmi     Offset_0x01667A
                move.w  D3, D1
                sub.w   D0, D1
                cmpi.w  #$0140, D1
                bge     Offset_0x01667A
                addi.w  #$0080, D3
                btst    #$04, D4
                beq.s   Offset_0x016638
                moveq   #$00, D0
                move.b  $0016(A0), D0
                move.w  $000C(A0), D2
                sub.w   $0004(A1), D2
                move.w  D2, D1
                add.w   D0, D1
                bmi.s   Offset_0x01667A
                move.w  D2, D1
                sub.w   D0, D1
                cmpi.w  #$00E0, D1
                bge.s   Offset_0x01667A
                addi.w  #$0080, D2
                bra.s   Offset_0x016654
Offset_0x01662E:
                move.w  $000A(A0), D2
                move.w  $0008(A0), D3
                bra.s   Offset_0x016654
Offset_0x016638:
                move.w  $000C(A0), D2
                sub.w   $0004(A1), D2
                addi.w  #$0080, D2
                andi.w  #$07FF, D2
                cmpi.w  #$0060, D2
                bcs.s   Offset_0x01667A
                cmpi.w  #$0180, D2
                bcc.s   Offset_0x01667A
Offset_0x016654:
                move.l  $0004(A0), A1
                moveq   #$00, D1
                btst    #$05, D4
                bne.s   Offset_0x016670
                move.b  $001A(A0), D1
                add.w   D1, D1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x016674
Offset_0x016670:
                bsr     Offset_0x01679A
Offset_0x016674:
                ori.b   #$80, $0001(A0)
Offset_0x01667A:
                addq.w  #$02, D6
                subq.w  #$02, (A4)
                bne     Offset_0x0165B8
Offset_0x016682:
                lea     $0080(A4), A4
                dbra    D7, Offset_0x0165B0
                move.b  D5, ($FFFFF62C).w
                cmpi.b  #$50, D5
                beq.s   Offset_0x01669C
                move.l  #$00000000, (A2)
                rts
Offset_0x01669C:
                move.b  #$00, $FFFB(A2)
                rts
Offset_0x0166A4:
                move.l  A4, -(A7)
                lea     ($FFFFEE00).w, A4
                move.w  $0002(A0), A3
                move.l  $0004(A0), A5
                moveq   #$00, D0
                move.b  $000E(A0), D0
                move.w  $0008(A0), D3
                sub.w   (A4), D3
                move.w  D3, D1
                add.w   D0, D1
                bmi     Offset_0x01678C
                move.w  D3, D1
                sub.w   D0, D1
                cmpi.w  #$0140, D1
                bge     Offset_0x01678C
                addi.w  #$0080, D3
                btst    #$04, D4
                beq.s   Offset_0x016704
                moveq   #$00, D0
                move.b  $0014(A0), D0
                move.w  $000C(A0), D2
                sub.w   $0004(A4), D2
                move.w  D2, D1
                add.w   D0, D1
                bmi     Offset_0x01678C
                move.w  D2, D1
                sub.w   D0, D1
                cmpi.w  #$00E0, D1
                bge     Offset_0x01678C
                addi.w  #$0080, D2
                bra.s   Offset_0x016720
Offset_0x016704:
                move.w  $000C(A0), D2
                sub.w   $0004(A4), D2
                addi.w  #$0080, D2
                andi.w  #$07FF, D2
                cmpi.w  #$0060, D2
                bcs.s   Offset_0x01678C
                cmpi.w  #$0180, D2
                bcc.s   Offset_0x01678C
Offset_0x016720:
                moveq   #$00, D1
                move.b  $000B(A0), D1
                beq.s   Offset_0x01673E
                add.w   D1, D1
                move.l  A5, A1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x01673E
                move.w  D4, -(A7)
                bsr     Offset_0x016792
                move.w  (A7)+, D4
Offset_0x01673E:
                ori.b   #$80, $0001(A0)
                lea     $0010(A0), A6
                moveq   #$00, D0
                move.b  $000F(A0), D0
                subq.w  #$01, D0
                bcs.s   Offset_0x01678C
Offset_0x016752:
                swap.w  D0
                move.w  (A6)+, D3
                sub.w   (A4), D3
                addi.w  #$0080, D3
                move.w  (A6)+, D2
                sub.w   $0004(A4), D2
                addi.w  #$0080, D2
                andi.w  #$07FF, D2
                addq.w  #$01, A6
                moveq   #$00, D1
                move.b  (A6)+, D1
                add.w   D1, D1
                move.l  A5, A1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x016786
                move.w  D4, -(A7)
                bsr     Offset_0x016792
                move.w  (A7)+, D4
Offset_0x016786:
                swap.w  D0
                dbra    D0, Offset_0x016752
Offset_0x01678C:
                move.l  (A7)+, A4
                bra     Offset_0x01667A
Offset_0x016792:
                cmpi.b  #$50, D5
                bcs.s   Offset_0x0167A4
                rts
Offset_0x01679A:
                move.w  $0002(A0), A3
                cmpi.b  #$50, D5
                bcc.s   Offset_0x0167DA
Offset_0x0167A4:
                btst    #$00, D4
                bne.s   Offset_0x0167DC
                btst    #$01, D4
                bne     Offset_0x01683C
Offset_0x0167B2:
                move.b  (A1)+, D0
                ext.w   D0
                add.w   D2, D0
                move.w  D0, (A2)+
                move.b  (A1)+, (A2)+
                addq.b  #$01, D5
                move.b  D5, (A2)+
                move.w  (A1)+, D0
                add.w   A3, D0
                move.w  D0, (A2)+
                addq.w  #$02, A1
                move.w  (A1)+, D0
                add.w   D3, D0
                andi.w  #$01FF, D0
                bne.s   Offset_0x0167D4
                addq.w  #$01, D0
Offset_0x0167D4:
                move.w  D0, (A2)+
                dbra    D1, Offset_0x0167B2
Offset_0x0167DA:
                rts
Offset_0x0167DC:
                btst    #$01, D4
                bne     Offset_0x016884
Offset_0x0167E4:
                move.b  (A1)+, D0
                ext.w   D0
                add.w   D2, D0
                move.w  D0, (A2)+
                move.b  (A1)+, D4
                move.b  D4, (A2)+
                addq.b  #$01, D5
                move.b  D5, (A2)+
                move.w  (A1)+, D0
                add.w   A3, D0
                eori.w  #$0800, D0
                move.w  D0, (A2)+
                addq.w  #$02, A1
                move.w  (A1)+, D0
                neg.w   D0
                move.b  Offset_0x01681C(PC, D4), D4
                sub.w   D4, D0
                add.w   D3, D0
                andi.w  #$01FF, D0
                bne.s   Offset_0x016814
                addq.w  #$01, D0
Offset_0x016814:
                move.w  D0, (A2)+
                dbra    D1, Offset_0x0167E4
                rts
Offset_0x01681C:
                dc.b    $08, $08, $08, $08, $10, $10, $10, $10, $18, $18, $18, $18, $20, $20, $20, $20
Offset_0x01682C:
                dc.b    $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20
Offset_0x01683C:   
                move.b  (A1)+, D0
                move.b  (A1), D4
                ext.w   D0
                neg.w   D0
                move.b  Offset_0x01682C(PC, D4), D4
                sub.w   D4, D0
                add.w   D2, D0
                move.w  D0, (A2)+
                move.b  (A1)+, (A2)+
                addq.b  #$01, D5
                move.b  D5, (A2)+
                move.w  (A1)+, D0
                add.w   A3, D0
                eori.w  #$1000, D0
                move.w  D0, (A2)+
                addq.w  #$02, A1
                move.w  (A1)+, D0
                add.w   D3, D0
                andi.w  #$01FF, D0
                bne.s   Offset_0x01686C
                addq.w  #$01, D0
Offset_0x01686C:
                move.w  D0, (A2)+
                dbra    D1, Offset_0x01683C
                rts 
Offset_0x016874:
                dc.b    $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20
Offset_0x016884:
                move.b  (A1)+, D0
                move.b  (A1), D4
                ext.w   D0
                neg.w   D0
                move.b  Offset_0x016874(PC, D4), D4
                sub.w   D4, D0
                add.w   D2, D0
                move.w  D0, (A2)+
                move.b  (A1)+, D4
                move.b  D4, (A2)+
                addq.b  #$01, D5
                move.b  D5, (A2)+
                move.w  (A1)+, D0
                add.w   A3, D0
                eori.w  #$1800, D0
                move.w  D0, (A2)+
                addq.w  #$02, A1
                move.w  (A1)+, D0
                neg.w   D0
                move.b  Offset_0x0168C6(PC, D4), D4
                sub.w   D4, D0
                add.w   D3, D0
                andi.w  #$01FF, D0
                bne.s   Offset_0x0168BE
                addq.w  #$01, D0
Offset_0x0168BE:
                move.w  D0, (A2)+
                dbra    D1, Offset_0x016884
                rts  
Offset_0x0168C6:
                dc.b    $08, $08, $08, $08, $10, $10, $10, $10, $18, $18, $18, $18, $20, $20, $20, $20                                 
;===============================================================================
; Sub Rotina Build_Sprites
; [ Término ]
;===============================================================================
 
;===============================================================================
; Sub Rotina Build_Sprite_2P
; [ Início ]
;===============================================================================
Build_Sprites_2P: ; Offset_0x0168D6:  
                lea     ($FFFFF800).w, A2
                moveq   #$02, D5
                moveq   #$00, D4
                move.l  #$01D80F01, (A2)+
                move.l  #$00000001, (A2)+
                move.l  #$01D80F02, (A2)+
                move.l  #$00000000, (A2)+
                tst.b   ($FFFFF711).w
                beq.s   Offset_0x016906
                jsr     (Build_HUD_2P)                         ; Offset_0x0405A2
                bsr     Build_Rings_2P                         ; Offset_0x01716A
Offset_0x016906:
                lea     ($FFFFAC00).w, A4
                moveq   #$07, D7
Offset_0x01690C:
                move.w  (A4), D0
                beq     Offset_0x0169E4
                move.w  D0, -(A7)
                moveq   #$02, D6
Offset_0x016916:
                move.w  $00(A4, D6), A0
                tst.b   (A0)
                beq     Offset_0x0169DA
                andi.b  #$7F, $0001(A0)
                move.b  $0001(A0), D0
                move.b  D0, D4
                btst    #$06, D0
                bne     Offset_0x016B26
                andi.w  #$000C, D0
                beq.s   Offset_0x01698A
                lea     ($FFFFEE00).w, A1
                moveq   #$00, D0
                move.b  $0019(A0), D0
                move.w  $0008(A0), D3
                sub.w   (A1), D3
                move.w  D3, D1
                add.w   D0, D1
                bmi     Offset_0x0169DA
                move.w  D3, D1
                sub.w   D0, D1
                cmpi.w  #$0140, D1
                bge.s   Offset_0x0169DA
                addi.w  #$0080, D3
                btst    #$04, D4
                beq.s   Offset_0x016998
                moveq   #$00, D0
                move.b  $0016(A0), D0
                move.w  $000C(A0), D2
                sub.w   $0004(A1), D2
                move.w  D2, D1
                add.w   D0, D1
                bmi.s   Offset_0x0169DA
                move.w  D2, D1
                sub.w   D0, D1
                cmpi.w  #$00E0, D1
                bge.s   Offset_0x0169DA
                addi.w  #$0100, D2
                bra.s   Offset_0x0169B4
Offset_0x01698A:
                move.w  $000A(A0), D2
                move.w  $0008(A0), D3
                addi.w  #$0080, D2
                bra.s   Offset_0x0169B4
Offset_0x016998:
                move.w  $000C(A0), D2
                sub.w   $0004(A1), D2
                addi.w  #$0080, D2
                cmpi.w  #$0060, D2
                bcs.s   Offset_0x0169DA
                cmpi.w  #$0180, D2
                bcc.s   Offset_0x0169DA
                addi.w  #$0080, D2
Offset_0x0169B4:
                move.l  $0004(A0), A1
                moveq   #$00, D1
                btst    #$05, D4
                bne.s   Offset_0x0169D0
                move.b  $001A(A0), D1
                add.w   D1, D1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x0169D4
Offset_0x0169D0:
                bsr     Build_Sprites_2P_Sub_01                ; Offset_0x016D3A
Offset_0x0169D4:
                ori.b   #$80, $0001(A0)
Offset_0x0169DA:
                addq.w  #$02, D6
                subq.w  #$02, (A7)
                bne     Offset_0x016916
                addq.w  #$02, A7
Offset_0x0169E4:
                lea     $0080(A4), A4
                dbra    D7, Offset_0x01690C
                move.b  D5, ($FFFFF62C).w
                cmpi.b  #$50, D5
                bcc.s   Offset_0x0169FE
                move.l  #$00000000, (A2)
                bra.s   Offset_0x016A04
Offset_0x0169FE:
                move.b  #$00, $FFFB(A2)
Offset_0x016A04:
                tst.w   ($FFFFF644).w
                bne.s   Offset_0x016A04
                lea     ($FFFFDD00).w, A2
                moveq   #$00, D5
                moveq   #$00, D4
                tst.b   ($FFFFF711).w
                beq.s   Offset_0x016A22
                jsr     (Build_HUD_2P_Miles)                   ; Offset_0x040718
                bsr     Build_Rings_2P_Miles                   ; Offset_0x017180
Offset_0x016A22:
                lea     ($FFFFAC00).w, A4
                moveq   #$07, D7
Offset_0x016A28:
                move.w  (A4), D0
                beq     Offset_0x016B04
                move.w  D0, -(A7)
                moveq   #$02, D6
Offset_0x016A32:
                move.w  $00(A4, D6), A0
                tst.b   (A0)
                beq     Offset_0x016AF0
                move.b  $0001(A0), D0
                move.b  D0, D4
                btst    #$06, D0
                bne     Offset_0x016C10
                andi.w  #$000C, D0
                beq.s   Offset_0x016AA0
                lea     ($FFFFEE20).w, A1
                moveq   #$00, D0
                move.b  $0019(A0), D0
                move.w  $0008(A0), D3
                sub.w   (A1), D3
                move.w  D3, D1
                add.w   D0, D1
                bmi     Offset_0x016AF0
                move.w  D3, D1
                sub.w   D0, D1
                cmpi.w  #$0140, D1
                bge.s   Offset_0x016AF0
                addi.w  #$0080, D3
                btst    #$04, D4
                beq.s   Offset_0x016AAE
                moveq   #$00, D0
                move.b  $0016(A0), D0
                move.w  $000C(A0), D2
                sub.w   $0004(A1), D2
                move.w  D2, D1
                add.w   D0, D1
                bmi.s   Offset_0x016AF0
                move.w  D2, D1
                sub.w   D0, D1
                cmpi.w  #$00E0, D1
                bge.s   Offset_0x016AF0
                addi.w  #$01E0, D2
                bra.s   Offset_0x016ACA
Offset_0x016AA0:
                move.w  $000A(A0), D2
                move.w  $0008(A0), D3
                addi.w  #$0160, D2
                bra.s   Offset_0x016ACA
Offset_0x016AAE:
                move.w  $000C(A0), D2
                sub.w   $0004(A1), D2
                addi.w  #$0080, D2
                cmpi.w  #$0060, D2
                bcs.s   Offset_0x016AF0
                cmpi.w  #$0180, D2
                bcc.s   Offset_0x016AF0
                addi.w  #$0160, D2
Offset_0x016ACA:
                move.l  $0004(A0), A1
                moveq   #$00, D1
                btst    #$05, D4
                bne.s   Offset_0x016AE6
                move.b  $001A(A0), D1
                add.w   D1, D1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x016AEA
Offset_0x016AE6:
                bsr     Build_Sprites_2P_Sub_01                ; Offset_0x016D3A
Offset_0x016AEA:
                ori.b   #$80, $0001(A0)
Offset_0x016AF0:
                addq.w  #$02, D6
                subq.w  #$02, (A7)
                bne     Offset_0x016A32
                addq.w  #$02, A7
                tst.b   ($FFFFF623).w
                bne.s   Offset_0x016B04
                move.w  #$0000, (A4)
Offset_0x016B04:
                lea     $0080(A4), A4
                dbra    D7, Offset_0x016A28
                move.b  D5, ($FFFFF62C).w
                cmpi.b  #$50, D5
                beq.s   Offset_0x016B1E
                move.l  #$00000000, (A2)
                rts
Offset_0x016B1E:
                move.b  #$00, $FFFB(A2)
                rts    
Offset_0x016B26:    
                move.l  A4, -(A7)
                lea     ($FFFFEE00).w, A4
                move.w  $0002(A0), A3
                move.l  $0004(A0), A5
                moveq   #$00, D0
                move.b  $000E(A0), D0
                move.w  $0008(A0), D3
                sub.w   (A4), D3
                move.w  D3, D1
                add.w   D0, D1
                bmi     Offset_0x016C0A
                move.w  D3, D1
                sub.w   D0, D1
                cmpi.w  #$0140, D1
                bge     Offset_0x016C0A
                addi.w  #$0080, D3
                btst    #$04, D4
                beq.s   Offset_0x016B86
                moveq   #$00, D0
                move.b  $0014(A0), D0
                move.w  $000C(A0), D2
                sub.w   $0004(A4), D2
                move.w  D2, D1
                add.w   D0, D1
                bmi     Offset_0x016C0A
                move.w  D2, D1
                sub.w   D0, D1
                cmpi.w  #$00E0, D1
                bge     Offset_0x016C0A
                addi.w  #$0100, D2
                bra.s   Offset_0x016BA2
Offset_0x016B86:
                move.w  $000C(A0), D2
                sub.w   $0004(A4), D2
                addi.w  #$0080, D2
                cmpi.w  #$0060, D2
                bcs.s   Offset_0x016C0A
                cmpi.w  #$0180, D2
                bcc.s   Offset_0x016C0A
                addi.w  #$0080, D2
Offset_0x016BA2:
                moveq   #$00, D1
                move.b  $000B(A0), D1
                beq.s   Offset_0x016BC0
                add.w   D1, D1
                move.l  A5, A1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x016BC0
                move.w  D4, -(A7)
                bsr     Build_Sprites_2P_Sub_00                ; Offset_0x016D32
                move.w  (A7)+, D4
Offset_0x016BC0:
                ori.b   #$80, $0001(A0)
                lea     $0010(A0), A6
                moveq   #$00, D0
                move.b  $000F(A0), D0
                subq.w  #$01, D0
                bcs.s   Offset_0x016C0A
Offset_0x016BD4:
                swap.w  D0
                move.w  (A6)+, D3
                sub.w   (A4), D3
                addi.w  #$0080, D3
                move.w  (A6)+, D2
                sub.w   $0004(A4), D2
                addi.w  #$0100, D2
                addq.w  #$01, A6
                moveq   #$00, D1
                move.b  (A6)+, D1
                add.w   D1, D1
                move.l  A5, A1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x016C04
                move.w  D4, -(A7)
                bsr     Build_Sprites_2P_Sub_00                ; Offset_0x016D32
                move.w  (A7)+, D4
Offset_0x016C04:
                swap.w  D0
                dbra    D0, Offset_0x016BD4
Offset_0x016C0A:
                move.l  (A7)+, A4
                bra     Offset_0x0169DA               
Offset_0x016C10:
                move.l  A4, -(A7)
                lea     ($FFFFEE20).w, A4
                move.w  $0002(A0), A3
                move.l  $0004(A0), A5
                moveq   #$00, D0
                move.b  $000E(A0), D0
                move.w  $0008(A0), D3
                sub.w   (A4), D3
                move.w  D3, D1
                add.w   D0, D1
                bmi     Offset_0x016CF4
                move.w  D3, D1
                sub.w   D0, D1
                cmpi.w  #$0140, D1
                bge     Offset_0x016CF4
                addi.w  #$0080, D3
                btst    #$04, D4
                beq.s   Offset_0x016C70
                moveq   #$00, D0
                move.b  $0014(A0), D0
                move.w  $000C(A0), D2
                sub.w   $0004(A4), D2
                move.w  D2, D1
                add.w   D0, D1
                bmi     Offset_0x016CF4
                move.w  D2, D1
                sub.w   D0, D1
                cmpi.w  #$00E0, D1
                bge     Offset_0x016CF4
                addi.w  #$01E0, D2
                bra.s   Offset_0x016C8C
Offset_0x016C70:
                move.w  $000C(A0), D2
                sub.w   $0004(A4), D2
                addi.w  #$0080, D2
                cmpi.w  #$0060, D2
                bcs.s   Offset_0x016CF4
                cmpi.w  #$0180, D2
                bcc.s   Offset_0x016CF4
                addi.w  #$0160, D2
Offset_0x016C8C:
                moveq   #$00, D1
                move.b  $000B(A0), D1
                beq.s   Offset_0x016CAA
                add.w   D1, D1
                move.l  A5, A1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x016CAA
                move.w  D4, -(A7)
                bsr     Build_Sprites_2P_Sub_00                ; Offset_0x016D32
                move.w  (A7)+, D4
Offset_0x016CAA:
                ori.b   #$80, $0001(A0)
                lea     $0010(A0), A6
                moveq   #$00, D0
                move.b  $000F(A0), D0
                subq.w  #$01, D0
                bcs.s   Offset_0x016CF4
Offset_0x016CBE:
                swap.w  D0
                move.w  (A6)+, D3
                sub.w   (A4), D3
                addi.w  #$0080, D3
                move.w  (A6)+, D2
                sub.w   $0004(A4), D2
                addi.w  #$01E0, D2
                addq.w  #$01, A6
                moveq   #$00, D1
                move.b  (A6)+, D1
                add.w   D1, D1
                move.l  A5, A1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x016CEE
                move.w  D4, -(A7)
                bsr     Build_Sprites_2P_Sub_00                ; Offset_0x016D32
                move.w  (A7)+, D4
Offset_0x016CEE:
                swap.w  D0
                dbra    D0, Offset_0x016CBE
Offset_0x016CF4:
                move.l  (A7)+, A4
                bra     Offset_0x016AF0                 
;===============================================================================
; Sub Rotina Build_Sprite_2P
; [ Término ]
;===============================================================================               
               
               
;===============================================================================
; Sub Rotina ModifySpriteAttr_2P
; [ Início ]
;===============================================================================
ModifySpriteAttr_2P: ; Offset_0x016CFA:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Exit_ModifySpriteAttr_2P               ; Offset_0x016D14
                move.w  $0002(A0), D0
                andi.w  #$07FF, D0
                lsr.w   #$01, D0
                andi.w  #$F800, $0002(A0)
                add.w   D0, $0002(A0)
Exit_ModifySpriteAttr_2P:                                     ; Offset_0x016D14:
                rts    
;===============================================================================
; Sub Rotina ModifySpriteAttr_2P
; [ Término ]
;=============================================================================== 
              
;===============================================================================
; Sub Rotina Modify_A1_SpriteAttr_2P
; [ Início ]
;===============================================================================
Modify_A1_SpriteAttr_2P: ; Offset_0x016D16:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Exit_Modify_A1_SpriteAttr_2P           ; Offset_0x016D30
                move.w  $0002(A1), D0
                andi.w  #$07FF, D0
                lsr.w   #$01, D0
                andi.w  #$F800, $0002(A1)
                add.w   D0, $0002(A1)
Exit_Modify_A1_SpriteAttr_2P: ; Offset_0x016D30:
                rts                  
;===============================================================================
; Sub Rotina Modify_A1_SpriteAttr_2P
; [ Término ]
;===============================================================================
    
;===============================================================================
; Sub Rotina Build_Sprites_2P_Sub_00
; [ Início ]
;===============================================================================
Build_Sprites_2P_Sub_00: ; Offset_0x016D32:
                cmpi.b  #$50, D5
                bcs.s   Offset_0x016D52
                rts    
;===============================================================================
; Sub Rotina Build_Sprites_2P_Sub_00
; [ Término ]
;===============================================================================    
 
;===============================================================================
; Sub Rotina Build_Sprites_2P_Sub_01
; [ Início ]
;===============================================================================
Build_Sprites_2P_Sub_01: ; Offset_0x016D3A:
                move.w  $0002(A0), A3
                cmpi.b  #$50, D5
                bcc.s   Offset_0x016D7E
                btst    #$00, D4
                bne.s   Offset_0x016D90
                btst    #$01, D4
                bne     Offset_0x016DF2
Offset_0x016D52:
                move.b  (A1)+, D0
                ext.w   D0
                add.w   D2, D0
                move.w  D0, (A2)+
                move.b  (A1)+, D4
                move.b  Offset_0x016D80(PC, D4), (A2)+
                addq.b  #$01, D5
                move.b  D5, (A2)+
                addq.w  #$02, A1
                move.w  (A1)+, D0
                add.w   A3, D0
                move.w  D0, (A2)+
                move.w  (A1)+, D0
                add.w   D3, D0
                andi.w  #$01FF, D0
                bne.s   Offset_0x016D78
                addq.w  #$01, D0
Offset_0x016D78:
                move.w  D0, (A2)+
                dbra    D1, Offset_0x016D52
Offset_0x016D7E:
                rts
Offset_0x016D80:                
                dc.b    $00, $00, $01, $01, $04, $04, $05, $05, $08, $08, $09, $09, $0C, $0C, $0D, $0D
Offset_0x016D90:
                btst    #$01, D4
                bne     Offset_0x016E4E
Offset_0x016D98:                
                move.b  (A1)+, D0
                ext.w   D0
                add.w   D2, D0
                move.w  D0, (A2)+
                move.b  (A1)+, D4
                move.b  Offset_0x016D80(PC, D4), (A2)+
                addq.b  #$01, D5
                move.b  D5, (A2)+
                addq.w  #$02, A1
                move.w  (A1)+, D0
                add.w   A3, D0
                eori.w  #$0800, D0
                move.w  D0, (A2)+
                move.w  (A1)+, D0
                neg.w   D0
                move.b  Offset_0x016DD2(PC, D4), D4
                sub.w   D4, D0
                add.w   D3, D0
                andi.w  #$01FF, D0
                bne.s   Offset_0x016DCA
                addq.w  #$01, D0
Offset_0x016DCA:
                move.w  D0, (A2)+
                dbra    D1, Offset_0x016D98
                rts   
Offset_0x016DD2: 
                dc.b    $08, $08, $08, $08, $10, $10, $10, $10, $18, $18, $18, $18, $20, $20, $20, $20
Offset_0x016DE2:      
                dc.b    $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20   
Offset_0x016DF2:
                move.b  (A1)+, D0
                move.b  (A1), D4
                ext.w   D0
                neg.w   D0
                move.b  Offset_0x016DE2(PC, D4), D4
                sub.w   D4, D0
                add.w   D2, D0
                move.w  D0, (A2)+
                move.b  (A1)+, D4
                move.b  Offset_0x016E2E(PC, D4), (A2)+
                addq.b  #$01, D5
                move.b  D5, (A2)+
                addq.w  #$02, A1
                move.w  (A1)+, D0
                add.w   A3, D0
                eori.w  #$1000, D0
                move.w  D0, (A2)+
                move.w  (A1)+, D0
                add.w   D3, D0
                andi.w  #$01FF, D0
                bne.s   Offset_0x016E26
                addq.w  #$01, D0
Offset_0x016E26:
                move.w  D0, (A2)+
                dbra    D1, Offset_0x016DF2
                rts     
Offset_0x016E2E:
                dc.b    $00, $00, $01, $01, $04, $04, $05, $05, $08, $08, $09, $09, $0C, $0C, $0D, $0D
Offset_0x016E3E:   
                dc.b    $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20    
Offset_0x016E4E:
                move.b  (A1)+, D0
                move.b  (A1), D4
                ext.w   D0
                neg.w   D0
                move.b  Offset_0x016E3E(PC, D4), D4
                sub.w   D4, D0
                add.w   D2, D0
                move.w  D0, (A2)+
                move.b  (A1)+, D4
                move.b  Offset_0x016E2E(PC, D4), (A2)+
                addq.b  #$01, D5
                move.b  D5, (A2)+
                addq.w  #$02, A1
                move.w  (A1)+, D0
                add.w   A3, D0
                eori.w  #$1800, D0
                move.w  D0, (A2)+
                move.w  (A1)+, D0
                neg.w   D0
                move.b  Offset_0x016E92(PC, D4), D4
                sub.w   D4, D0
                add.w   D3, D0
                andi.w  #$01FF, D0
                bne.s   Offset_0x016E8A
                addq.w  #$01, D0
Offset_0x016E8A:
                move.w  D0, (A2)+
                dbra    D1, Offset_0x016E4E
                rts  
Offset_0x016E92:
                dc.b    $08, $08, $08, $08, $10, $10, $10, $10, $18, $18, $18, $18, $20, $20, $20, $20                                
;===============================================================================
; Sub Rotina Build_Sprites_2P_Sub_01
; [ Término ]
;===============================================================================    

;===============================================================================
; Sub Rotina Check_Object_On_Screen - Rotina não usada no jogo (Left over)
; [ Início ]
;===============================================================================  
; Check_Object_On_Screen: ; Offset_0x016EA2: ; Rotina não usada no jogo (Left over)
                move.w  $0008(A0), D0
                sub.w   ($FFFFEE00).w, D0
                bmi.s   Not_On_Screen                          ; Offset_0x016EC6
                cmpi.w  #$0140, D0
                bge.s   Not_On_Screen                          ; Offset_0x016EC6
                move.w  $000C(A0), D1
                sub.w   ($FFFFEE04).w, D1
                bmi.s   Not_On_Screen                          ; Offset_0x016EC6
                cmpi.w  #$00E0, D1
                bge.s   Not_On_Screen                          ; Offset_0x016EC6
                moveq   #$00, D0
                rts
Not_On_Screen: ; Offset_0x016EC6:
                moveq   #$01, D0
                rts
;===============================================================================
; Sub Rotina Check_Object_On_Screen - Rotina não usada no jogo (Left over)
; [ Término ]
;===============================================================================  

;===============================================================================
; Sub Rotina Check_Object_On_Screen_2 - Rotina não usada no jogo (Left over)
; [ Início ]
;===============================================================================  
; Check_Object_On_Screen_2: ; Offset_0x016ECA:               
                moveq   #$00, D1
                move.b  $0019(A0), D1
                move.w  $0008(A0), D0
                sub.w   ($FFFFEE00).w, D0
                add.w   D1, D0
                bmi.s   Not_On_Screen_2                        ; Offset_0x016EFA
                add.w   D1, D1
                sub.w   D1, D0
                cmpi.w  #$0140, D0
                bge.s   Not_On_Screen_2                        ; Offset_0x016EFA
                move.w  $000C(A0), D1
                sub.w   ($FFFFEE04).w, D1
                bmi.s   Not_On_Screen_2                        ; Offset_0x016EFA
                cmpi.w  #$00E0, D1
                bge.s   Not_On_Screen_2                        ; Offset_0x016EFA
                moveq   #$00, D0
                rts
Not_On_Screen_2: ; Offset_0x016EFA:
                moveq   #$01, D0
                rts               
;===============================================================================
; Sub Rotina Check_Object_On_Screen_2 - Rotina não usada no jogo (Left over)
; [ Término ]
;===============================================================================  
                          
;===============================================================================
; Sub Rotina para carregar o posiconamento dos anéis das fases
; [ Início ]
;===============================================================================                
Load_Ring_Pos: ; Offset_0x016EFE:
                moveq   #$00, D0
                move.b  ($FFFFF710).w, D0
                move.w  Offset_0x016F0C(PC, D0), D0
                jmp     Offset_0x016F0C(PC, D0)
Offset_0x016F0C:
                dc.w    Offset_0x016F10-Offset_0x016F0C
                dc.w    Offset_0x016F54-Offset_0x016F0C
Offset_0x016F10:
                addq.b  #$02, ($FFFFF710).w
                bsr     Load_Rings_Layout                      ; Offset_0x017216
                lea     ($FFFFE800).w, A1
                move.w  ($FFFFEE00).w, D4
                subq.w  #$08, D4
                bhi.s   Offset_0x016F2C
                moveq   #$01, D4
                bra.s   Offset_0x016F2C
Offset_0x016F28:
                lea     $0006(A1), A1
Offset_0x016F2C:
                cmp.w   $0002(A1), D4
                bhi.s   Offset_0x016F28
                move.w  A1, ($FFFFF712).w
                move.w  A1, ($FFFFF716).w
                addi.w  #$0150, D4
                bra.s   Offset_0x016F44
Offset_0x016F40:
                lea     $0006(A1), A1
Offset_0x016F44:
                cmp.w   $0002(A1), D4
                bhi.s   Offset_0x016F40
                move.w  A1, ($FFFFF714).w
                move.w  A1, ($FFFFF718).w
                rts
;-------------------------------------------------------------------------------  
Offset_0x016F54:
                lea     ($FFFFEF80).w, A2
                move.w  (A2)+, D1
                subq.w  #$01, D1
                bcs.s   Offset_0x016F8A
Offset_0x016F5E:
                move.w  (A2)+, D0
                beq.s   Offset_0x016F5E
                move.w  D0, A1
                subq.b  #$01, (A1)
                bne.s   Offset_0x016F86
                move.b  #$06, (A1)
                addq.b  #$01, $0001(A1)
                cmpi.b  #$08, $0001(A1)
                bne.s   Offset_0x016F86
                move.w  #$FFFF, (A1)
                move.w  #$0000, $FFFE(A2)
                subq.w  #$01, ($FFFFEF80).w
Offset_0x016F86:
                dbra    D1, Offset_0x016F5E
Offset_0x016F8A:
                move.w  ($FFFFF712).w, A1
                move.w  ($FFFFEE00).w, D4
                subq.w  #$08, D4
                bhi.s   Offset_0x016F9E
                moveq   #$01, D4
                bra.s   Offset_0x016F9E
Offset_0x016F9A:
                lea     $0006(A1), A1
Offset_0x016F9E:
                cmp.w   $0002(A1), D4
                bhi.s   Offset_0x016F9A
                bra.s   Offset_0x016FA8
Offset_0x016FA6:
                subq.w  #$06, A1
Offset_0x016FA8:
                cmp.w   $FFFC(A1), D4
                bls.s   Offset_0x016FA6
                move.w  A1, ($FFFFF712).w
                move.w  ($FFFFF714).w, A2
                addi.w  #$0150, D4
                bra.s   Offset_0x016FC0
Offset_0x016FBC:
                lea     $0006(A2), A2
Offset_0x016FC0:
                cmp.w   $0002(A2), D4
                bhi.s   Offset_0x016FBC
                bra.s   Offset_0x016FCA
Offset_0x016FC8:
                subq.w  #$06, A2
Offset_0x016FCA:
                cmp.w   $FFFC(A2), D4
                bls.s   Offset_0x016FC8
                move.w  A2, ($FFFFF714).w
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   Offset_0x016FE4
                move.w  A1, ($FFFFF716).w
                move.w  A2, ($FFFFF718).w
                rts
Offset_0x016FE4:
                move.w  ($FFFFF716).w, A1
                move.w  ($FFFFEE20).w, D4
                subq.w  #$08, D4
                bhi.s   Offset_0x016FF8
                moveq   #$01, D4
                bra.s   Offset_0x016FF8
Offset_0x016FF4:
                lea     $0006(A1), A1
Offset_0x016FF8:
                cmp.w   $0002(A1), D4
                bhi.s   Offset_0x016FF4
                bra.s   Offset_0x017002
Offset_0x017000:
                subq.w  #$06, A1
Offset_0x017002:
                cmp.w   $FFFC(A1), D4
                bls.s   Offset_0x017000
                move.w  A1, ($FFFFF716).w
                move.w  ($FFFFF718).w, A2
                addi.w  #$0150, D4
                bra.s   Offset_0x01701A
Offset_0x017016:
                lea     $0006(A2), A2
Offset_0x01701A:
                cmp.w   $0002(A2), D4
                bhi.s   Offset_0x017016
                bra.s   Offset_0x017024
Offset_0x017022:
                subq.w  #$06, A2
Offset_0x017024:
                cmp.w   $FFFC(A2), D4
                bls.s   Offset_0x017022
                move.w  A2, ($FFFFF718).w
                rts
;===============================================================================
; Sub Rotina para carregar o posiconamento dos anéis das fases
; [ Término ]
;===============================================================================
                
;===============================================================================
; Sub Rotina para responder ao toque nos anéis
; [ Início ]
;===============================================================================                  
TouchRings: ; Offset_0x017030:                
                move.w  ($FFFFF712).w, A1
                move.w  ($FFFFF714).w, A2
                cmpa.w  #$B000, A0
                beq.s   Offset_0x017046
                move.w  ($FFFFF716).w, A1
                move.w  ($FFFFF718).w, A2
Offset_0x017046:
                cmpa.l  A1, A2
                beq     Offset_0x0170DA
                cmpi.w  #$005A, $0030(A0)
                bcc     Offset_0x0170DA
                move.w  $0008(A0), D2
                move.w  $000C(A0), D3
                subq.w  #$08, D2
                moveq   #$00, D5
                move.b  $0016(A0), D5
                subq.b  #$03, D5
                sub.w   D5, D3
                cmpi.b  #$4D, $001A(A0)
                bne.s   Offset_0x017078
                addi.w  #$000C, D3
                moveq   #$0A, D5
Offset_0x017078:
                move.w  #$0006, D1
                move.w  #$000C, D6
                move.w  #$0010, D4
                add.w   D5, D5
Offset_0x017086:
                tst.w   (A1)
                bne     Offset_0x0170D0
                move.w  $0002(A1), D0
                sub.w   D1, D0
                sub.w   D2, D0
                bcc.s   Offset_0x01709E
                add.w   D6, D0
                bcs.s   Offset_0x0170A4
                bra     Offset_0x0170D0
Offset_0x01709E:
                cmp.w   D4, D0
                bhi     Offset_0x0170D0
Offset_0x0170A4:
                move.w  $0004(A1), D0
                sub.w   D1, D0
                sub.w   D3, D0
                bcc.s   Offset_0x0170B6
                add.w   D6, D0
                bcs.s   Offset_0x0170BC
                bra     Offset_0x0170D0
Offset_0x0170B6:
                cmp.w   D5, D0
                bhi     Offset_0x0170D0
Offset_0x0170BC:
                move.w  #$0604, (A1)
                bsr.s   Offset_0x0170DC
                lea     ($FFFFEF82).w, A3
Offset_0x0170C6:
                tst.w   (A3)+
                bne.s   Offset_0x0170C6
                move.w  A1, -(A3)
                addq.w  #$01, ($FFFFEF80).w
Offset_0x0170D0:
                lea     $0006(A1), A1
                cmpa.l  A1, A2
                bne     Offset_0x017086
Offset_0x0170DA:
                rts   
Offset_0x0170DC:
                subq.w  #$01, ($FFFFFF40).w
                cmpa.w  #$B000, A0
                beq     Add_Rings_Player_One                   ; Offset_0x011F6C
                bra     Add_Rings_Player_Two                   ; Offset_0x011FC2    
;===============================================================================
; Sub Rotina para responder ao toque nos anéis
; [ Término ]
;===============================================================================
                   
;===============================================================================
; Sub Rotina Build_Rings
; [ Início ]
;===============================================================================              
Build_Rings: ; Offset_0x0170EC:
                move.w  ($FFFFF712).w, A0
                move.w  ($FFFFF714).w, A4
                cmpa.l  A0, A4
                bne.s   Offset_0x0170FA
                rts
Offset_0x0170FA:
                lea     ($FFFFEE00).w, A3
Offset_0x0170FE:
                tst.w   (A0)
                bmi     Offset_0x01715E
                move.w  $0002(A0), D3
                sub.w   (A3), D3
                addi.w  #$0080, D3
                move.w  $0004(A0), D2
                sub.w   $0004(A3), D2
                andi.w  #$07FF, D2
                addq.w  #$08, D2
                bmi.s   Offset_0x01715E
                cmpi.w  #$00F0, D2
                bge.s   Offset_0x01715E
                addi.w  #$0078, D2
                lea     (Level_Rings_Mappings), A1             ; Offset_0x0172DC
                moveq   #$00, D1
                move.b  $0001(A0), D1
                bne.s   Offset_0x01713A
                move.b  ($FFFFFEA3).w, D1
Offset_0x01713A:
                add.w   D1, D1
                adda.w  $00(A1, D1), A1
                move.b  (A1)+, D0
                ext.w   D0
                add.w   D2, D0
                move.w  D0, (A2)+
                move.b  (A1)+, (A2)+
                addq.b  #$01, D5
                move.b  D5, (A2)+
                move.w  (A1)+, D0
                addi.w  #$26BC, D0
                move.w  D0, (A2)+
                addq.w  #$02, A1
                move.w  (A1)+, D0
                add.w   D3, D0
                move.w  D0, (A2)+
Offset_0x01715E:
                lea     $0006(A0), A0
                cmpa.l  A0, A4
                bne     Offset_0x0170FE
                rts 
;===============================================================================
; Sub Rotina Build_Rings
; [ Término ]
;===============================================================================  
                 
;===============================================================================
; Sub Rotina Build_Rings_2P
; [ Início ]
;===============================================================================              
Build_Rings_2P: ; Offset_0x01716A:
                lea     ($FFFFEE00).w, A3
                move.w  #$0078, D6
                move.w  ($FFFFF712).w, A0
                move.w  ($FFFFF714).w, A4
                cmpa.l  A0, A4
                bne.s   Offset_0x017196
                rts
Build_Rings_2P_Miles: ; Offset_0x017180:
                lea     ($FFFFEE20).w, A3
                move.w  #$0158, D6
                move.w  ($FFFFF716).w, A0
                move.w  ($FFFFF718).w, A4
                cmpa.l  A0, A4
                bne.s   Offset_0x017196
                rts                 
Offset_0x017196:
                tst.w   (A0)
                bmi     Offset_0x0171FA
                move.w  $0002(A0), D3
                sub.w   (A3), D3
                addi.w  #$0080, D3
                move.w  $0004(A0), D2
                sub.w   $0004(A3), D2
                andi.w  #$07FF, D2
                addi.w  #$0088, D2
                bmi.s   Offset_0x0171FA
                cmpi.w  #$0170, D2
                bge.s   Offset_0x0171FA
                add.w   D6, D2
                lea     (Level_Rings_Mappings), A1             ; Offset_0x0172DC
                moveq   #$00, D1
                move.b  $0001(A0), D1
                bne.s   Offset_0x0171D2
                move.b  ($FFFFFEA3).w, D1
Offset_0x0171D2:
                add.w   D1, D1
                adda.w  $00(A1, D1), A1
                move.b  (A1)+, D0
                ext.w   D0
                add.w   D2, D0
                move.w  D0, (A2)+
                move.b  (A1)+, D4
                move.b  Offset_0x017206(PC, D4), (A2)+
                addq.b  #$01, D5
                move.b  D5, (A2)+
                addq.w  #$02, A1
                move.w  (A1)+, D0
                addi.w  #$235E, D0
                move.w  D0, (A2)+
                move.w  (A1)+, D0
                add.w   D3, D0
                move.w  D0, (A2)+
Offset_0x0171FA:
                lea     $0006(A0), A0
                cmpa.l  A0, A4
                bne     Offset_0x017196
                rts                
Offset_0x017206:
                dc.b    $00, $00, $01, $01, $04, $04, $05, $05, $08, $08, $09, $09, $0C, $0C, $0D, $0D
;===============================================================================
; Sub Rotina Build_Rings_2P
; [ Término ]
;===============================================================================                  

;===============================================================================
; Sub Rotina para carregar o posicionamento dos anéis na fase
; [ Início ]
;=============================================================================== 
Load_Rings_Layout: ; Offset_0x017216:
                lea     ($FFFFE800).w, A1
                moveq   #$00, D0
                move.w  #$017F, D1
Offset_0x017220:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x017220
                lea     ($FFFFEF80).w, A1
                move.w  #$000F, D1
Offset_0x01722E:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x01722E
                moveq   #$00, D5
                moveq   #$00, D0
                move.w  (Level_Id).w, D0                             ; $FFFFFE10
                ror.b   #$01, D0
                lsr.w   #$06, D0
                lea     (Rings_Layout), A1                     ; Offset_0x0E4300
                move.w  $00(A1, D0), D0
                lea     $00(A1, D0), A1
                lea     ($FFFFE806).w, A2
Offset_0x017252:
                move.w  (A1)+, D2
                bmi.s   Offset_0x01729A
                move.w  (A1)+, D3
                bmi.s   Offset_0x01727A
                move.w  D3, D0
                rol.w   #$04, D0
                andi.w  #$0007, D0
                andi.w  #$0FFF, D3
Offset_0x017266:
                move.w  #$0000, (A2)+
                move.w  D2, (A2)+
                move.w  D3, (A2)+
                addi.w  #$0018, D2
                addq.w  #$01, D5
                dbra    D0, Offset_0x017266
                bra.s   Offset_0x017252
Offset_0x01727A:
                move.w  D3, D0
                rol.w   #$04, D0
                andi.w  #$0007, D0
                andi.w  #$0FFF, D3
Offset_0x017286:
                move.w  #$0000, (A2)+
                move.w  D2, (A2)+
                move.w  D3, (A2)+
                addi.w  #$0018, D3
                addq.w  #$01, D5
                dbra    D0, Offset_0x017286
                bra.s   Offset_0x017252
Offset_0x01729A:
                move.w  D5, ($FFFFFF40).w
                move.w  #$0000, ($FFFFFF42).w
                moveq   #$FFFFFFFF, D0
                move.l  D0, (A2)+
                lea     ($FFFFE802).w, A1
                move.w  #$00FE, D3
Offset_0x0172B0:
                move.w  D3, D4
                lea     $0006(A1), A2
                move.w  (A1), D0
Offset_0x0172B8:
                tst.w   (A2)
                beq.s   Offset_0x0172CA
                cmp.w   (A2), D0
                bls.s   Offset_0x0172CA
                move.l  (A1), D1
                move.l  (A2), D0
                move.l  D0, (A1)
                move.l  D1, (A2)
                swap.w  D0
Offset_0x0172CA:
                lea     $0006(A2), A2
                dbra    D4, Offset_0x0172B8
                lea     $0006(A1), A1
                dbra    D3, Offset_0x0172B0
                rts
;===============================================================================
; Sub Rotina para carregar o posicionamento dos anéis na fase
; [ Término ]
;===============================================================================   

Level_Rings_Mappings: ; Offset_0x0172DC:
                dc.w    Offset_0x0172EC-Level_Rings_Mappings
                dc.w    Offset_0x0172F4-Level_Rings_Mappings
                dc.w    Offset_0x0172FC-Level_Rings_Mappings
                dc.w    Offset_0x017304-Level_Rings_Mappings
                dc.w    Offset_0x01730C-Level_Rings_Mappings
                dc.w    Offset_0x017314-Level_Rings_Mappings
                dc.w    Offset_0x01731C-Level_Rings_Mappings
                dc.w    Offset_0x017324-Level_Rings_Mappings
Offset_0x0172EC:
                dc.b    $F8, $05, $00, $00, $00, $00, $FF, $F8
Offset_0x0172F4:
                dc.b    $F8, $05, $00, $04, $00, $02, $FF, $F8
Offset_0x0172FC:
                dc.b    $F8, $01, $00, $08, $00, $04, $FF, $FC
Offset_0x017304:
                dc.b    $F8, $05, $08, $04, $08, $02, $FF, $F8
Offset_0x01730C:
                dc.b    $F8, $05, $00, $0A, $00, $05, $FF, $F8
Offset_0x017314:
                dc.b    $F8, $05, $18, $0A, $18, $05, $FF, $F8
Offset_0x01731C:
                dc.b    $F8, $05, $08, $0A, $08, $05, $FF, $F8
Offset_0x017324:
                dc.b    $F8, $05, $10, $0A, $10, $05, $FF, $F8                
                
;===============================================================================
; Sub Rotina para carregar o posiconamento dos triângulos na Casino Night
; [ Início ]
;===============================================================================
Load_Triangle_Pos: ; Offset_0x01732C: 
                moveq   #$00, D0
                move.b  ($FFFFF71A).w, D0
                move.w  Offset_0x01733A(PC, D0), D0
                jmp     Offset_0x01733A(PC, D0)
Offset_0x01733A:
                dc.w    Offset_0x01733E-Offset_0x01733A
                dc.w    Offset_0x017392-Offset_0x01733A
Offset_0x01733E:
                addq.b  #$02, ($FFFFF71A).w
                lea     (CNz_Triangles_Act_1), A1              ; Offset_0x01778A
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                beq.s   Offset_0x017354
                lea     (CNz_Triangles_Act_2), A1              ; Offset_0x0178CE
Offset_0x017354:
                move.w  ($FFFFEE00).w, D4
                subq.w  #$08, D4
                bhi.s   Offset_0x017364
                moveq   #$01, D4
                bra.s   Offset_0x017364
Offset_0x017360:
                lea     $0006(A1), A1
Offset_0x017364:
                cmp.w   $0002(A1), D4
                bhi.s   Offset_0x017360
                move.l  A1, ($FFFFF71C).w
                move.l  A1, ($FFFFF724).w
                addi.w  #$0150, D4
                bra.s   Offset_0x01737C
Offset_0x017378:
                lea     $0006(A1), A1
Offset_0x01737C:
                cmp.w   $0002(A1), D4
                bhi.s   Offset_0x017378
                move.l  A1, ($FFFFF720).w
                move.l  A1, ($FFFFF728).w
                move.b  #$01, ($FFFFF71B).w
                rts
;-------------------------------------------------------------------------------                 
Offset_0x017392:
                move.l  ($FFFFF71C).w, A1
                move.w  ($FFFFEE00).w, D4
                subq.w  #$08, D4
                bhi.s   Offset_0x0173A6
                moveq   #$01, D4
                bra.s   Offset_0x0173A6
Offset_0x0173A2:
                lea     $0006(A1), A1
Offset_0x0173A6:
                cmp.w   $0002(A1), D4
                bhi.s   Offset_0x0173A2
                bra.s   Offset_0x0173B0
Offset_0x0173AE:
                subq.w  #$06, A1
Offset_0x0173B0:
                cmp.w   $FFFC(A1), D4
                bls.s   Offset_0x0173AE
                move.l  A1, ($FFFFF71C).w
                move.l  ($FFFFF720).w, A2
                addi.w  #$0150, D4
                bra.s   Offset_0x0173C8
Offset_0x0173C4:
                lea     $0006(A2), A2
Offset_0x0173C8:
                cmp.w   $0002(A2), D4
                bhi.s   Offset_0x0173C4
                bra.s   Offset_0x0173D2
Offset_0x0173D0:
                subq.w  #$06, A2
Offset_0x0173D2:
                cmp.w   $FFFC(A2), D4
                bls.s   Offset_0x0173D0
                move.l  A2, ($FFFFF720).w
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   Offset_0x0173EC
                move.l  A1, ($FFFFF724).w
                move.l  A2, ($FFFFF728).w
                rts
Offset_0x0173EC:
                move.l  ($FFFFF724).w, A1
                move.w  ($FFFFEE20).w, D4
                subq.w  #$08, D4
                bhi.s   Offset_0x017400
                moveq   #$01, D4
                bra.s   Offset_0x017400
Offset_0x0173FC:
                lea     $0006(A1), A1
Offset_0x017400:
                cmp.w   $0002(A1), D4
                bhi.s   Offset_0x0173FC
                bra.s   Offset_0x01740A
Offset_0x017408:
                subq.w  #$06, A1
Offset_0x01740A:
                cmp.w   $FFFC(A1), D4
                bls.s   Offset_0x017408
                move.l  A1, ($FFFFF724).w
                move.l  ($FFFFF728).w, A2
                addi.w  #$0150, D4
                bra.s   Offset_0x017422
Offset_0x01741E:
                lea     $0006(A2), A2
Offset_0x017422:
                cmp.w   $0002(A2), D4
                bhi.s   Offset_0x01741E
                bra.s   Offset_0x01742C
Offset_0x01742A:
                subq.w  #$06, A2
Offset_0x01742C:
                cmp.w   $FFFC(A2), D4
                bls.s   Offset_0x01742A
                move.l  A2, ($FFFFF728).w
                rts      
;===============================================================================
; Sub Rotina para carregar o posiconamento dos triângulos na Casino Night
; [ Término ]
;=============================================================================== 

;===============================================================================
; Sub Rotina para responder ao toque nos triângulos na Casino Night
; [ Início ]
;===============================================================================
Touch_Response_Cnz_Triangles: ; Offset_0x017438:
                move.l  ($FFFFF71C).w, A1
                move.l  ($FFFFF720).w, A2
                cmpa.w  #$B000, A0
                beq.s   Offset_0x01744E
                move.l  ($FFFFF724).w, A1
                move.l  ($FFFFF728).w, A2
Offset_0x01744E:
                cmpa.l  A1, A2
                beq     Offset_0x0174E8
                move.w  $0008(A0), D2
                move.w  $000C(A0), D3
                subi.w  #$0009, D2
                moveq   #$00, D5
                move.b  $0016(A0), D5
                subq.b  #$03, D5
                sub.w   D5, D3
                cmpi.b  #$4D, $001A(A0)
                bne.s   Offset_0x017478
                addi.w  #$000C, D3
                moveq   #$0A, D5
Offset_0x017478:
                move.w  #$0012, D4
                add.w   D5, D5
Offset_0x01747E:                
                move.w  (A1), D0
                andi.w  #$000E, D0
                lea     Offset_0x0174C8(PC, D0), A3
                moveq   #$00, D1
                move.b  (A3)+, D1
                move.w  $0002(A1), D0
                sub.w   D1, D0
                sub.w   D2, D0
                bcc.s   Offset_0x0174A0
                add.w   D1, D1
                add.w   D1, D0
                bcs.s   Offset_0x0174A6
                bra     Offset_0x0174DE
Offset_0x0174A0:
                cmp.w   D4, D0
                bhi     Offset_0x0174DE
Offset_0x0174A6:
                moveq   #$00, D1
                move.b  (A3)+, D1
                move.w  $0004(A1), D0
                sub.w   D1, D0
                sub.w   D3, D0
                bcc.s   Offset_0x0174C0
                add.w   D1, D1
                add.w   D1, D0
                bcs     Offset_0x0174D4
                bra     Offset_0x0174DE
Offset_0x0174C0:
                cmp.w   D5, D0
                bhi     Offset_0x0174DE
                bra.s   Offset_0x0174D4
;-------------------------------------------------------------------------------
Offset_0x0174C8:
                dc.b    $20, $20, $20, $20, $40, $08, $40, $08, $08, $40, $08, $40
;-------------------------------------------------------------------------------
Offset_0x0174D4:
                move.w  (A1), D0
                move.w  Offset_0x0174EA(PC, D0), D0
                jmp     Offset_0x0174EA(PC, D0)
Offset_0x0174DE:
                lea     $0006(A1), A1
                cmpa.l  A1, A2
                bne     Offset_0x01747E
Offset_0x0174E8:
                rts
Offset_0x0174EA:
                dc.w    Offset_0x0174F6-Offset_0x0174EA
                dc.w    Offset_0x0175A8-Offset_0x0174EA
                dc.w    Offset_0x01760E-Offset_0x0174EA
                dc.w    Offset_0x017666-Offset_0x0174EA
                dc.w    Offset_0x0176BC-Offset_0x0174EA
                dc.w    Offset_0x017714-Offset_0x0174EA
Offset_0x0174F6:
                move.w  $0004(A1), D0
                sub.w   $000C(A0), D0
                neg.w   D0
                cmpi.w  #$0020, D0
                blt.s   Offset_0x017510
                move.w  #$0A00, $0012(A0)
                bra     Offset_0x01776A
Offset_0x017510:
                move.w  $0002(A1), D0
                sub.w   $0008(A0), D0
                neg.w   D0
                cmpi.w  #$0020, D0
                blt.s   Offset_0x01752A
                move.w  #$0A00, $0010(A0)
                bra     Offset_0x01776A
Offset_0x01752A:
                move.w  $0002(A1), D0
                sub.w   $0008(A0), D0
                cmpi.w  #$0020, D0
                blt.s   Offset_0x01753C
                move.w  #$0020, D0
Offset_0x01753C:
                add.w   $0004(A1), D0
                subq.w  #$08, D0
                move.w  $000C(A0), D1
                addi.w  #$000E, D1
                sub.w   D1, D0
                bcc.s   Offset_0x017558
                move.w  #$0020, D3
                bsr.s   Offset_0x01755A
                bra     Offset_0x01776A
Offset_0x017558:
                rts
Offset_0x01755A:
                move.w  $0010(A0), D1
                move.w  $0012(A0), D2
                jsr     (CalcAngle)                            ; Offset_0x003608
                move.b  D0, ($FFFFFFBC).w
                sub.w   D3, D0
                move.w  D0, D1
                bpl.s   Offset_0x017574
                neg.w   D1
Offset_0x017574:
                neg.w   D0
                add.w   D3, D0
                move.b  D0, ($FFFFFFBD).w
                move.b  D1, ($FFFFFFBF).w
                cmpi.b  #$38, D1
                bcs.s   Offset_0x017588
                move.w  D3, D0
Offset_0x017588:
                move.b  D0, ($FFFFFFBE).w
                jsr     (CalcSine)                             ; Offset_0x003370
                muls.w  #$F600, D1
                asr.l   #$08, D1
                move.w  D1, $0010(A0)
                muls.w  #$F600, D0
                asr.l   #$08, D0
                move.w  D0, $0012(A0)
                rts
Offset_0x0175A8:
                move.w  $0004(A1), D0
                sub.w   $000C(A0), D0
                neg.w   D0
                cmpi.w  #$0020, D0
                blt.s   Offset_0x0175C2
                move.w  #$0A00, $0012(A0)
                bra     Offset_0x01776A
Offset_0x0175C2:
                move.w  $0002(A1), D0
                sub.w   $0008(A0), D0
                cmpi.w  #$0020, D0
                blt.s   Offset_0x0175DA
                move.w  #$F600, $0010(A0)
                bra     Offset_0x01776A
Offset_0x0175DA:
                move.w  $0002(A1), D0
                sub.w   $0008(A0), D0
                neg.w   D0
                cmpi.w  #$0020, D0
                blt.s   Offset_0x0175EE
                move.w  #$0020, D0
Offset_0x0175EE:
                add.w   $0004(A1), D0
                subq.w  #$08, D0
                move.w  $000C(A0), D1
                addi.w  #$000E, D1
                sub.w   D1, D0
                bcc.s   Offset_0x01760C
                move.w  #$0060, D3
                bsr     Offset_0x01755A
                bra     Offset_0x01776A
Offset_0x01760C:
                rts
Offset_0x01760E:
                move.w  $0004(A1), D0
                sub.w   $000C(A0), D0
                neg.w   D0
                cmpi.w  #$0008, D0
                blt.s   Offset_0x017628
                move.w  #$0A00, $0012(A0)
                bra     Offset_0x01776A
Offset_0x017628:
                move.w  $0002(A1), D0
                sub.w   $0008(A0), D0
                cmpi.w  #$0040, D0
                blt.s   Offset_0x017640
                move.w  #$F600, $0010(A0)
                bra     Offset_0x01776A
Offset_0x017640:
                neg.w   D0
                cmpi.w  #$0040, D0
                blt.s   Offset_0x017652
                move.w  #$0A00, $0010(A0)
                bra     Offset_0x01776A
Offset_0x017652:
                move.w  #$0038, D3
                tst.w   D0
                bmi.s   Offset_0x01765E
                move.w  #$0048, D3
Offset_0x01765E:
                bsr     Offset_0x01755A
                bra     Offset_0x01776A
Offset_0x017666:
                move.w  $0004(A1), D0
                sub.w   $000C(A0), D0
                cmpi.w  #$0008, D0
                blt.s   Offset_0x01767E
                move.w  #$F600, $0012(A0)
                bra     Offset_0x01776A
Offset_0x01767E:
                move.w  $0002(A1), D0
                sub.w   $0008(A0), D0
                cmpi.w  #$0040, D0
                blt.s   Offset_0x017696
                move.w  #$F600, $0010(A0)
                bra     Offset_0x01776A
Offset_0x017696:
                neg.w   D0
                cmpi.w  #$0040, D0
                blt.s   Offset_0x0176A8
                move.w  #$0A00, $0010(A0)
                bra     Offset_0x01776A
Offset_0x0176A8:
                move.w  #$00C8, D3
                tst.w   D0
                bmi.s   Offset_0x0176B4
                move.w  #$00B8, D3
Offset_0x0176B4:
                bsr     Offset_0x01755A
                bra     Offset_0x01776A
Offset_0x0176BC:
                move.w  $0002(A1), D0
                sub.w   $0008(A0), D0
                neg.w   D0
                cmpi.w  #$0008, D0
                blt.s   Offset_0x0176D6
                move.w  #$0A00, $0010(A0)
                bra     Offset_0x01776A
Offset_0x0176D6:
                move.w  $0004(A1), D0
                sub.w   $000C(A0), D0
                cmpi.w  #$0040, D0
                blt.s   Offset_0x0176EE
                move.w  #$F600, $0012(A0)
                bra     Offset_0x01776A
Offset_0x0176EE:
                neg.w   D0
                cmpi.w  #$0040, D0
                blt.s   Offset_0x017700
                move.w  #$0A00, $0010(A0)
                bra     Offset_0x01776A
Offset_0x017700:
                move.w  #$0008, D3
                tst.w   D0
                bmi.s   Offset_0x01770C
                move.w  #$00F8, D3
Offset_0x01770C:
                bsr     Offset_0x01755A
                bra     Offset_0x01776A
Offset_0x017714:
                move.w  $0002(A1), D0
                sub.w   $0008(A0), D0
                cmpi.w  #$0008, D0
                blt.s   Offset_0x01772C
                move.w  #$0A00, $0010(A0)
                bra     Offset_0x01776A
Offset_0x01772C:
                move.w  $0004(A1), D0
                sub.w   $000C(A0), D0
                cmpi.w  #$0040, D0
                blt.s   Offset_0x017744
                move.w  #$F600, $0012(A0)
                bra     Offset_0x01776A
Offset_0x017744:
                neg.w   D0
                cmpi.w  #$0040, D0
                blt.s   Offset_0x017756
                move.w  #$0A00, $0010(A0)
                bra     Offset_0x01776A
Offset_0x017756:
                move.w  #$0078, D3
                tst.w   D0
                bmi.s   Offset_0x017762
                move.w  #$0088, D3
Offset_0x017762:
                bsr     Offset_0x01755A
                bra     Offset_0x01776A
Offset_0x01776A:
                bset    #$01, $0022(A0)
                bclr    #$04, $0022(A0)
                bclr    #$05, $0022(A0)
                clr.b   $003C(A0)
                move.w  #Bumper_Touch_Sfx, D0   ; $00D9
                jmp     (Play_Sfx)                             ; Offset_0x00132C
;===============================================================================
; Sub Rotina para responder ao toque nos triângulos na Casino Night
; [ Término ]
;===============================================================================

CNz_Triangles_Act_1: ; Offset_0x01778A:    
                incbin  'data\cnz\tri_act1.dat' 
CNz_Triangles_Act_2: ; Offset_0x0178CE:
                incbin  'data\cnz\tri_act2.dat'   
                
;===============================================================================
; Sub Rotina para carregar o posiconamento dos objetos das fases
; [ Início ]
;===============================================================================
Load_Object_Pos: ; Offset_0x017A12:
                moveq   #$00, D0
                move.b  ($FFFFF76C).w, D0
                move.w  Offset_0x017A20(PC, D0), D0
                jmp     Offset_0x017A20(PC, D0)
Offset_0x017A20:
                dc.w    Offset_0x017A26-Offset_0x017A20
                dc.w    Offset_0x017AF2-Offset_0x017A20
                dc.w    Offset_0x017C3A-Offset_0x017A20
Offset_0x017A26:
                addq.b  #$02, ($FFFFF76C).w
                move.w  (Level_Id).w, D0                             ; $FFFFFE10
                ror.b   #$01, D0
                lsr.w   #$06, D0
                lea     (Objects_Layout), A0                   ; Offset_0x0E6800
                move.l  A0, A1
                adda.w  $00(A0, D0), A0
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x017A5E
                cmpi.b  #$0C, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x017A5E
                lea     (CNz_1_Objects_Layout_2P), A0          ; Offset_0x017F98
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                beq.s   Offset_0x017A5E
                lea     (CNz_2_Objects_Layout_2P), A0          ; Offset_0x018400
Offset_0x017A5E:
                move.l  A0, ($FFFFF770).w
                move.l  A0, ($FFFFF774).w
                move.l  A0, ($FFFFF778).w
                move.l  A0, ($FFFFF77C).w
                lea     ($FFFFFC00).w, A2
                move.w  #$0101, (A2)+
                move.w  #$005E, D0
Offset_0x017A7A:
                clr.l   (A2)+
                dbra    D0, Offset_0x017A7A
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D2
                move.w  ($FFFFEE00).w, D6
                subi.w  #$0080, D6
                bcc.s   Offset_0x017A92
                moveq   #$00, D6
Offset_0x017A92:
                andi.w  #$FF80, D6
                move.l  ($FFFFF770).w, A0
Offset_0x017A9A:
                cmp.w   (A0), D6
                bls.s   Offset_0x017AAC
                tst.b   $0002(A0)
                bpl.s   Offset_0x017AA8
                move.b  (A2), D2
                addq.b  #$01, (A2)
Offset_0x017AA8:
                addq.w  #$06, A0
                bra.s   Offset_0x017A9A
Offset_0x017AAC:
                move.l  A0, ($FFFFF770).w
                move.l  A0, ($FFFFF778).w
                move.l  ($FFFFF774).w, A0
                subi.w  #$0080, D6
                bcs.s   Offset_0x017AD0
Offset_0x017ABE:
                cmp.w   (A0), D6
                bls.s   Offset_0x017AD0
                tst.b   $0002(A0)
                bpl.s   Offset_0x017ACC
                addq.b  #$01, $0001(A2)
Offset_0x017ACC:
                addq.w  #$06, A0
                bra.s   Offset_0x017ABE
Offset_0x017AD0:
                move.l  A0, ($FFFFF774).w
                move.l  A0, ($FFFFF77C).w
                move.w  #$FFFF, ($FFFFF76E).w
                move.w  #$FFFF, ($FFFFF78C).w
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x017AF2
                addq.b  #$02, ($FFFFF76C).w
                bra     Offset_0x017BBE
;-------------------------------------------------------------------------------
Offset_0x017AF2:
                move.w  ($FFFFEE00).w, D1
                subi.w  #$0080, D1
                andi.w  #$FF80, D1
                move.w  D1, ($FFFFF7DA).w
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D2
                move.w  ($FFFFEE00).w, D6
                andi.w  #$FF80, D6
                cmp.w   ($FFFFF76E).w, D6
                beq     Offset_0x017BBC
                bge.s   Offset_0x017B78
                move.w  D6, ($FFFFF76E).w
                move.l  ($FFFFF774).w, A0
                subi.w  #$0080, D6
                bcs.s   Offset_0x017B54
Offset_0x017B28:
                cmp.w   $FFFA(A0), D6
                bge.s   Offset_0x017B54
                subq.w  #$06, A0
                tst.b   $0002(A0)
                bpl.s   Offset_0x017B3E
                subq.b  #$01, $0001(A2)
                move.b  $0001(A2), D2
Offset_0x017B3E:
                bsr     Offset_0x017EA4
                bne.s   Offset_0x017B48
                subq.w  #$06, A0
                bra.s   Offset_0x017B28
Offset_0x017B48:
                tst.b   $0002(A0)
                bpl.s   Offset_0x017B52
                addq.b  #$01, $0001(A2)
Offset_0x017B52:
                addq.w  #$06, A0
Offset_0x017B54:
                move.l  A0, ($FFFFF774).w
                move.l  ($FFFFF770).w, A0
                addi.w  #$0300, D6
Offset_0x017B60:
                cmp.w   $FFFA(A0), D6
                bgt.s   Offset_0x017B72
                tst.b   $FFFC(A0)
                bpl.s   Offset_0x017B6E
                subq.b  #$01, (A2)
Offset_0x017B6E:
                subq.w  #$06, A0
                bra.s   Offset_0x017B60
Offset_0x017B72:
                move.l  A0, ($FFFFF770).w
                rts
Offset_0x017B78:
                move.w  D6, ($FFFFF76E).w
                move.l  ($FFFFF770).w, A0
                addi.w  #$0280, D6
Offset_0x017B84:
                cmp.w   (A0), D6
                bls.s   Offset_0x017B98
                tst.b   $0002(A0)
                bpl.s   Offset_0x017B92
                move.b  (A2), D2
                addq.b  #$01, (A2)
Offset_0x017B92:
                bsr     Offset_0x017EA4
                beq.s   Offset_0x017B84
Offset_0x017B98:
                move.l  A0, ($FFFFF770).w
                move.l  ($FFFFF774).w, A0
                subi.w  #$0300, D6
                bcs.s   Offset_0x017BB8
Offset_0x017BA6:
                cmp.w   (A0), D6
                bls.s   Offset_0x017BB8
                tst.b   $0002(A0)
                bpl.s   Offset_0x017BB4
                addq.b  #$01, $0001(A2)
Offset_0x017BB4:
                addq.w  #$06, A0
                bra.s   Offset_0x017BA6
Offset_0x017BB8:
                move.l  A0, ($FFFFF774).w
Offset_0x017BBC:
                rts
Offset_0x017BBE:
                moveq   #$FFFFFFFF, D0
                move.l  D0, ($FFFFF780).w
                move.l  D0, ($FFFFF784).w
                move.l  D0, ($FFFFF788).w
                move.l  D0, ($FFFFF78C).w
                move.w  #$0000, ($FFFFF76E).w
                move.w  #$0000, ($FFFFF78C).w
                lea     ($FFFFFC00).w, A2
                move.w  (A2), ($FFFFF78E).w
                moveq   #$00, D2
                lea     ($FFFFFC00).w, A5
                lea     ($FFFFF770).w, A4
                lea     ($FFFFF786).w, A1
                lea     ($FFFFF789).w, A6
                moveq   #$FFFFFFFE, D6
                bsr     Offset_0x017D52
                lea     ($FFFFF786).w, A1
                moveq   #$FFFFFFFF, D6
                bsr     Offset_0x017D52
                lea     ($FFFFF786).w, A1
                moveq   #$00, D6
                bsr     Offset_0x017D52
                lea     ($FFFFF78E).w, A5
                lea     ($FFFFF778).w, A4
                lea     ($FFFFF789).w, A1
                lea     ($FFFFF786).w, A6
                moveq   #$FFFFFFFE, D6
                bsr     Offset_0x017D52
                lea     ($FFFFF789).w, A1
                moveq   #$FFFFFFFF, D6
                bsr     Offset_0x017D52
                lea     ($FFFFF789).w, A1
                moveq   #$00, D6
                bsr     Offset_0x017D52
;-------------------------------------------------------------------------------                
Offset_0x017C3A:
                move.w  ($FFFFEE00).w, D1
                andi.w  #$FF00, D1
                move.w  D1, ($FFFFF7DA).w
                move.w  ($FFFFEE20).w, D1
                andi.w  #$FF00, D1
                move.w  D1, ($FFFFF7DC).w
                move.b  ($FFFFEE00).w, D6
                andi.w  #$00FF, D6
                move.w  ($FFFFF76E).w, D0
                cmp.w   ($FFFFF76E).w, D6
                beq.s   Offset_0x017C7A
                move.w  D6, ($FFFFF76E).w
                lea     ($FFFFFC00).w, A5
                lea     ($FFFFF770).w, A4
                lea     ($FFFFF786).w, A1
                lea     ($FFFFF789).w, A6
                bsr.s   Offset_0x017CA4
Offset_0x017C7A:
                move.b  ($FFFFEE20).w, D6
                andi.w  #$00FF, D6
                move.w  ($FFFFF78C).w, D0
                cmp.w   ($FFFFF78C).w, D6
                beq.s   Offset_0x017CA2
                move.w  D6, ($FFFFF78C).w
                lea     ($FFFFF78E).w, A5
                lea     ($FFFFF778).w, A4
                lea     ($FFFFF789).w, A1
                lea     ($FFFFF786).w, A6
                bsr.s   Offset_0x017CA4
Offset_0x017CA2:
                rts
Offset_0x017CA4:
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D2
                cmp.w   D0, D6
                beq     Offset_0x017BBC
                bge     Offset_0x017D52
                move.b  $0002(A1), D2
                move.b  $0001(A1), $0002(A1)
                move.b  (A1), $0001(A1)
                move.b  D6, (A1)
                cmp.b   (A6), D2
                beq.s   Offset_0x017CDA
                cmp.b   $0001(A6), D2
                beq.s   Offset_0x017CDA
                cmp.b   $0002(A6), D2
                beq.s   Offset_0x017CDA
                bsr     Offset_0x017E34
                bra.s   Offset_0x017CDE
Offset_0x017CDA:
                bsr     Offset_0x017DF8
Offset_0x017CDE:
                bsr     Offset_0x017DD4
                bne.s   Offset_0x017D02
                move.l  $0004(A4), A0
Offset_0x017CE8:
                cmp.b   $FFFA(A0), D6
                bne.s   Offset_0x017CFC
                tst.b   $FFFC(A0)
                bpl.s   Offset_0x017CF8
                subq.b  #$01, $0001(A5)
Offset_0x017CF8:
                subq.w  #$06, A0
                bra.s   Offset_0x017CE8
Offset_0x017CFC:
                move.l  A0, $0004(A4)
                bra.s   Offset_0x017D38
Offset_0x017D02:
                move.l  $0004(A4), A0
                move.b  D6, (A1)
Offset_0x017D08:
                cmp.b   $FFFA(A0), D6
                bne.s   Offset_0x017D34
                subq.w  #$06, A0
                tst.b   $0002(A0)
                bpl.s   Offset_0x017D1E
                subq.b  #$01, $0001(A5)
                move.b  $0001(A5), D2
Offset_0x017D1E:
                bsr     Offset_0x017EEE
                bne.s   Offset_0x017D28
                subq.w  #$06, A0
                bra.s   Offset_0x017D08
Offset_0x017D28:
                tst.b   $0002(A0)
                bpl.s   Offset_0x017D32
                addq.b  #$01, $0001(A5)
Offset_0x017D32:
                addq.w  #$06, A0
Offset_0x017D34:
                move.l  A0, $0004(A4)
Offset_0x017D38:
                move.l  (A4), A0
                addq.w  #$03, D6
Offset_0x017D3C:
                cmp.b   $FFFA(A0), D6
                bne.s   Offset_0x017D4E
                tst.b   $FFFC(A0)
                bpl.s   Offset_0x017D4A
                subq.b  #$01, (A5)
Offset_0x017D4A:
                subq.w  #$06, A0
                bra.s   Offset_0x017D3C
Offset_0x017D4E:
                move.l  A0, (A4)
                rts
Offset_0x017D52:
                addq.w  #$02, D6
                move.b  (A1), D2
                move.b  $0001(A1), (A1)
                move.b  $0002(A1), $0001(A1)
                move.b  D6, $0002(A1)
                cmp.b   (A6), D2
                beq.s   Offset_0x017D7A
                cmp.b   $0001(A6), D2
                beq.s   Offset_0x017D7A
                cmp.b   $0002(A6), D2
                beq.s   Offset_0x017D7A
                bsr     Offset_0x017E34
                bra.s   Offset_0x017D7E
Offset_0x017D7A:
                bsr     Offset_0x017DF8
Offset_0x017D7E:
                bsr     Offset_0x017DD4
                bne.s   Offset_0x017D9A
                move.l  (A4), A0
Offset_0x017D86:
                cmp.b   (A0), D6
                bne.s   Offset_0x017D96
                tst.b   $0002(A0)
                bpl.s   Offset_0x017D92
                addq.b  #$01, (A5)
Offset_0x017D92:
                addq.w  #$06, A0
                bra.s   Offset_0x017D86
Offset_0x017D96:
                move.l  A0, (A4)
                bra.s   Offset_0x017DB4
Offset_0x017D9A:
                move.l  (A4), A0
                move.b  D6, (A1)
Offset_0x017D9E:
                cmp.b   (A0), D6
                bne.s   Offset_0x017DB2
                tst.b   $0002(A0)
                bpl.s   Offset_0x017DAC
                move.b  (A5), D2
                addq.b  #$01, (A5)
Offset_0x017DAC:
                bsr     Offset_0x017EEE
                beq.s   Offset_0x017D9E
Offset_0x017DB2:
                move.l  A0, (A4)
Offset_0x017DB4:
                move.l  $0004(A4), A0
                subq.w  #$03, D6
                bcs.s   Offset_0x017DCE
Offset_0x017DBC:
                cmp.b   (A0), D6
                bne.s   Offset_0x017DCE
                tst.b   $0002(A0)
                bpl.s   Offset_0x017DCA
                addq.b  #$01, $0001(A5)
Offset_0x017DCA:
                addq.w  #$06, A0
                bra.s   Offset_0x017DBC
Offset_0x017DCE:
                move.l  A0, $0004(A4)
                rts
Offset_0x017DD4:
                move.l  A1, -(A7)
                lea     ($FFFFF780).w, A1
                cmp.b   (A1)+, D6
                beq.s   Offset_0x017DF4
                cmp.b   (A1)+, D6
                beq.s   Offset_0x017DF4
                cmp.b   (A1)+, D6
                beq.s   Offset_0x017DF4
                cmp.b   (A1)+, D6
                beq.s   Offset_0x017DF4
                cmp.b   (A1)+, D6
                beq.s   Offset_0x017DF4
                cmp.b   (A1)+, D6
                beq.s   Offset_0x017DF4
                moveq   #$01, D0
Offset_0x017DF4:
                move.l  (A7)+, A1
                rts
Offset_0x017DF8:
                lea     ($FFFFF780).w, A1
                lea     ($FFFFBE00).w, A3
                tst.b   (A1)+
                bmi.s   Offset_0x017E30
                lea     ($FFFFC100).w, A3
                tst.b   (A1)+
                bmi.s   Offset_0x017E30
                lea     ($FFFFC400).w, A3
                tst.b   (A1)+
                bmi.s   Offset_0x017E30
                lea     ($FFFFC700).w, A3
                tst.b   (A1)+
                bmi.s   Offset_0x017E30
                lea     ($FFFFCA00).w, A3
                tst.b   (A1)+
                bmi.s   Offset_0x017E30
                lea     ($FFFFCD00).w, A3
                tst.b   (A1)+
                bmi.s   Offset_0x017E30
                nop
                nop
Offset_0x017E30:
                subq.w  #$01, A1
                rts
Offset_0x017E34:
                lea     ($FFFFF780).w, A1
                lea     ($FFFFBE00).w, A3
                cmp.b   (A1)+, D2
                beq.s   Offset_0x017E6C
                lea     ($FFFFC100).w, A3
                cmp.b   (A1)+, D2
                beq.s   Offset_0x017E6C
                lea     ($FFFFC400).w, A3
                cmp.b   (A1)+, D2
                beq.s   Offset_0x017E6C
                lea     ($FFFFC700).w, A3
                cmp.b   (A1)+, D2
                beq.s   Offset_0x017E6C
                lea     ($FFFFCA00).w, A3
                cmp.b   (A1)+, D2
                beq.s   Offset_0x017E6C
                lea     ($FFFFCD00).w, A3
                cmp.b   (A1)+, D2
                beq.s   Offset_0x017E6C
                nop
                nop
Offset_0x017E6C:
                move.b  #$FF, -(A1)
                movem.l A1/A3, -(A7)
                moveq   #$00, D1
                moveq   #$0B, D2
Offset_0x017E78:
                tst.b   (A3)
                beq.s   Offset_0x017E94
                move.l  A3, A1
                moveq   #$00, D0
                move.b  $0023(A1), D0
                beq.s   Offset_0x017E8C
                bclr    #$07, $02(A2, D0)
Offset_0x017E8C:
                moveq   #$0F, D0
Offset_0x017E8E:
                move.l  D1, (A1)+
                dbra    D0, Offset_0x017E8E
Offset_0x017E94:
                lea     $0040(A3), A3
                dbra    D2, Offset_0x017E78
                moveq   #$00, D2
                movem.l (A7)+, A1/A3
                rts
Offset_0x017EA4:
                tst.b   $0002(A0)
                bpl.s   Offset_0x017EB8
                bset    #$07, $02(A2, D2)
                beq.s   Offset_0x017EB8
                addq.w  #$06, A0
                moveq   #$00, D0
                rts
Offset_0x017EB8:
                bsr     SingleObjectLoad                       ; Offset_0x017F48
                bne.s   Offset_0x017EEC
                move.w  (A0)+, $0008(A1)
                move.w  (A0)+, D0
                bpl.s   Offset_0x017ECA
                move.b  D2, $0023(A1)
Offset_0x017ECA:
                move.w  D0, D1
                andi.w  #$0FFF, D0
                move.w  D0, $000C(A1)
                rol.w   #$03, D1
                andi.b  #$03, D1
                move.b  D1, $0001(A1)
                move.b  D1, $0022(A1)
                move.b  (A0)+, $0000(A1)
                move.b  (A0)+, $0028(A1)
                moveq   #$00, D0
Offset_0x017EEC:
                rts
Offset_0x017EEE:
                tst.b   $0002(A0)
                bpl.s   Offset_0x017F02
                bset    #$07, $02(A2, D2)
                beq.s   Offset_0x017F02
                addq.w  #$06, A0
                moveq   #$00, D0
                rts
Offset_0x017F02:
                btst    #$04, $0002(A0)
                beq.s   Offset_0x017F12
                bsr     SingleObjectLoad                       ; Offset_0x017F48
                bne.s   Offset_0x017F46
                bra.s   Offset_0x017F18
Offset_0x017F12:
                bsr     Load_Object_List                       ; Offset_0x017F84
                bne.s   Offset_0x017F46
Offset_0x017F18:
                move.w  (A0)+, $0008(A1)
                move.w  (A0)+, D0
                bpl.s   Offset_0x017F24
                move.b  D2, $0023(A1)
Offset_0x017F24:
                move.w  D0, D1
                andi.w  #$0FFF, D0
                move.w  D0, $000C(A1)
                rol.w   #$03, D1
                andi.b  #$03, D1
                move.b  D1, $0001(A1)
                move.b  D1, $0022(A1)
                move.b  (A0)+, $0000(A1)
                move.b  (A0)+, $0028(A1)
                moveq   #$00, D0
Offset_0x017F46:
                rts                
;===============================================================================
; Sub Rotina para carregar o posiconamento dos objetos das fases
; [ Término ]
;=============================================================================== 
                                                                    
;===============================================================================
; Sub Rotina para carregar apenas o objeto selecionado na memória a partir do 
; [ Início ]      endereço $FFFFB400 da RAM
;===============================================================================
SingleObjectLoad: ; Offset_0x017F48:
                lea     ($FFFFB400).w, A1
                move.w  #$006F, D0
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Loop_Find_Free_Ram                     ; Offset_0x017F5A
                move.w  #$0027, D0
Loop_Find_Free_Ram: ; Offset_0x017F5A:
                tst.b   (A1) ; Localiza um área de memória que não esteja em uso
                beq.s   Exit_SingleObjectLoad                  ; Offset_0x017F66
                lea     $0040(A1), A1
                dbra    D0, Loop_Find_Free_Ram                 ; Offset_0x017F5A
Exit_SingleObjectLoad: ; Offset_0x017F66:
                rts                
;===============================================================================
; Sub Rotina para carregar apenas o objeto selecionado na memória a partir do 
; [ Término ]     endereço $FFFFB400 da RAM
;===============================================================================
                
;===============================================================================
; Sub Rotina para carregar apenas o objeto selecionado na memória a partir do 
; [ Início ]      endereço $FFFFD000 da RAM
;===============================================================================
SingleObjectLoad_2: ; Offset_0x017F68:
                move.l  A0, A1
                move.w  #$D000, D0
                sub.w   A0, D0
                lsr.w   #$06, D0
                subq.w  #$01, D0
                bcs.s   Exit_SingleObjectLoad_2                ; Offset_0x017F82
Loop_Find_Free_Ram_2: ; Offset_0x017F76:
                tst.b   (A1) ; Localiza um área de memória que não esteja em uso
                beq.s   Exit_SingleObjectLoad_2                ; Offset_0x017F82
                lea     $0040(A1), A1
                dbra    D0, Loop_Find_Free_Ram_2               ; Offset_0x017F76
Exit_SingleObjectLoad_2: ; Offset_0x017F82:
                rts
;===============================================================================
; Sub Rotina para carregar apenas o objeto selecionado na memória a partir do 
; [ Término ]     endereço $FFFFD000 da RAM
;===============================================================================                
                                       
;===============================================================================
; Sub Rotina para carregar a lista de objetos na memória
; [ Início ]
;===============================================================================
Load_Object_List: ; Offset_0x017F84:   
                move.l  A3, A1
                move.w  #$000B, D0
Loop_Find_Free_Ram_3: ; Offset_0x017F8A:
                tst.b   (A1) ; Localiza um área de memória que não esteja em uso
                beq.s   Exit_Load_Object_List                  ; Offset_0x017F96
                lea     $0040(A1), A1
                dbra    D0, Loop_Find_Free_Ram_3               ; Offset_0x017F8A
Exit_Load_Object_List: ; Offset_0x017F96:
                rts
;===============================================================================
; Sub Rotina para carregar a lista de objetos na memória
; [ Término ]
;===============================================================================   
CNz_1_Objects_Layout_2P: ; Offset_0x017F98:
                incbin  'data\cnz\obj_2p1.dat'
;-------------------------------------------------------------------------------                
CNz_2_Objects_Layout_2P: ; Offset_0x018400:
                incbin  'data\cnz\obj_2p2.dat'      
;-------------------------------------------------------------------------------   
Obj_0x41_Springs: ; Offset_0x0187F6:  
                include 'data\objects\obj_0x41.asm' 
;-------------------------------------------------------------------------------                  
Obj_0x0D_End_Panel: ; Offset_0x019126: 
                include 'data\objects\obj_0x0D.asm'             
;-------------------------------------------------------------------------------    
    
;===============================================================================
; Sub Rotina SolidObject - usada pelas plataformas e outros objetos
; [ Início ]
;===============================================================================
SolidObject: ; Offset_0x019686:
                lea     ($FFFFB000).w, A1
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   SolidObject_A1                         ; Offset_0x0196A4
                movem.l (A7)+, D1-D4
                lea     ($FFFFB040).w, A1
                tst.b   $0001(A1)
                bpl     Offset_0x0196E4
                addq.b  #$01, D6
SolidObject_A1: ; Offset_0x0196A4:
                btst    D6, $0022(A0)
                beq     SolidObject_Sub_00                     ; Offset_0x019956
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, $0022(A1)
                bne.s   Offset_0x0196C8
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                bmi.s   Offset_0x0196C8
                cmp.w   D2, D0
                bcs.s   Offset_0x0196DC
Offset_0x0196C8:
                bclr    #$03, $0022(A1)
                bset    #$01, $0022(A1)
                bclr    D6, $0022(A0)
                moveq   #$00, D4
                rts
Offset_0x0196DC:
                move.w  D4, D2
                bsr     Player_On_Platform                     ; Offset_0x019B00
                moveq   #$00, D4
Offset_0x0196E4:
                rts     
;===============================================================================
; Sub Rotina SolidObject - usada pelas plataformas e outros objetos
; [ Término ]
;===============================================================================    

;===============================================================================
; Sub Rotina SolidObject_2 - usada pelas plataformas e outros objetos
; [ Início ]
;===============================================================================      
SolidObject_2: ; Offset_0x0196E6:
                lea     ($FFFFB000).w, A1
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   SolidObject_2_A1                       ; Offset_0x0196FC
                movem.l (A7)+, D1-D4
                lea     ($FFFFB040).w, A1
                addq.b  #$01, D6
SolidObject_2_A1: ; Offset_0x0196FC:
                btst    D6, $0022(A0)
                beq     Solid_Object_Monitors                  ; Offset_0x01995E
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, $0022(A1)
                bne.s   Offset_0x019720
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                bmi.s   Offset_0x019720
                cmp.w   D2, D0
                bcs.s   Offset_0x019734
Offset_0x019720:
                bclr    #$03, $0022(A1)
                bset    #$01, $0022(A1)
                bclr    D6, $0022(A0)
                moveq   #$00, D4
                rts
Offset_0x019734:
                move.w  D4, D2
                bsr     Player_On_Platform                     ; Offset_0x019B00
                moveq   #$00, D4
                rts     
;===============================================================================
; Sub Rotina SolidObject_2 - usada pelas plataformas e outros objetos
; [ Término ]
;===============================================================================  

;===============================================================================
; Sub Rotina SolidObject_3 - usada pelas molas e outros objetos
; [ Início ]
;===============================================================================   
SolidObject_3: ; Offset_0x01973E:
                lea     ($FFFFB000).w, A1
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   SolidObject_3_A1                       ; Offset_0x019754
                movem.l (A7)+, D1-D4
                lea     ($FFFFB040).w, A1
                addq.b  #$01, D6
SolidObject_3_A1: ; Offset_0x019754:
                btst    D6, $0022(A0)
                beq     SolidObject_3_Sub_00                   ; Offset_0x01989C
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, $0022(A1)
                bne.s   Offset_0x019778
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                bmi.s   Offset_0x019778
                cmp.w   D2, D0
                bcs.s   Offset_0x01978C
Offset_0x019778:
                bclr    #$03, $0022(A1)
                bset    #$01, $0022(A1)
                bclr    D6, $0022(A0)
                moveq   #$00, D4
                rts
Offset_0x01978C:
                move.w  D4, D2
                bsr     Offset_0x019B3A
                moveq   #$00, D4
                rts
;===============================================================================
; Sub Rotina SolidObject_3 - usada pelas molas e outros objetos
; [ Término ]
;=============================================================================== 

; Offset_0x019796: ; Rotina não usada no jogo (Left over)
                lea     ($FFFFB000).w, A1
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Offset_0x0197AC
                movem.l (A7)+, D1-D4
                lea     ($FFFFB040).w, A1
                addq.b  #$01, D6
Offset_0x0197AC:
                btst    D6, $0022(A0)
                beq     Offset_0x0198F6
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, $0022(A1)
                bne.s   Offset_0x0197D0
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                bmi.s   Offset_0x0197D0
                cmp.w   D2, D0
                bcs.s   Offset_0x0197E4
Offset_0x0197D0:
                bclr    #$03, $0022(A1)
                bset    #$01, $0022(A1)
                bclr    D6, $0022(A0)
                moveq   #$00, D4
                rts
Offset_0x0197E4:
                move.w  D4, D2
                bsr     Offset_0x019B7C
                moveq   #$00, D4
                rts
;-------------------------------------------------------------------------------                                                   
Offset_0x0197EE:
                lea     ($FFFFB000).w, A1
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Offset_0x019804
                movem.l (A7)+, D1-D4
                lea     ($FFFFB040).w, A1
                addq.b  #$01, D6
Offset_0x019804:
                btst    D6, $0022(A0)
                beq     Offset_0x01985A
                btst    #$01, $0022(A1)
                bne.s   Offset_0x019826
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                bmi.s   Offset_0x019826
                add.w   D1, D1
                cmp.w   D1, D0
                bcs.s   Offset_0x01983A
Offset_0x019826:
                bclr    #$03, $0022(A1)
                bset    #$01, $0022(A1)
                bclr    D6, $0022(A0)
                moveq   #$00, D4
                rts
Offset_0x01983A:
                move.w  $000C(A0), D0
                sub.w   D2, D0
                add.w   D3, D0
                moveq   #$00, D1
                move.b  $0016(A1), D1
                sub.w   D1, D0
                move.w  D0, $000C(A1)
                sub.w   $0008(A0), D4
                sub.w   D4, $0008(A1)
                moveq   #$00, D4
                rts
Offset_0x01985A:
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                bmi     Offset_0x019A32
                move.w  D1, D4
                add.w   D4, D4
                cmp.w   D4, D0
                bhi     Offset_0x019A32
                move.w  $000C(A0), D5
                add.w   D3, D5
                move.b  $0016(A1), D3
                ext.w   D3
                add.w   D3, D2
                move.w  $000C(A1), D3
                sub.w   D5, D3
                addq.w  #$04, D3
                add.w   D2, D3
                bmi     Offset_0x019A32
                move.w  D2, D4
                add.w   D4, D4
                cmp.w   D4, D3
                bcc     Offset_0x019A32
                bra     SolidObject_3_Sub_01                   ; Offset_0x01999C                                                 
;-------------------------------------------------------------------------------                  
SolidObject_3_Sub_00: ; Offset_0x01989C:
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                bmi     Offset_0x019A32
                move.w  D1, D3
                add.w   D3, D3
                cmp.w   D3, D0
                bhi     Offset_0x019A32
                move.w  D0, D5
                btst    #$00, $0001(A0)
                beq.s   Offset_0x0198C2
                not.w   D5
                add.w   D3, D5
Offset_0x0198C2:
                lsr.w   #$01, D5
                move.b  $00(A2, D5), D3
                sub.b   (A2), D3
                ext.w   D3
                move.w  $000C(A0), D5
                sub.w   D3, D5
                move.b  $0016(A1), D3
                ext.w   D3
                add.w   D3, D2
                move.w  $000C(A1), D3
                sub.w   D5, D3
                addq.w  #$04, D3
                add.w   D2, D3
                bmi     Offset_0x019A32
                move.w  D2, D4
                add.w   D4, D4
                cmp.w   D4, D3
                bcc     Offset_0x019A32
                bra     SolidObject_3_Sub_01                   ; Offset_0x01999C     
;-------------------------------------------------------------------------------                 
Offset_0x0198F6: ; Rotina referenciada por Offset_0x019796 não usada no jogo (Left over)                           
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                bmi     Offset_0x019A32
                move.w  D1, D3
                add.w   D3, D3
                cmp.w   D3, D0
                bhi     Offset_0x019A32
                move.w  D0, D5
                btst    #$00, $0001(A0)
                beq.s   Offset_0x01991C
                not.w   D5
                add.w   D3, D5
Offset_0x01991C:
                andi.w  #$FFFE, D5
                move.b  $00(A2, D5), D3
                move.b  $01(A2, D5), D2
                ext.w   D2
                ext.w   D3
                move.w  $000C(A0), D5
                sub.w   D3, D5
                move.w  $000C(A1), D3
                sub.w   D5, D3
                move.b  $0016(A1), D5
                ext.w   D5
                add.w   D5, D3
                addq.w  #$04, D3
                bmi     Offset_0x019A32
                add.w   D5, D2
                move.w  D2, D4
                add.w   D5, D4
                cmp.w   D4, D3
                bcc     Offset_0x019A32
                bra     SolidObject_3_Sub_01                   ; Offset_0x01999C                           
;-------------------------------------------------------------------------------   
SolidObject_Sub_00: ; Offset_0x019956:
                tst.b   $0001(A0)
                bpl     Offset_0x019A32          
;===============================================================================
; Sub Rotina Solid_Object_Monitors 
; [ Início ]
;===============================================================================                  
Solid_Object_Monitors: ; Offset_0x01995E:
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                bmi     Offset_0x019A32
                move.w  D1, D3
                add.w   D3, D3
                cmp.w   D3, D0
                bhi     Offset_0x019A32
                move.b  $0016(A1), D3
                ext.w   D3
                add.w   D3, D2
                move.w  $000C(A1), D3
                sub.w   $000C(A0), D3
                addq.w  #$04, D3
                add.w   D2, D3
                bmi     Offset_0x019A32
                andi.w  #$07FF, D3
                move.w  D2, D4
                add.w   D4, D4
                cmp.w   D4, D3
                bcc     Offset_0x019A32
SolidObject_3_Sub_01: ; Offset_0x01999C:                
                tst.b   $002A(A1)
                bmi     Offset_0x019A32
                cmpi.b  #$06, $0024(A1)
                bcc     Offset_0x019A58
                tst.w   ($FFFFFE08).w
                bne     Offset_0x019A58
                move.w  D0, D5
                cmp.w   D0, D1
                bcc.s   Offset_0x0199C4
                add.w   D1, D1
                sub.w   D1, D0
                move.w  D0, D5
                neg.w   D5
Offset_0x0199C4:
                move.w  D3, D1
                cmp.w   D3, D2
                bcc.s   Offset_0x0199D2
                subq.w  #$04, D3
                sub.w   D4, D3
                move.w  D3, D1
                neg.w   D1
Offset_0x0199D2:
                cmp.w   D1, D5
                bhi     Offset_0x019A5C
Offset_0x0199D8:
                cmpi.w  #$0004, D1
                bls.s   Offset_0x019A24
                tst.w   D0
                beq.s   Offset_0x0199FE
                bmi.s   Offset_0x0199EC
                tst.w   $0010(A1)
                bmi.s   Offset_0x0199FE
                bra.s   Offset_0x0199F2
Offset_0x0199EC:
                tst.w   $0010(A1)
                bpl.s   Offset_0x0199FE
Offset_0x0199F2:
                move.w  #$0000, $0014(A1)
                move.w  #$0000, $0010(A1)
Offset_0x0199FE:
                sub.w   D0, $0008(A1)
                btst    #$01, $0022(A1)
                bne.s   Offset_0x019A24
                move.l  D6, D4
                addq.b  #$02, D4
                bset    D4, $0022(A0)
                bset    #$05, $0022(A1)
                move.w  D6, D4
                addi.b  #$0D, D4
                bset    D4, D6
                moveq   #$01, D4
                rts
Offset_0x019A24:
                bsr.s   Offset_0x019A4A
                move.w  D6, D4
                addi.b  #$0D, D4
                bset    D4, D6
                moveq   #$01, D4
                rts
Offset_0x019A32:
                move.l  D6, D4
                addq.b  #$02, D4
                btst    D4, $0022(A0)
                beq.s   Offset_0x019A58
                cmpi.b  #$02, $001C(A1)
                beq.s   Offset_0x019A4A
                move.w  #$0001, $001C(A1)
Offset_0x019A4A:
                move.l  D6, D4
                addq.b  #$02, D4
                bclr    D4, $0022(A0)
                bclr    #$05, $0022(A1)
Offset_0x019A58:
                moveq   #$00, D4
                rts
Offset_0x019A5C:
                tst.w   D3
                bmi.s   Offset_0x019A74
                cmpi.w  #$0010, D3
                bcs.s   Offset_0x019AC4
                cmpi.b  #$85, (A0)
                bne.s   Offset_0x019A32
                cmpi.w  #$0014, D3
                bcs.s   Offset_0x019AC4
                bra.s   Offset_0x019A32
Offset_0x019A74:
                tst.w   $0012(A1)
                beq.s   Offset_0x019A96
                bpl.s   Offset_0x019A8A
                tst.w   D3
                bpl.s   Offset_0x019A8A
                sub.w   D3, $000C(A1)
                move.w  #$0000, $0012(A1)
Offset_0x019A8A:
                move.w  D6, D4
                addi.b  #$0F, D4
                bset    D4, D6
                moveq   #$FFFFFFFE, D4
                rts
Offset_0x019A96:
                btst    #$01, $0022(A1)
                bne.s   Offset_0x019A8A
                move.w  D0, D4
                bpl.s   Offset_0x019AA4
                neg.w   D4
Offset_0x019AA4:
                cmpi.w  #$0010, D4
                bcs     Offset_0x0199D8
                move.l  A0, -(A7)
                move.l  A1, A0
                jsr     (Kill_Player)                          ; Offset_0x03F690
                move.l  (A7)+, A0
                move.w  D6, D4
                addi.b  #$0F, D4
                bset    D4, D6
                moveq   #$FFFFFFFE, D4
                rts
Offset_0x019AC4:
                subq.w  #$04, D3
                moveq   #$00, D1
                move.b  $0019(A0), D1
                move.w  D1, D2
                add.w   D2, D2
                add.w   $0008(A1), D1
                sub.w   $0008(A0), D1
                bmi.s   Offset_0x019AFC
                cmp.w   D2, D1
                bcc.s   Offset_0x019AFC
                tst.w   $0012(A1)
                bmi.s   Offset_0x019AFC
                sub.w   D3, $000C(A1)
                subq.w  #$01, $000C(A1)
                bsr     Offset_0x019D82
                move.w  D6, D4
                addi.b  #$11, D4
                bset    D4, D6
                moveq   #$FFFFFFFF, D4
                rts
Offset_0x019AFC:
                moveq   #$00, D4
                rts         
;===============================================================================
; Sub Rotina Solid_Object_Monitors 
; [ Término ]
;===============================================================================                 
                
;===============================================================================
; Sub Rotina Player_On_Platform 
; [ Início ]
;===============================================================================  
Player_On_Platform: ; Offset_0x019B00:
                move.w  $000C(A0), D0
                sub.w   D3, D0
                bra.s   Offset_0x019B10
; Offset_0x019B08:                
                move.w  $000C(A0), D0
                subi.w  #$0009, D0
Offset_0x019B10:
                tst.b   $002A(A1)
                bmi.s   Offset_0x019B38
                cmpi.b  #$06, $0024(A1)
                bcc.s   Offset_0x019B38
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne.s   Offset_0x019B38
                moveq   #$00, D1
                move.b  $0016(A1), D1
                sub.w   D1, D0
                move.w  D0, $000C(A1)
                sub.w   $0008(A0), D2
                sub.w   D2, $0008(A1)
Offset_0x019B38:
                rts                
;===============================================================================
; Sub Rotina Player_On_Platform 
; [ Término ]
;===============================================================================  
Offset_0x019B3A:
                btst    #$03, $0022(A1)
                beq.s   Offset_0x019B7A
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                lsr.w   #$01, D0
                btst    #$00, $0001(A0)
                beq.s   Offset_0x019B5A
                not.w   D0
                add.w   D1, D0
Offset_0x019B5A:
                move.b  $00(A2, D0), D1
                ext.w   D1
                move.w  $000C(A0), D0
                sub.w   D1, D0
                moveq   #$00, D1
                move.b  $0016(A1), D1
                sub.w   D1, D0
                move.w  D0, $000C(A1)
                sub.w   $0008(A0), D2
                sub.w   D2, $0008(A1)
Offset_0x019B7A:
                rts  
;-------------------------------------------------------------------------------                              
Offset_0x019B7C: ; Rotina referenciada por Offset_0x019796 não usada no jogo (Left over) 
                btst    #$03, $0022(A1)
                beq.s   Offset_0x019B7A
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                btst    #$00, $0001(A0)
                beq.s   Offset_0x019B9A
                not.w   D0
                add.w   D1, D0
Offset_0x019B9A:
                andi.w  #$FFFE, D0
                bra.s   Offset_0x019B5A                
;===============================================================================
; Sub Rotina Platform_Object 
; [ Início ]
;===============================================================================  
Platform_Object: ; Offset_0x019BA0:
                lea     ($FFFFB000).w, A1
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Platform_Object_A1                     ; Offset_0x019BB6
                movem.l (A7)+, D1-D4
                lea     ($FFFFB040).w, A1
                addq.b  #$01, D6
Platform_Object_A1: ; Offset_0x019BB6:
                btst    D6, $0022(A0)
                beq     Offset_0x019D28
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, $0022(A1)
                bne.s   Offset_0x019BDA
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                bmi.s   Offset_0x019BDA
                cmp.w   D2, D0
                bcs.s   Offset_0x019BEE
Offset_0x019BDA:
                bclr    #$03, $0022(A1)
                bset    #$01, $0022(A1)
                bclr    D6, $0022(A0)
                moveq   #$00, D4
                rts
Offset_0x019BEE:
                move.w  D4, D2
                bsr     Player_On_Platform                     ; Offset_0x019B00
                moveq   #$00, D4
                rts   
;===============================================================================
; Sub Rotina Platform_Object 
; [ Término ]
;===============================================================================   

;===============================================================================
; Sub Rotina Platform_Object_2 
; [ Início ]
;===============================================================================    
Platform_Object_2: ; Offset_0x019BF8:
                lea     ($FFFFB000).w, A1
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Offset_0x019C0E
                movem.l (A7)+, D1-D4
                lea     ($FFFFB040).w, A1
                addq.b  #$01, D6
Offset_0x019C0E:
                btst    D6, $0022(A0)
                beq     Offset_0x019DFE
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, $0022(A1)
                bne.s   Offset_0x019C32
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                bmi.s   Offset_0x019C32
                cmp.w   D2, D0
                bcs.s   Offset_0x019C46
Offset_0x019C32:
                bclr    #$03, $0022(A1)
                bset    #$01, $0022(A1)
                bclr    D6, $0022(A0)
                moveq   #$00, D4
                rts
Offset_0x019C46:
                move.w  D4, D2
                bsr     Offset_0x019B3A
                moveq   #$00, D4
                rts
;===============================================================================
; Sub Rotina Platform_Object_2 
; [ Término ]
;===============================================================================  

;===============================================================================
; Sub Rotina Platform_Object_3 
; [ Início ]
;===============================================================================    
Platform_Object_3: ; Offset_0x019C50:
                lea     ($FFFFB000).w, A1
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Offset_0x019C66
                movem.l (A7)+, D1-D4
                lea     ($FFFFB040).w, A1
                addq.b  #$01, D6
Offset_0x019C66:
                btst    D6, $0022(A0)
                beq     Offset_0x019E36
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, $0022(A1)
                bne.s   Offset_0x019C8A
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                bmi.s   Offset_0x019C8A
                cmp.w   D2, D0
                bcs.s   Offset_0x019C9E
Offset_0x019C8A:
                bclr    #$03, $0022(A1)
                bset    #$01, $0022(A1)
                bclr    D6, $0022(A0)
                moveq   #$00, D4
                rts
Offset_0x019C9E:
                move.w  D4, D2
                bsr     Player_On_Platform                     ; Offset_0x019B00
                moveq   #$00, D4
                rts
;===============================================================================
; Sub Rotina Platform_Object_3 
; [ Término ]
;===============================================================================   

;===============================================================================
; Sub Rotina Platform_Elevator 
; [ Início ]
;===============================================================================  
Platform_Elevator: ; Offset_0x019CA8:
                lea     ($FFFFB000).w, A1
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Offset_0x019CBE
                movem.l (A7)+, D1-D4
                lea     ($FFFFB040).w, A1
                addq.b  #$01, D6
Offset_0x019CBE:
                btst    D6, $0022(A0)
                bne.s   Offset_0x019CD0
                btst    #$03, $0022(A1)
                bne.s   Offset_0x019CFC
                bra     Offset_0x019D28
Offset_0x019CD0:
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, $0022(A1)
                bne.s   Offset_0x019CEC
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                bmi.s   Offset_0x019CEC
                cmp.w   D2, D0
                bcs.s   Offset_0x019D00
Offset_0x019CEC:
                bclr    #$03, $0022(A1)
                bset    #$01, $0022(A1)
                bclr    D6, $0022(A0)
Offset_0x019CFC:
                moveq   #$00, D4
                rts
Offset_0x019D00:
                move.w  D4, D2
                bsr     Player_On_Platform                     ; Offset_0x019B00
                moveq   #$00, D4
                rts
;===============================================================================
; Sub Rotina Platform_Elevator 
; [ Término ]
;===============================================================================  
     
Offset_0x019D0A:
                tst.w   $0012(A1)
                bmi     Offset_0x019DFC
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                bmi     Offset_0x019DFC
                cmp.w   D2, D0
                bcc     Offset_0x019DFC
                bra.s   Offset_0x019D46                
;-------------------------------------------------------------------------------
Offset_0x019D28:
                tst.w   $0012(A1)
                bmi     Offset_0x019DFC
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                bmi     Offset_0x019DFC
                add.w   D1, D1
                cmp.w   D1, D0
                bcc     Offset_0x019DFC
Offset_0x019D46:                
                move.w  $000C(A0), D0
                sub.w   D3, D0
Offset_0x019D4C:                
                move.w  $000C(A1), D2
                move.b  $0016(A1), D1
                ext.w   D1
                add.w   D2, D1
                addq.w  #$04, D1
                sub.w   D1, D0
                bhi     Offset_0x019DFC
                cmpi.w  #$FFF0, D0
                bcs     Offset_0x019DFC
                tst.b   $002A(A1)
                bmi     Offset_0x019DFC
                cmpi.b  #$06, $0024(A1)
                bcc     Offset_0x019DFC
                add.w   D0, D2
                addq.w  #$03, D2
                move.w  D2, $000C(A1)
;-------------------------------------------------------------------------------
Offset_0x019D82:
                btst    #$03, $0022(A1)
                beq.s   Offset_0x019D9E
                moveq   #$00, D0
                move.b  $003D(A1), D0
                lsl.w   #$06, D0
                addi.l  #$FFFFB000, D0
                move.l  D0, A3
                bclr    D6, $0022(A3)
Offset_0x019D9E:
                move.w  A0, D0
                subi.w  #$B000, D0
                lsr.w   #$06, D0
                andi.w  #$007F, D0
                move.b  D0, $003D(A1)
                move.b  #$00, $0026(A1)
                move.w  #$0000, $0012(A1)
                move.w  $0010(A1), $0014(A1)
                btst    #$01, $0022(A1)
                beq.s   Offset_0x019DEC
                move.l  A0, -(A7)
                move.l  A1, A0
                move.w  A0, D1
                subi.w  #$B000, D1
                bne.s   Offset_0x019DE4
                cmpi.w  #$0002, (Player_Selected_Flag).w             ; $FFFFFF7A
                beq.s   Offset_0x019DE4
                jsr     (Sonic_ResetOnFloor)                   ; Offset_0x01B01E
                bra.s   Offset_0x019DEA
Offset_0x019DE4:
                jsr     (Miles_ResetOnFloor)                   ; Offset_0x01CAD8
Offset_0x019DEA:
                move.l  (A7)+, A0
Offset_0x019DEC:
                bset    #$03, $0022(A1)
                bclr    #$01, $0022(A1)
                bset    D6, $0022(A0)
Offset_0x019DFC:                
                rts     
;-------------------------------------------------------------------------------               
Offset_0x019DFE:
                tst.w   $0012(A1)
                bmi     Offset_0x019DFC
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                bmi.s   Offset_0x019DFC
                add.w   D1, D1
                cmp.w   D1, D0
                bcc.s   Offset_0x019DFC
                btst    #$00, $0001(A0)
                beq.s   Offset_0x019E24
                not.w   D0
                add.w   D1, D0
Offset_0x019E24:
                lsr.w   #$01, D0
                move.b  $00(A2, D0), D3
                ext.w   D3
                move.w  $000C(A0), D0
                sub.w   D3, D0
                bra     Offset_0x019D4C
;-------------------------------------------------------------------------------                  
Offset_0x019E36:                
                tst.w   $0012(A1)
                bmi     Offset_0x019DFC
                move.w  $0008(A1), D0
                sub.w   $0008(A0), D0
                add.w   D1, D0
                bmi     Offset_0x019DFC
                add.w   D1, D1
                cmp.w   D1, D0
                bcc     Offset_0x019DFC
                move.w  $000C(A0), D0
                sub.w   D3, D0
                bra     Offset_0x019D4C
;-------------------------------------------------------------------------------                
_Offset_0x019E5E: ; Usado pelo objeto 0x30               
                lea     ($FFFFB000).w, A1
                btst    #$03, $0022(A0)
                beq.s   Offset_0x019E8C
                jsr     (Player_HitFloor_A1)                  ; Offset_0x01ED38
                tst.w   D1
                beq.s   Offset_0x019E76
                bpl.s   Offset_0x019E8C
Offset_0x019E76:
                lea     ($FFFFB000).w, A1
                bclr    #$03, $0022(A1)
                bset    #$01, $0022(A1)
                bclr    #$03, $0022(A0)
Offset_0x019E8C:
                lea     ($FFFFB040).w, A1
                btst    #$04, $0022(A0)
                beq.s   Offset_0x019EBA
                jsr     (Player_HitFloor_A1)                   ; Offset_0x01ED38
                tst.w   D1
                beq.s   Offset_0x019EA4
                bpl.s   Offset_0x019EBA
Offset_0x019EA4:
                lea     ($FFFFB040).w, A1
                bclr    #$03, $0022(A1)
                bset    #$01, $0022(A1)
                bclr    #$04, $0022(A0)
Offset_0x019EBA:
                moveq   #$00, D4
                rts                                                                                   
;-------------------------------------------------------------------------------          
Obj_0x01_Sonic: ; Offset_0x019EBE:      
                include 'data\objects\obj_0x01.asm'    
;-------------------------------------------------------------------------------         
Obj_0x02_Miles: ; Offset_0x01B81E: 
                include 'data\objects\obj_0x02.asm'                   
;-------------------------------------------------------------------------------                     
Obj_0x05_Miles_Tail: ; Offset_0x01D18C: 
                include 'data\objects\obj_0x05.asm'                       
;-------------------------------------------------------------------------------

J_Kill_Player: ; Offset_0x01D2A6:
                jmp     (Kill_Player)                          ; Offset_0x03F690
                              
;-------------------------------------------------------------------------------              
Obj_0x0A_Sonic_Miles_Underwater: ; Offset_0x01D2AC:   
                include 'data\objects\obj_0x0A.asm'     
;===============================================================================
; Sub Rotina para restaurar a música da fase após o Sonic obter oxigênio 
; [ Início ]
;===============================================================================
ResumeMusic: ; Offset_0x01D7AA:
                cmpi.b  #$0C, $0028(A1)         ; Oxigênio coletado porém não estava sem falta...
                bhi.s   Reset_Water_Counter     ; Offset_0x01D7E4   ...então reinicia o contador
                cmpa.w  #$B000, A1              ; É o jogador principal quem coletou oxigênio
                bne.s   Reset_Water_Counter     ; Offset_0x01D7E4   ...não então reinicia o contador 
                move.w  (Level_Music_Buffer).w, D0 ; $FFFFFF70  ...sim coloca a música da fase em D0
                btst    #$01, $002B(A1)         ; Sonic está com invencibilidade ?
                beq.s   Try_Resume_SuperSonic   ; Offset_0x01D7C8 não então verifique se está como Super Sonic
                move.w  #Invincibility_Snd, D0  ; $0097
Try_Resume_SuperSonic: ; Offset_0x01D7C8:
                tst.b   (Super_Sonic_Flag).w    ; $FFFFFE19 Sonic está como Super Sonic
                beq     Try_Resume_Boss         ; Offset_0x01D7D4 ...não então verifique se tem chefe na tela
                move.w  #Super_Sonic_Snd, D0    ; $0096
Try_Resume_Boss: ; Offset_0x01D7D4:
                tst.b   (Boss_Flag).w           ; $FFFFF7AA Existe chefe na tela
                beq.s   Resume_Play_Music       ; Offset_0x01D7DE não então toca a música na D0
                move.w  #Boss_Snd, D0           ; $0093
Resume_Play_Music: ; Offset_0x01D7DE:
                jsr     (Play_Music)            ; Offset_0x00131A
Reset_Water_Counter: ; Offset_0x01D7E4:
                move.b  #$1E, $0028(A1)         ; Reinicia o contador de oxigênio para o jogador em A1
                rts                       
;===============================================================================
; Sub Rotina para restaurar a música da fase após o Sonic obter oxigênio 
; [ Término ]
;===============================================================================                       
Bubbles_Animate_Data: ; Offset_0x01D7EC:
                dc.w    Offset_0x01D80A-Bubbles_Animate_Data
                dc.w    Offset_0x01D814-Bubbles_Animate_Data
                dc.w    Offset_0x01D81E-Bubbles_Animate_Data
                dc.w    Offset_0x01D828-Bubbles_Animate_Data
                dc.w    Offset_0x01D832-Bubbles_Animate_Data
                dc.w    Offset_0x01D83C-Bubbles_Animate_Data
                dc.w    Offset_0x01D846-Bubbles_Animate_Data
                dc.w    Offset_0x01D84C-Bubbles_Animate_Data
                dc.w    Offset_0x01D854-Bubbles_Animate_Data
                dc.w    Offset_0x01D85C-Bubbles_Animate_Data
                dc.w    Offset_0x01D864-Bubbles_Animate_Data
                dc.w    Offset_0x01D86C-Bubbles_Animate_Data
                dc.w    Offset_0x01D874-Bubbles_Animate_Data
                dc.w    Offset_0x01D87C-Bubbles_Animate_Data
                dc.w    Offset_0x01D87E-Bubbles_Animate_Data
Offset_0x01D80A:
                dc.b    $05, $00, $01, $02, $03, $04, $08, $08, $FC, $00
Offset_0x01D814:
                dc.b    $05, $00, $01, $02, $03, $04, $09, $09, $FC, $00
Offset_0x01D81E:
                dc.b    $05, $00, $01, $02, $03, $04, $0A, $0A, $FC, $00
Offset_0x01D828:
                dc.b    $05, $00, $01, $02, $03, $04, $0B, $0B, $FC, $00
Offset_0x01D832:
                dc.b    $05, $00, $01, $02, $03, $04, $0C, $0C, $FC, $00
Offset_0x01D83C:
                dc.b    $05, $00, $01, $02, $03, $04, $0D, $0D, $FC, $00
Offset_0x01D846:
                dc.b    $0E, $00, $01, $02, $FC, $00
Offset_0x01D84C:
                dc.b    $07, $10, $08, $10, $08, $10, $08, $FC
Offset_0x01D854:
                dc.b    $07, $10, $09, $10, $09, $10, $09, $FC
Offset_0x01D85C:
                dc.b    $07, $10, $0A, $10, $0A, $10, $0A, $FC
Offset_0x01D864:
                dc.b    $07, $10, $0B, $10, $0B, $10, $0B, $FC
Offset_0x01D86C:
                dc.b    $07, $10, $0C, $10, $0C, $10, $0C, $FC
Offset_0x01D874:
                dc.b    $07, $10, $0D, $10, $0D, $10, $0D, $FC
Offset_0x01D87C:
                dc.b    $0E, $FC
Offset_0x01D87E:
                dc.b    $0E, $01, $02, $03, $04, $FC
;-------------------------------------------------------------------------------   
Obj_0x38_Shield: ; Offset_0x01D884:  
                include 'data\objects\obj_0x38.asm'     
;-------------------------------------------------------------------------------             
Obj_0x35_Invincibility: ; Offset_0x01D910:               
                include 'data\objects\obj_0x35.asm'     
;------------------------------------------------------------------------------- 
Shield_AnimateData: ; Offset_0x01DB7A:
                dc.w    Offset_0x01DB6E-Shield_AnimateData
Offset_0x01DB6E:
                dc.b    $00, $05, $00, $05, $01, $05, $02, $05, $03, $05, $04, $FF
;-------------------------------------------------------------------------------
Shield_Mappings: ; Offset_0x01DB7A:
                dc.w    Offset_0x01DB86-Shield_Mappings
                dc.w    Offset_0x01DBA8-Shield_Mappings
                dc.w    Offset_0x01DBCA-Shield_Mappings
                dc.w    Offset_0x01DBEC-Shield_Mappings
                dc.w    Offset_0x01DC0E-Shield_Mappings
                dc.w    Offset_0x01DC30-Shield_Mappings
Offset_0x01DB86:
                dc.w    $0004
                dc.l    $F0050000, $0000FFF0, $F0050800, $08000000
                dc.l    $00051000, $1000FFF0, $00051800, $18000000
Offset_0x01DBA8:
                dc.w    $0004
                dc.l    $F0050004, $0002FFF0, $F0050804, $08020000
                dc.l    $00051004, $1002FFF0, $00051804, $18020000
Offset_0x01DBCA:
                dc.w    $0004
                dc.l    $F0050008, $0004FFF0, $F0050808, $08040000
                dc.l    $00051008, $1004FFF0, $00051808, $18040000
Offset_0x01DBEC:
                dc.w    $0004
                dc.l    $F005000C, $0006FFF0, $F005080C, $08060000
                dc.l    $0005100C, $1006FFF0, $0005180C, $18060000
Offset_0x01DC0E:
                dc.w    $0004
                dc.l    $F0050010, $0008FFF0, $F0050810, $08080000
                dc.l    $00051010, $1008FFF0, $00051810, $18080000
Offset_0x01DC30:
                dc.w    $0004
                dc.l    $E00B0014, $000AFFE8, $E00B0814, $080A0000
                dc.l    $000B1014, $100AFFE8, $000B1814, $180A0000                   
;-------------------------------------------------------------------------------                  
Invicibility_Stars_Mappings: ; Offset_0x01DC52:
                dc.w    Offset_0x01DC64-Invicibility_Stars_Mappings
                dc.w    Offset_0x01DC66-Invicibility_Stars_Mappings
                dc.w    Offset_0x01DC70-Invicibility_Stars_Mappings
                dc.w    Offset_0x01DC7A-Invicibility_Stars_Mappings
                dc.w    Offset_0x01DC84-Invicibility_Stars_Mappings
                dc.w    Offset_0x01DC8E-Invicibility_Stars_Mappings
                dc.w    Offset_0x01DC98-Invicibility_Stars_Mappings
                dc.w    Offset_0x01DCA2-Invicibility_Stars_Mappings
                dc.w    Offset_0x01DCAC-Invicibility_Stars_Mappings
Offset_0x01DC64:
                dc.w    $0000
Offset_0x01DC66:
                dc.w    $0001
                dc.l    $F8010000, $0000FFFC
Offset_0x01DC70:
                dc.w    $0001
                dc.l    $F8010002, $0001FFFC
Offset_0x01DC7A:
                dc.w    $0001
                dc.l    $F8010004, $0002FFFC
Offset_0x01DC84:
                dc.w    $0001
                dc.l    $F8010006, $0003FFFC
Offset_0x01DC8E:
                dc.w    $0001
                dc.l    $F8010008, $0004FFFC
Offset_0x01DC98:
                dc.w    $0001
                dc.l    $F805000A, $0005FFF8
Offset_0x01DCA2:
                dc.w    $0001
                dc.l    $F805000E, $0007FFF8
Offset_0x01DCAC:
                dc.w    $0001
                dc.l    $F00F0012, $0009FFF0
;-------------------------------------------------------------------------------                                                           
Obj_0x08_Dust_Water_Splash: ; Offset_0x01DCB6:                 
                include 'data\objects\obj_0x08.asm'                  
;-------------------------------------------------------------------------------
Obj_0x7E_Super_Sonic_Stars: ; Offset_0x01E084:          
                include 'data\objects\obj_0x7E.asm'                                                         
;===============================================================================
; Sub Rotina Player_AnglePos - Rotina para mudar o ângulo e posição do andar do 
; [ Início ]                   Sonic / Miles 
;===============================================================================
Player_AnglePos: ;  Offset_0x01E1C6:
                move.l  #$FFFFD600, ($FFFFF796).w
                cmpi.b  #$0C, $003E(A0)
                beq.s   Offset_0x01E1DE
                move.l  #$FFFFD900, ($FFFFF796).w
Offset_0x01E1DE:
                move.b  $003E(A0), D5
                btst    #$03, $0022(A0)
                beq.s   Offset_0x01E1F6
                moveq   #$00, D0
                move.b  D0, ($FFFFF768).w
                move.b  D0, ($FFFFF76A).w
                rts
Offset_0x01E1F6:
                moveq   #$03, D0
                move.b  D0, ($FFFFF768).w
                move.b  D0, ($FFFFF76A).w
                move.b  $0026(A0), D0
                addi.b  #$20, D0
                bpl.s   Offset_0x01E218
                move.b  $0026(A0), D0
                bpl.s   Offset_0x01E212
                subq.b  #$01, D0
Offset_0x01E212:
                addi.b  #$20, D0
                bra.s   Offset_0x01E224
Offset_0x01E218:
                move.b  $0026(A0), D0
                bpl.s   Offset_0x01E220
                addq.b  #$01, D0
Offset_0x01E220:
                addi.b  #$1F, D0
Offset_0x01E224:
                andi.b  #$C0, D0
                cmpi.b  #$40, D0
                beq     Player_WalkVertL                       ; Offset_0x01E47A
                cmpi.b  #$80, D0
                beq     Player_WalkCeiling                     ; Offset_0x01E3CC
                cmpi.b  #$C0, D0
                beq     Player_WalkVertR                       ; Offset_0x01E324
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
                moveq   #$00, D0
                move.b  $0016(A0), D0
                ext.w   D0
                add.w   D0, D2
                move.b  $0017(A0), D0
                ext.w   D0
                add.w   D0, D3
                lea     ($FFFFF768).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindFloor                              ; Offset_0x01E762
                move.w  D1, -(A7)
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
                moveq   #$00, D0
                move.b  $0016(A0), D0
                ext.w   D0
                add.w   D0, D2
                move.b  $0017(A0), D0
                ext.w   D0
                neg.w   D0
                add.w   D0, D3
                lea     ($FFFFF76A).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindFloor                              ; Offset_0x01E762
                move.w  (A7)+, D0
                bsr     Player_Angle                           ; Offset_0x01E2E8
                tst.w   D1
                beq.s   Offset_0x01E2AE
                bpl.s   Offset_0x01E2B0
                cmpi.w  #$FFF2, D1
                blt.s   Offset_0x01E2AE
                add.w   D1, $000C(A0)
Offset_0x01E2AE:
                rts
Offset_0x01E2B0:
                move.b  $0010(A0), D0
                bpl.s   Offset_0x01E2B8
                neg.b   D0
Offset_0x01E2B8:
                addq.b  #$04, D0
                cmpi.b  #$0E, D0
                bcs.s   Offset_0x01E2C4
                move.b  #$0E, D0
Offset_0x01E2C4:
                cmp.b   D0, D1
                bgt.s   Offset_0x01E2CE
Offset_0x01E2C8:
                add.w   D1, $000C(A0)
                rts
Offset_0x01E2CE:
                tst.b   $0038(A0)
                bne.s   Offset_0x01E2C8
                bset    #$01, $0022(A0)
                bclr    #$05, $0022(A0)
                move.b  #$01, $001D(A0)
                rts            
;===============================================================================
; Sub Rotina Player_AnglePos - Rotina para mudar o ângulo e posição do andar do 
; [ Término ]                  Sonic / Miles 
;===============================================================================  
          
;===============================================================================
; Sub Rotina Player_Angle - Rotina para mudar o ângulo do andar do Sonic / Miles 
; [ Início ]                
;===============================================================================
Player_Angle: ; Offset_0x01E2E8:  
                move.b  ($FFFFF76A).w, D2
                cmp.w   D0, D1
                ble.s   Offset_0x01E2F6
                move.b  ($FFFFF768).w, D2
                move.w  D0, D1
Offset_0x01E2F6:
                btst    #$00, D2
                bne.s   Offset_0x01E312
                move.b  D2, D0
                sub.b   $0026(A0), D0
                bpl.s   Offset_0x01E306
                neg.b   D0
Offset_0x01E306:
                cmpi.b  #$20, D0
                bcc.s   Offset_0x01E312
                move.b  D2, $0026(A0)
                rts
Offset_0x01E312:
                move.b  $0026(A0), D2
                addi.b  #$20, D2
                andi.b  #$C0, D2
                move.b  D2, $0026(A0)
                rts
;===============================================================================
; Sub Rotina Player_Angle - Rotina para mudar o ângulo do andar do Sonic / Miles 
; [ Término ]                
;===============================================================================
            
;===============================================================================
; Sub Rotina Player_WalkVertR - Rotina para permitir o Sonic / Miles andar na 
; [ Início ]                    parede / rampa vertical do lado direito     
;===============================================================================              
Player_WalkVertR: ; Offset_0x01E324:
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
                moveq   #$00, D0
                move.b  $0017(A0), D0
                ext.w   D0
                neg.w   D0
                add.w   D0, D2
                move.b  $0016(A0), D0
                ext.w   D0
                add.w   D0, D3
                lea     ($FFFFF768).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindWall                               ; Offset_0x01E942
                move.w  D1, -(A7)
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
                moveq   #$00, D0
                move.b  $0017(A0), D0
                ext.w   D0
                add.w   D0, D2
                move.b  $0016(A0), D0
                ext.w   D0
                add.w   D0, D3
                lea     ($FFFFF76A).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindWall                               ; Offset_0x01E942
                move.w  (A7)+, D0
                bsr     Player_Angle                           ; Offset_0x01E2E8
                tst.w   D1
                beq.s   Offset_0x01E392
                bpl.s   Offset_0x01E394
                cmpi.w  #$FFF2, D1
                blt.s   Offset_0x01E392
                add.w   D1, $0008(A0)
Offset_0x01E392:
                rts
Offset_0x01E394:
                move.b  $0012(A0), D0
                bpl.s   Offset_0x01E39C
                neg.b   D0
Offset_0x01E39C:
                addq.b  #$04, D0
                cmpi.b  #$0E, D0
                bcs.s   Offset_0x01E3A8
                move.b  #$0E, D0
Offset_0x01E3A8:
                cmp.b   D0, D1
                bgt.s   Offset_0x01E3B2
Offset_0x01E3AC:
                add.w   D1, $0008(A0)
                rts
Offset_0x01E3B2:
                tst.b   $0038(A0)
                bne.s   Offset_0x01E3AC
                bset    #$01, $0022(A0)
                bclr    #$05, $0022(A0)
                move.b  #$01, $001D(A0)
                rts    
;===============================================================================
; Sub Rotina Player_WalkVertR - Rotina para permitir o Sonic / Miles andar na 
; [ Término ]                   parede / rampa vertical do lado direito     
;===============================================================================              
            
;===============================================================================
; Sub Rotina Player_WalkCeiling - Rotina para permitir o Sonic / Miles andar de 
; [ Início ]                      cabeça pra baixo     
;===============================================================================  
Player_WalkCeiling: ; Offset_0x01E3CC:
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
                moveq   #$00, D0
                move.b  $0016(A0), D0
                ext.w   D0
                sub.w   D0, D2
                eori.w  #$000F, D2
                move.b  $0017(A0), D0
                ext.w   D0
                add.w   D0, D3
                lea     ($FFFFF768).w, A4
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                bsr     FindFloor                              ; Offset_0x01E762
                move.w  D1, -(A7)
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
                moveq   #$00, D0
                move.b  $0016(A0), D0
                ext.w   D0
                sub.w   D0, D2
                eori.w  #$000F, D2
                move.b  $0017(A0), D0
                ext.w   D0
                sub.w   D0, D3
                lea     ($FFFFF76A).w, A4
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                bsr     FindFloor                              ; Offset_0x01E762
                move.w  (A7)+, D0
                bsr     Player_Angle                           ; Offset_0x01E2E8
                tst.w   D1
                beq.s   Offset_0x01E440
                bpl.s   Offset_0x01E442
                cmpi.w  #$FFF2, D1
                blt.s   Offset_0x01E440
                sub.w   D1, $000C(A0)
Offset_0x01E440:
                rts
Offset_0x01E442:
                move.b  $0010(A0), D0
                bpl.s   Offset_0x01E44A
                neg.b   D0
Offset_0x01E44A:
                addq.b  #$04, D0
                cmpi.b  #$0E, D0
                bcs.s   Offset_0x01E456
                move.b  #$0E, D0
Offset_0x01E456:
                cmp.b   D0, D1
                bgt.s   Offset_0x01E460
Offset_0x01E45A:
                sub.w   D1, $000C(A0)
                rts
Offset_0x01E460:
                tst.b   $0038(A0)
                bne.s   Offset_0x01E45A
                bset    #$01, $0022(A0)
                bclr    #$05, $0022(A0)
                move.b  #$01, $001D(A0)
                rts        
;===============================================================================
; Sub Rotina Player_WalkCeiling - Rotina para permitir o Sonic / Miles andar de 
; [ Término ]                     cabeça pra baixo     
;===============================================================================  

;===============================================================================
; Sub Rotina Player_WalkVertL - Rotina para permitir o Sonic / Miles andar na 
; [ Início ]                    parede / rampa vertical do lado esquerdo     
;===============================================================================    
Player_WalkVertL: ; Offset_0x01E47A:
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
                moveq   #$00, D0
                move.b  $0017(A0), D0
                ext.w   D0
                sub.w   D0, D2
                move.b  $0016(A0), D0
                ext.w   D0
                sub.w   D0, D3
                eori.w  #$000F, D3
                lea     ($FFFFF768).w, A4
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                bsr     FindWall                               ; Offset_0x01E942
                move.w  D1, -(A7)
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
                moveq   #$00, D0
                move.b  $0017(A0), D0
                ext.w   D0
                add.w   D0, D2
                move.b  $0016(A0), D0
                ext.w   D0
                sub.w   D0, D3
                eori.w  #$000F, D3
                lea     ($FFFFF76A).w, A4
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                bsr     FindWall                               ; Offset_0x01E942
                move.w  (A7)+, D0
                bsr     Player_Angle                           ; Offset_0x01E2E8
                tst.w   D1
                beq.s   Offset_0x01E4EE
                bpl.s   Offset_0x01E4F0
                cmpi.w  #$FFF2, D1
                blt.s   Offset_0x01E4EE
                sub.w   D1, $0008(A0)
Offset_0x01E4EE:
                rts
Offset_0x01E4F0:
                move.b  $0012(A0), D0
                bpl.s   Offset_0x01E4F8
                neg.b   D0
Offset_0x01E4F8:
                addq.b  #$04, D0
                cmpi.b  #$0E, D0
                bcs.s   Offset_0x01E504
                move.b  #$0E, D0
Offset_0x01E504:
                cmp.b   D0, D1
                bgt.s   Offset_0x01E50E
Offset_0x01E508:
                sub.w   D1, $0008(A0)
                rts
Offset_0x01E50E:
                tst.b   $0038(A0)
                bne.s   Offset_0x01E508
                bset    #$01, $0022(A0)
                bclr    #$05, $0022(A0)
                move.b  #$01, $001D(A0)
                rts          
;===============================================================================
; Sub Rotina Player_WalkVertL - Rotina para permitir o Sonic / Miles andar na 
; [ Término ]                   parede / rampa vertical do lado esquerdo     
;===============================================================================                
            
;=============================================================================== 
; Sub Rotina Floor_ChkTile - Rotina para testar em qual tile o objeto está
; [ Início ]                         
;===============================================================================                  
Floor_ChkTile: ; Offset_0x01E528: 
                move.w  D2, D0
                add.w   D0, D0
                andi.w  #$0F00, D0
                move.w  D3, D1
                lsr.w   #$03, D1
                move.w  D1, D4
                lsr.w   #$04, D1
                andi.w  #$007F, D1
                add.w   D1, D0
                moveq   #$FFFFFFFF, D1
                clr.w   D1
                lea     (Fg_Mem_Start_Address).w, A1                 ; $FFFF8000
                move.b  $00(A1, D0), D1
                add.w   D1, D1
                move.w  Chunk_Mem_Address(PC, D1), D1          ; Offset_0x01E562
                move.w  D2, D0
                andi.w  #$0070, D0
                add.w   D0, D1
                andi.w  #$000E, D4
                add.w   D4, D1
                move.l  D1, A1
                rts
;-------------------------------------------------------------------------------          
Chunk_Mem_Address: ; Offset_0x01E562: ; Array de Endereços dos tiles 128x128 -> Tile 1=$0080  
                dc.w    $0000, $0080, $0100, $0180, $0200, $0280, $0300, $0380
                dc.w    $0400, $0480, $0500, $0580, $0600, $0680, $0700, $0780
                dc.w    $0800, $0880, $0900, $0980, $0A00, $0A80, $0B00, $0B80
                dc.w    $0C00, $0C80, $0D00, $0D80, $0E00, $0E80, $0F00, $0F80
                dc.w    $1000, $1080, $1100, $1180, $1200, $1280, $1300, $1380
                dc.w    $1400, $1480, $1500, $1580, $1600, $1680, $1700, $1780
                dc.w    $1800, $1880, $1900, $1980, $1A00, $1A80, $1B00, $1B80
                dc.w    $1C00, $1C80, $1D00, $1D80, $1E00, $1E80, $1F00, $1F80
                dc.w    $2000, $2080, $2100, $2180, $2200, $2280, $2300, $2380
                dc.w    $2400, $2480, $2500, $2580, $2600, $2680, $2700, $2780
                dc.w    $2800, $2880, $2900, $2980, $2A00, $2A80, $2B00, $2B80
                dc.w    $2C00, $2C80, $2D00, $2D80, $2E00, $2E80, $2F00, $2F80
                dc.w    $3000, $3080, $3100, $3180, $3200, $3280, $3300, $3380
                dc.w    $3400, $3480, $3500, $3580, $3600, $3680, $3700, $3780
                dc.w    $3800, $3880, $3900, $3980, $3A00, $3A80, $3B00, $3B80
                dc.w    $3C00, $3C80, $3D00, $3D80, $3E00, $3E80, $3F00, $3F80
                dc.w    $4000, $4080, $4100, $4180, $4200, $4280, $4300, $4380
                dc.w    $4400, $4480, $4500, $4580, $4600, $4680, $4700, $4780
                dc.w    $4800, $4880, $4900, $4980, $4A00, $4A80, $4B00, $4B80
                dc.w    $4C00, $4C80, $4D00, $4D80, $4E00, $4E80, $4F00, $4F80
                dc.w    $5000, $5080, $5100, $5180, $5200, $5280, $5300, $5380
                dc.w    $5400, $5480, $5500, $5580, $5600, $5680, $5700, $5780
                dc.w    $5800, $5880, $5900, $5980, $5A00, $5A80, $5B00, $5B80
                dc.w    $5C00, $5C80, $5D00, $5D80, $5E00, $5E80, $5F00, $5F80
                dc.w    $6000, $6080, $6100, $6180, $6200, $6280, $6300, $6380
                dc.w    $6400, $6480, $6500, $6580, $6600, $6680, $6700, $6780
                dc.w    $6800, $6880, $6900, $6980, $6A00, $6A80, $6B00, $6B80
                dc.w    $6C00, $6C80, $6D00, $6D80, $6E00, $6E80, $6F00, $6F80
                dc.w    $7000, $7080, $7100, $7180, $7200, $7280, $7300, $7380
                dc.w    $7400, $7480, $7500, $7580, $7600, $7680, $7700, $7780
                dc.w    $7800, $7880, $7900, $7980, $7A00, $7A80, $7B00, $7B80
                dc.w    $7C00, $7C80, $7D00, $7D80, $7E00, $7E80, $7F00, $7F80          
;=============================================================================== 
; Sub Rotina Floor_ChkTile - Rotina para testar em qual tile o objeto está
; [ Término ]                         
;=============================================================================== 

;=============================================================================== 
; Sub Rotina FindFloor - Rotina para localizar o chão
; [ Início ]                         
;===============================================================================                  
FindFloor: ; Offset_0x01E762: 
                bsr     Floor_ChkTile                          ; Offset_0x01E528
                move.w  (A1), D0
                move.w  D0, D4
                andi.w  #$03FF, D0
                beq.s   Offset_0x01E774
                btst    D5, D4
                bne.s   Offset_0x01E782
Offset_0x01E774:
                add.w   A3, D2
                bsr     FindFloor2                             ; Offset_0x01E80A
                sub.w   A3, D2
                addi.w  #$0010, D1
                rts
Offset_0x01E782:
                move.l  ($FFFFF796).w, A2
                move.b  $00(A2, D0), D0
                andi.w  #$00FF, D0
                beq.s   Offset_0x01E774
                lea     (AngleMap), A2                         ; Offset_0x042D50
                move.b  $00(A2, D0), (A4)
                lsl.w   #$04, D0
                move.w  D3, D1
                btst    #$0A, D4
                beq.s   Offset_0x01E7A8
                not.w   D1
                neg.b   (A4)
Offset_0x01E7A8:
                btst    #$0B, D4
                beq.s   Offset_0x01E7B8
                addi.b  #$40, (A4)
                neg.b   (A4)
                subi.b  #$40, (A4)
Offset_0x01E7B8:
                andi.w  #$000F, D1
                add.w   D0, D1
                lea     (Colision_Array_1), A2                 ; Offset_0x042E50
                move.b  $00(A2, D1), D0
                ext.w   D0
                eor.w   D6, D4
                btst    #$0B, D4
                beq.s   Offset_0x01E7D4
                neg.w   D0
Offset_0x01E7D4:
                tst.w   D0
                beq.s   Offset_0x01E774
                bmi.s   Offset_0x01E7F0
                cmpi.b  #$10, D0
                beq.s   Offset_0x01E7FC
                move.w  D2, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                move.w  #$000F, D1
                sub.w   D0, D1
                rts
Offset_0x01E7F0:
                move.w  D2, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                bpl     Offset_0x01E774
Offset_0x01E7FC:
                sub.w   A3, D2
                bsr     FindFloor2                             ; Offset_0x01E80A
                add.w   A3, D2
                subi.w  #$0010, D1
                rts
;=============================================================================== 
; Sub Rotina FindFloor - Rotina para localizar o chão
; [ Término ]                         
;===============================================================================   

;=============================================================================== 
; Sub Rotina FindFloor2 - Rotina secundária para localizar o chão
; [ Início ]                         
;===============================================================================    
FindFloor2: ; Offset_0x01E80A:
                bsr     Floor_ChkTile                          ; Offset_0x01E528
                move.w  (A1), D0
                move.w  D0, D4
                andi.w  #$03FF, D0
                beq.s   Offset_0x01E81C
                btst    D5, D4
                bne.s   Offset_0x01E82A
Offset_0x01E81C:
                move.w  #$000F, D1
                move.w  D2, D0
                andi.w  #$000F, D0
                sub.w   D0, D1
                rts
Offset_0x01E82A:
                move.l  ($FFFFF796).w, A2
                move.b  $00(A2, D0), D0
                andi.w  #$00FF, D0
                beq.s   Offset_0x01E81C
                lea     (AngleMap), A2                         ; Offset_0x042D50
                move.b  $00(A2, D0), (A4)
                lsl.w   #$04, D0
                move.w  D3, D1
                btst    #$0A, D4
                beq.s   Offset_0x01E850
                not.w   D1
                neg.b   (A4)
Offset_0x01E850:
                btst    #$0B, D4
                beq.s   Offset_0x01E860
                addi.b  #$40, (A4)
                neg.b   (A4)
                subi.b  #$40, (A4)
Offset_0x01E860:
                andi.w  #$000F, D1
                add.w   D0, D1
                lea     (Colision_Array_1), A2                 ; Offset_0x042E50
                move.b  $00(A2, D1), D0
                ext.w   D0
                eor.w   D6, D4
                btst    #$0B, D4
                beq.s   Offset_0x01E87C
                neg.w   D0
Offset_0x01E87C:
                tst.w   D0
                beq.s   Offset_0x01E81C
                bmi.s   Offset_0x01E892
                move.w  D2, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                move.w  #$000F, D1
                sub.w   D0, D1
                rts
Offset_0x01E892:
                move.w  D2, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                bpl     Offset_0x01E81C
                not.w   D1
                rts
;=============================================================================== 
; Sub Rotina FindFloor2 - Rotina secundária para localizar o chão
; [ Término ]                         
;===============================================================================  

;=============================================================================== 
; Sub Rotina Object_FindFloor - Rotina para o objeto verificar se está no chão 
; [ Início ]                         
;===============================================================================                 
Object_FindFloor: ; Offset_0x01E8A2:                
                bsr     Floor_ChkTile                          ; Offset_0x01E528
                move.w  (A1), D0
                move.w  D0, D4
                andi.w  #$03FF, D0
                beq.s   Offset_0x01E8B4
                btst    D5, D4
                bne.s   Offset_0x01E8BA
Offset_0x01E8B4:
                move.w  #$0010, D1
                rts
Offset_0x01E8BA:
                move.l  ($FFFFF796).w, A2
                move.b  $00(A2, D0), D0
                andi.w  #$00FF, D0
                beq.s   Offset_0x01E8B4
                lea     (AngleMap), A2                         ; Offset_0x042D50
                move.b  $00(A2, D0), (A4)
                lsl.w   #$04, D0
                move.w  D3, D1
                btst    #$0A, D4
                beq.s   Offset_0x01E8E0
                not.w   D1
                neg.b   (A4)
Offset_0x01E8E0:
                btst    #$0B, D4
                beq.s   Offset_0x01E8F0
                addi.b  #$40, (A4)
                neg.b   (A4)
                subi.b  #$40, (A4)
Offset_0x01E8F0:
                andi.w  #$000F, D1
                add.w   D0, D1
                lea     (Colision_Array_1), A2                 ; Offset_0x042E50
                move.b  $00(A2, D1), D0
                ext.w   D0
                eor.w   D6, D4
                btst    #$0B, D4
                beq.s   Offset_0x01E90C
                neg.w   D0
Offset_0x01E90C:
                tst.w   D0
                beq.s   Offset_0x01E8B4
                bmi.s   Offset_0x01E928
                cmpi.b  #$10, D0
                beq.s   Offset_0x01E934
                move.w  D2, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                move.w  #$000F, D1
                sub.w   D0, D1
                rts
Offset_0x01E928:
                move.w  D2, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                bpl     Offset_0x01E8B4
Offset_0x01E934:
                sub.w   A3, D2
                bsr     FindFloor2                             ; Offset_0x01E80A
                add.w   A3, D2
                subi.w  #$0010, D1
                rts                
;=============================================================================== 
; Sub Rotina Object_FindFloor - Rotina para o objeto verificar se está no chão 
; [ Término ]                         
;===============================================================================   
                                                                        
;=============================================================================== 
; Sub Rotina FindWall - Rotina para localizar as paredes
; [ Início ]                         
;===============================================================================                  
FindWall: ; Offset_0x01E942:
                bsr     Floor_ChkTile                          ; Offset_0x01E528
                move.w  (A1), D0
                move.w  D0, D4
                andi.w  #$03FF, D0
                beq.s   Offset_0x01E954
                btst    D5, D4
                bne.s   Offset_0x01E962
Offset_0x01E954:
                add.w   A3, D3
                bsr     FindWall2                              ; Offset_0x01E9EA
                sub.w   A3, D3
                addi.w  #$0010, D1
                rts
Offset_0x01E962:
                move.l  ($FFFFF796).w, A2
                move.b  $00(A2, D0), D0
                andi.w  #$00FF, D0
                beq.s   Offset_0x01E954
                lea     (AngleMap), A2                         ; Offset_0x042D50
                move.b  $00(A2, D0), (A4)
                lsl.w   #$04, D0
                move.w  D2, D1
                btst    #$0B, D4
                beq.s   Offset_0x01E990
                not.w   D1
                addi.b  #$40, (A4)
                neg.b   (A4)
                subi.b  #$40, (A4)
Offset_0x01E990:
                btst    #$0A, D4
                beq.s   Offset_0x01E998
                neg.b   (A4)
Offset_0x01E998:
                andi.w  #$000F, D1
                add.w   D0, D1
                lea     (Colision_Array_2), A2                 ; Offset_0x043E50
                move.b  $00(A2, D1), D0
                ext.w   D0
                eor.w   D6, D4
                btst    #$0A, D4
                beq.s   Offset_0x01E9B4
                neg.w   D0
Offset_0x01E9B4:
                tst.w   D0
                beq.s   Offset_0x01E954
                bmi.s   Offset_0x01E9D0
                cmpi.b  #$10, D0
                beq.s   Offset_0x01E9DC
                move.w  D3, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                move.w  #$000F, D1
                sub.w   D0, D1
                rts
Offset_0x01E9D0:
                move.w  D3, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                bpl     Offset_0x01E954
Offset_0x01E9DC:
                sub.w   A3, D3
                bsr     FindWall2                              ; Offset_0x01E9EA
                add.w   A3, D3
                subi.w  #$0010, D1
                rts                        
;=============================================================================== 
; Sub Rotina FindWall - Rotina para localizar as paredes
; [ Término ]                         
;===============================================================================                         

;=============================================================================== 
; Sub Rotina FindWall2 - Rotina secundária para localizar as paredes
; [ Início ]                         
;===============================================================================                    
FindWall2: ; Offset_0x01E9EA:
                bsr     Floor_ChkTile                          ; Offset_0x01E528
                move.w  (A1), D0
                move.w  D0, D4
                andi.w  #$03FF, D0
                beq.s   Offset_0x01E9FC
                btst    D5, D4
                bne.s   Offset_0x01EA0A
Offset_0x01E9FC:
                move.w  #$000F, D1
                move.w  D3, D0
                andi.w  #$000F, D0
                sub.w   D0, D1
                rts
Offset_0x01EA0A:
                move.l  ($FFFFF796).w, A2
                move.b  $00(A2, D0), D0
                andi.w  #$00FF, D0
                beq.s   Offset_0x01E9FC
                lea     (AngleMap), A2                         ; Offset_0x042D50
                move.b  $00(A2, D0), (A4)
                lsl.w   #$04, D0
                move.w  D2, D1
                btst    #$0B, D4
                beq.s   Offset_0x01EA38
                not.w   D1
                addi.b  #$40, (A4)
                neg.b   (A4)
                subi.b  #$40, (A4)
Offset_0x01EA38:
                btst    #$0A, D4
                beq.s   Offset_0x01EA40
                neg.b   (A4)
Offset_0x01EA40:
                andi.w  #$000F, D1
                add.w   D0, D1
                lea     (Colision_Array_2), A2                 ; Offset_0x043E50
                move.b  $00(A2, D1), D0
                ext.w   D0
                eor.w   D6, D4
                btst    #$0A, D4
                beq.s   Offset_0x01EA5C
                neg.w   D0
Offset_0x01EA5C:
                tst.w   D0
                beq.s   Offset_0x01E9FC
                bmi.s   Offset_0x01EA72
                move.w  D3, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                move.w  #$000F, D1
                sub.w   D0, D1
                rts
Offset_0x01EA72:
                move.w  D3, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                bpl     Offset_0x01E9FC
                not.w   D1
                rts 
;=============================================================================== 
; Sub Rotina FindWall2 - Rotina secundária para localizar as paredes
; [ Término ]                         
;===============================================================================                  
                        
;=============================================================================== 
; Sub Rotina FloorLog_Unk - Rotina não usada, algo como executar um log das 
; [ Início ]                colisões (Talvez usada durante o desenvolvimento)          
;===============================================================================    
FloorLog_Unk: ; Offset_0x01EA82:
                rts              ; Com este rts a rotina abaixo ficou desativada  
; Offset_0x01EA84:
                lea     (Colision_Array_1), A1                 ; Offset_0x042E50
                lea     (Colision_Array_1), A2                 ; Offset_0x042E50
                move.w  #$00FF, D3
Offset_0x01EA94:
                moveq   #$10, D5
                move.w  #$000F, D2
Offset_0x01EA9A:
                moveq   #$00, D4
                move.w  #$000F, D1
Offset_0x01EAA0:
                move.w  (A1)+, D0
                lsr.l   D5, D0
                addx.w  D4, D4
                dbra    D1, Offset_0x01EAA0
                move.w  D4, (A2)+
                suba.w  #$0020, A1
                subq.w  #$01, D5
                dbra    D2, Offset_0x01EA9A
                adda.w  #$0020, A1
                dbra    D3, Offset_0x01EA94
                lea     (Colision_Array_1), A1                 ; Offset_0x042E50
                lea     (Colision_Array_2), A2                 ; Offset_0x043E50
                bsr.s   Offset_0x01EAD8
                lea     (Colision_Array_1), A1                 ; Offset_0x042E50
                lea     (Colision_Array_1), A2                 ; Offset_0x042E50
Offset_0x01EAD8:
                move.w  #$0FFF, D3
Offset_0x01EADC:
                moveq   #$00, D2
                move.w  #$000F, D1
                move.w  (A1)+, D0
                beq.s   Offset_0x01EB0A
                bmi.s   Offset_0x01EAF4
Offset_0x01EAE8:
                lsr.w   #$01, D0
                bcc.s   Offset_0x01EAEE
                addq.b  #$01, D2
Offset_0x01EAEE:
                dbra    D1, Offset_0x01EAE8
                bra.s   Offset_0x01EB0C
Offset_0x01EAF4:
                cmpi.w  #$FFFF, D0
                beq.s   Offset_0x01EB06
Offset_0x01EAFA:
                lsl.w   #$01, D0
                bcc.s   Offset_0x01EB00
                subq.b  #$01, D2
Offset_0x01EB00:
                dbra    D1, Offset_0x01EAFA
                bra.s   Offset_0x01EB0C
Offset_0x01EB06:
                move.w  #$0010, D0
Offset_0x01EB0A:
                move.w  D0, D2
Offset_0x01EB0C:
                move.b  D2, (A2)+
                dbra    D3, Offset_0x01EADC
                rts
;=============================================================================== 
; Sub Rotina FloorLog_Unk - Rotina não usada, algo como executar um log das 
; [ Término ]               colisões (Talvez usada durante o desenvolvimento)          
;===============================================================================                                                 

;=============================================================================== 
; Sub Rotina Player_WalkSpeed - Rotina para calcular o quanto de espaço há na 
; [ Início ]                    frente do Sonic / Miles      
;===============================================================================                                  
Player_WalkSpeed: ; Offset_0x01EB14:
                move.l  #$FFFFD600, ($FFFFF796).w
                cmpi.b  #$0C, $003E(A0)
                beq.s   Offset_0x01EB2C
                move.l  #$FFFFD900, ($FFFFF796).w
Offset_0x01EB2C:
                move.b  $003F(A0), D5
                move.l  $0008(A0), D3
                move.l  $000C(A0), D2
                move.w  $0010(A0), D1
                ext.l   D1
                asl.l   #$08, D1
                add.l   D1, D3
                move.w  $0012(A0), D1
                ext.l   D1
                asl.l   #$08, D1
                add.l   D1, D2
                swap.w  D2
                swap.w  D3
                move.b  D0, ($FFFFF768).w
                move.b  D0, ($FFFFF76A).w
                move.b  D0, D1
                addi.b  #$20, D0
                bpl.s   Offset_0x01EB6C
                move.b  D1, D0
                bpl.s   Offset_0x01EB66
                subq.b  #$01, D0
Offset_0x01EB66:
                addi.b  #$20, D0
                bra.s   Offset_0x01EB76
Offset_0x01EB6C:
                move.b  D1, D0
                bpl.s   Offset_0x01EB72
                addq.b  #$01, D0
Offset_0x01EB72:
                addi.b  #$1F, D0
Offset_0x01EB76:
                andi.b  #$C0, D0
                beq     Offset_0x01EC76
                cmpi.b  #$80, D0
                beq     Offset_0x01EF2E
                andi.b  #$38, D1
                bne.s   Offset_0x01EB8E
                addq.w  #$08, D2
Offset_0x01EB8E:
                cmpi.b  #$40, D0
                beq     Player_HitWall_D3                      ; Offset_0x01EFF6
                bra     Offset_0x01EE74
;=============================================================================== 
; Sub Rotina Player_WalkSpeed - Rotina para calcular o quanto de espaço há na 
; [ Término ]                   frente do Sonic / Miles      
;===============================================================================    

;=============================================================================== 
; Sub Rotina CalcRoomOverHead - Rotina para calcular o quanto de espaço há em 
; [ Início ]                    cima do Sonic / Miles      
;===============================================================================                
CalcRoomOverHead: ; Offset_0x01EB9A:
                move.l  #$FFFFD600, ($FFFFF796).w
                cmpi.b  #$0C, $003E(A0)
                beq.s   Offset_0x01EBB2
                move.l  #$FFFFD900, ($FFFFF796).w
Offset_0x01EBB2:
                move.b  $003F(A0), D5
                move.b  D0, ($FFFFF768).w
                move.b  D0, ($FFFFF76A).w
                addi.b  #$20, D0
                andi.b  #$C0, D0
                cmpi.b  #$40, D0
                beq     Player_DontRunOnWallsL                 ; Offset_0x01EF86
                cmpi.b  #$80, D0
                beq     Player_DontRunOnWalls                  ; Offset_0x01EEBE
                cmpi.b  #$C0, D0
                beq     Player_DontRunOnWallsR                 ; Offset_0x01EE0C
Offset_0x01EBDE: ; Usado pelo Sonic / Miles                
                move.l  #$FFFFD600, ($FFFFF796).w
                cmpi.b  #$0C, $003E(A0)
                beq.s   Offset_0x01EBF6
                move.l  #$FFFFD900, ($FFFFF796).w
Offset_0x01EBF6:
                move.b  $003E(A0), D5
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
                moveq   #$00, D0
                move.b  $0016(A0), D0
                ext.w   D0
                add.w   D0, D2
                move.b  $0017(A0), D0
                ext.w   D0
                add.w   D0, D3
                lea     ($FFFFF768).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindFloor                              ; Offset_0x01E762
                move.w  D1, -(A7)
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
                moveq   #$00, D0
                move.b  $0016(A0), D0
                ext.w   D0
                add.w   D0, D2
                move.b  $0017(A0), D0
                ext.w   D0
                sub.w   D0, D3
                lea     ($FFFFF76A).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindFloor                              ; Offset_0x01E762
                move.w  (A7)+, D0
                move.b  #$00, D2
Offset_0x01EC56:                
                move.b  ($FFFFF76A).w, D3
                cmp.w   D0, D1
                ble.s   Offset_0x01EC64
                move.b  ($FFFFF768).w, D3
                exg.l   D1, D0
Offset_0x01EC64:
                btst    #$00, D3
                beq.s   Offset_0x01EC6C
                move.b  D2, D3
Offset_0x01EC6C:
                rts      
;=============================================================================== 
; Sub Rotina CalcRoomOverHead - Rotina para calcular o quanto de espaço há em 
; [ Término ]                   cima do Sonic / Miles      
;===============================================================================      
; Offset_0x01EC6E:
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
Offset_0x01EC76:                
                addi.w  #$000A, D2
                lea     ($FFFFF768).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindFloor                              ; Offset_0x01E762
                move.b  #$00, D2
Offset_0x01EC8E:                
                move.b  ($FFFFF768).w, D3
                btst    #$00, D3
                beq.s   Offset_0x01EC9A
                move.b  D2, D3
Offset_0x01EC9A:
                rts
; Offset_0x01EC9C:                
                move.w  $0008(A0), D3
                move.w  $000C(A0), D2
                subq.w  #$04, D2
                move.l  #$FFFFD600, ($FFFFF796).w
                cmpi.b  #$0D, $003F(A0)
                beq.s   Offset_0x01ECBE
                move.l  #$FFFFD900, ($FFFFF796).w
Offset_0x01ECBE:
                lea     ($FFFFF768).w, A4
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                move.b  $003F(A0), D5
                bsr     FindFloor                              ; Offset_0x01E762
                move.b  ($FFFFF768).w, D3
                btst    #$00, D3
                beq.s   Offset_0x01ECE4
                move.b  #$00, D3
Offset_0x01ECE4:
                rts

;=============================================================================== 
; Sub Rotina Player_HitFloor - Rotina para verificar onde o Sonic / Miles 
; [ Início ]                   está no chão      
;===============================================================================                    
Player_HitFloor: ; Offset_0x01ECE6:
                move.w  $0008(A0), D3
Player_HitFloor_D3: ; Offset_0x01ECEA:                
                move.w  $000C(A0), D2
                moveq   #$00, D0
                move.b  $0016(A0), D0
                ext.w   D0
                add.w   D0, D2
; Player_HitFloor_D2: ; Offset_0x01ECF8:                
                move.l  #$FFFFD600, ($FFFFF796).w
                cmpi.b  #$0C, $003E(A0)
                beq.s   Offset_0x01ED10
                move.l  #$FFFFD900, ($FFFFF796).w
Offset_0x01ED10:
                lea     ($FFFFF768).w, A4
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                move.b  $003E(A0), D5
                bsr     FindFloor                              ; Offset_0x01E762
                move.b  ($FFFFF768).w, D3
                btst    #$00, D3
                beq.s   Offset_0x01ED36
                move.b  #$00, D3
Offset_0x01ED36:
                rts
;=============================================================================== 
; Sub Rotina Player_HitFloor - Rotina para verificar onde o Sonic / Miles 
; [ Término ]                  está no chão      
;===============================================================================  

;=============================================================================== 
; Sub Rotina Player_HitFloor_A1 - Rotina para verificar onde o Sonic / Miles 
; [ Início ]                      está no chão      
;===============================================================================                    
Player_HitFloor_A1: ; Offset_0x01ED38:
                move.w  $0008(A1), D3
                move.w  $000C(A1), D2
                moveq   #$00, D0
                move.b  $0016(A1), D0
                ext.w   D0
                add.w   D0, D2
                move.l  #$FFFFD600, ($FFFFF796).w
                cmpi.b  #$0C, $003E(A1)
                beq.s   Offset_0x01ED62
                move.l  #$FFFFD900, ($FFFFF796).w
Offset_0x01ED62:
                lea     ($FFFFF768).w, A4
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                move.b  $003E(A1), D5
                bsr     FindFloor                              ; Offset_0x01E762
                move.b  ($FFFFF768).w, D3
                btst    #$00, D3
                beq.s   Offset_0x01ED88
                move.b  #$00, D3
Offset_0x01ED88:
                rts
;=============================================================================== 
; Sub Rotina Player_HitFloor_A1 - Rotina para verificar onde o Sonic / Miles 
; [ Término ]                     está no chão      
;=============================================================================== 
 
;=============================================================================== 
; Sub Rotina ObjHitFloor - Rotina para verificar onde o objeto está no chão
; [ Início ]                         
;===============================================================================  
ObjHitFloor: ; Offset_0x01ED8A:
                move.w  $0008(A0), D3
                move.w  $000C(A0), D2
                move.b  $0016(A0), D0
                ext.w   D0
                add.w   D0, D2
                lea     ($FFFFF768).w, A4
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                moveq   #$0C, D5
                bsr     FindFloor                              ; Offset_0x01E762
                move.b  ($FFFFF768).w, D3
                btst    #$00, D3
                beq.s   Offset_0x01EDBE
                move.b  #$00, D3
Offset_0x01EDBE:
                rts
;=============================================================================== 
; Sub Rotina ObjHitFloor - Rotina para verificar onde o objeto está no chão
; [ Término ]                         
;===============================================================================

;=============================================================================== 
; Sub Rotina Fire_FindFloor 
; [ Início ]                         
;===============================================================================    
Fire_FindFloor: ; Offset_0x01EDC0:
                move.w  $0008(A1), D3
                move.w  $000C(A1), D2
                move.b  $0016(A1), D0
                ext.w   D0
                add.w   D0, D2
                lea     ($FFFFF768).w, A4
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                moveq   #$0C, D5
                bra     FindFloor                              ; Offset_0x01E762
;=============================================================================== 
; Sub Rotina Fire_FindFloor 
; [ Término ]                         
;=============================================================================== 

;=============================================================================== 
; Sub Rotina Ring_FindFloor - Rotina para localizar o chão para fazer os anéis 
; [ Início ]                  pularem      
;===============================================================================                  
Ring_FindFloor: ; Offset_0x01EDE6:
                move.w  $0008(A0), D3
                move.w  $000C(A0), D2
                move.b  $0016(A0), D0
                ext.w   D0
                add.w   D0, D2
                lea     ($FFFFF768).w, A4
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                moveq   #$0C, D5
                bra     Object_FindFloor                       ; Offset_0x01E8A2
;=============================================================================== 
; Sub Rotina Ring_FindFloor - Rotina para localizar o chão para fazer os anéis  
; [ Término ]                 pularem        
;===============================================================================  

;=============================================================================== 
; Sub Rotina Player_DontRunOnWallsR 
; [ Início ]                       
;===============================================================================   
Player_DontRunOnWallsR: ; Offset_0x01EE0C:
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
                moveq   #$00, D0
                move.b  $0017(A0), D0
                ext.w   D0
                sub.w   D0, D2
                move.b  $0016(A0), D0
                ext.w   D0
                add.w   D0, D3
                lea     ($FFFFF768).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindWall                               ; Offset_0x01E942
                move.w  D1, -(A7)
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
                moveq   #$00, D0
                move.b  $0017(A0), D0
                ext.w   D0
                add.w   D0, D2
                move.b  $0016(A0), D0
                ext.w   D0
                add.w   D0, D3
                lea     ($FFFFF76A).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindWall                               ; Offset_0x01E942
                move.w  (A7)+, D0
                move.b  #$C0, D2
                bra     Offset_0x01EC56
;=============================================================================== 
; Sub Rotina Player_DontRunOnWallsR 
; [ Término ]                       
;===============================================================================  
Offset_0x01EE6C:  ; Usado pelo Sonic / Miles                
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
Offset_0x01EE74:                
                addi.w  #$000A, D3
                lea     ($FFFFF768).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindWall                               ; Offset_0x01E942
                move.b  #$C0, D2
                bra     Offset_0x01EC8E     
;=============================================================================== 
; Sub Rotina Object_HitWall_Right   
; [ Início ]                         
;=============================================================================== 
Object_HitWall_Right: ; Offset_0x01EE90: ; -> usada pelas plataformas tipo pêndulo   
                add.w   $0008(A0), D3
                move.w  $000C(A0), D2
                lea     ($FFFFF768).w, A4
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                moveq   #$0D, D5
                bsr     FindWall                               ; Offset_0x01E942
                move.b  ($FFFFF768).w, D3
                btst    #$00, D3
                beq.s   Exit_Object_HitWall_Right              ; Offset_0x01EEBC
                move.b  #$C0, D3
Exit_Object_HitWall_Right: ; Offset_0x01EEBC:
                rts
;=============================================================================== 
; Sub Rotina Object_HitWallRight   
; [ Término ]                         
;=============================================================================== 
                
;=============================================================================== 
; Sub Rotina Player_DontRunOnWalls 
; [ Início ]                       
;=============================================================================== 
Player_DontRunOnWalls: ; Offset_0x01EEBE:
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
                moveq   #$00, D0
                move.b  $0016(A0), D0
                ext.w   D0
                sub.w   D0, D2
                eori.w  #$000F, D2
                move.b  $0017(A0), D0
                ext.w   D0
                add.w   D0, D3
                lea     ($FFFFF768).w, A4
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                bsr     FindFloor                              ; Offset_0x01E762
                move.w  D1, -(A7)
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
                moveq   #$00, D0
                move.b  $0016(A0), D0
                ext.w   D0
                sub.w   D0, D2
                eori.w  #$000F, D2
                move.b  $0017(A0), D0
                ext.w   D0
                sub.w   D0, D3
                lea     ($FFFFF76A).w, A4
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                bsr     FindFloor                              ; Offset_0x01E762
                move.w  (A7)+, D0
                move.b  #$80, D2
                bra     Offset_0x01EC56
;=============================================================================== 
; Sub Rotina Player_DontRunOnWalls 
; [ Término ]                       
;===============================================================================
; Offset_0x01EF26:                 
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
Offset_0x01EF2E:                
                subi.w  #$000A, D2
                eori.w  #$000F, D2
                lea     ($FFFFF768).w, A4
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                bsr     FindFloor                              ; Offset_0x01E762
                move.b  #$80, D2
                bra     Offset_0x01EC8E  
;-------------------------------------------------------------------------------              
Object_HitCeiling: ; Offset_0x01EF4E:
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
                moveq   #$00, D0
                move.b  $0016(A0), D0
                ext.w   D0
                sub.w   D0, D2
                eori.w  #$000F, D2
                lea     ($FFFFF768).w, A4
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                moveq   #$0D, D5
                bsr     FindFloor                              ; Offset_0x01E762
                move.b  ($FFFFF768).w, D3
                btst    #$00, D3
                beq.s   Offset_0x01EF84
                move.b  #$80, D3
Offset_0x01EF84:
                rts                                    
;=============================================================================== 
; Sub Rotina Player_DontRunOnWallsL 
; [ Início ]                       
;=============================================================================== 
Player_DontRunOnWallsL: ; Offset_0x01EF86:
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
                moveq   #$00, D0
                move.b  $0017(A0), D0
                ext.w   D0
                sub.w   D0, D2
                move.b  $0016(A0), D0
                ext.w   D0
                sub.w   D0, D3
                eori.w  #$000F, D3
                lea     ($FFFFF768).w, A4
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                bsr     FindWall                               ; Offset_0x01E942
                move.w  D1, -(A7)
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
                moveq   #$00, D0
                move.b  $0017(A0), D0
                ext.w   D0
                add.w   D0, D2
                move.b  $0016(A0), D0
                ext.w   D0
                sub.w   D0, D3
                eori.w  #$000F, D3
                lea     ($FFFFF76A).w, A4
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                bsr     FindWall                               ; Offset_0x01E942
                move.w  (A7)+, D0
                move.b  #$40, D2
                bra     Offset_0x01EC56
;=============================================================================== 
; Sub Rotina Player_DontRunOnWallsL 
; [ Término ]                       
;=============================================================================== 

;=============================================================================== 
; Sub Rotina Player_HitWall   
; [ Início ]                         
;===============================================================================  
Player_HitWall: ; Offset_0x01EFEE:  
                move.w  $000C(A0), D2
                move.w  $0008(A0), D3
Player_HitWall_D3: ; Offset_0x01EFF6:              
                subi.w  #$000A, D3
                eori.w  #$000F, D3
                lea     ($FFFFF768).w, A4
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                bsr     FindWall                               ; Offset_0x01E942
                move.b  #$40, D2
                bra     Offset_0x01EC8E
;=============================================================================== 
; Sub Rotina Player_HitWall   
; [ Término ]                         
;===============================================================================

;=============================================================================== 
; Sub Rotina Object_HitWall_Left   
; [ Início ]                         
;=============================================================================== 
Object_HitWall_Left: ; Offset_0x01F016:
                add.w   $0008(A0), D3
                move.w  $000C(A0), D2
                lea     ($FFFFF768).w, A4
                move.b  #$00, (A4)
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                moveq   #$0D, D5
                bsr     FindWall                               ; Offset_0x01E942
                move.b  ($FFFFF768).w, D3
                btst    #$00, D3
                beq.s   Exit_Object_HitWall_Left               ; Offset_0x01F042
                move.b  #$40, D3
Exit_Object_HitWall_Left: ; Offset_0x01F042:
                rts 
;=============================================================================== 
; Sub Rotina Object_HitWall   
; [ Término ]                         
;===============================================================================          
Obj_0x79_Star_Post: ; Offset_0x01F044: 
                include 'data\objects\obj_0x79.asm'   
;------------------------------------------------------------------------------- 
Obj_0x7D_Hidden_Bonus: ; Offset_0x01F5A4:
                include 'data\objects\obj_0x7D.asm'  
;-------------------------------------------------------------------------------                  
Obj_0x44_Red_Ball_Bumper: ; Offset_0x01F6A8:    
                include 'data\objects\obj_0x44.asm'               
;-------------------------------------------------------------------------------   
Obj_0x24_Oxygen_Bubbles: ; Offset_0x01F810: 
                include 'data\objects\obj_0x24.asm'     
;------------------------------------------------------------------------------- 
Sonic_Underwater_Mappings: ; Offset_0x01FB6C:
                dc.w    Offset_0x01FBB0-Sonic_Underwater_Mappings
                dc.w    Offset_0x01FBBA-Sonic_Underwater_Mappings
                dc.w    Offset_0x01FBBA-Sonic_Underwater_Mappings
                dc.w    Offset_0x01FBC4-Sonic_Underwater_Mappings
                dc.w    Offset_0x01FBCE-Sonic_Underwater_Mappings
                dc.w    Offset_0x01FBD8-Sonic_Underwater_Mappings
                dc.w    Offset_0x01FBE2-Sonic_Underwater_Mappings
                dc.w    Offset_0x01FBEC-Sonic_Underwater_Mappings
                dc.w    Offset_0x01FC0E-Sonic_Underwater_Mappings
                dc.w    Offset_0x01FC0E-Sonic_Underwater_Mappings
                dc.w    Offset_0x01FC0E-Sonic_Underwater_Mappings
                dc.w    Offset_0x01FC0E-Sonic_Underwater_Mappings
                dc.w    Offset_0x01FC0E-Sonic_Underwater_Mappings
                dc.w    Offset_0x01FC0E-Sonic_Underwater_Mappings
                dc.w    Offset_0x01FC18-Sonic_Underwater_Mappings
                dc.w    Offset_0x01FC22-Sonic_Underwater_Mappings
                dc.w    Offset_0x01FC2C-Sonic_Underwater_Mappings
Miles_Underwater_Mappings: ; Offset_0x01FB8E:                
                dc.w    Offset_0x01FBB0-Miles_Underwater_Mappings
                dc.w    Offset_0x01FBBA-Miles_Underwater_Mappings
                dc.w    Offset_0x01FBBA-Miles_Underwater_Mappings
                dc.w    Offset_0x01FBC4-Miles_Underwater_Mappings
                dc.w    Offset_0x01FBCE-Miles_Underwater_Mappings
                dc.w    Offset_0x01FBD8-Miles_Underwater_Mappings
                dc.w    Offset_0x01FBE2-Miles_Underwater_Mappings
                dc.w    Offset_0x01FBEC-Miles_Underwater_Mappings
                dc.w    Offset_0x01FC2E-Miles_Underwater_Mappings
                dc.w    Offset_0x01FC2E-Miles_Underwater_Mappings
                dc.w    Offset_0x01FC2E-Miles_Underwater_Mappings
                dc.w    Offset_0x01FC2E-Miles_Underwater_Mappings
                dc.w    Offset_0x01FC2E-Miles_Underwater_Mappings
                dc.w    Offset_0x01FC2E-Miles_Underwater_Mappings
                dc.w    Offset_0x01FC18-Miles_Underwater_Mappings
                dc.w    Offset_0x01FC22-Miles_Underwater_Mappings
                dc.w    Offset_0x01FC2C-Miles_Underwater_Mappings                
Offset_0x01FBB0:
                dc.w    $0001
                dc.l    $FC00008D, $0046FFFC
Offset_0x01FBBA:
                dc.w    $0001
                dc.l    $FC00008E, $0047FFFC
Offset_0x01FBC4:
                dc.w    $0001
                dc.l    $F805008F, $0047FFF8
Offset_0x01FBCE:
                dc.w    $0001
                dc.l    $F8050093, $0049FFF8
Offset_0x01FBD8:
                dc.w    $0001
                dc.l    $F40A001C, $000EFFF4
Offset_0x01FBE2:
                dc.w    $0001
                dc.l    $F00F0008, $0004FFF0
Offset_0x01FBEC:
                dc.w    $0004
                dc.l    $F0050018, $000CFFF0, $F0050818, $080C0000
                dc.l    $00051018, $100CFFF0, $00051818, $180C0000
Offset_0x01FC0E:
                dc.w    $0001
                dc.l    $F4061F41, $1BA0FFF8
Offset_0x01FC18:
                dc.w    $0001
                dc.l    $F8050000, $0000FFF8
Offset_0x01FC22:
                dc.w    $0001
                dc.l    $F8050004, $0002FFF8
Offset_0x01FC2C:
                dc.w    $0000 
Offset_0x01FC2E:
                dc.w    $0001
                dc.l    $F4061F31, $1B98FFF8                
;-------------------------------------------------------------------------------                
Obj_0x03_Layer_Switch: ; Offset_0x01FC38: 
                include 'data\objects\obj_0x03.asm' 
;-------------------------------------------------------------------------------  
Obj_0x0B_Open_Close_Platform: ; Offset_0x01FFF2: 
                include 'data\objects\obj_0x0B.asm'
;------------------------------------------------------------------------------- 
Obj_0x0C_Unknow: ; Offset_0x020160: 
                include 'data\objects\obj_0x0C.asm'     
;------------------------------------------------------------------------------- 
Obj_0x12_HPz_Master_Emerald: ; Offset_0x02025A:
                include 'data\objects\obj_0x12.asm'                           
;-------------------------------------------------------------------------------
Obj_0x13_HPz_Waterfalls: ; Offset_0x0202DE:    
                include 'data\objects\obj_0x13.asm'                  
;-------------------------------------------------------------------------------
Obj_0x04_Water_Surface: ; Offset_0x020804:  
                include 'data\objects\obj_0x04.asm'                        
;------------------------------------------------------------------------------- 
Obj_0x49_Waterfall: ; Offset_0x020ACC:  
                include 'data\objects\obj_0x49.asm' 
;------------------------------------------------------------------------------- 
Obj_0x31_Lava_Attributes: ; Offset_0x020D20: 
                include 'data\objects\obj_0x31.asm' 
;-------------------------------------------------------------------------------
Obj_0x74_Invisible_Block: ; Offset_0x020E16:   
                include 'data\objects\obj_0x74.asm' 
;-------------------------------------------------------------------------------
Obj_0x7C_Metal_Structure: ; Offset_0x020F0A:  
                include 'data\objects\obj_0x7C.asm'               
;------------------------------------------------------------------------------- 
Obj_0x27_Object_Hit: ; Offset_0x020FC4:                                       
                include 'data\objects\obj_0x27.asm'                
;-------------------------------------------------------------------------------
Obj_0x84_Auto_Spin: ; Offset_0x02109E:
                include 'data\objects\obj_0x84.asm'   
;------------------------------------------------------------------------------- 
; Offset_0x021208: ; Rotina usada pelo Miles definida no objeto 0x84 
;------------------------------------------------------------------------------- 
Obj_0x8B_Palette_Cycling_Switch: ; Offset_0x0212D6:   
                include 'data\objects\obj_0x8B.asm' 
;-------------------------------------------------------------------------------           
J_DeleteObject: ; Offset_0x0213F0:
                jmp     (DeleteObject)                         ; Offset_0x01646C 
;-------------------------------------------------------------------------------                    
Obj_0x06_Spiral_Attributes: ; Offset_0x0213F6:
                include 'data\objects\obj_0x06.asm'
;-------------------------------------------------------------------------------         
Obj_0x14_See_saw: ; Offset_0x021854:
                include 'data\objects\obj_0x14.asm'
;-------------------------------------------------------------------------------                
Obj_0x16_Teleferics: ; Offset_0x021CCE:
                include 'data\objects\obj_0x16.asm'
;-------------------------------------------------------------------------------   
; Offset_0x021F26: ; Dados não usados no jogo (Left over)
                dc.b    $01, $02, $1E, $42
;-------------------------------------------------------------------------------                 
Obj_0x19_Rotating_Platforms: ; Offset_0x021F2A:
                include 'data\objects\obj_0x19.asm'    
;-------------------------------------------------------------------------------  
Obj_0x1B_Speed_Booster: ; Offset_0x0221AC: 
                include 'data\objects\obj_0x1B.asm'    
;------------------------------------------------------------------------------- 
Obj_0x1D_Worms: ; Offset_0x022300: 
                include 'data\objects\obj_0x1D.asm'
;-------------------------------------------------------------------------------
Obj_0x1E_Tube_Attributes: ; Offset_0x022488:          
                include 'data\objects\obj_0x1E.asm'                    
;------------------------------------------------------------------------------- 
Obj_0x20_HTz_Boss_FireBall: ; Offset_0x022EE0:    
                include 'data\objects\obj_0x20.asm' 
;------------------------------------------------------------------------------- 
Obj_0x2F_Breakable_Floor: ; Offset_0x0231E8:
                include 'data\objects\obj_0x2F.asm'  
;-------------------------------------------------------------------------------
Obj_0x32_Breakable_Obstacle: ; Offset_0x02340E:  
                include 'data\objects\obj_0x32.asm'  
;-------------------------------------------------------------------------------
Breakable_Floor_Mappings: ; Offset_0x0235FC:
                dc.w    Offset_0x023610-Breakable_Floor_Mappings
                dc.w    Offset_0x02365A-Breakable_Floor_Mappings
                dc.w    Offset_0x0236AC-Breakable_Floor_Mappings
                dc.w    Offset_0x0236AC-Breakable_Floor_Mappings
                dc.w    Offset_0x0236EE-Breakable_Floor_Mappings
                dc.w    Offset_0x0236EE-Breakable_Floor_Mappings
                dc.w    Offset_0x023720-Breakable_Floor_Mappings
                dc.w    Offset_0x023720-Breakable_Floor_Mappings
                dc.w    Offset_0x023742-Breakable_Floor_Mappings
                dc.w    Offset_0x023742-Breakable_Floor_Mappings
Offset_0x023610:
                dc.w    $0009
                dc.l    $D80D0012, $0009FFF0, $E805004A, $0025FFF0
                dc.l    $E805004A, $00250000, $F805004E, $0027FFF0
                dc.l    $F805004E, $00270000, $08050052, $0029FFF0
                dc.l    $08050052, $00290000, $18050052, $0029FFF0
                dc.l    $18050052, $00290000
Offset_0x02365A:
                dc.w    $000A
                dc.l    $D8050012, $0009FFF0, $D8050016, $000B0000
                dc.l    $E805004A, $0025FFF0, $E805004A, $00250000
                dc.l    $F805004E, $0027FFF0, $F805004E, $00270000
                dc.l    $08050052, $0029FFF0, $08050052, $00290000
                dc.l    $18050052, $0029FFF0, $18050052, $00290000
Offset_0x0236AC:
                dc.w    $0008
                dc.l    $E005004A, $0025FFF0, $E005004A, $00250000
                dc.l    $F005004E, $0027FFF0, $F005004E, $00270000
                dc.l    $00050052, $0029FFF0, $00050052, $00290000
                dc.l    $10050052, $0029FFF0, $10050052, $00290000
Offset_0x0236EE:
                dc.w    $0006
                dc.l    $E805004E, $0027FFF0, $E805004E, $00270000
                dc.l    $F8050052, $0029FFF0, $F8050052, $00290000
                dc.l    $08050052, $0029FFF0, $08050052, $00290000
Offset_0x023720:
                dc.w    $0004
                dc.l    $F0050052, $0029FFF0, $F0050052, $00290000
                dc.l    $00050052, $0029FFF0, $00050052, $00290000
Offset_0x023742:
                dc.w    $0002
                dc.l    $F8050052, $0029FFF0, $F8050052, $00290000 
;-------------------------------------------------------------------------------                 
HTz_Rock_Mappings: ; Offset_0x023754:
                dc.w    Offset_0x023756-HTz_Rock_Mappings
Offset_0x023756:
                dc.w    $0006
                dc.l    $F0050000, $0000FFE8, $F0050004, $0002FFF8
                dc.l    $F0050008, $00040008, $0005000C, $0006FFE8
                dc.l    $00050010, $0008FFF8, $00050010, $00080008
;-------------------------------------------------------------------------------

CPz_Tunel_Obstacle_Mappings: ; Offset_0x023788:
                dc.w    Offset_0x02378A-CPz_Tunel_Obstacle_Mappings
Offset_0x02378A:
                dc.w    $0004
                dc.l    $F0050000, $0000FFF0, $F0050800, $08000000
                dc.l    $00050000, $0000FFF0, $00050800, $08000000                      
;------------------------------------------------------------------------------- 
Obj_0x2F_0x30_DeleteObject: ;  Offset_0x0237AC:
                jmp     (DeleteObject)                         ; Offset_0x01646C    
;-------------------------------------------------------------------------------  
Obj_0x30_Unknow: ; Offset_0x0237B2:
                include 'data\objects\obj_0x30.asm'   
;------------------------------------------------------------------------------- 
Obj_0x33_Touch_Booster: ; Offset_0x0239C2:
                include 'data\objects\obj_0x33.asm'                                 
;------------------------------------------------------------------------------- 
Obj_0x43_Giant_Spikeball: ; Offset_0x023D02: 
                include 'data\objects\obj_0x43.asm' 
;------------------------------------------------------------------------------- 
Obj_0x07_0il_Attributes: ; Offset_0x023EDA:             
                include 'data\objects\obj_0x07.asm'  
;-------------------------------------------------------------------------------
Obj_0x45_Spring_Push_Boost: ; Offset_0x023FAA: 
                include 'data\objects\obj_0x45.asm'
;-------------------------------------------------------------------------------
Obj_0x46_Spring_Ball: ; Offset_0x0248D0:   
                include 'data\objects\obj_0x46.asm'   
;-------------------------------------------------------------------------------
Obj_0x47_Switch: ; Offset_0x024B8C:                               
                include 'data\objects\obj_0x47.asm'  
;-------------------------------------------------------------------------------
Obj_0x3D_Break_Boost: ; Offset_0x024C58:
                include 'data\objects\obj_0x3D.asm'   
; Offset_0x0250AC: ; Ponteiro não usado no jogo (Left over)
                jmp     (MarkObjGone)                          ; Offset_0x016358                                   
;-------------------------------------------------------------------------------  
Obj_0x48_Cannon: ; Offset_0x0250B2: 
                include 'data\objects\obj_0x48.asm'     
;------------------------------------------------------------------------------- 
Obj_0x22_Arrow_Shooter: ; Offset_0x0254F6: 
                include 'data\objects\obj_0x22.asm' 
;-------------------------------------------------------------------------------   
Obj_0x23_Pillar: ; Offset_0x0256E0:
                include 'data\objects\obj_0x23.asm'  
;-------------------------------------------------------------------------------                  
Obj_0x2B_Raising_Pillar: ; Offset_0x0258B8: 
                include 'data\objects\obj_0x2B.asm'   
;-------------------------------------------------------------------------------
Obj_0x2C_Leaves: ; Offset_0x025F46:
                include 'data\objects\obj_0x2C.asm'                                    
;-------------------------------------------------------------------------------
Obj_0x40_Diagonal_Springs: ; Offset_0x02619C:
                include 'data\objects\obj_0x40.asm'     
;------------------------------------------------------------------------------- 
Obj_0x42_Steam_Vent: ; Offset_0x026454:  
                include 'data\objects\obj_0x42.asm'  
;-------------------------------------------------------------------------------
Obj_0x64_Pistons: ; Offset_0x02672E:
                include 'data\objects\obj_0x64.asm'     
;-------------------------------------------------------------------------------
Obj_0x65_Platform_Over_Gear: ; Offset_0x0268E6:                
                include 'data\objects\obj_0x65.asm'                                 
;-------------------------------------------------------------------------------  
Obj_0x66_Springs_Wall: ; Offset_0x026D4C:              
                include 'data\objects\obj_0x66.asm'   
;-------------------------------------------------------------------------------      
Obj_0x67_Teleport_Attributes: ; Offset_0x026F48:  
                include 'data\objects\obj_0x67.asm'  
;-------------------------------------------------------------------------------
Obj_0x68_Block_Harpon: ; Offset_0x027376:
                include 'data\objects\obj_0x68.asm'                  
;------------------------------------------------------------------------------- 
Obj_0x6D_Harpoon: ; Offset_0x027580: 
                include 'data\objects\obj_0x6D.asm'
;-------------------------------------------------------------------------------   
Obj_0x69_Screw_Nut: ; Offset_0x027654:  
                include 'data\objects\obj_0x69.asm'  
;-------------------------------------------------------------------------------         
Obj_0x6A_MCz_Three_Boxes_Mz_Ptfrm: ; Offset_0x027868:
                include 'data\objects\obj_0x6A.asm'                    
;-------------------------------------------------------------------------------
Obj_0x6B_Mz_Platform: ; Offset_0x027B1A: 
                include 'data\objects\obj_0x6B.asm'
;-------------------------------------------------------------------------------
Obj_0x6C_Mz_Moving_Platforms: ; Offset_0x027DCE: 
                include 'data\objects\obj_0x6C.asm'
;-------------------------------------------------------------------------------  
Obj_0x6E_Machine: ; Offset_0x02812C: 
                include 'data\objects\obj_0x6E.asm'
;-------------------------------------------------------------------------------                 
Obj_0x70_Rotating_Gears: ; Offset_0x02833A:    
                include 'data\objects\obj_0x70.asm'              
;-------------------------------------------------------------------------------    
Obj_0x72_Conveyor_Belt_Attributes: ; Offset_0x0286A6:
                include 'data\objects\obj_0x72.asm'  
;-------------------------------------------------------------------------------                  
Obj_0x73_Rotating_Rings: ; Offset_0x028738:   
                include 'data\objects\obj_0x73.asm'                 
;------------------------------------------------------------------------------- 
Obj_0x75_Spikeball_Chain: ; Offset_0x02891A:  
                include 'data\objects\obj_0x75.asm'     
;-------------------------------------------------------------------------------
Obj_0x76_Platform_Spikes: ; Offset_0x028B24:  
                include 'data\objects\obj_0x76.asm'                  
;------------------------------------------------------------------------------- 
Obj_0x77_Bridge: ; Offset_0x028CA4:  
                include 'data\objects\obj_0x77.asm'
;-------------------------------------------------------------------------------
Obj_0x78_Stair_Case_Platforms: ; Offset_0x028EDC:
                include 'data\objects\obj_0x78.asm'  
;-------------------------------------------------------------------------------                   
Obj_0x7A_Platform_Horizontal: ; Offset_0x0290A0:  
                include 'data\objects\obj_0x7A.asm'                                   
;-------------------------------------------------------------------------------
Obj_0x7B_Spring_Tubes: ; Offset_0x029280:
                include 'data\objects\obj_0x7B.asm'    
;-------------------------------------------------------------------------------
Obj_0x7F_Vines_Switch: ; Offset_0x0294C4: 
                include 'data\objects\obj_0x7F.asm'  
;-------------------------------------------------------------------------------                  
Obj_0x80_Vines_Chain_Hook: ; Offset_0x029654: 
                include 'data\objects\obj_0x80.asm'                     
;-------------------------------------------------------------------------------    
Obj_0x81_Vertical_Bridge: ; Offset_0x029CD4: 
                include 'data\objects\obj_0x81.asm' 
;-------------------------------------------------------------------------------
Obj_0x82_Falling_Pillar: ; Offset_0x029F44:
                include 'data\objects\obj_0x82.asm'                 
;-------------------------------------------------------------------------------
Obj_0x83_Three_Rotating_Platforms: ; Offset_0x02A198: 
                include 'data\objects\obj_0x83.asm'     
;-------------------------------------------------------------------------------   
Obj_0x3F_Fans: ; Offset_0x02A42E: 
                include 'data\objects\obj_0x3F.asm'
;-------------------------------------------------------------------------------  
Obj_0x85_CNz_Pinball_Spring: ; Offset_0x02A7FA:   
                include 'data\objects\obj_0x85.asm' 
;-------------------------------------------------------------------------------  
Obj_0x86_CNz_Flippers: ; Offset_0x02ADA8: 
                include 'data\objects\obj_0x86.asm'     
;-------------------------------------------------------------------------------  
Obj_0xD2_Green_Platform: ; Offset_0x02B17E: 
                include 'data\objects\obj_0xD2.asm'                 
;-------------------------------------------------------------------------------  
Obj_0xD3_CNz_Spikeball: ;  Offset_0x02B490: 
                include 'data\objects\obj_0xD3.asm'  
;------------------------------------------------------------------------------- 
Obj_0xD4_CNz_Box: ; Offset_0x02B52C:
                include 'data\objects\obj_0xD4.asm' 
;-------------------------------------------------------------------------------   
Obj_0xD5_CNz_Elevator: ; Offset_0x02B636:
                include 'data\objects\obj_0xD5.asm'   
;-------------------------------------------------------------------------------
Obj_0xD6_CNz_Slot_Machine_Bonus: ; Offset_0x02B78A: 
                include 'data\objects\obj_0xD6.asm'           
;===============================================================================
; Sub Rotina para processar os caça niqueís na Casino Night
; [ Início ]
;===============================================================================                  
Process_Slot_Machine: ; Offset_0x02BB58:
                lea     ($FFFFFF4E).w, A4
                moveq   #$00, D0
                move.b  $0000(A4), D0
                jmp     Process_Slot_Machine_Idx(PC, D0)       ; Offset_0x02BB66
Process_Slot_Machine_Idx: ; Offset_0x02BB66:              
                bra     Slot_Machine_Id_00                     ; Offset_0x02BB80
                bra     Slot_Machine_Id_04                     ; Offset_0x02BBCE
                bra     Slot_Machine_Id_08                     ; Offset_0x02BBEE
                bra     Slot_Machine_Id_0C                     ; Offset_0x02BCA4
                bra     Slot_Machine_Id_10                     ; Offset_0x02BCDC
                bra     Slot_Machine_Id_14                     ; Offset_0x02BE22
                rts
;-------------------------------------------------------------------------------                
Slot_Machine_Id_00: ; Offset_0x02BB80:
                move.l  A4, A1
                moveq   #$08, D0
Offset_0x02BB84:
                clr.w   (A1)+
                dbra    D0, Offset_0x02BB84
                move.b  ($FFFFFE0F).w, D0
                move.b  D0, $0006(A4)
                ror.b   #$03, D0
                move.b  D0, $000A(A4)
                ror.b   #$03, D0
                move.b  D0, $000E(A4)
                move.b  #$08, $0007(A4)
                move.b  #$08, $000B(A4)
                move.b  #$08, $000F(A4)
                move.b  #$08, $0008(A4)
                move.b  #$08, $000C(A4)
                move.b  #$08, $0010(A4)
                move.b  #$01, $0001(A4)
                addq.b  #$04, $0000(A4)
                rts
;-------------------------------------------------------------------------------  
Slot_Machine_Id_04: ; Offset_0x02BBCE:
                bsr     Offset_0x02BE3E
                tst.b   $0001(A4)
                beq.s   Offset_0x02BBDA
                rts
Offset_0x02BBDA:
                move.b  #$18, $0000(A4)
                clr.w   $0008(A4)
                clr.w   $000C(A4)
                clr.w   $0010(A4)
                rts
;-------------------------------------------------------------------------------  
Slot_Machine_Id_08: ; Offset_0x02BBEE:
                move.b  ($FFFFFE0F).w, D0
                andi.b  #$07, D0
                subq.b  #$04, D0
                addi.b  #$30, D0
                move.b  D0, $0008(A4)
                move.b  ($FFFFFE0F).w, D0
                rol.b   #$04, D0
                andi.b  #$07, D0
                subq.b  #$04, D0
                addi.b  #$30, D0
                move.b  D0, $000C(A4)
                move.b  ($FFFFFE0E).w, D0
                andi.b  #$07, D0
                subq.b  #$04, D0
                addi.b  #$30, D0
                move.b  D0, $0010(A4)
                move.b  #$02, $0001(A4)
                clr.b   $0003(A4)
                clr.b   $0009(A4)
                clr.b   $000D(A4)
                clr.b   $0011(A4)
                addq.b  #$04, $0000(A4)
                move.b  ($FFFFFE0F).w, D0
                ror.b   #$03, D0
                lea     (Offset_0x02C020), A2
Offset_0x02BC4C:
                sub.b   (A2), D0
                bcs.s   Offset_0x02BC54
                addq.w  #$03, A2
                bra.s   Offset_0x02BC4C
Offset_0x02BC54:
                cmpi.b  #$FF, (A2)
                beq.s   Offset_0x02BC68
                move.b  $0001(A2), $0004(A4)
                move.b  $0002(A2), $0005(A4)
                rts
Offset_0x02BC68:
                move.b  D0, D1
                andi.w  #$0007, D1
                lea     (Offset_0x02C036), A1
                move.b  $00(A1, D0), $0004(A4)
                ror.b   #$03, D0
                move.b  D0, D1
                andi.w  #$0007, D1
                lea     (Offset_0x02C03E), A1
                move.b  $00(A1, D1), D2
                lsl.b   #$04, D2
                ror.b   #$03, D0
                andi.w  #$0007, D0
                lea     (Offset_0x02C046), A1
                or.b    $00(A1, D0), D2
                move.b  D2, $0005(A4)
                rts
;-------------------------------------------------------------------------------                
Slot_Machine_Id_0C: ; Offset_0x02BCA4:
                bsr     Offset_0x02BE3E
                tst.b   $0001(A4)
                beq.s   Offset_0x02BCB0
                rts
Offset_0x02BCB0:
                addi.b  #$30, $0008(A4)
                addi.b  #$30, $000C(A4)
                addi.b  #$30, $0010(A4)
                move.b  ($FFFFFE0F).w, D0
                andi.b  #$0F, D0
                addi.b  #$0C, D0
                move.b  D0, $0001(A4)
                clr.b   $0002(A4)
                addq.b  #$04, $0000(A4)
                rts
;-------------------------------------------------------------------------------  
Slot_Machine_Id_10: ; Offset_0x02BCDC:
                bsr     Offset_0x02BE3E
                cmpi.b  #$0C, $0009(A4)
                bne.s   Offset_0x02BCFA
                cmpi.b  #$0C, $000D(A4)
                bne.s   Offset_0x02BCFA
                cmpi.b  #$0C, $0011(A4)
                beq     Slot_Machine_Id_14                     ; Offset_0x02BE22
Offset_0x02BCFA:
                moveq   #$00, D0
                move.b  $0003(A4), D0
                lea     $0006(A4), A1
                adda.w  D0, A1
                lea     (Offset_0x02C036), A3
                add.w   D0, D0
                adda.w  D0, A3
                moveq   #$00, D0
                move.b  $0003(A1), D0
                jmp     Slot_Machine_Id_10_Idx(PC, D0)         ; Offset_0x02BD1A
Slot_Machine_Id_10_Idx: ; Offset_0x02BD1A:                
                bra     Offset_0x02BD68
                bra     Offset_0x02BDA4
                bra     Offset_0x02BE0E
                bra     Offset_0x02BE20
Offset_0x02BD2A:
                move.w  $0004(A4), D1
                move.b  $0003(A4), D0
                beq.s   Offset_0x02BD36
                lsr.w   D0, D1
Offset_0x02BD36:
                andi.w  #$0007, D1
                cmpi.b  #$05, D1
                bgt.s   Offset_0x02BD42
                rts
Offset_0x02BD42:
                subq.b  #$02, D1
                rts
Offset_0x02BD46:
                move.w  #$FFF0, D2
                andi.w  #$000F, D1
                move.b  $0003(A4), D0
                beq.s   Offset_0x02BD58
                lsl.w   D0, D1
                rol.w   D0, D2
Offset_0x02BD58:
                and.w   D2, $0004(A4)
                or.w    D1, $0004(A4)
                andi.w  #$0777, $0004(A4)
                rts
Offset_0x02BD68:
                tst.b   $0003(A4)
                bne.s   Offset_0x02BD76
                tst.b   $0001(A4)
                bmi.s   Offset_0x02BD80
                rts
Offset_0x02BD76:
                cmpi.b  #$08, $FFFF(A1)
                bge.s   Offset_0x02BD80
                rts
Offset_0x02BD80:
                bsr.s   Offset_0x02BD2A
                move.w  (A1), D0
                subi.w  #$00A0, D0
                lsr.w   #$08, D0
                andi.w  #$0007, D0
                move.b  $00(A3, D0), D0
                cmp.b   D1, D0
                beq.s   Offset_0x02BD98
                rts
Offset_0x02BD98:
                addq.b  #$04, $0003(A1)
                move.b  #$60, $0002(A1)
                rts
Offset_0x02BDA4:
                bsr.s   Offset_0x02BD2A
                move.w  (A1), D0
                addi.w  #$00F0, D0
                andi.w  #$0700, D0
                lsr.w   #$08, D0
                move.b  $00(A3, D0), D0
                cmp.b   D0, D1
                beq.s   Offset_0x02BDE2
                cmpi.b  #$20, $0002(A1)
                bls.s   Offset_0x02BDC8
                subi.b  #$0C, $0002(A1)
Offset_0x02BDC8:
                cmpi.b  #$18, $0002(A1)
                bgt.s   Offset_0x02BDD2
                rts
Offset_0x02BDD2:
                cmpi.b  #$80, $0001(A1)
                bls.s   Offset_0x02BDDC
                rts
Offset_0x02BDDC:
                subq.b  #$02, $0002(A1)
                rts
Offset_0x02BDE2:
                move.w  (A1), D0
                addi.w  #$0080, D0
                move.w  D0, D1
                andi.w  #$0700, D1
                subi.w  #$0010, D1
                move.w  D1, (A1)
                lsr.w   #$08, D0
                andi.w  #$0007, D0
                move.b  $00(A3, D0), D1
                bsr     Offset_0x02BD46
                move.b  #$F8, $0002(A1)
                addq.b  #$04, $0003(A1)
                rts
Offset_0x02BE0E:
                tst.b   $0001(A1)
                beq.s   Offset_0x02BE16
                rts
Offset_0x02BE16:
                clr.b   $0002(A1)
                addq.b  #$04, $0003(A1)
                rts
Offset_0x02BE20:
                rts
;-------------------------------------------------------------------------------                
Slot_Machine_Id_14: ; Offset_0x02BE22:
                clr.w   $0008(A4)
                clr.w   $000C(A4)
                clr.w   $0010(A4)
                clr.b   $0001(A4)
                bsr     Offset_0x02BF12
                move.b  #$18, $0000(A4)
                rts
Offset_0x02BE3E:
                moveq   #$00, D0
                move.b  $0003(A4), D0
                lea     $0006(A4), A1
                adda.w  D0, A1
                lea     (Offset_0x02C036), A3
                adda.w  D0, A3
                adda.w  D0, A3
                jmp     Slot_Machine_Id_14_Idx(PC, D0)         ; Offset_0x02BE58
Slot_Machine_Id_14_Idx: ; Offset_0x02BE58:                 
                bra     Offset_0x02BE6E
                bra     Offset_0x02BE7A
                clr.b   $0003(A4)
                subq.b  #$01, $0001(A4)
                move.w  #$AE00, D2
                bra.s   Offset_0x02BE82
Offset_0x02BE6E:
                addq.b  #$04, $0003(A4)
                move.w  #$AA00, D2
                bra     Offset_0x02BE82
Offset_0x02BE7A:
                addq.b  #$04, $0003(A4)
                move.w  #$AC00, D2
Offset_0x02BE82:
                move.w  (A1), D0
                move.b  $0002(A1), D1
                ext.w   D1
                sub.w   D1, (A1)
                move.w  (A1), D3
                andi.w  #$07F8, D0
                andi.w  #$07F8, D3
                cmp.w   D0, D3
                bne.s   Offset_0x02BE9C
                rts
Offset_0x02BE9C:
                bsr     Offset_0x02BEEC
                lea     ($FFFFA000).w, A1
                move.w  #$001F, D1
Offset_0x02BEA8:
                move.l  $0080(A2), $0080(A1)
                move.l  $0100(A2), $0100(A1)
                move.l  $0180(A2), $0180(A1)
                move.l  (A2)+, (A1)+
                addq.b  #$08, D3
                bne.s   Offset_0x02BECC
                addi.w  #$0100, D3
                andi.w  #$0700, D3
                bsr     Offset_0x02BEEC
Offset_0x02BECC:
                dbra    D1, Offset_0x02BEA8
                move.l  #$00FFA000, D1
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x02BEE0
                addi.w  #$4000, D2
Offset_0x02BEE0:
                move.w  #$0100, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x00140A
                rts
Offset_0x02BEEC:
                move.w  D3, D0
                lsr.w   #$08, D0
                andi.w  #$0007, D0
                move.b  $00(A3, D0), D0
                andi.w  #$0007, D0
                ror.w   #$07, D0
                lea     (CNz_Slot_Machine_Checks), A2          ; Offset_0x04EEFE
                adda.w  D0, A2
                move.w  D3, D0
                andi.w  #$00F8, D0
                lsr.w   #$01, D0
                adda.w  D0, A2
                rts
Offset_0x02BF12:
                move.b  $0005(A4), D2
                move.b  D2, D3
                andi.w  #$00F0, D2
                lsr.w   #$04, D2
                andi.w  #$000F, D3
                moveq   #$00, D0
                cmp.b   $0004(A4), D2
                bne.s   Offset_0x02BF2C
                addq.w  #$04, D0
Offset_0x02BF2C:
                cmp.b   $0004(A4), D3
                bne.s   Offset_0x02BF34
                addq.w  #$08, D0
Offset_0x02BF34:
                jmp     Slot_Machine_Id_14_Idx_2(PC, D0)       ; Offset_0x02BF38
Slot_Machine_Id_14_Idx_2: ; Offset_0x02BF38:                 
                bra     Offset_0x02BFA8
                bra     Offset_0x02BF7E
                bra     Offset_0x02BF50
                move.w  D2, D0
                bsr     Offset_0x02BFFE
                move.w  D0, $0004(A4)
                rts
Offset_0x02BF50:
                cmpi.b  #$03, D3
                bne.s   Offset_0x02BF66
                move.w  D2, D0
                bsr     Offset_0x02BFFE
                bsr     Offset_0x02C00C
                move.w  D0, $0004(A4)
                rts
Offset_0x02BF66:
                cmpi.b  #$03, D2
                bne     Offset_0x02BFA8
                move.w  D3, D0
                bsr     Offset_0x02BFFE
                bsr     Offset_0x02C010
                move.w  D0, $0004(A4)
                rts
Offset_0x02BF7E:
                cmpi.b  #$03, D2
                bne.s   Offset_0x02BF92
                move.w  D3, D0
                bsr.s   Offset_0x02BFFE
                bsr     Offset_0x02C00C
                move.w  D0, $0004(A4)
                rts
Offset_0x02BF92:
                cmpi.b  #$03, D3
                bne     Offset_0x02BFA8
                move.w  D2, D0
                bsr.s   Offset_0x02BFFE
                bsr     Offset_0x02C010
                move.w  D0, $0004(A4)
                rts
Offset_0x02BFA8:
                cmp.b   D2, D3
                bne.s   Offset_0x02BFDC
                cmpi.b  #$03, $0004(A4)
                bne.s   Offset_0x02BFC2
                move.w  D2, D0
                bsr.s   Offset_0x02BFFE
                bsr     Offset_0x02C010
                move.w  D0, $0004(A4)
                rts
Offset_0x02BFC2:
                cmpi.b  #$03, D2
                bne.s   Offset_0x02BFDC
                move.b  $0004(A4), D0
                andi.w  #$000F, D0
                bsr.s   Offset_0x02BFFE
                bsr     Offset_0x02C00C
                move.w  D0, $0004(A4)
                rts
Offset_0x02BFDC:
                moveq   #$02, D1
                moveq   #$00, D0
                cmpi.b  #$05, $0004(A4)
                bne.s   Offset_0x02BFEA
                add.w   D1, D0
Offset_0x02BFEA:
                cmpi.b  #$05, D2
                bne.s   Offset_0x02BFF2
                add.w   D1, D0
Offset_0x02BFF2:
                cmpi.b  #$05, D3
                bne.s   Offset_0x02BFFA
                add.w   D1, D0
Offset_0x02BFFA:
                move.w  D0, $0004(A4)
Offset_0x02BFFE:
                add.w   D0, D0
                lea     (Offset_0x02C014), A2
                move.w  $00(A2, D0), D0
                rts
Offset_0x02C00C:
                asl.w   #$02, D0
                rts
Offset_0x02C010:
                add.w   D0, D0
                rts
;-------------------------------------------------------------------------------                  
Offset_0x02C014:
                dc.w    $001E, $0019, $FFFF, $0096, $000A, $0014                   
;-------------------------------------------------------------------------------                
Offset_0x02C020:
                dc.b    $08, $03, $33, $12, $00, $00, $12, $01, $11, $24, $02, $22, $1E, $04, $44, $1E
                dc.b    $05, $55, $FF, $0F, $FF
                dc.b    $00                     ; Filler      
;-------------------------------------------------------------------------------  
Offset_0x02C036:
                dc.b    $03, $00, $01, $04, $02, $05, $04, $01 
;-------------------------------------------------------------------------------  
Offset_0x02C03E:
                dc.b    $03, $00, $01, $04, $02, $05, $00, $02 
;-------------------------------------------------------------------------------  
Offset_0x02C046:
                dc.b    $03, $00, $01, $04, $02, $05, $04, $01 
;===============================================================================
; Sub Rotina para processar os caça niqueís na Casino Night
; [ Término ]
;===============================================================================           
Obj_0xD7_CNz_Blue_Bumper: ;  Offset_0x02C04E:
                include 'data\objects\obj_0xD7.asm'
;-------------------------------------------------------------------------------
Obj_0xD8_CNz_Green_Bumper: ; Offset_0x02C2A4:   
                include 'data\objects\obj_0xD8.asm'  
;-------------------------------------------------------------------------------   
Obj_0xD9_WFz_Hang_Attributes: ; Offset_0x02C518: 
                include 'data\objects\obj_0xD9.asm' 
;------------------------------------------------------------------------------- 
Obj_0x4A_Octus: ; Offset_0x02C5F8:
                include 'data\objects\obj_0x4A.asm'   
;-------------------------------------------------------------------------------  
Obj_0x50_Aquis: ; Offset_0x02C89E: 
                include 'data\objects\obj_0x50.asm'    
;-------------------------------------------------------------------------------
Obj_0x4B_Buzzer: ; Offset_0x02CC2C: 
                include 'data\objects\obj_0x4B.asm' 
;-------------------------------------------------------------------------------  
Obj_0x5C_Masher: ; Offset_0x02CF4C:               
                include 'data\objects\obj_0x5C.asm'                               
;-------------------------------------------------------------------------------   
Obj_0x58_Boss_Explosions: ; Offset_0x02D03A:  
                include 'data\objects\obj_0x58.asm'   
;-------------------------------------------------------------------------------     
; Offset_0x02D10E: ; Parte da rotina não usada no jogo (Left over)
                move.b  $001A(A0), D0
                jsr     (CalcSine)                             ; Offset_0x003370
                asr.w   #$06, D0
                add.w   ($FFFFF754).w, D0
                move.w  D0, $000C(A0)
                move.w  ($FFFFF750).w, $0008(A0)
                addq.b  #$02, $001A(A0)                             
;-------------------------------------------------------------------------------              
Boss_Hit: ; Offset_0x02D12C: ; Usado pelo chefe da Oil Ocean.
                cmpi.b  #$08, $0026(A0)
                bcc.s   Offset_0x02D172
                tst.b   $0032(A0)
                beq.s   Offset_0x02D174
                tst.b   $0020(A0)
                bne.s   Offset_0x02D172
                tst.b   $0014(A0)
                bne.s   Offset_0x02D156
                move.b  #$20, $0014(A0)
                move.w  #Boss_Hit_Sfx, D0       ; $00AC
                jsr     (Play_Sfx)                             ; Offset_0x00132C
Offset_0x02D156:
                lea     ($FFFFFB22).w, A1
                moveq   #$00, D0
                tst.w   (A1)
                bne.s   Offset_0x02D164
                move.w  #$0EEE, D0
Offset_0x02D164:
                move.w  D0, (A1)
                subq.b  #$01, $0014(A0)
                bne.s   Offset_0x02D172
                move.b  #$0F, $0020(A0)
Offset_0x02D172:
                rts
Offset_0x02D174:
                moveq   #$64, D0
                jsr     (Add_Points_Player_One)                ; Offset_0x040A5C
                move.w  #$00B3, ($FFFFF75C).w
                move.b  #$08, $0026(A0)
                moveq   #$40, D0
                jsr     (LoadPLC)                              ; Offset_0x0015DA
                rts                
;------------------------------------------------------------------------------- 
Boss_Sub: ; Offset_0x02D192:
                move.l  ($FFFFF750).w, D2
                move.l  ($FFFFF754).w, D3
                move.w  ($FFFFF758).w, D0
                ext.l   D0
                asl.l   #$08, D0
                add.l   D0, D2
                move.w  ($FFFFF75A).w, D0
                ext.l   D0
                asl.l   #$08, D0
                add.l   D0, D3
                move.l  D2, ($FFFFF750).w
                move.l  D3, ($FFFFF754).w
                rts
;-------------------------------------------------------------------------------               
Boss_AnimateSprite: ; Offset_0x02D1B8:
                moveq   #$00, D6
                move.l  A1, A4
                lea     ($FFFFF740).w, A2
                lea     $000B(A0), A3
                tst.b   (A3)
                bne.s   Offset_0x02D1CC
                addq.w  #$02, A2
                bra.s   Offset_0x02D1D0
Offset_0x02D1CC:
                bsr     Offset_0x02D1DE
Offset_0x02D1D0:
                moveq   #$00, D6
                move.b  $000F(A0), D6
                subq.w  #$01, D6
                bmi.s   Offset_0x02D23E
                lea     $0015(A0), A3
Offset_0x02D1DE:
                move.l  A4, A1
                moveq   #$00, D0
                moveq   #$00, D1
                moveq   #$00, D2
                moveq   #$00, D4
                move.b  (A2)+, D0
                move.b  D0, D1
                lsr.b   #$04, D1
                andi.b  #$0F, D0
                move.b  D0, D2
                cmp.b   D0, D1
                beq.s   Offset_0x02D1FA
                st      D4
Offset_0x02D1FA:
                move.b  D0, D5
                lsl.b   #$04, D5
                or.b    D0, D5
                move.b  (A2)+, D0
                move.b  D0, D1
                lsr.b   #$04, D1
                tst.b   D4
                beq.s   Offset_0x02D20E
                moveq   #$00, D0
                moveq   #$00, D1
Offset_0x02D20E:
                andi.b  #$0F, D0
                subq.b  #$01, D0
                bpl.s   Offset_0x02D22C
                add.w   D2, D2
                adda.w  $00(A1, D2), A1
                move.b  (A1), D0
                move.b  $01(A1, D1), D2
                bmi.s   Offset_0x02D240
Offset_0x02D224:
                andi.b  #$7F, D2
                move.b  D2, (A3)
                addq.b  #$01, D1
Offset_0x02D22C:
                lsl.b   #$04, D1
                or.b    D1, D0
                move.b  D0, $FFFF(A2)
                move.b  D5, $FFFE(A2)
                addq.w  #$06, A3
                dbra    D6, Offset_0x02D1DE
Offset_0x02D23E:
                rts
Offset_0x02D240:
                addq.b  #$01, D2
                bne.s   Offset_0x02D24E
                move.b  #$00, D1
                move.b  $0001(A1), D2
                bra.s   Offset_0x02D224
Offset_0x02D24E:
                addq.b  #$01, D2
                bne.s   Offset_0x02D258
                addq.b  #$02, $0026(A0)
                rts
Offset_0x02D258:
                addq.b  #$01, D2
                bne.s   Offset_0x02D266
                andi.b  #$F0, D5
                or.b    $02(A1, D1), D5
                bra.s   Offset_0x02D22C
Offset_0x02D266:
                addq.b  #$01, D2
                bne.s   Offset_0x02D276
                moveq   #$00, D3
                move.b  $02(A1, D1), D1
                move.b  $01(A1, D1), D2
                bra.s   Offset_0x02D224
Offset_0x02D276:
                rts                               
;===============================================================================
; Rotina utilizada após os chefes de fase serem derrotados
; [ Início ]
;===============================================================================
Boss_Defeated: ; Offset_0x02D278:
                move.b  ($FFFFFE0F).w, D0
                andi.b  #$07, D0
                bne.s   Exit_Boss_Defeated                     ; Offset_0x02D2BE
                jsr     (SingleObjectLoad)                     ; Offset_0x017F48
                bne.s   Exit_Boss_Defeated                     ; Offset_0x02D2BE
                move.b  #$58, $0000(A1)
                move.w  $0008(A0), $0008(A1)
                move.w  $000C(A0), $000C(A1)
                jsr     (PseudoRandomNumber)                   ; Offset_0x00334A
                move.w  D0, D1
                moveq   #$00, D1
                move.b  D0, D1
                lsr.b   #$02, D1
                subi.w  #$0020, D1
                add.w   D1, $0008(A1)
                lsr.w   #$08, D0
                lsr.b   #$02, D0
                subi.w  #$0020, D0
                add.w   D0, $000C(A1)
Exit_Boss_Defeated: ; Offset_0x02D2BE:
                rts
;===============================================================================
; Rotina utilizada após os chefes de fase serem derrotados
; [ Término ]
;===============================================================================
Obj_0x5D_CPz_Boss: ; Offset_0x02D2C0:  
                include 'data\objects\obj_0x5D.asm'
;-------------------------------------------------------------------------------
Obj_0x56_EHz_Boss: ; Offset_0x02EA7C: 
                include 'data\objects\obj_0x56.asm'  
;-------------------------------------------------------------------------------
Obj_0x52_HTz_Boss: ; Offset_0x02F780:
                include 'data\objects\obj_0x52.asm'
;-------------------------------------------------------------------------------
Obj_0x89_ARz_Boss: ; Offset_0x02FF92:
                include 'data\objects\obj_0x89.asm'                
;-------------------------------------------------------------------------------
Obj_0x57_MCz_Boss: ; Offset_0x030A8E:  
                include 'data\objects\obj_0x57.asm' 
;-------------------------------------------------------------------------------
Obj_0x51_CNz_Boss: ; Offset_0x0313BE:
                include 'data\objects\obj_0x51.asm'                
;-------------------------------------------------------------------------------
Obj_0x54_Mz_Boss: ; Offset_0x031D32:  
                include 'data\objects\obj_0x54.asm'  
;-------------------------------------------------------------------------------
Obj_0x53_Mz_Boss_Balls_Robotniks: ; Offset_0x0323FE: 
                include 'data\objects\obj_0x53.asm'     
;-------------------------------------------------------------------------------
Obj_0x55_OOz_Boss: ; Offset_0x032A1E:
                include 'data\objects\obj_0x55.asm'   
;-------------------------------------------------------------------------------  
Obj_0x09_Sonic_In_Special_Stage: ; Offset_0x033348:
                include 'data\objects\obj_0x09.asm' 
;-------------------------------------------------------------------------------                  
Obj_0x63_SS_Objects_Shadow: ; Offset_0x033AFC: 
                include 'data\objects\obj_0x63.asm'                     
;-------------------------------------------------------------------------------                 
Obj_0x10_Miles_In_Special_Stage: ; Offset_0x034238:                 
                include 'data\objects\obj_0x10.asm'
;-------------------------------------------------------------------------------  
Obj_0x88_Miles_Tail_In_SS: ; Offset_0x0344A8:  
                include 'data\objects\obj_0x88.asm'     
;-------------------------------------------------------------------------------                    
Obj_0x61_SS_Bomb: ; Offset_0x0348F6: 
                include 'data\objects\obj_0x61.asm'  
;-------------------------------------------------------------------------------                
Offset_0x0349D8:  ; Usada pelos objetos 0x60, 0x61
                cmpi.w  #$0004, $0030(A0)
                bcc.s   Offset_0x0349E6
                move.b  #$01, $0018(A0)
Offset_0x0349E6:
                rts                        
;-------------------------------------------------------------------------------                 
Obj_0x60_SS_Rings: ; Offset_0x0349E8:    
                include 'data\objects\obj_0x60.asm'    
;-------------------------------------------------------------------------------                    
Obj_0x5B_SS_Ring_Out: ; Offset_0x034E50:   
                include 'data\objects\obj_0x5B.asm' 
;------------------------------------------------------------------------------- 
; Offset_0x034F8A: ; Retorno não usado                 
                rts          
;-------------------------------------------------------------------------------    
Offset_0x034F8C:
                move.w  Offset_0x034FA0(PC, D0), ($FFFFFB76).w
                move.w  Offset_0x034FA0+$02(PC, D0), ($FFFFFB78).w
                move.w  Offset_0x034FA0+$04(PC, D0), ($FFFFFB7A).w
                rts
;-------------------------------------------------------------------------------   
Offset_0x034FA0:
                dc.w    $00EE, $0088, $0044, $00EE, $00CC, $0088              
;-------------------------------------------------------------------------------  
; Obj_0x5A_SS_Rings_Check: 
Obj_0x5A_SS_Check_Point: ; Offset_0x034FAC:
                include 'data\objects\obj_0x5A.asm' 
;-------------------------------------------------------------------------------    
Offset_0x035624:
                jsr     (Obj_0x60_Offset_0x006F46)             ; Offset_0x006F46
                bne.s   Offset_0x035662
                move.b  D0, $001A(A1)
                move.l  #SS_Ring_Count_Display_Mappings, $0004(A1) ; Offset_0x007282
                move.w  #$41FA, $0002(A1)
                move.b  #$5A, (A1)            ; Carrega o objeto 0x5A na memória
                move.b  #$04, $0024(A1)
                move.b  #$04, $0001(A1)
                move.b  #$01, $0018(A1)
                move.w  D1, $0008(A1)
                move.w  D2, $000C(A1)
                move.w  #$0046, $002A(A1)
Offset_0x035662:
                rts       
;-------------------------------------------------------------------------------                                               
Offset_0x035664:
                lea     Offset_0x0356B4(PC), A3
                adda.w  $00(A3, D0), A3
Offset_0x03566C:
                move.b  (A3)+, D0
                bmi.s   Offset_0x0356B2
                jsr     (Obj_0x60_Offset_0x006F46)             ; Offset_0x006F46
                bne.s   Offset_0x0356B2
                move.b  D0, $001A(A1)
                move.l  #Offset_0x03586C, $0004(A1)
                move.w  #$41A2, $0002(A1)
                move.b  #$5A, (A1)            ; Carrega o objeto 0x5A na memória
                move.b  #$04, $0024(A1)
                move.b  #$04, $0001(A1)
                move.b  #$01, $0018(A1)
                move.w  D1, $0008(A1)
                move.w  D2, $000C(A1)
                move.w  #$0046, $002A(A1)
                addq.w  #$08, D1
                bra.s   Offset_0x03566C
Offset_0x0356B2:
                rts                             
;-------------------------------------------------------------------------------  
Offset_0x0356B4:
                dc.w    Offset_0x0356D8-Offset_0x0356B4
                dc.w    Offset_0x0356DC-Offset_0x0356B4
                dc.w    Offset_0x0356E2-Offset_0x0356B4
                dc.w    Offset_0x0356E8-Offset_0x0356B4
                dc.w    Offset_0x0356EC-Offset_0x0356B4
                dc.w    Offset_0x0356F4-Offset_0x0356B4
                dc.w    Offset_0x0356FC-Offset_0x0356B4
                dc.w    Offset_0x035702-Offset_0x0356B4
                dc.w    Offset_0x035708-Offset_0x0356B4
                dc.w    Offset_0x03570E-Offset_0x0356B4
                dc.w    Offset_0x035714-Offset_0x0356B4
                dc.w    Offset_0x03571A-Offset_0x0356B4
                dc.w    Offset_0x03571E-Offset_0x0356B4
                dc.w    Offset_0x035724-Offset_0x0356B4
                dc.w    Offset_0x03572A-Offset_0x0356B4
                dc.w    Offset_0x03572C-Offset_0x0356B4
                dc.w    Offset_0x035730-Offset_0x0356B4
                dc.w    Offset_0x035732-Offset_0x0356B4
Offset_0x0356D8:
                dc.b    $00, $01, $02, $FF
Offset_0x0356DC:
                dc.b    $03, $04, $05, $00, $06, $FF
Offset_0x0356E2:
                dc.b    $07, $08, $08, $09, $11, $FF
Offset_0x0356E8:
                dc.b    $05, $08, $02, $FF
Offset_0x0356EC:
                dc.b    $01, $05, $08, $0A, $00, $0B, $FF, $00
Offset_0x0356F4:
                dc.b    $0C, $09, $0D, $0E, $01, $03, $FF, $00
Offset_0x0356FC:
                dc.b    $0F, $08, $06, $02, $FF, $00
Offset_0x035702:
                dc.b    $10, $04, $05, $06, $11, $FF
Offset_0x035708:
                dc.b    $06, $08, $05, $04, $07, $FF
Offset_0x03570E:
                dc.b    $0F, $04, $09, $01, $06, $FF
Offset_0x035714:
                dc.b    $02, $04, $01, $11, $FF, $00
Offset_0x03571A:
                dc.b    $10, $04, $05, $FF
Offset_0x03571E:
                dc.b    $02, $10, $04, $07, $01, $FF
Offset_0x035724:
                dc.b    $0D, $09, $09, $11, $FF, $00
Offset_0x03572A:
                dc.b    $11, $FF
Offset_0x03572C:
                dc.b    $12, $12, $12, $FF
Offset_0x035730:
                dc.b    $13, $FF
Offset_0x035732:
                dc.b    $02, $0D, $04, $09, $06, $FF 
;-------------------------------------------------------------------------------   
Offset_0x035738:
                moveq   #$00, D0
                move.w  #$0054, D1
                move.w  #$006C, D2
                bsr     Offset_0x035664
                jsr     (Offset_0x0076A8)
                move.w  D1, D4
                move.w  D2, D5
                move.w  D2, A3
                move.w  #$0080, D1
                cmpi.w  #$0002, D2
                beq.s   Offset_0x03575E
                subq.w  #$08, D1
Offset_0x03575E:
                move.w  #$006C, D2
Offset_0x035762:
                move.w  D4, D6
                lsr.w   #$04, D4
                andi.w  #$000F, D6
                move.b  D6, D0
                swap.w  D5
                bsr     Offset_0x035624
                subq.w  #$08, D1
                swap.w  D5
                dbra    D5, Offset_0x035762
                moveq   #$02, D0
                lea     (Offset_0x03582C), A2
                adda.w  $00(A2, D0), A2
                move.w  #$006C, D2
                move.w  #$0084, D1
                cmpa.w  #$0002, A3
                bne.s   Offset_0x035796
                addq.w  #$08, D1
Offset_0x035796:
                moveq   #$00, D0
                move.b  (A2)+, D0
                bmi.s   Offset_0x0357A2
                bsr     Offset_0x035664
                bra.s   Offset_0x035796
Offset_0x0357A2:
                rts    
;------------------------------------------------------------------------------- 
Offset_0x0357A4:
                move.w  #$0080, D3
                bsr     Offset_0x0354FE
                cmpi.w  #$0001, ($FFFFFF7A).w
                ble.s   Offset_0x0357C0
                addi.w  #$2000, $0002(A1)
                addi.w  #$2000, $0002(A2)
Offset_0x0357C0:
                move.w  #$0074, D1
                move.w  #$0068, D2
                lea     (Offset_0x03582C), A2
                adda.w  $00(A2, D0), A2
                cmpi.b  #$04, D0
                beq.s   Offset_0x0357DC
                move.w  #$005E, D1
Offset_0x0357DC:
                moveq   #$00, D0
                move.b  (A2)+, D0
                bmi.s   Offset_0x0357F8
                cmpi.b  #$02, D0
                bne.s   Offset_0x0357F0
                move.w  #$005E, D1
                move.w  #$007E, D2
Offset_0x0357F0:
                bsr     Offset_0x035664
                addq.w  #$08, D1
                bra.s   Offset_0x0357DC
Offset_0x0357F8:
                rts
;-------------------------------------------------------------------------------             
Offset_0x0357FA:
                move.w  D0, D3
                subq.w  #$08, D3
                lsr.w   #$01, D3
                moveq   #$00, D1
                move.b  Offset_0x035824(PC, D3), D1
                move.w  #$0048, D2
                lea     (Offset_0x03582C), A2
                adda.w  $00(A2, D0), A2
Offset_0x035814:
                moveq   #$00, D0
                move.b  (A2)+, D0
                bmi.s   Offset_0x035822
                bsr     Offset_0x035664
                addq.w  #$08, D1
                bra.s   Offset_0x035814
Offset_0x035822:
                rts     
;-------------------------------------------------------------------------------             
Offset_0x035824:
                dc.b    $48, $44, $58, $58, $74, $3C, $58, $00        
;-------------------------------------------------------------------------------  
Offset_0x03582C:
                dc.w    Offset_0x035844-Offset_0x03582C
                dc.w    Offset_0x035845-Offset_0x03582C
                dc.w    Offset_0x035848-Offset_0x03582C
                dc.w    Offset_0x03584A-Offset_0x03582C
                dc.w    Offset_0x03584F-Offset_0x03582C
                dc.w    Offset_0x035853-Offset_0x03582C
                dc.w    Offset_0x035857-Offset_0x03582C
                dc.w    Offset_0x03585A-Offset_0x03582C
                dc.w    Offset_0x03585D-Offset_0x03582C
                dc.w    Offset_0x03585F-Offset_0x03582C
                dc.w    Offset_0x035864-Offset_0x03582C
                dc.w    Offset_0x035867-Offset_0x03582C
Offset_0x035844:
                dc.b    $FF
Offset_0x035845:
                dc.b    $02, $1C, $FF
Offset_0x035848:
                dc.b    $04, $FF
Offset_0x03584A:
                dc.b    $06, $08, $02, $1E, $FF
Offset_0x03584F:
                dc.b    $0A, $20, $0A, $FF
Offset_0x035853:
                dc.b    $0C, $02, $0E, $FF
Offset_0x035857:
                dc.b    $10, $0E, $FF
Offset_0x03585A:
                dc.b    $12, $0E, $FF
Offset_0x03585D:
                dc.b    $14, $FF
Offset_0x03585F:
                dc.b    $16, $18, $16, $1A, $FF
Offset_0x035864:
                dc.b    $22, $0E, $FF
Offset_0x035867:
                dc.b    $02, $24, $26, $1C, $FF                                                            
;-------------------------------------------------------------------------------   
Offset_0x03586C:
                dc.w    Offset_0x035898-Offset_0x03586C
                dc.w    Offset_0x0358A2-Offset_0x03586C
                dc.w    Offset_0x0358AC-Offset_0x03586C
                dc.w    Offset_0x0358B6-Offset_0x03586C
                dc.w    Offset_0x0358C0-Offset_0x03586C
                dc.w    Offset_0x0358CA-Offset_0x03586C
                dc.w    Offset_0x0358D4-Offset_0x03586C
                dc.w    Offset_0x0358DE-Offset_0x03586C
                dc.w    Offset_0x0358E8-Offset_0x03586C
                dc.w    Offset_0x0358F2-Offset_0x03586C
                dc.w    Offset_0x0358FC-Offset_0x03586C
                dc.w    Offset_0x035906-Offset_0x03586C
                dc.w    Offset_0x035910-Offset_0x03586C
                dc.w    Offset_0x03591A-Offset_0x03586C
                dc.w    Offset_0x035924-Offset_0x03586C
                dc.w    Offset_0x03592E-Offset_0x03586C
                dc.w    Offset_0x035938-Offset_0x03586C
                dc.w    Offset_0x035942-Offset_0x03586C
                dc.w    Offset_0x03594C-Offset_0x03586C
                dc.w    Offset_0x035956-Offset_0x03586C
                dc.w    Offset_0x035960-Offset_0x03586C
                dc.w    Offset_0x0359A2-Offset_0x03586C
Offset_0x035898:
                dc.w    $0001
                dc.l    $F8018004, $8002FFFC
Offset_0x0358A2:
                dc.w    $0001
                dc.l    $F8018002, $8001FFFC
Offset_0x0358AC:
                dc.w    $0001
                dc.l    $F8018014, $800AFFFC
Offset_0x0358B6:
                dc.w    $0001
                dc.l    $F8018010, $8008FFFC
Offset_0x0358C0:
                dc.w    $0001
                dc.l    $F8018008, $8004FFFC
Offset_0x0358CA:
                dc.w    $0001
                dc.l    $F801800C, $8006FFFC
Offset_0x0358D4:
                dc.w    $0001
                dc.l    $F8018012, $8009FFFC
Offset_0x0358DE:
                dc.w    $0001
                dc.l    $F8018000, $8000FFFC
Offset_0x0358E8:
                dc.w    $0001
                dc.l    $F801806A, $8035FFFC
Offset_0x0358F2:
                dc.w    $0001
                dc.l    $F801800A, $8005FFFC
Offset_0x0358FC:
                dc.w    $0001
                dc.l    $F8018016, $800BFFFC
Offset_0x035906:
                dc.w    $0001
                dc.l    $F8018006, $8003FFFC
Offset_0x035910:
                dc.w    $0001
                dc.l    $F801823D, $811EFFFC
Offset_0x03591A:
                dc.w    $0001
                dc.l    $F801823F, $811FFFFC
Offset_0x035924:
                dc.w    $0001
                dc.l    $F8018241, $8120FFFC
Offset_0x03592E:
                dc.w    $0001
                dc.l    $F8018243, $8121FFFC
Offset_0x035938:
                dc.w    $0001
                dc.l    $F8018245, $8122FFFC
Offset_0x035942:
                dc.w    $0001
                dc.l    $F8018018, $800CFFFC
Offset_0x03594C:
                dc.w    $0001
                dc.l    $F801800E, $8007FFFC
Offset_0x035956:
                dc.w    $0001
                dc.l    $FC048247, $8123FFF8
Offset_0x035960:
                dc.w    $0008
                dc.l    $E403801A, $800DFFD0, $EC0F801E, $800FFFD8
                dc.l    $EC03802E, $8017FFF8, $0C0D8032, $8019FFE0
                dc.l    $EC03882E, $88170000, $0C0D8832, $88190000
                dc.l    $EC0F881E, $880F0008, $E403881A, $880D0028
Offset_0x0359A2:
                dc.w    $0004
                dc.l    $F00B803A, $801DFFE8, $10088046, $8023FFE8
                dc.l    $000A8049, $80240000, $E8068052, $80290000
;------------------------------------------------------------------------------- 
Offset_0x0359C4:
                add.w   D0, D0
                move.w  D0, D1
                add.w   D0, D0
                add.w   D1, D0
                move.w  Offset_0x0359E0(PC, D0), ($FFFFFB76).w
                move.w  Offset_0x0359E0+$02(PC, D0), ($FFFFFB78).w
                move.w  Offset_0x0359E0+$04(PC, D0), ($FFFFFB7A).w
                rts
;------------------------------------------------------------------------------- 
Offset_0x0359E0:
                dc.w    $0EE8, $0EC0, $0E80, $0E6A, $0C08, $0806, $0A6E, $000E
                dc.w    $000A, $0EAE, $0E6E, $0E4E, $0AEE, $00CE, $008A, $00EA
                dc.w    $00C6, $0082, $0CCC, $0AAA, $0888                
;------------------------------------------------------------------------------- 
; Obj_0x59_SS_Emerald_Rings_Check: 
Obj_0x59_SS_End_Check: ; ; Offset_0x035A0A:                               
                include  'data\objects\obj_0x59.asm'  
;-------------------------------------------------------------------------------                                                                                                  
Offset_0x035C0E:
                move.l  #$00FFB000, A1
                move.w  #$01FF, D0
                moveq   #$00, D1
Offset_0x035C1A:
                move.l  D1, (A1)+
                move.l  D1, (A1)+
                move.l  D1, (A1)+
                move.l  D1, (A1)+
                dbra    D0, Offset_0x035C1A
                lea     ($FFFFF800).w, A1
                moveq   #$00, D0
                move.w  #$00A0, D1
Offset_0x035C30:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x035C30
                rts   
;-------------------------------------------------------------------------------  
; Offset_0x035C38: ; Rotina não usada no jogo (Left over)
                cmpi.b  #$0B, ($FFFFDB0D).w
                bcs.s   Offset_0x035C4A
                subi.l  #$00004445, $0030(A0)
                bra.s   Offset_0x035C52
Offset_0x035C4A:
                subi.l  #$00004444, $0030(A0)
Offset_0x035C52:
                move.w  $0030(A0), D0
                cmpi.w  #$001D, D0
                ble.s   Offset_0x035C5E
                moveq   #$1E, D0
Offset_0x035C5E:
                lea     (Offset_0x034BCC), A1
                move.b  $00(A1, D0), $001C(A0)
                rts                     
;-------------------------------------------------------------------------------                
SS_Got_Emerald_AnimateData: ; Offset_0x035C6C:
                dc.w    Offset_0x035C80-SS_Got_Emerald_AnimateData
                dc.w    Offset_0x035C84-SS_Got_Emerald_AnimateData
                dc.w    Offset_0x035C88-SS_Got_Emerald_AnimateData
                dc.w    Offset_0x035C8C-SS_Got_Emerald_AnimateData
                dc.w    Offset_0x035C90-SS_Got_Emerald_AnimateData
                dc.w    Offset_0x035C94-SS_Got_Emerald_AnimateData
                dc.w    Offset_0x035C98-SS_Got_Emerald_AnimateData
                dc.w    Offset_0x035C9C-SS_Got_Emerald_AnimateData
                dc.w    Offset_0x035CA0-SS_Got_Emerald_AnimateData
                dc.w    Offset_0x035CA4-SS_Got_Emerald_AnimateData
Offset_0x035C80:
                dc.b    $0B, $00, $FF, $00
Offset_0x035C84:
                dc.b    $0B, $01, $FF, $00
Offset_0x035C88:
                dc.b    $0B, $02, $FF, $00
Offset_0x035C8C:
                dc.b    $0B, $03, $FF, $00
Offset_0x035C90:
                dc.b    $0B, $04, $FF, $00
Offset_0x035C94:
                dc.b    $0B, $05, $FF, $00
Offset_0x035C98:
                dc.b    $0B, $06, $FF, $00
Offset_0x035C9C:
                dc.b    $0B, $07, $FF, $00
Offset_0x035CA0:
                dc.b    $0B, $08, $FF, $00
Offset_0x035CA4:
                dc.b    $0B, $09, $FF, $00                             
;-------------------------------------------------------------------------------
SS_Got_Emerald_Map: ; Offset_0x035CA8:
                dc.w    SS_Got_Emerald_Zoom_Map_00-SS_Got_Emerald_Map ; Offset_0x035CBC 
                dc.w    SS_Got_Emerald_Zoom_Map_01-SS_Got_Emerald_Map ; Offset_0x035CC6
                dc.w    SS_Got_Emerald_Zoom_Map_02-SS_Got_Emerald_Map ; Offset_0x035CD0
                dc.w    SS_Got_Emerald_Zoom_Map_03-SS_Got_Emerald_Map ; Offset_0x035CDA
                dc.w    SS_Got_Emerald_Zoom_Map_04-SS_Got_Emerald_Map ; Offset_0x035CE4
                dc.w    SS_Got_Emerald_Zoom_Map_05-SS_Got_Emerald_Map ; Offset_0x035CEE
                dc.w    SS_Got_Emerald_Zoom_Map_06-SS_Got_Emerald_Map ; Offset_0x035CF8
                dc.w    SS_Got_Emerald_Zoom_Map_07-SS_Got_Emerald_Map ; Offset_0x035D02
                dc.w    SS_Got_Emerald_Zoom_Map_08-SS_Got_Emerald_Map ; Offset_0x035D0C
                dc.w    SS_Got_Emerald_Zoom_Map_09-SS_Got_Emerald_Map ; Offset_0x035D16
SS_Got_Emerald_Zoom_Map_00: ; Offset_0x035CBC:
                dc.w    $0001
                dc.l    $FC008000, $8000FFFC  
SS_Got_Emerald_Zoom_Map_01: ; Offset_0x035CC6:
                dc.w    $0001
                dc.l    $FC008001, $8000FFFC
SS_Got_Emerald_Zoom_Map_02: ; Offset_0x035CD0:
                dc.w    $0001
                dc.l    $FC008002, $8001FFFC
SS_Got_Emerald_Zoom_Map_03: ; Offset_0x035CDA:
                dc.w    $0001
                dc.l    $F8058003, $8001FFF8
SS_Got_Emerald_Zoom_Map_04: ; Offset_0x035CE4:
                dc.w    $0001
                dc.l    $F8058007, $8003FFF8
SS_Got_Emerald_Zoom_Map_05: ; Offset_0x035CEE:
                dc.w    $0001
                dc.l    $F805800B, $8005FFF8
SS_Got_Emerald_Zoom_Map_06: ; Offset_0x035CF8:
                dc.w    $0001
                dc.l    $F805800F, $8007FFF8
SS_Got_Emerald_Zoom_Map_07: ; Offset_0x035D02:
                dc.w    $0001
                dc.l    $F40A8013, $8009FFF4
SS_Got_Emerald_Zoom_Map_08: ; Offset_0x035D0C:
                dc.w    $0001
                dc.l    $F40A801C, $800EFFF4
SS_Got_Emerald_Zoom_Map_09: ; Offset_0x035D16:
                dc.w    $0001
                dc.l    $F40A8025, $8012FFF4
;-------------------------------------------------------------------------------                
SS_Rings_AnimateData: ; Offset_0x035D20:
                dc.w    Offset_0x035D36-SS_Rings_AnimateData
                dc.w    Offset_0x035D3C-SS_Rings_AnimateData
                dc.w    Offset_0x035D42-SS_Rings_AnimateData
                dc.w    Offset_0x035D48-SS_Rings_AnimateData
                dc.w    Offset_0x035D4E-SS_Rings_AnimateData
                dc.w    Offset_0x035D54-SS_Rings_AnimateData
                dc.w    Offset_0x035D5A-SS_Rings_AnimateData
                dc.w    Offset_0x035D60-SS_Rings_AnimateData
                dc.w    Offset_0x035D66-SS_Rings_AnimateData
                dc.w    Offset_0x035D6C-SS_Rings_AnimateData
                dc.w    Offset_0x035D72-SS_Rings_AnimateData
Offset_0x035D36:
                dc.b    $05, $00, $0A, $14, $0A, $FF
Offset_0x035D3C:
                dc.b    $05, $01, $0B, $15, $0B, $FF
Offset_0x035D42:
                dc.b    $05, $02, $0C, $16, $0C, $FF
Offset_0x035D48:
                dc.b    $05, $03, $0D, $17, $0D, $FF
Offset_0x035D4E:
                dc.b    $05, $04, $0E, $18, $0E, $FF
Offset_0x035D54:
                dc.b    $05, $05, $0F, $19, $0F, $FF
Offset_0x035D5A:
                dc.b    $05, $06, $10, $1A, $10, $FF
Offset_0x035D60:
                dc.b    $05, $07, $11, $1B, $11, $FF
Offset_0x035D66:
                dc.b    $05, $08, $12, $1C, $12, $FF
Offset_0x035D6C:
                dc.b    $05, $09, $13, $1D, $13, $FF
Offset_0x035D72:
                dc.b    $01, $1E, $1F, $20, $FF, $00              
;-------------------------------------------------------------------------------                 
SS_Rings_Mappings: ; Offset_0x035D78:
                dc.w    Offset_0x035DBA-SS_Rings_Mappings
                dc.w    Offset_0x035DC4-SS_Rings_Mappings
                dc.w    Offset_0x035DCE-SS_Rings_Mappings
                dc.w    Offset_0x035DD8-SS_Rings_Mappings
                dc.w    Offset_0x035DE2-SS_Rings_Mappings
                dc.w    Offset_0x035DEC-SS_Rings_Mappings
                dc.w    Offset_0x035DF6-SS_Rings_Mappings
                dc.w    Offset_0x035E00-SS_Rings_Mappings
                dc.w    Offset_0x035E0A-SS_Rings_Mappings
                dc.w    Offset_0x035E14-SS_Rings_Mappings
                dc.w    Offset_0x035E1E-SS_Rings_Mappings
                dc.w    Offset_0x035E28-SS_Rings_Mappings
                dc.w    Offset_0x035E32-SS_Rings_Mappings
                dc.w    Offset_0x035E3C-SS_Rings_Mappings
                dc.w    Offset_0x035E46-SS_Rings_Mappings
                dc.w    Offset_0x035E50-SS_Rings_Mappings
                dc.w    Offset_0x035E5A-SS_Rings_Mappings
                dc.w    Offset_0x035E64-SS_Rings_Mappings
                dc.w    Offset_0x035E6E-SS_Rings_Mappings
                dc.w    Offset_0x035E78-SS_Rings_Mappings
                dc.w    Offset_0x035E82-SS_Rings_Mappings
                dc.w    Offset_0x035E8C-SS_Rings_Mappings
                dc.w    Offset_0x035E96-SS_Rings_Mappings
                dc.w    Offset_0x035EA0-SS_Rings_Mappings
                dc.w    Offset_0x035EAA-SS_Rings_Mappings
                dc.w    Offset_0x035EB4-SS_Rings_Mappings
                dc.w    Offset_0x035EBE-SS_Rings_Mappings
                dc.w    Offset_0x035EC8-SS_Rings_Mappings
                dc.w    Offset_0x035ED2-SS_Rings_Mappings
                dc.w    Offset_0x035EDC-SS_Rings_Mappings
                dc.w    Offset_0x035EE6-SS_Rings_Mappings
                dc.w    Offset_0x035EF8-SS_Rings_Mappings
                dc.w    Offset_0x035F0A-SS_Rings_Mappings
Offset_0x035DBA:
                dc.w    $0001
                dc.l    $FC008000, $8000FFFC
Offset_0x035DC4:
                dc.w    $0001
                dc.l    $FC008001, $8000FFFC
Offset_0x035DCE:
                dc.w    $0001
                dc.l    $FC008002, $8001FFFC
Offset_0x035DD8:
                dc.w    $0001
                dc.l    $F8058003, $8001FFF8
Offset_0x035DE2:
                dc.w    $0001
                dc.l    $F8058007, $8003FFF8
Offset_0x035DEC:
                dc.w    $0001
                dc.l    $F805800B, $8005FFF8
Offset_0x035DF6:
                dc.w    $0001
                dc.l    $F805800F, $8007FFF8
Offset_0x035E00:
                dc.w    $0001
                dc.l    $F40A8013, $8009FFF4
Offset_0x035E0A:
                dc.w    $0001
                dc.l    $F40A801C, $800EFFF4
Offset_0x035E14:
                dc.w    $0001
                dc.l    $F40A8025, $8012FFF4
Offset_0x035E1E:
                dc.w    $0001
                dc.l    $FC00802E, $8017FFFC
Offset_0x035E28:
                dc.w    $0001
                dc.l    $FC00802F, $8017FFFC
Offset_0x035E32:
                dc.w    $0001
                dc.l    $FC008030, $8018FFFC
Offset_0x035E3C:
                dc.w    $0001
                dc.l    $F8018031, $8018FFFC
Offset_0x035E46:
                dc.w    $0001
                dc.l    $F8058033, $8019FFF8
Offset_0x035E50:
                dc.w    $0001
                dc.l    $F8058037, $801BFFF8
Offset_0x035E5A:
                dc.w    $0001
                dc.l    $F805803B, $801DFFF8
Offset_0x035E64:
                dc.w    $0001
                dc.l    $F406803F, $801FFFF8
Offset_0x035E6E:
                dc.w    $0001
                dc.l    $F4068045, $8022FFF8
Offset_0x035E78:
                dc.w    $0001
                dc.l    $F40A804B, $8025FFF4
Offset_0x035E82:
                dc.w    $0001
                dc.l    $FC008054, $802AFFFC
Offset_0x035E8C:
                dc.w    $0001
                dc.l    $FC008055, $802AFFFC
Offset_0x035E96:
                dc.w    $0001
                dc.l    $FC008056, $802BFFFC
Offset_0x035EA0:
                dc.w    $0001
                dc.l    $F8018057, $802BFFFC
Offset_0x035EAA:
                dc.w    $0001
                dc.l    $F8018059, $802CFFFC
Offset_0x035EB4:
                dc.w    $0001
                dc.l    $F801805B, $802DFFFC
Offset_0x035EBE:
                dc.w    $0001
                dc.l    $F801805D, $802EFFFC
Offset_0x035EC8:
                dc.w    $0001
                dc.l    $F402805F, $802FFFFC
Offset_0x035ED2:
                dc.w    $0001
                dc.l    $F4028062, $8031FFFC
Offset_0x035EDC:
                dc.w    $0001
                dc.l    $F4028065, $8032FFFC
Offset_0x035EE6:
                dc.w    $0002
                dc.l    $F0078000, $8000FFF0, $F8058008, $80040000
Offset_0x035EF8:
                dc.w    $0002
                dc.l    $F00E800C, $8006FFF0, $08008018, $800CFFF8
Offset_0x035F0A:
                dc.w    $0002
                dc.l    $F0028019, $800CFFF0, $F80A801C, $800EFFF8                                   
;-------------------------------------------------------------------------------
SS_Bombs_Animate_Data: ; Offset_0x035F1C:
                dc.w    Offset_0x035F32-SS_Bombs_Animate_Data
                dc.w    Offset_0x035F36-SS_Bombs_Animate_Data
                dc.w    Offset_0x035F3A-SS_Bombs_Animate_Data
                dc.w    Offset_0x035F3E-SS_Bombs_Animate_Data
                dc.w    Offset_0x035F42-SS_Bombs_Animate_Data
                dc.w    Offset_0x035F46-SS_Bombs_Animate_Data
                dc.w    Offset_0x035F4A-SS_Bombs_Animate_Data
                dc.w    Offset_0x035F4E-SS_Bombs_Animate_Data
                dc.w    Offset_0x035F52-SS_Bombs_Animate_Data
                dc.w    Offset_0x035F56-SS_Bombs_Animate_Data
                dc.w    Offset_0x035F5A-SS_Bombs_Animate_Data
Offset_0x035F32:
                dc.b    $0B, $00, $FF, $00
Offset_0x035F36:
                dc.b    $0B, $01, $FF, $00
Offset_0x035F3A:
                dc.b    $0B, $02, $FF, $00
Offset_0x035F3E:
                dc.b    $0B, $03, $FF, $00
Offset_0x035F42:
                dc.b    $0B, $04, $FF, $00
Offset_0x035F46:
                dc.b    $0B, $05, $FF, $00
Offset_0x035F4A:
                dc.b    $0B, $06, $FF, $00
Offset_0x035F4E:
                dc.b    $0B, $07, $FF, $00
Offset_0x035F52:
                dc.b    $0B, $08, $FF, $00
Offset_0x035F56:
                dc.b    $0B, $09, $FF, $00
Offset_0x035F5A:
                dc.b    $02, $0A, $0B, $0C, $FF, $00
;------------------------------------------------------------------------------- 
SS_Bombs_Mappings: ; Offset_0x035F60:
                dc.w    Offset_0x035F7A-SS_Bombs_Mappings
                dc.w    Offset_0x035F84-SS_Bombs_Mappings
                dc.w    Offset_0x035F8E-SS_Bombs_Mappings
                dc.w    Offset_0x035F98-SS_Bombs_Mappings
                dc.w    Offset_0x035FA2-SS_Bombs_Mappings
                dc.w    Offset_0x035FAC-SS_Bombs_Mappings
                dc.w    Offset_0x035FB6-SS_Bombs_Mappings
                dc.w    Offset_0x035FC0-SS_Bombs_Mappings
                dc.w    Offset_0x035FCA-SS_Bombs_Mappings
                dc.w    Offset_0x035FD4-SS_Bombs_Mappings
                dc.w    Offset_0x035FDE-SS_Bombs_Mappings
                dc.w    Offset_0x035FE8-SS_Bombs_Mappings
                dc.w    Offset_0x035FFA-SS_Bombs_Mappings
Offset_0x035F7A:
                dc.w    $0001
                dc.l    $FC008000, $8000FFFC
Offset_0x035F84:
                dc.w    $0001
                dc.l    $FC008001, $8000FFFC
Offset_0x035F8E:
                dc.w    $0001
                dc.l    $F8058002, $8001FFF8
Offset_0x035F98:
                dc.w    $0001
                dc.l    $F8058006, $8003FFF8
Offset_0x035FA2:
                dc.w    $0001
                dc.l    $F805800A, $8005FFF8
Offset_0x035FAC:
                dc.w    $0001
                dc.l    $F40A800E, $8007FFF4
Offset_0x035FB6:
                dc.w    $0001
                dc.l    $F40A8017, $800BFFF4
Offset_0x035FC0:
                dc.w    $0001
                dc.l    $F00F8020, $8010FFF0
Offset_0x035FCA:
                dc.w    $0001
                dc.l    $F00F8030, $8018FFF0
Offset_0x035FD4:
                dc.w    $0001
                dc.l    $F00F8040, $8020FFF0
Offset_0x035FDE:
                dc.w    $0001
                dc.l    $F00F8000, $8000FFF0
Offset_0x035FE8:
                dc.w    $0002
                dc.l    $E80F8010, $8008FFE8, $E80F8010, $8008FFF8
Offset_0x035FFA:
                dc.w    $0003
                dc.l    $E00F8020, $8010FFD8, $D80F9020, $9010FFF0
                dc.l    $E00F8820, $88100008       
;-------------------------------------------------------------------------------         

J_DisplaySprite_01: ; Offset_0x036014:
                jmp     (DisplaySprite)                        ; Offset_0x01647A                      
;===============================================================================
; Sub Rotina ObjectSettings - Usada para iniciar parâmetros dos objetos
; [ Início ]
;===============================================================================  
ObjectSettings: ;  Offset_0x03601A:
                moveq   #$00, D0
                move.b  $0028(A0), D0
ObjectSettings_D0: ; Offset_0x036020:
                move.w  ObjSet_Idx(PC, D0), D0                 ; Offset_0x03604E
                lea     ObjSet_Idx(PC, D0), A1                 ; Offset_0x03604E
ObjectSettings_A1: ; Offset_0x036028:
                move.l  (A1)+, $0004(A0)
                move.w  (A1)+, $0002(A0)
                jsr     (ModifySpriteAttr_2P)                  ; Offset_0x016CFA
                move.b  (A1)+, D0
                or.b    D0, $0001(A0)
                move.b  (A1)+, $0018(A0)
                move.b  (A1)+, $0019(A0)
                move.b  (A1), $0020(A0)
                addq.b  #$02, $0024(A0)
                rts
ObjSet_Idx: ; Offset_0x03604E 
                dc.w    Obj_0x8C_Ptr-ObjSet_Idx                ; Offset_0x036464 
                dc.w    Obj_0x8E_Ptr-ObjSet_Idx                ; Offset_0x03670E 
                dc.w    Obj_0x8F_Ptr-ObjSet_Idx                ; Offset_0x036718 
                dc.w    Obj_0x90_Ptr-ObjSet_Idx                ; Offset_0x036722 
                dc.w    Obj_0x91_Ptr-ObjSet_Idx                ; Offset_0x03693E 
                dc.w    Obj_0x92_Ptr-ObjSet_Idx                ; Offset_0x036AEA 
                dc.w    Obj_0x96_Rexon_Body-ObjSet_Idx         ; Offset_0x036DAC 
                dc.w    Obj_0x96_Ptr-ObjSet_Idx                ; Offset_0x037116 
                dc.w    Rexon_Fireball_Map_Ptr-ObjSet_Idx      ; Offset_0x037222 
                dc.w    Obj_0x99_Ptr-ObjSet_Idx                ; Offset_0x03734E
                dc.w    Nebula_Bomb_Map_Ptr-ObjSet_Idx         ; Offset_0x03722C 
                dc.w    Obj_0x9A_Ptr-ObjSet_Idx                ; Offset_0x037606 
                dc.w    Obj_0x9B_Ptr-ObjSet_Idx                ; Offset_0x037610 
                dc.w    Obj_0x9C_Ptr-ObjSet_Idx                ; Offset_0x03761A  
                dc.w    Turtloid_Bullet_Map_Ptr-ObjSet_Idx     ; Offset_0x037236 
                dc.w    Obj_0x9D_Ptr-ObjSet_Idx                ; Offset_0x037866 
                dc.w    Coconuts_Coconut_Map_Ptr-ObjSet_Idx    ; Offset_0x037240 
                dc.w    Obj_0x9E_Ptr-ObjSet_Idx                ; Offset_0x037AE4 
                dc.w    Obj_0x9F_Ptr-ObjSet_Idx                ; Offset_0x037E08 
                dc.w    Obj_0xA0_Ptr-ObjSet_Idx                ; Offset_0x037E12 
                dc.w    Obj_0xA1_Ptr-ObjSet_Idx                ; Offset_0x0380FC 
                dc.w    Obj_0xA2_Ptr-ObjSet_Idx                ; Offset_0x038106 
                dc.w    Obj_0xA3_Ptr-ObjSet_Idx                ; Offset_0x038404 
                dc.w    Obj_0xA4_Ptr-ObjSet_Idx                ; Offset_0x0385EC 
                dc.w    Asteron_Spikes_Map_Ptr-ObjSet_Idx      ; Offset_0x03724A 
                dc.w    Obj_0xA5_Ptr-ObjSet_Idx                ; Offset_0x038834 
                dc.w    Spiny_Shot_Map_Ptr-ObjSet_Idx          ; Offset_0x037254 
                dc.w    Obj_0xA7_Ptr-ObjSet_Idx                ; Offset_0x038D8A
                dc.w    Obj_0xA8_Ptr-ObjSet_Idx                ; Offset_0x038D94 
                dc.w    Obj_0xA9_Ptr-ObjSet_Idx                ; Offset_0x038D9E 
                dc.w    Obj_0xAA_Ptr-ObjSet_Idx                ; Offset_0x038DA8 
                dc.w    Grabber_Unk_Map_Ptr-ObjSet_Idx         ; Offset_0x03725E 
                dc.w    Obj_0xAC_Ptr-ObjSet_Idx                ; Offset_0x038F64 
                dc.w    Obj_0xAD_Ptr-ObjSet_Idx                ; Offset_0x039138 
                dc.w    Obj_0xAE_Ptr-ObjSet_Idx                ; Offset_0x039142 
                dc.w    Clucker_Bullet_Map_Ptr-ObjSet_Idx      ; Offset_0x037268 
                dc.w    Obj_0xAF_Ptr-ObjSet_Idx                ; Offset_0x0399D8 
                dc.w    Metal_Sonic_Spikes_Map_Ptr-ObjSet_Idx  ; Offset_0x037272 
                dc.w    Obj_0xB0_Ptr-ObjSet_Idx                ; Offset_0x03A1A2 
                dc.w    Obj_0xB1_Ptr-ObjSet_Idx                ; Offset_0x03A1AC  
                dc.w    Obj_0xB2_Ptr-ObjSet_Idx                ; Offset_0x03AC1A 
                dc.w    Obj_0xB2_Ptr-ObjSet_Idx                ; Offset_0x03AC1A 
                dc.w    Obj_0xB2_Ptr-ObjSet_Idx                ; Offset_0x03AC1A 
                dc.w    Obj_0xBC_Ptr-ObjSet_Idx                ; Offset_0x03B88E 
                dc.w    Obj_0xBC_Ptr-ObjSet_Idx                ; Offset_0x03B88E 
                dc.w    Obj_0xB3_Ptr-ObjSet_Idx                ; Offset_0x03AF76 
                dc.w    Obj_0xB2_01_Ptr-ObjSet_Idx             ; Offset_0x03AC24 
                dc.w    Obj_0xB3_Ptr-ObjSet_Idx                ; Offset_0x03AF76 
                dc.w    Obj_0xB3_Ptr-ObjSet_Idx                ; Offset_0x03AF76 
                dc.w    Obj_0xB3_Ptr-ObjSet_Idx                ; Offset_0x03AF76 
                dc.w    Obj_0xB4_Ptr-ObjSet_Idx                ; Offset_0x03B006 
                dc.w    Obj_0xB5_Ptr-ObjSet_Idx                ; Offset_0x03B140 
                dc.w    Obj_0xB5_Ptr-ObjSet_Idx                ; Offset_0x03B140 
                dc.w    Obj_0xB6_Ptr-ObjSet_Idx                ; Offset_0x03B490 
                dc.w    Obj_0xB6_Ptr-ObjSet_Idx                ; Offset_0x03B490 
                dc.w    Obj_0xB6_Ptr-ObjSet_Idx                ; Offset_0x03B490 
                dc.w    Obj_0xB6_Ptr-ObjSet_Idx                ; Offset_0x03B490
                dc.w    Obj_0xB7_Ptr-ObjSet_Idx                ; Offset_0x03B554 
                dc.w    Obj_0xB8_Ptr-ObjSet_Idx                ; Offset_0x03B6BA 
                dc.w    Obj_0xB9_Ptr-ObjSet_Idx                ; Offset_0x03B798
                dc.w    Obj_0xBA_Ptr-ObjSet_Idx                ; Offset_0x03B7F2 
                dc.w    Obj_0xBB_Ptr-ObjSet_Idx                ; Offset_0x03B824 
                dc.w    Obj_0xBC_Ptr-ObjSet_Idx                ; Offset_0x03B88E 
                dc.w    Obj_0xBD_Ptr-ObjSet_Idx                ; Offset_0x03B9C2 
                dc.w    Obj_0xBD_Ptr-ObjSet_Idx                ; Offset_0x03B9C2 
                dc.w    Obj_0xBE_Ptr-ObjSet_Idx                ; Offset_0x03BADA 
                dc.w    Obj_0xBF_Ptr-ObjSet_Idx                ; Offset_0x03BB80 
                dc.w    Obj_0xC0_Ptr-ObjSet_Idx                ; Offset_0x03BD48 
                dc.w    Obj_0xC1_Ptr-ObjSet_Idx                ; Offset_0x03BF38 
                dc.w    Obj_0xC2_Ptr-ObjSet_Idx                ; Offset_0x03C080 
                dc.w    Obj_0xC3_WFz_Tornado_Smoke-ObjSet_Idx  ; Offset_0x03C09E 
                dc.w    Cannon_Bullet_Map_Ptr-ObjSet_Idx       ; Offset_0x03727C 
                dc.w    Obj_0xC4_Ptr-ObjSet_Idx                ; Offset_0x03C106 
                dc.w    Obj_0xC5_Ptr-ObjSet_Idx                ; Offset_0x03C9D2 
                dc.w    Obj_0xC5_01_Ptr-ObjSet_Idx             ; Offset_0x03C9DC 
                dc.w    Obj_0xC5_02_Ptr-ObjSet_Idx             ; Offset_0x03C9E6 
                dc.w    Obj_0xC5_02_Ptr-ObjSet_Idx             ; Offset_0x03C9E6 
                dc.w    Obj_0xC5_02_Ptr-ObjSet_Idx             ; Offset_0x03C9E6 
                dc.w    Obj_0xC5_02_Ptr-ObjSet_Idx             ; Offset_0x03C9E6 
                dc.w    Obj_0xC5_02_Ptr-ObjSet_Idx             ; Offset_0x03C9E6 
                dc.w    Obj_0xC5_03_Ptr-ObjSet_Idx             ; Offset_0x03C9F0 
                dc.w    Obj_0xC5_04_Ptr-ObjSet_Idx             ; Offset_0x03C9FA 
                dc.w    Obj_0xAF_01_Ptr-ObjSet_Idx             ; Offset_0x0399E2 
                dc.w    Obj_0xC6_Ptr-ObjSet_Idx                ; Offset_0x03CE28 
                dc.w    Obj_0xC6_01_Ptr-ObjSet_Idx             ; Offset_0x03CE32 
                dc.w    Obj_0xC6_02_Ptr-ObjSet_Idx             ; Offset_0x03CE3C 
                dc.w    Obj_0xC8_Ptr-ObjSet_Idx                ; Offset_0x03D1CA
;-------------------------------------------------------------------------------   
Offset_0x0360FC:
                moveq   #$00, D0
                moveq   #$00, D1
                lea     ($FFFFB000).w, A1
                move.w  $0008(A0), D2
                sub.w   $0008(A1), D2
                move.w  D2, D4
                bpl.s   Offset_0x036112
                neg.w   D4
Offset_0x036112:
                lea     ($FFFFB040).w, A2
                move.w  $0008(A0), D3
                sub.w   $0008(A2), D3
                move.w  D3, D5
                bpl.s   Offset_0x036124
                neg.w   D5
Offset_0x036124:
                cmp.w   D5, D4
                bls.s   Offset_0x03612C
                move.l  A2, A1
                move.w  D3, D2
Offset_0x03612C:
                tst.w   D2
                bpl.s   Offset_0x036132
                addq.w  #$02, D0
Offset_0x036132:
                move.w  $000C(A0), D3
                sub.w   $000C(A1), D3
                bcc.s   Offset_0x03613E
                addq.w  #$02, D1
Offset_0x03613E:
                rts
;-------------------------------------------------------------------------------      
Offset_0x036140:
                move.w  $0010(A0), D2
                bpl.s   Offset_0x036152
                neg.w   D0
                cmp.w   D0, D2
                bcc.s   Offset_0x036158
                move.w  D0, D2
                bra     Offset_0x036158
Offset_0x036152:
                cmp.w   D0, D2
                bls.s   Offset_0x036158
                move.w  D0, D2
Offset_0x036158:
                move.w  $0012(A0), D3
                bpl.s   Offset_0x03616A
                neg.w   D1
                cmp.w   D1, D3
                bcc.s   Offset_0x036170
                move.w  D1, D3
                bra     Offset_0x036170
Offset_0x03616A:
                cmp.w   D1, D3
                bls.s   Offset_0x036170
                move.w  D1, D3
Offset_0x036170:
                move.w  D2, $0010(A0)
                move.w  D3, $0012(A0)
                rts
;-------------------------------------------------------------------------------  
Offset_0x03617A:
                moveq   #$00, D0
                move.w  D0, $0010(A0)
                move.w  D0, $0012(A0)
                rts       
;-------------------------------------------------------------------------------  
Offset_0x036186: ; Usado pelo objeto 0xA7 - Grabber
                move.w  $0008(A0), D2
                add.w   D0, D2
                move.w  D2, $0008(A1)
                move.w  $000C(A0), D3
                add.w   D1, D3
                move.w  D3, $000C(A1)
                rts                                
;-------------------------------------------------------------------------------   
Offset_0x03619C: ; Usado pelo objeto 0x99 - Nébula  
                move.w  ($FFFFF736).w, D0
                add.w   D0, $0008(A0)
                move.w  ($FFFFF738).w, D0
                add.w   D0, $000C(A0)
                rts                
;-------------------------------------------------------------------------------              
Offset_0x0361AE: ; Usado pelo objeto 0x99 - Nébula  
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x0361BA
                jmp     (DisplaySprite)                        ; Offset_0x01647A
Offset_0x0361BA:
                move.w  $0008(A0), D0
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                bmi     J_DeleteObject_01                      ; Offset_0x036344
                jmp     (DisplaySprite)                        ; Offset_0x01647A                
;-------------------------------------------------------------------------------  
Offset_0x0361D0: ; Usado pelo objeto 0xA7 - Grabber
                move.b  $0001(A0), D0
                andi.b  #$FD, D0
                move.b  $0022(A0), D2
                andi.b  #$FD, D2
                move.b  $0001(A1), D1
                andi.b  #$02, D1
                or.b    D1, D0
                or.b    D1, D2
                move.b  D0, $0001(A0)
                move.b  D2, $0022(A0)
                rts
;-------------------------------------------------------------------------------  
Load_Sub_Obj: ; Offset_0x0361F6: ; Usado pelo objeto 0xA7 - Grabber / 0xAF - Metal Sonic / 0xB2 - Tornado / 0xC5 - WFz Boss
                jsr     (SingleObjectLoad_2)                   ; Offset_0x017F68
                bne.s   Offset_0x03621C
                move.w  (A2)+, D0
                move.w  A1, $00(A0, D0)
                move.b  (A2)+, $0000(A1)
                move.b  (A2)+, $0028(A1)
                move.w  A0, $002C(A1)
                move.w  $0008(A0), $0008(A1)
                move.w  $000C(A0), $000C(A1)
Offset_0x03621C:
                rts                               
;-------------------------------------------------------------------------------   
; Offset_0x03621E: ; Rotina não usada no jogo (Left over)
                bsr     Offset_0x0360FC
                bclr    #$00, $0001(A0)
                bclr    #$00, $0022(A0)
                tst.w   D0
                beq.s   Offset_0x03623E
                bset    #$00, $0001(A0)
                bset    #$00, $0022(A0)
Offset_0x03623E:
                rts
;-------------------------------------------------------------------------------  
Enemy_Weapon: ; Offset_0x036240:
                moveq   #$00, D1
Loop_Load_Weapon: ; Offset_0x036242:
                jsr     (SingleObjectLoad_2)                   ; Offset_0x017F68
                bne.s   Offset_0x036294
                move.b  #$98, $0000(A1)
                move.b  D2, $0028(A1) ; Carrega o objeto 0x98 - Arma dos inimigos
                move.w  $0008(A0), $0008(A1)
                move.w  $000C(A0), $000C(A1)
                lea     (SpeedToPos), A3                       ; Offset_0x016332
                move.l  A3, $002A(A1)
                lea     $00(A2, D1), A3
                move.b  (A3)+, D0
                ext.w   D0
                add.w   D0, $0008(A1)
                move.b  (A3)+, D0
                ext.w   D0
                add.w   D0, $000C(A1)
                move.b  (A3)+, $0010(A1)
                move.b  (A3)+, $0012(A1)
                move.b  (A3)+, $001A(A1)
                move.b  (A3)+, $0001(A1)
                addq.w  #$06, D1
                dbra    D6, Loop_Load_Weapon                   ; Offset_0x036242
Offset_0x036294:
                rts
;-------------------------------------------------------------------------------   
Offset_0x036296:  ; Usado pelo objeto 0xAF - Metal Sonic
                moveq   #$00, D0
                move.b  $001C(A0), D0
                cmp.b   $001D(A0), D0
                beq.s   Offset_0x0362B2
                move.b  D0, $001D(A0)
                move.b  #$00, $001B(A0)
                move.b  #$00, $001E(A0)
Offset_0x0362B2:
                subq.b  #$01, $001E(A0)
                bpl.s   Offset_0x0362D6
                add.w   D0, D0
                adda.w  $00(A1, D0), A1
                move.b  (A1), $001E(A0)
                moveq   #$00, D1
                move.b  $001B(A0), D1
                move.b  $01(A1, D1), D0
                bmi.s   Offset_0x0362DA
Offset_0x0362CE:
                move.b  D0, $001A(A0)
                addq.b  #$01, $001B(A0)
Offset_0x0362D6:
                moveq   #$00, D0
                rts
Offset_0x0362DA:
                addq.b  #$01, D0
                bne.s   Offset_0x0362EE
                move.b  #$00, $001B(A0)
                move.b  $0001(A1), D0
                bsr.s   Offset_0x0362CE
                moveq   #$01, D0
                rts
Offset_0x0362EE:
                addq.b  #$01, D0
                bne.s   Offset_0x036304
                addq.b  #$02, $0024(A0)
                move.b  #$00, $001E(A0)
                addq.b  #$01, $001B(A0)
                moveq   #$01, D0
                rts
Offset_0x036304:
                addq.b  #$01, D0
                bne.s   Offset_0x036310
                addq.b  #$02, $0025(A0)
                moveq   #$01, D0
                rts
Offset_0x036310:
                addq.b  #$01, D0
                bne.s   Offset_0x03631C
                move.b  #$01, $001E(A0)
                moveq   #$01, D0
Offset_0x03631C:
                rts
;-------------------------------------------------------------------------------  
Offset_0x03631E: ; Usado pelo objeto 0xB2 - Tornado                 
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x03632A
                jmp     (DisplaySprite)                        ; Offset_0x01647A
Offset_0x03632A:
                move.w  $0008(A0), D0
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi     J_DeleteObject_01                      ; Offset_0x036344
                jmp     (DisplaySprite)                        ; Offset_0x01647A
;-------------------------------------------------------------------------------              
J_DeleteObject_01: ; Offset_0x036344:
                jmp     (DeleteObject)                         ; Offset_0x01646C
;-------------------------------------------------------------------------------   
Obj_0x8C_ARz_Whisp: ; Offset_0x03634A: 
                include 'data\objects\obj_0x8C.asm'
;-------------------------------------------------------------------------------    
Obj_0x8D_Hidden_Grounder: 
Obj_0x8E_Grounder: ; Offset_0x03649C:
                include 'data\objects\obj_0x8E.asm'              
;------------------------------------------------------------------------------- 
Obj_0x8F_Wall_Hidden_Grounder: ; Offset_0x0365C4:    
                include 'data\objects\obj_0x8F.asm'
;-------------------------------------------------------------------------------
Obj_0x90_Rock_Hidden_Grounder: ; Offset_0x036614: 
                include 'data\objects\obj_0x90.asm' 
;-------------------------------------------------------------------------------
Obj_0x91_Chop_Chop ; Offset_0x0367F6: 
                include 'data\objects\obj_0x91.asm'
;-------------------------------------------------------------------------------
Obj_0x92_Spiker: ; Offset_0x036966:
                include 'data\objects\obj_0x92.asm'
;-------------------------------------------------------------------------------  
Obj_0x93_Spiker_Drill: ; Offset_0x036A50:   
                include 'data\objects\obj_0x93.asm'
;-------------------------------------------------------------------------------                    
Obj_0x95_Sol: ; Offset_0x036B6C:
                include 'data\objects\obj_0x95.asm'
;------------------------------------------------------------------------------- 
Obj_0x94_Rexon_Body: ;
Obj_0x96_Rexon_Body: ; Offset_0x036DAC:
                include 'data\objects\obj_0x96.asm' 
;-------------------------------------------------------------------------------                
Obj_0x97_Rexon_Head: ; Offset_0x036E66:                                                        
                include 'data\objects\obj_0x97.asm'                                                            
;-------------------------------------------------------------------------------    
Obj_0x98_Enemies_Weapons: ; Offset_0x037190:
                include 'data\objects\obj_0x98.asm'  
;------------------------------------------------------------------------------- 
Obj_0x99_Nebula: ; Offset_0x037286: 
                include 'data\objects\obj_0x99.asm'  
;-------------------------------------------------------------------------------  
Obj_0x9A_Turtloid: ; Offset_0x0373FC:
                include 'data\objects\obj_0x9A.asm'   
;------------------------------------------------------------------------------- 
Obj_0x9B_Turtloid_Rider: ; Offset_0x0374D0:    
                include 'data\objects\obj_0x9B.asm' 
;------------------------------------------------------------------------------- 
Obj_0x9C_Enemy_Boost: ; Offset_0x03754E:
                include 'data\objects\obj_0x9C.asm'   
;-------------------------------------------------------------------------------
Obj_0x9D_Coconuts: ; Offset_0x0376CE:
                include 'data\objects\obj_0x9D.asm'          
;-------------------------------------------------------------------------------  
Obj_0x9E_Crawlton: ; Offset_0x0378FE: 
                include 'data\objects\obj_0x9E.asm'       
;-------------------------------------------------------------------------------             
Obj_0x9F_Shellcracker: ; Offset_0x037B08: 
                include 'data\objects\obj_0x9F.asm'               
;-------------------------------------------------------------------------------
Obj_0xA0_Shellcracker_Craw: ; Offset_0x037C68:  
                include 'data\objects\obj_0xA0.asm' 
;-------------------------------------------------------------------------------    
Obj_0xA1_Slicer: ; Offset_0x037ECC: 
                include 'data\objects\obj_0xA1.asm'  
;------------------------------------------------------------------------------- 
Obj_0xA2_Slicer_Pincers: ; Offset_0x037FCE: 
                include 'data\objects\obj_0xA2.asm' 
;-------------------------------------------------------------------------------                            
Obj_0xA3_Flasher: ; Offset_0x03827A:  
                include 'data\objects\obj_0xA3.asm'
;-------------------------------------------------------------------------------  
Obj_0xA4_Asteron: ; Offset_0x0384F4: 
                include 'data\objects\obj_0xA4.asm'     
;-------------------------------------------------------------------------------                
Obj_0xA5_Horizontal_Spiny: ; Offset_0x038650:
                include 'data\objects\obj_0xA5.asm'
;-------------------------------------------------------------------------------  
Obj_0xA6_Vertical_Spiny: ; Offset_0x0386F8:
                include 'data\objects\obj_0xA6.asm'  
;-------------------------------------------------------------------------------    
Obj_0xA7_Grabber: ; Offset_0x038940:  
                include 'data\objects\obj_0xA7.asm'
;------------------------------------------------------------------------------- 
Obj_0xA8_Grabber_Sub: ; Offset_0x038AF0:
                include 'data\objects\obj_0xA8.asm'
;------------------------------------------------------------------------------- 
Obj_0xA9_Grabber_Sub: ; Offset_0x038BC4:
                include 'data\objects\obj_0xA9.asm'  
;------------------------------------------------------------------------------- 
Obj_0xAA_Grabber_Sub: ; Offset_0x038BFA:
                include 'data\objects\obj_0xAA.asm'
;------------------------------------------------------------------------------- 
Obj_0xAB_Grabber_Sub: ; Offset_0x038C38:
                include 'data\objects\obj_0xAB.asm'   
;-------------------------------------------------------------------------------                 
Obj_0xAC_Balkiry: ; Offset_0x038F18:  
                include 'data\objects\obj_0xAC.asm'              
;-------------------------------------------------------------------------------              
Obj_0xAD_Clucker_Platform: ; Offset_0x038FBE:       
                include 'data\objects\obj_0xAD.asm'     
;-------------------------------------------------------------------------------  
Obj_0xAE_Clucker: ; Offset_0x038FF8: 
                include 'data\objects\obj_0xAE.asm'  
;-------------------------------------------------------------------------------
Obj_0xAF_Metal_Sonic:  ; Offset_0x0392EE:
                include 'data\objects\obj_0xAF.asm' 
;-------------------------------------------------------------------------------                                                                   
Obj_0xB0_SegaScreen: ; Offset_0x039DE6:
                include 'data\objects\obj_0xB0.asm'
;-------------------------------------------------------------------------------                   
Obj_0xB1_Sonic_In_SegaScreen: ; Offset_0x03A00E:
                include 'data\objects\obj_0xB1.asm'                                           
;===============================================================================
; Sub Routina executada durante a VBlank
; [ Início ]
;===============================================================================
VBlank_Id_0x02_Sub: ;  Offset_0x03A2A2:
                move.w  ($FFFFF662).w, D0
                beq     Exit_Sub_01                            ; Offset_0x037512
                clr.w   ($FFFFF662).w
                move.w  Offset_0x03A2B6-$02(PC, D0), D0
                jmp     Offset_0x03A2B6(PC, D0)
Offset_0x03A2B6:
                dc.w    Offset_0x03A2BA-Offset_0x03A2B6
                dc.w    Offset_0x03A2EC-Offset_0x03A2B6
Offset_0x03A2BA:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94169300, (A5)
                move.l  #$96859580, (A5)
                move.w  #$977F, (A5)
                move.w  #$5100, (A5)
                move.w  #$0080, ($FFFFF640).w
                move.w  ($FFFFF640).w, (A5)
                lea     Offset_0x03A364(PC), A1
                move.l  #$49500003, D0
                bra     Offset_0x03A328
Offset_0x03A2EC:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$941F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000083, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x03A30E:                
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   Offset_0x03A30E
                move.w  #$8F02, (A5)
                lea     Offset_0x03A374(PC), A1
                move.l  #$49A00003, D0
                bra     Offset_0x03A328
Offset_0x03A328:
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  #$01000000, D6
                moveq   #$07, D1
                moveq   #$09, D2
Offset_0x03A338:                
                move.l  D0, $0004(A6)
                move.w  D1, D3
                move.l  A1, A2
Offset_0x03A340:                
                move.w  (A2)+, D4
                bclr    #$0A, D4
                beq.s   Offset_0x03A34C
                bsr     Offset_0x03A35A
Offset_0x03A34C:
                move.w  D4, (A6)
                dbra    D3, Offset_0x03A340
                add.l   D6, D0
                dbra    D2, Offset_0x03A338
                rts
Offset_0x03A35A:
                moveq   #$28, D5
Offset_0x03A35C:                
                move.w  D4, (A6)
                dbra    D5, Offset_0x03A35C
                rts
Offset_0x03A364:
                dc.w    $A080, $A081, $A082, $A083, $A084, $A085, $A086, $A487    
Offset_0x03A374:  
                dc.w    $A487, $A086, $A085, $A084, $A083, $A082, $A081, $A080
;===============================================================================
; Sub Routina executada durante a VBlank
; [ Término ]
;===============================================================================   
Offset_0x03A384:
                dc.b    $12, $04, $04, $02, $02, $02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $04
                dc.b    $04, $06, $0A, $08, $06, $04, $04, $04, $04, $06, $06, $08, $08, $0A, $0A, $0C
                dc.b    $0E, $10, $16, $00     
;-------------------------------------------------------------------------------
Obj_0xB2_Tornado: ; Offset_0x03A3A8:  
                include 'data\objects\obj_0xB2.asm'   
;-------------------------------------------------------------------------------
Obj_0xB3_Clouds: ; Offset_0x03AF30:
                include 'data\objects\obj_0xB3.asm'
;-------------------------------------------------------------------------------    
Obj_0xB4_Vertical_Helix: ; Offset_0x03AFBE: 
                include 'data\objects\obj_0xB4.asm'
;-------------------------------------------------------------------------------
Obj_0xB5_Horizontal_Helix: ; Offset_0x03B054: 
                include 'data\objects\obj_0xB5.asm'    
;-------------------------------------------------------------------------------
Obj_0xB6_Platform_Helix: ; Offset_0x03B232:
                include 'data\objects\obj_0xB6.asm' 
;-------------------------------------------------------------------------------
Obj_0xB7_Vertical_Large_Laser: ; Offset_0x03B51E: 
                include 'data\objects\obj_0xB7.asm'  
;-------------------------------------------------------------------------------
Obj_0xB8_Cannon: ; Offset_0x03B5E2: 
                include 'data\objects\obj_0xB8.asm' 
;-------------------------------------------------------------------------------
Obj_0xB9_Laser: ; Offset_0x03B73E:                 
                include 'data\objects\obj_0xB9.asm'   
;-------------------------------------------------------------------------------
Obj_0xBA_Conveyor_Belt_Wheels: ; Offset_0x03B7D6:
                include 'data\objects\obj_0xBA.asm' 
;-------------------------------------------------------------------------------
Obj_0xBB: ; Offset_0x03B808: 
                include 'data\objects\obj_0xBB.asm'   
;-------------------------------------------------------------------------------  
Obj_0xBC_Rocket_Boost: ; Offset_0x03B84A:
                include 'data\objects\obj_0xBC.asm' 
;-------------------------------------------------------------------------------
Obj_0xBD_WFz_Elevators: ; Offset_0x03B8AC: 
                include 'data\objects\obj_0xBD.asm'
;------------------------------------------------------------------------------- 
Obj_0xBE_Hatchways: ; Offset_0x03BA18: 
                include 'data\objects\obj_0xBE.asm'
;-------------------------------------------------------------------------------
Obj_0xBF_Engine_Part: ; Offset_0x03BB58:    
                include 'data\objects\obj_0xBF.asm'    
;-------------------------------------------------------------------------------
Obj_0xC0_Speed_Booster: ; Offset_0x03BBB6:  
                include 'data\objects\obj_0xC0.asm'
;------------------------------------------------------------------------------- 
Obj_0xC1_WFz_Breakable_Wall: ; Offset_0x03BD66: 
                include 'data\objects\obj_0xC1.asm'
;-------------------------------------------------------------------------------
Obj_0xC2_WFz_Boss_Access_Switch: ; Offset_0x03BFEA: 
                include 'data\objects\obj_0xC2.asm'
;-------------------------------------------------------------------------------  
Obj_0xC3_WFz_Tornado_Smoke: 
Obj_0xC4_WFz_Tornado_Smoke: ; Offset_0x03C09E:  
                include 'data\objects\obj_0xC4.asm'  
;-------------------------------------------------------------------------------
Obj_0xC5_WFz_Boss: ; Offset_0x03C110: 
                include 'data\objects\obj_0xC5.asm'  
;-------------------------------------------------------------------------------
Obj_0xC6_Robotnik_Running: ; Offset_0x03CC22:
                include 'data\objects\obj_0xC6.asm'
;-------------------------------------------------------------------------------  
Obj_0xC8_Crawl: ; Offset_0x03CFB4: 
                include 'data\objects\obj_0xC8.asm'
;-------------------------------------------------------------------------------                
Obj_0xC7_DEz_Final_Boss: ; Offset_0x03D252:     
                include 'data\objects\obj_0xC7.asm'     
                
;===============================================================================
; Sub Rotina ObjectSettings - Usada para iniciar parâmetros dos objetos
; [ Término ]
;===============================================================================                          

Sub_Sega_Intro: ; Offset_0x03E69C:
                move.w  D1, D2
                andi.w  #$0001, D2
                addq.w  #$01, D2
                lsl.w   #$06, D2
                swap.w  D2
                move.w  D1, D3
                lsr.w   #$01, D3
                addq.w  #$01, D3
                lsl.w   #$06, D3
                swap.w  D3
                bsr     Offset_0x03E6C8
                btst    #$01, D0
                beq     Exit_Sub_01                            ; Offset_0x037512
                btst    #$01, D1
                bne.s   Offset_0x03E6C6
                move.l  A3, A5
Offset_0x03E6C6:
                move.l  A5, A2
Offset_0x03E6C8:
                move.l  A2, A4
                swap.w  D2
                lea     $00(A2, D2), A3
                swap.w  D2
                move.w  D1, D5
                andi.w  #$0001, D5
                bsr     Offset_0x03E742
                btst    #$01, D1
                beq.s   Offset_0x03E704
                swap.w  D2
                move.w  D2, D4
                swap.w  D2
                add.w   D4, D4
                move.w  D0, D3
                andi.w  #$0001, D3
                lsl.w   D3, D4
                adda.w  D4, A4
                move.w  D1, D5
                lsr.w   #$01, D5
                swap.w  D3
                lea     $00(A4, D3), A5
                swap.w  D3
                bsr     Offset_0x03E75A
Offset_0x03E704:
                btst    #$00, D0
                bne.s   Offset_0x03E710
                btst    #$01, D0
                beq.s   Offset_0x03E740
Offset_0x03E710:
                swap.w  D2
                lea     $00(A2, D2), A2
                lea     $00(A2, D2), A3
                swap.w  D2
                move.w  D1, D5
                andi.w  #$0001, D5
                bsr     Offset_0x03E742
                btst    #$01, D1
                beq.s   Offset_0x03E740
                move.w  D1, D5
                lsr.w   #$01, D5
                swap.w  D3
                lea     $00(A4, D3), A4
                lea     $00(A4, D3), A5
                swap.w  D3
                bsr     Offset_0x03E75A
Offset_0x03E740:
                rts
Offset_0x03E742:
                moveq   #$07, D6
Offset_0x03E744:
                bsr     Offset_0x03E772
                addq.w  #$04, A2
                bsr     Offset_0x03E79C
                addq.w  #$04, A3
                dbra    D6, Offset_0x03E744
                dbra    D5, Offset_0x03E742
                rts
Offset_0x03E75A:
                moveq   #$07, D6
Offset_0x03E75C:
                bsr     Offset_0x03E7C6
                addq.w  #$04, A4
                bsr     Offset_0x03E7F0
                addq.w  #$04, A5
                dbra    D6, Offset_0x03E75C
                dbra    D5, Offset_0x03E75A
                rts        
Offset_0x03E772:
                bsr     Offset_0x03E776
Offset_0x03E776:
                move.b  (A1)+, D2
                move.b  D2, D3
                andi.b  #$F0, D2
                move.b  D2, D4
                lsr.b   #$04, D4
                or.b    D2, D4
                move.b  D4, (A2)+
                move.b  D4, $0003(A2)
                andi.b  #$0F, D3
                move.b  D3, D4
                lsl.b   #$04, D4
                or.b    D3, D4
                move.b  D4, (A2)+
                move.b  D4, $0003(A2)
                rts
Offset_0x03E79C:
                bsr     Offset_0x03E7A0
Offset_0x03E7A0:
                move.b  (A1)+, D2
                move.b  D2, D3
                andi.b  #$F0, D2
                move.b  D2, D4
                lsr.b   #$04, D4
                or.b    D2, D4
                move.b  D4, (A3)+
                move.b  D4, $0003(A3)
                andi.b  #$0F, D3
                move.b  D3, D4
                lsl.b   #$04, D4
                or.b    D3, D4
                move.b  D4, (A3)+
                move.b  D4, $0003(A3)
                rts
Offset_0x03E7C6:
                bsr     Offset_0x03E7CA
Offset_0x03E7CA:
                move.b  (A1)+, D2
                move.b  D2, D3
                andi.b  #$F0, D2
                move.b  D2, D4
                lsr.b   #$04, D4
                or.b    D2, D4
                move.b  D4, (A4)+
                move.b  D4, $0003(A4)
                andi.b  #$0F, D3
                move.b  D3, D4
                lsl.b   #$04, D4
                or.b    D3, D4
                move.b  D4, (A4)+
                move.b  D4, $0003(A4)
                rts
Offset_0x03E7F0:
                bsr     Offset_0x03E7F4
Offset_0x03E7F4:
                move.b  (A1)+, D2
                move.b  D2, D3
                andi.b  #$F0, D2
                move.b  D2, D4
                lsr.b   #$04, D4
                or.b    D2, D4
                move.b  D4, (A5)+
                move.b  D4, $0003(A5)
                andi.b  #$0F, D3
                move.b  D3, D4
                lsl.b   #$04, D4
                or.b    D3, D4
                move.b  D4, (A5)+
                move.b  D4, $0003(A5)
                rts
;-------------------------------------------------------------------------------                 
Unk_1245678: ; Offset_0x03E81A:                                   
                dc.l    $12345678, $12345678, $12345678, $12345678
                dc.l    $12345678, $12345678, $12345678, $12345678  
;-------------------------------------------------------------------------------
Obj_0x8A_S1_Credits: ; Offset_0x03E83A:
                include 'data\objects\obj_0x8A.asm'     
;-------------------------------------------------------------------------------                
Obj_0x3E_Egg_Prison: ; Offset_0x03EF50:  
                include 'data\objects\obj_0x3E.asm'                        
;===============================================================================
; Sub Rotina TouchResponse - Rotina usada para responder quando o jogador tocar
; [ Início ]                 nos inimgos
;===============================================================================
TouchResponse: ; Offset_0x03F2BC:
                nop
                jsr     (TouchRings)                           ; Offset_0x017030
                cmpi.b  #$0C, (Level_Id).w                           ; $FFFFFE10
                bne.s   Touch_Response_Skip_CNz_Triangles      ; Offset_0x03F2D2
                jsr     (Touch_Response_Cnz_Triangles)         ; Offset_0x017438
Touch_Response_Skip_CNz_Triangles ; Offset_0x03F2D2:
                tst.b   ($FFFFF7AA).w
                bne     Offset_0x03F3D0
                move.w  $0008(A0), D2
                move.w  $000C(A0), D3
                subq.w  #$08, D2
                moveq   #$00, D5
                move.b  $0016(A0), D5
                subq.b  #$03, D5
                sub.w   D5, D3
                cmpi.b  #$4D, $001A(A0)
                bne.s   Offset_0x03F2FC
                addi.w  #$000C, D3
                moveq   #$0A, D5
Offset_0x03F2FC:
                move.w  #$0010, D4
                add.w   D5, D5
                lea     ($FFFFB400).w, A1
                move.w  #$006F, D6
Offset_0x03F30A:
                move.b  $0020(A1), D0
                bne     Touch_Height                           ; Offset_0x03F31E
Offset_0x03F312:
                lea     $0040(A1), A1
                dbra    D6, Offset_0x03F30A
                moveq   #$00, D0
                rts
Touch_Height: ; Offset_0x03F31E:
                andi.w  #$003F, D0
                add.w   D0, D0
                lea     Touch_Sizes(PC, D0), A2                ; Offset_0x03F36A
                moveq   #$00, D1
                move.b  (A2)+, D1
                move.w  $0008(A1), D0
                sub.w   D1, D0
                sub.w   D2, D0
                bcc.s   Offset_0x03F340
                add.w   D1, D1
                add.w   D1, D0
                bcs.s   Offset_0x03F346
                bra     Offset_0x03F312
Offset_0x03F340:
                cmp.w   D4, D0
                bhi     Offset_0x03F312
Offset_0x03F346:
                moveq   #$00, D1
                move.b  (A2)+, D1
                move.w  $000C(A1), D0
                sub.w   D1, D0
                sub.w   D3, D0
                bcc.s   Offset_0x03F360
                add.w   D1, D1
                add.w   D1, D0
                bcs     Offset_0x03F45A
                bra     Offset_0x03F312
Offset_0x03F360:
                cmp.w   D5, D0
                bhi     Offset_0x03F312
                bra     Offset_0x03F45A
;-------------------------------------------------------------------------------                
Touch_Sizes: ; Offset_0x03F36A: 
                dc.b    $04, $04, $14, $14, $0C, $14, $14, $0C, $04, $10, $0C, $12, $10, $10, $06, $06
                dc.b    $18, $0C, $0C, $10, $10, $08, $08, $08, $14, $10, $14, $08, $0E, $0E, $18, $18
                dc.b    $28, $10, $10, $18, $08, $10, $20, $70, $40, $20, $80, $20, $20, $20, $08, $08
                dc.b    $04, $04, $20, $08, $0C, $0C, $08, $04, $18, $04, $28, $04, $04, $08, $04, $18
                dc.b    $04, $28, $04, $10, $18, $18, $0C, $18, $48, $08, $18, $28, $10, $04, $20, $02
                dc.b    $04, $40, $18, $80, $20, $10, $10, $20, $10, $30, $10, $40, $10, $50, $10, $02
                dc.b    $10, $01, $02, $08, $20, $1C
;-------------------------------------------------------------------------------  
Offset_0x03F3D0:
                lea     Touch_Sizes(PC), A3                    ; Offset_0x03F36A
                move.w  $0008(A0), D2
                move.w  $000C(A0), D3
                subq.w  #$08, D2
                moveq   #$00, D5
                move.b  $0016(A0), D5
                subq.b  #$03, D5
                sub.w   D5, D3
                cmpi.b  #$4D, $001A(A0)
                bne.s   Offset_0x03F3F6
                addi.w  #$000C, D3
                moveq   #$0A, D5
Offset_0x03F3F6:
                move.w  #$0010, D4
                add.w   D5, D5
                lea     ($FFFFB400).w, A1
                move.w  #$006F, D6
Offset_0x03F404:
                move.b  $0020(A1), D0
                bne.s   Offset_0x03F416
Offset_0x03F40A:
                lea     $0040(A1), A1
                dbra    D6, Offset_0x03F404
                moveq   #$00, D0
                rts
Offset_0x03F416:
                bsr     Offset_0x03F798
                andi.w  #$003F, D0
                beq.s   Offset_0x03F40A
                add.w   D0, D0
                lea     $00(A3, D0), A2
                moveq   #$00, D1
                move.b  (A2)+, D1
                move.w  $0008(A1), D0
                sub.w   D1, D0
                sub.w   D2, D0
                bcc.s   Offset_0x03F43C
                add.w   D1, D1
                add.w   D1, D0
                bcs.s   Offset_0x03F440
                bra.s   Offset_0x03F40A
Offset_0x03F43C:
                cmp.w   D4, D0
                bhi.s   Offset_0x03F40A
Offset_0x03F440:
                moveq   #$00, D1
                move.b  (A2)+, D1
                move.w  $000C(A1), D0
                sub.w   D1, D0
                sub.w   D3, D0
                bcc.s   Offset_0x03F456
                add.w   D1, D1
                add.w   D1, D0
                bcs.s   Offset_0x03F45A
                bra.s   Offset_0x03F40A
Offset_0x03F456:
                cmp.w   D5, D0
                bhi.s   Offset_0x03F40A
Offset_0x03F45A:
                move.b  $0020(A1), D1
                andi.b  #$C0, D1
                beq     Offset_0x03F4F4
                cmpi.b  #$C0, D1
                beq     Touch_Special                          ; Offset_0x03F6E2
                tst.b   D1
                bmi     Offset_0x03F5CA
                move.b  $0020(A1), D0
                andi.b  #$3F, D0
                cmpi.b  #$06, D0
                beq.s   Offset_0x03F4A4
                move.w  ($FFFFB030).w, D0
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x03F490
                move.w  $0030(A0), D0
Offset_0x03F490:
                cmpi.w  #$005A, D0
                bcc     Offset_0x03F4A2
                move.b  #$04, $0024(A1)
                move.w  A0, $003E(A1)
Offset_0x03F4A2:
                rts
Offset_0x03F4A4:
                tst.w   $0012(A0)
                bpl.s   Offset_0x03F4D0
                move.w  $000C(A0), D0
                subi.w  #$0010, D0
                cmp.w   $000C(A1), D0
                bcs.s   Offset_0x03F4F2
                neg.w   $0012(A0)
                move.w  #$FE80, $0012(A1)
                tst.b   $0025(A1)
                bne.s   Offset_0x03F4F2
                move.b  #$04, $0025(A1)
                rts
Offset_0x03F4D0:
                cmpa.w  #$B000, A0
                beq.s   Offset_0x03F4DC
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x03F4F2
Offset_0x03F4DC:
                cmpi.b  #$02, $001C(A0)
                bne.s   Offset_0x03F4F2
                neg.w   $0012(A0)
                move.b  #$04, $0024(A1)
                move.w  A0, $003E(A1)
Offset_0x03F4F2:
                rts
Offset_0x03F4F4:
                btst    #$01, $002B(A0)
                bne.s   Offset_0x03F50E
                cmpi.b  #$09, $001C(A0)
                beq.s   Offset_0x03F50E
                cmpi.b  #$02, $001C(A0)
                bne     Offset_0x03F5CA
Offset_0x03F50E:
                btst    #$06, $0001(A1)
                beq.s   Offset_0x03F530
                tst.b   $0032(A1)
                beq.s   Offset_0x03F52E
                neg.w   $0010(A0)
                neg.w   $0012(A0)
                move.b  #$00, $0020(A1)
                subq.b  #$01, $0032(A1)
Offset_0x03F52E:
                rts
Offset_0x03F530:
                tst.b   $0021(A1)
                beq.s   Touch_KillEnemy                        ; Offset_0x03F552
                neg.w   $0010(A0)
                neg.w   $0012(A0)
                move.b  #$00, $0020(A1)
                subq.b  #$01, $0021(A1)
                bne.s   Offset_0x03F550
                bset    #$07, $0022(A1)
Offset_0x03F550:
                rts
;===============================================================================
Touch_KillEnemy: ; Offset_0x03F552:
                bset    #$07, $0022(A1)
                moveq   #$00, D0
                move.w  ($FFFFF7D0).w, D0
                addq.w  #$02, ($FFFFF7D0).w
                cmpi.w  #$0006, D0
                bcs.s   Offset_0x03F56A
                moveq   #$06, D0
Offset_0x03F56A:
                move.w  D0, $003E(A1)
                move.w  Enemy_Points(PC, D0), D0               ; Offset_0x03F5BC
                cmpi.w  #$0020, ($FFFFF7D0).w
                bcs.s   Offset_0x03F584
                move.w  #$03E8, D0
                move.w  #$000A, $003E(A1)
Offset_0x03F584:
                move.w  A0, A3
                bsr     Add_Points                             ; Offset_0x040A98
                move.b  #$27, $0000(A1) ; Chama o objeto $27 - resposta ao toque nos inimigos
                move.b  #$00, $0024(A1)
                tst.w   $0012(A0)
                bmi.s   Offset_0x03F5AC
                move.w  $000C(A0), D0
                cmp.w   $000C(A1), D0
                bcc.s   Offset_0x03F5B4
                neg.w   $0012(A0)
                rts
Offset_0x03F5AC:
                addi.w  #$0100, $0012(A0)
                rts
Offset_0x03F5B4:
                subi.w  #$0100, $0012(A0)
                rts       
;-------------------------------------------------------------------------------                
Enemy_Points: ; Offset_0x03F5BC:   
                dc.w    $000A      ;  100 
                dc.w    $0014      ;  200
                dc.w    $0032      ;  500
                dc.w    $0064      ; 1000
;-------------------------------------------------------------------------------  
Offset_0x03F5C4:                
                bset    #$07, $0022(A1)
Offset_0x03F5CA:
                btst    #$01, $002B(A0)
                beq.s   Touch_Hurt                             ; Offset_0x03F5D6
Offset_0x03F5D2:                
                moveq   #$FFFFFFFF, D0
                rts
;===============================================================================
; Sub Rotina TouchResponse - Rotina usada para responder quando o jogador tocar
; [ Término ]                nos inimgos
;===============================================================================
                                                 
;===============================================================================  
Touch_Hurt: ; Offset_0x03F5D6:
                nop
                tst.w   $0030(A0)
                bne.s   Offset_0x03F5D2
                move.l  A1, A2
;=============================================================================== 
; Sub Routina para causar danos ao Sonic / Miles
; [ Início ]                         
;===============================================================================                   
Hurt_Player: ; Offset_0x03F5E0:
                move.w  ($FFFFFE20).w, D0
                cmpa.w  #$B000, A0
                beq.s   Hurt_Player_D0                         ; Offset_0x03F5F4
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x03F626
                move.w  ($FFFFFED0).w, D0
Hurt_Player_D0: ; Offset_0x03F5F4:
                btst    #$00, $002B(A0)
                bne.s   HurtShield                             ; Offset_0x03F620
                tst.w   D0
                beq     Kill_Player                            ; Offset_0x03F690
                jsr     (SingleObjectLoad)                     ; Offset_0x017F48
                bne.s   HurtShield                             ; Offset_0x03F620
                move.b  #$37, $0000(A1) ; Carrega o Objeto 0x37 - Anéis sendo perdidos pós ser atingido por inimigo
                move.w  $0008(A0), $0008(A1)
                move.w  $000C(A0), $000C(A1)
                move.w  A0, $003E(A1)
HurtShield: ; Offset_0x03F620:
                bclr    #$00, $002B(A0)
Offset_0x03F626:
                move.b  #$04, $0024(A0)
                jsr     (Sonic_ResetOnFloor)                   ; Offset_0x01B01E
                bset    #$01, $0022(A0)
                move.w  #$FC00, $0012(A0)
                move.w  #$FE00, $0010(A0)
                btst    #$06, $0022(A0)
                beq.s   Offset_0x03F658
                move.w  #$FE00, $0012(A0)
                move.w  #$FF00, $0010(A0)
Offset_0x03F658:
                move.w  $0008(A0), D0
                cmp.w   $0008(A2), D0
                bcs.s   Offset_0x03F666
                neg.w   $0010(A0)
Offset_0x03F666:
                move.w  #$0000, $0014(A0)
                move.b  #$1A, $001C(A0)
                move.w  #$0078, $0030(A0)
                move.w  #Enemy_Touch_Sfx, D0    ; $00A3
                cmpi.b  #$36, (A2)
                bne.s   Offset_0x03F686
                move.w  #Spike_Touch_Sfx, D0    ; $00A6
Offset_0x03F686:
                jsr     (Play_Sfx)                             ; Offset_0x00132C
                moveq   #$FFFFFFFF, D0
                rts           
;=============================================================================== 
; Sub Rotina para causar danos ao Sonic / Miles
; [ Término ]                         
;=============================================================================== 
                                            
;===============================================================================
; Sub Rotina Kill_Player - Rotina para matar o jogador    
; [ Início ]
;===============================================================================     
Kill_Player: ; Offset_0x03F690:
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne.s   Kill_NoDeath                           ; Offset_0x03F6DE
                clr.b   $002B(A0)
                move.b  #$06, $0024(A0)
                jsr     (Sonic_ResetOnFloor)                   ; Offset_0x01B01E
                bset    #$01, $0022(A0)
                move.w  #$F900, $0012(A0)
                move.w  #$0000, $0010(A0)
                move.w  #$0000, $0014(A0)
                move.b  #$18, $001C(A0)
                bset    #$07, $0002(A0)
                move.w  #Enemy_Touch_Sfx, D0    ; $00A3
                cmpi.b  #$36, (A2)
                bne.s   Offset_0x03F6D8
                move.w  #Spike_Touch_Sfx, D0    ; $00A6
Offset_0x03F6D8:
                jsr     (Play_Sfx)                             ; Offset_0x00132C
Kill_NoDeath: ; Offset_0x03F6DE:
                moveq   #$FFFFFFFF, D0
                rts     
;===============================================================================
; Sub Rotina Kill_Player - Rotina para matar o jogador    
; [ Término ]
;===============================================================================  

;===============================================================================
; Sub Rotina Touch_Special  
; [ Início ]
;===============================================================================    
Touch_Special: ; Offset_0x03F6E2: 
                move.b  $0020(A1), D1
                andi.b  #$3F, D1
                cmpi.b  #$06, D1
                beq.s   Offset_0x03F76C
                cmpi.b  #$07, D1
                beq     Offset_0x03F784
                cmpi.b  #$0B, D1
                beq.s   Offset_0x03F736
                cmpi.b  #$0A, D1
                beq.s   Offset_0x03F76C
                cmpi.b  #$0C, D1
                beq.s   Offset_0x03F73A
                cmpi.b  #$14, D1
                beq.s   Offset_0x03F76C
                cmpi.b  #$15, D1
                beq.s   Offset_0x03F76C
                cmpi.b  #$16, D1
                beq.s   Offset_0x03F76C
                cmpi.b  #$17, D1
                beq.s   Offset_0x03F76C
                cmpi.b  #$18, D1
                beq.s   Offset_0x03F76C
                cmpi.b  #$1A, D1
                beq.s   Offset_0x03F78E
                cmpi.b  #$21, D1
                beq.s   Offset_0x03F77E
                rts
Offset_0x03F736:
                bra     Offset_0x03F5C4
Offset_0x03F73A:
                sub.w   D0, D5
                cmpi.w  #$0008, D5
                bcc.s   Offset_0x03F768
                move.w  $0008(A1), D0
                subq.w  #$04, D0
                btst    #$00, $0022(A1)
                beq.s   Offset_0x03F754
                subi.w  #$0010, D0
Offset_0x03F754:
                sub.w   D2, D0
                bcc.s   Offset_0x03F760
                addi.w  #$0018, D0
                bcs.s   Offset_0x03F764
                bra.s   Offset_0x03F768
Offset_0x03F760:
                cmp.w   D4, D0
                bhi.s   Offset_0x03F768
Offset_0x03F764:
                bra     Offset_0x03F5CA
Offset_0x03F768:
                bra     Offset_0x03F4F4
Offset_0x03F76C:
                move.w  A0, D1
                subi.w  #$B000, D1
                beq.s   Offset_0x03F778
                addq.b  #$01, $0021(A1)
Offset_0x03F778:
                addq.b  #$01, $0021(A1)
                rts
Offset_0x03F77E:
                addq.b  #$01, $0021(A1)
                rts
Offset_0x03F784:
                move.b  #$02, $0021(A1)
                bra     Offset_0x03F4F4
Offset_0x03F78E:
                move.b  #$FF, $0021(A1)
                bra     Offset_0x03F4F4
Offset_0x03F798:                
                cmpi.b  #$0F, D0
                bne.s   Offset_0x03F7B2
                moveq   #$00, D0
                move.b  ($FFFFF7AA).w, D0
                beq.s   Offset_0x03F7B2
                subq.w  #$01, D0
                add.w   D0, D0
                move.w  Offset_0x03F7B4(PC, D0), D0
                jmp     Offset_0x03F7B4(PC, D0)
Offset_0x03F7B2:
                rts
Offset_0x03F7B4:
                dc.w    Offset_0x03F7C6-Offset_0x03F7B4
                dc.w    Offset_0x03F7C6-Offset_0x03F7B4
                dc.w    Offset_0x03F7CC-Offset_0x03F7B4
                dc.w    Offset_0x03F834-Offset_0x03F7B4
                dc.w    Offset_0x03F868-Offset_0x03F7B4
                dc.w    Offset_0x03F8F0-Offset_0x03F7B4
                dc.w    Offset_0x03F926-Offset_0x03F7B4
                dc.w    Offset_0x03F92C-Offset_0x03F7B4
                dc.w    Offset_0x03F7CA-Offset_0x03F7B4
Offset_0x03F7C6:
                move.b  $0020(A1), D0
Offset_0x03F7CA:
                rts
Offset_0x03F7CC:
                tst.b   ($FFFFF73F).w
                bne.s   Offset_0x03F7D4
                rts
Offset_0x03F7D4:
                move.w  D7, -(A7)
                moveq   #$00, D1
                move.b  $0015(A1), D1
                subq.b  #$02, D1
                cmpi.b  #$07, D1
                bgt.s   Offset_0x03F814
                move.w  D1, D7
                add.w   D7, D7
                move.w  $0008(A1), D0
                btst    #$00, $0001(A1)
                beq.s   Offset_0x03F7FA
                add.w   Offset_0x03F81C(PC, D7), D0
                bra.s   Offset_0x03F7FE
Offset_0x03F7FA:
                sub.w   Offset_0x03F81C(PC, D7), D0
Offset_0x03F7FE:
                move.b  Offset_0x03F82C(PC, D1), D1
                ori.l   #$00040000, D1
                move.w  $000C(A1), D7
                subi.w  #$001C, D7
                bsr     Offset_0x03F9AE
Offset_0x03F814:
                move.w  (A7)+, D7
                move.b  $0020(A1), D0
                rts       
;-------------------------------------------------------------------------------                
Offset_0x03F81C:
                dc.b    $00, $1C, $00, $20, $00, $28, $00, $34, $00, $3C, $00, $44, $00, $60, $00, $70
;-------------------------------------------------------------------------------                 
Offset_0x03F82C:                
                dc.b    $04, $04, $08, $0C, $14, $1C, $24, $08 
;------------------------------------------------------------------------------- 
Offset_0x03F834:
                move.w  D7, -(A7)
                move.w  $0008(A1), D0
                move.w  $000C(A1), D7
                tst.b   ($FFFFF73F).w
                beq.s   Offset_0x03F860
                addq.w  #$04, D7
                subi.w  #$0050, D0
                btst    #$00, $0001(A1)
                beq.s   Offset_0x03F856
                addi.w  #$00A0, D0
Offset_0x03F856:
                move.l  #$00140010, D1
                bsr     Offset_0x03F9AE
Offset_0x03F860:
                move.w  (A7)+, D7
                move.b  $0020(A1), D0
                rts
Offset_0x03F868:
                sf      $0038(A1)
                cmpi.b  #$01, ($FFFFF73F).w
                blt.s   Offset_0x03F8AE
                move.w  D7, -(A7)
                move.w  $0008(A1), D0
                move.w  $000C(A1), D7
                addq.w  #$04, D7
                subi.w  #$0030, D0
                btst    #$00, $0001(A1)
                beq.s   Offset_0x03F890
                addi.w  #$0060, D0
Offset_0x03F890:
                move.l  #$00040004, D1
                bsr     Offset_0x03F9AE
                move.w  (A7)+, D7
                move.b  $0020(A1), D0
                cmpi.w  #$0078, $0030(A0)
                bne.s   Offset_0x03F8AC
                st      $0038(A1)
Offset_0x03F8AC:
                rts
Offset_0x03F8AE:
                move.w  D7, -(A7)
                move.w  #$0014, A5
                move.w  #$0000, A4
Offset_0x03F8B8:
                move.w  $0008(A1), D0
                move.w  $000C(A1), D7
                subi.w  #$0020, D7
                add.w   A5, D0
                move.l  #$00100004, D1
                bsr     Offset_0x03F9AE
                move.w  #$FFEC, A5
                addq.w  #$01, A4
                cmpa.w  #$0001, A4
                beq.s   Offset_0x03F8B8
                move.w  (A7)+, D7
                move.b  $0020(A1), D0
                cmpi.w  #$0078, $0030(A0)
                bne.s   Offset_0x03F8EE
                st      $0038(A1)
Offset_0x03F8EE:
                rts
Offset_0x03F8F0:
                tst.b   ($FFFFF73F).w
                beq.s   Offset_0x03F920
                move.w  D7, -(A7)
                move.w  $0008(A1), D0
                move.w  $000C(A1), D7
                addi.w  #$0028, D7
                move.l  #$00080010, D1
                cmpi.b  #$01, ($FFFFF73F).w
                beq.s   Offset_0x03F91A
                move.w  #$0020, D1
                subq.w  #$08, D7
                addq.w  #$04, D0
Offset_0x03F91A:
                bsr     Offset_0x03F9AE
                move.w  (A7)+, D7
Offset_0x03F920:
                move.b  $0020(A1), D0
                rts
Offset_0x03F926:
                move.b  $0020(A1), D0
                rts
Offset_0x03F92C:
                cmpi.b  #$01, ($FFFFF73F).w
                blt.s   Offset_0x03F9A8
                beq.s   Offset_0x03F97E
                move.w  D7, -(A7)
                move.w  $0008(A1), D0
                move.w  $000C(A1), D7
                moveq   #$00, D1
                move.b  $000B(A1), D1
                subq.b  #$02, D1
                add.w   D1, D1
                btst    #$00, $0001(A1)
                beq.s   Offset_0x03F958
                add.w   Offset_0x03F972(PC, D1), D0
                bra.s   Offset_0x03F95C
Offset_0x03F958:
                sub.w   Offset_0x03F972(PC, D1), D0
Offset_0x03F95C:
                sub.w   Offset_0x03F972+$02(PC, D1), D7
                move.l  #$00060008, D1
                bsr     Offset_0x03F9AE
                move.w  (A7)+, D7
                move.w  #$0000, D0  
                rts
;-------------------------------------------------------------------------------                                         
Offset_0x03F972:
                dc.b    $00, $14, $00, $00, $00, $10, $00, $10, $00, $10, $FF, $F0    
;-------------------------------------------------------------------------------
Offset_0x03F97E:
                move.w  D7, -(A7)
                move.w  $0008(A1), D0
                move.w  $000C(A1), D7
                moveq   #$10, D1
                btst    #$00, $0001(A1)
                beq.s   Offset_0x03F994
                neg.w   D1
Offset_0x03F994:
                sub.w   D1, D0
                move.l  #$0008000C, D1
                bsr     Offset_0x03F9DC
                move.w  (A7)+, D7
                move.b  #$00, D0
                rts
Offset_0x03F9A8:
                move.b  $0020(A1), D0
                rts
Offset_0x03F9AE:
                sub.w   D1, D0
                sub.w   D2, D0
                bcc.s   Offset_0x03F9BC
                add.w   D1, D1
                add.w   D1, D0
                bcs.s   Offset_0x03F9C0
Offset_0x03F9BA:
                rts
Offset_0x03F9BC:
                cmp.w   D4, D0
                bhi.s   Offset_0x03F9BA
Offset_0x03F9C0:
                swap.w  D1
                sub.w   D1, D7
                sub.w   D3, D7
                bcc.s   Offset_0x03F9D2
                add.w   D1, D1
                add.w   D1, D7
                bcs     Offset_0x03F5CA
                bra.s   Offset_0x03F9BA
Offset_0x03F9D2:
                cmp.w   D5, D7
                bhi     Offset_0x03F9BA
                bra     Offset_0x03F5CA
Offset_0x03F9DC:
                sub.w   D1, D0
                sub.w   D2, D0
                bcc.s   Offset_0x03F9EA
                add.w   D1, D1
                add.w   D1, D0
                bcs.s   Offset_0x03F9EE
Offset_0x03F9E8:
                rts
Offset_0x03F9EA:
                cmp.w   D4, D0
                bhi.s   Offset_0x03F9E8
Offset_0x03F9EE:
                swap.w  D1
                sub.w   D1, D7
                sub.w   D3, D7
                bcc.s   Offset_0x03FA00
                add.w   D1, D1
                add.w   D1, D7
                bcs     Offset_0x03FA06
                bra.s   Offset_0x03F9E8
Offset_0x03FA00:
                cmp.w   D5, D7
                bhi     Offset_0x03F9E8
Offset_0x03FA06:
                neg.w   $0010(A0)
                neg.w   $0012(A0)
                rts                           
;===============================================================================
; Sub Rotina Touch_Special  
; [ Término ]
;===============================================================================    

;===============================================================================
; Sub Rotina para carregar os sprites dinamicamente para a VRAM
; [ Início ]       Ex: Flores na Emerald Hill, Óleo na Oil Ocean, etc ....
;===============================================================================   
Dynamic_Art_Cues: ; Offset_0x03FA10 
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                add.w   D0, D0
                add.w   D0, D0
                move.w  Dynamic_Art_Idx+$02(PC, D0), D1        ; Offset_0x03FA2E
                lea     Dynamic_Art_Idx(PC, D1), A2            ; Offset_0x03FA2C
                move.w  Dynamic_Art_Idx(PC, D0), D0            ; Offset_0x03FA2C
                jmp     Dynamic_Art_Idx(PC, D0)                ; Offset_0x03FA2C
                rts
;-------------------------------------------------------------------------------
Dynamic_Art_Idx: ; Offset_0x03FA2C:
                dc.w    Dynamic_Normal-Dynamic_Art_Idx         ; Offset_0x03FC78  
                dc.w    EHz_Animate-Dynamic_Art_Idx            ; Offset_0x03FCE0
                dc.w    Dynamic_Null-Dynamic_Art_Idx           ; Offset_0x03FA70
                dc.w    Null_Animate-Dynamic_Art_Idx           ; Offset_0x03FF4C
                dc.w    Dynamic_Null-Dynamic_Art_Idx           ; Offset_0x03FA70
                dc.w    Null_Animate-Dynamic_Art_Idx           ; Offset_0x03FF4C
                dc.w    Dynamic_Null-Dynamic_Art_Idx           ; Offset_0x03FA70
                dc.w    Null_Animate-Dynamic_Art_Idx           ; Offset_0x03FF4C
                dc.w    Dynamic_Normal-Dynamic_Art_Idx         ; Offset_0x03FC78
                dc.w    Mz_Animate-Dynamic_Art_Idx             ; Offset_0x03FD44
                dc.w    Dynamic_Normal-Dynamic_Art_Idx         ; Offset_0x03FC78                                               
                dc.w    Mz_Animate-Dynamic_Art_Idx             ; Offset_0x03FD44
                dc.w    Dynamic_Null-Dynamic_Art_Idx           ; Offset_0x03FA70
                dc.w    Null_Animate-Dynamic_Art_Idx           ; Offset_0x03FF4C
                dc.w    Dynamic_HTz-Dynamic_Art_Idx            ; Offset_0x03FA72
                dc.w    HTz_Animate-Dynamic_Art_Idx            ; Offset_0x03FD84
                dc.w    Dynamic_Normal-Dynamic_Art_Idx         ; Offset_0x03FC78
                dc.w    HPz_Animate-Dynamic_Art_Idx            ; Offset_0x03FDE8
                dc.w    Dynamic_Null-Dynamic_Art_Idx           ; Offset_0x03FA70
                dc.w    Null_Animate-Dynamic_Art_Idx           ; Offset_0x03FF4C                
                dc.w    Dynamic_Normal-Dynamic_Art_Idx         ; Offset_0x03FC78
                dc.w    OOz_Animate-Dynamic_Art_Idx            ; Offset_0x03FE14
                dc.w    Dynamic_Null-Dynamic_Art_Idx           ; Offset_0x03FA70
                dc.w    Null_Animate-Dynamic_Art_Idx           ; Offset_0x03FF4C
                dc.w    Dynamic_CNz-Dynamic_Art_Idx            ; Offset_0x03FC54
                dc.w    CNz_Animate-Dynamic_Art_Idx            ; Offset_0x03FE5A
                dc.w    Dynamic_Normal-Dynamic_Art_Idx         ; Offset_0x03FC78
                dc.w    CPz_Animate-Dynamic_Art_Idx            ; Offset_0x03FEFE
                dc.w    Dynamic_Normal-Dynamic_Art_Idx         ; Offset_0x03FC78
                dc.w    DEz_Animate-Dynamic_Art_Idx            ; Offset_0x03FF10
                dc.w    Dynamic_ARz-Dynamic_Art_Idx            ; Offset_0x03FC70
                dc.w    ARz_Animate-Dynamic_Art_Idx            ; Offset_0x03FF22
                dc.w    Dynamic_Null-Dynamic_Art_Idx           ; Offset_0x03FA70
                dc.w    Null_Animate-Dynamic_Art_Idx           ; Offset_0x03FF4C
;-------------------------------------------------------------------------------   
Dynamic_Null: ; Offset_0x03FA70: 
                rts
;-------------------------------------------------------------------------------
Dynamic_HTz: ; Offset_0x03FA72:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne     Dynamic_Normal                         ; Offset_0x03FC78
                lea     ($FFFFF7F0).w, A3
                moveq   #$00, D0
                move.w  ($FFFFEE00).w, D1
                neg.w   D1
                asr.w   #$03, D1
                move.w  ($FFFFEE00).w, D0
                lsr.w   #$04, D0
                add.w   D1, D0
                subi.w  #$0010, D0
                divu.w  #$0030, D0
                swap.w  D0
                cmp.b   $0001(A3), D0
                beq.s   Offset_0x03FAE4
                move.b  D0, $0001(A3)
                move.w  D0, D2
                andi.w  #$0007, D0
                add.w   D0, D0
                add.w   D0, D0
                add.w   D0, D0
                move.w  D0, D1
                add.w   D0, D0
                add.w   D1, D0
                andi.w  #$0038, D2
                lsr.w   #$02, D2
                add.w   D2, D0
                lea     HTz_Ram_Dyn_Sprites(PC, D0), A4        ; Offset_0x03FAE8
                moveq   #$05, D5
                move.w  #$A000, D4
Offset_0x03FAC8:
                moveq   #$FFFFFFFF, D1
                move.w  (A4)+, D1
                andi.l  #$00FFFFFF, D1
                move.w  D4, D2
                moveq   #$40, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x00140A
                addi.w  #$0080, D4
                dbra    D5, Offset_0x03FAC8
Offset_0x03FAE4:
                bra     Dynamic_HTz_ROM                        ; Offset_0x03FBA8
;-------------------------------------------------------------------------------
; Array dos endereços da RAM para serem usados pelos sprites animados da 
; Hill Top, Os sprites são descomprimidos para RAM e carregados dinamicamente
; a partir da RAM. Note que nestes endereços estão os Chunks (128x128) da Hill
; Top, esses chunks não são usados para o layout. Deve se tomar cuidado ao 
; editar a Hill Top a partir de editores de fases, pois os editores não 
; reconhecem que os chunks não podem ser usado e se você usá-los ao carregar
; a fase durante o jogo notará que os chunks estão diferentes do que se viu
; no editor de fases.
;-------------------------------------------------------------------------------                
HTz_Ram_Dyn_Sprites: ; Offset_0x03FAE8:       
                dc.w    $0080, $0180, $0280, $0580, $0600, $0700, $0080, $0180
                dc.w    $0280, $0580, $0600, $0700, $0980, $0A80, $0B80, $0C80
                dc.w    $0D00, $0D80, $0980, $0A80, $0B80, $0C80, $0D00, $0D80
                dc.w    $0E80, $1180, $1200, $1280, $1300, $1380, $0E80, $1180
                dc.w    $1200, $1280, $1300, $1380, $1400, $1480, $1500, $1580
                dc.w    $1600, $1900, $1400, $1480, $1500, $1580, $1600, $1900
                dc.w    $1D00, $1D80, $1E00, $1F80, $2400, $2580, $1D00, $1D80
                dc.w    $1E00, $1F80, $2400, $2580, $2600, $2680, $2780, $2B00
                dc.w    $2F00, $3280, $2600, $2680, $2780, $2B00, $2F00, $3280
                dc.w    $3600, $3680, $3780, $3C80, $3D00, $3F00, $3600, $3680
                dc.w    $3780, $3C80, $3D00, $3F00, $3F80, $4080, $4480, $4580
                dc.w    $4880, $4900, $3F80, $4080, $4480, $4580, $4880, $4900          
;-------------------------------------------------------------------------------
Dynamic_HTz_ROM: ; Offset_0x03FBA8:
                lea     ($FFFFA800).w, A1
                move.w  ($FFFFEE00).w, D2
                neg.w   D2
                asr.w   #$03, D2
                move.l  A2, -(A7)
                lea     (Hill_Top_Background_Unc), A0          ; Offset_0x04A33E
                lea     ($FFFF7C00), A2
                moveq   #$0F, D1
Offset_0x03FBC4:
                move.w  (A1)+, D0
                neg.w   D0
                add.w   D2, D0
                andi.w  #$001F, D0
                lsr.w   #$01, D0
                bcc.s   Offset_0x03FBD6
                addi.w  #$0200, D0
Offset_0x03FBD6:
                lea     $00(A0, D0), A4
                lsr.w   #$01, D0
                bcs.s   Offset_0x03FC00
                move.l  (A4)+, (A2)+
                adda.w  #$003C, A2
                move.l  (A4)+, (A2)+
                adda.w  #$003C, A2
                move.l  (A4)+, (A2)+
                adda.w  #$003C, A2
                move.l  (A4)+, (A2)+
                suba.w  #$00C0, A2
                adda.w  #$0020, A0
                dbra    D1, Offset_0x03FBC4
                bra.s   Offset_0x03FC38
Offset_0x03FC00:
                move.b  (A4)+, (A2)+
                move.b  (A4)+, (A2)+
                move.b  (A4)+, (A2)+
                move.b  (A4)+, (A2)+
                adda.w  #$003C, A2
                move.b  (A4)+, (A2)+
                move.b  (A4)+, (A2)+
                move.b  (A4)+, (A2)+
                move.b  (A4)+, (A2)+
                adda.w  #$003C, A2
                move.b  (A4)+, (A2)+
                move.b  (A4)+, (A2)+
                move.b  (A4)+, (A2)+
                move.b  (A4)+, (A2)+
                adda.w  #$003C, A2
                move.b  (A4)+, (A2)+
                move.b  (A4)+, (A2)+
                move.b  (A4)+, (A2)+
                move.b  (A4)+, (A2)+
                suba.w  #$00C0, A2
                adda.w  #$0020, A0
                dbra    D1, Offset_0x03FBC4
Offset_0x03FC38:
                move.l  #$00FF7C00, D1
                move.w  #$A300, D2
                move.w  #$0080, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x00140A
                move.l  (A7)+, A2
                addq.w  #$02, A3
                bra     Dynamic_Normal_A3                      ; Offset_0x03FC7C
;-------------------------------------------------------------------------------                
Dynamic_CNz: ; Offset_0x03FC54: 
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA
                beq.s   Offset_0x03FC5C
                rts
Offset_0x03FC5C:
                lea     (CNz_Animate), A2                      ; Offset_0x03FE5A
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Dynamic_Normal                         ; Offset_0x03FC78
                lea     (CNz_Animate_2P), A2                   ; Offset_0x03FEAC
                bra.s   Dynamic_Normal                         ; Offset_0x03FC78       
;-------------------------------------------------------------------------------
Dynamic_ARz: ; Offset_0x03FC70: 
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA
                beq.s   Dynamic_Normal                         ; Offset_0x03FC78
                rts
;-------------------------------------------------------------------------------
Dynamic_Normal: ; Offset_0x03FC78:
                lea     ($FFFFF7F0).w, A3
Dynamic_Normal_A3: ; Offset_0x03FC7C:
                move.w  (A2)+, D6
Dynamic_Normal_Loop: ; Offset_0x03FC7E:
                subq.b  #$01, (A3)
                bcc.s   Offset_0x03FCC4
                moveq   #$00, D0
                move.b  $0001(A3), D0
                cmp.b   $0006(A2), D0
                bcs.s   Offset_0x03FC94
                moveq   #$00, D0
                move.b  D0, $0001(A3)
Offset_0x03FC94:
                addq.b  #$01, $0001(A3)
                move.b  (A2), (A3)
                bpl.s   Offset_0x03FCA2
                add.w   D0, D0
                move.b  $09(A2, D0), (A3)
Offset_0x03FCA2:
                move.b  $08(A2, D0), D0
                lsl.w   #$05, D0
                move.w  $0004(A2), D2
                move.l  (A2), D1
                andi.l  #$00FFFFFF, D1
                add.l   D0, D1
                moveq   #$00, D3
                move.b  $0007(A2), D3
                lsl.w   #$04, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x00140A
Offset_0x03FCC4:
                move.b  $0006(A2), D0
                tst.b   (A2)
                bpl.s   Offset_0x03FCCE
                add.b   D0, D0
Offset_0x03FCCE:
                addq.b  #$01, D0
                andi.w  #$00FE, D0
                lea     $08(A2, D0), A2
                addq.w  #$02, A3
                dbra    D6, Dynamic_Normal_Loop                ; Offset_0x03FC7E
                rts
;===============================================================================
; Script de animação das sprites para a Emerald Hill
; [ Início ]
;===============================================================================                    
EHz_Animate: ; Offset_0x03FCE0:   
                dc.w    $0004                   ; Total de Animações
                dc.l    ($FF<<$18)|EHz_Flower_1 ; Offset_0x049714
                dc.w    $7280                   ; VRAM 
                dc.w    $0602                   ; Quadros / Tiles
                dc.w    $007F, $0213, $0007, $0207, $0007, $0207 ; Carregar quadro / Tempo do quadro
                dc.l    ($FF<<$18)|EHz_Flower_2 ; Offset_0x049794                  
                dc.w    $72C0                   ; VRAM
                dc.w    $0802                   ; Quadros / Tiles
                dc.w    $027F, $000B, $020B, $000B, $0205, $0005, $0205, $0005 ; Carregar quadro / Tempo do quadro
                dc.l    ($07<<$18)|EHz_Flower_3 ; Offset_0x049814 
                dc.w    $7300                   ; VRAM
                dc.w    $0202                   ; Quadros / Tiles
                dc.w    $0002                   ; Carregar quadro / Tempo do quadro
                dc.l    ($FF<<$18)|EHz_Flower_4 ; Offset_0x049894   
                dc.w    $7340                   ; VRAM
                dc.w    $0802                   ; Quadros / Tiles
                dc.w    $007F, $0207, $0007, $0207, $0007, $020B, $000B, $020B ; Carregar quadro / Tempo do quadro
                dc.l    ($FF<<$18)|EHz_Dyn_Wall ; Offset_0x049914 
                dc.w    $7380                   ; VRAM
                dc.w    $0602                   ; Quadros / Tiles
                dc.w    $0017, $0209, $040B, $0617, $040B, $0209 ; Carregar quadro / Tempo do quadro  
;===============================================================================
; Script de animação das sprites para a Emerald Hill
; [ Término ]
;===============================================================================  

;===============================================================================
; Script de animação das sprites para a Metropolis
; [ Início ]
;===============================================================================                    
Mz_Animate: ; Offset_0x03FD44:
                dc.w    $0003                   ; Total de Animações
                dc.l    Mz_Spinnig_Cylinder     ; Offset_0x04A73E               
                dc.w    $6980                   ; VRAM 
                dc.w    $0810                   ; Quadros / Tiles
                dc.w    $0010, $2030, $4050, $6070 ; Carregar quadro / Tempo do quadro
                dc.l    ($0D<<$18)|Mz_Lava      ; Offset_0x04B73E
                dc.w    $6800                   ; VRAM 
                dc.w    $060C                   ; Quadros / Tiles
                dc.w    $000C, $1824, $180C     ; Carregar quadro / Tempo do quadro
                dc.l    ($FF<<$18)|Mz_Pistons   ; Offset_0x04BD3E
                dc.w    $6B80                   ; VRAM 
                dc.w    $0406                   ; Quadros / Tiles
                dc.w    $0013, $0607, $0C13, $0607 ; Carregar quadro / Tempo do quadro
                dc.l    ($FF<<$18)|Mz_Pistons   ; Offset_0x04BD3E
                dc.w    $6C40                   ; VRAM 
                dc.w    $0406                   ; Quadros / Tiles
                dc.w    $0C13, $0607, $0013, $0607 ; Carregar quadro / Tempo do quadro                   
;===============================================================================
; Script de animação das sprites para a Metropolis
; [ Término ]
;===============================================================================

;===============================================================================
; Script de animação das sprites para a Hill Top
; [ Início ]
;===============================================================================                    
HTz_Animate: ; Offset_0x03FD84:
                dc.w    $0004                   ; Total de Animações
                dc.l    ($FF<<$18)|EHz_Flower_1 ; Offset_0x049714
                dc.w    $7280                   ; VRAM 
                dc.w    $0602                   ; Quadros / Tiles
                dc.w    $007F, $0213, $0007, $0207, $0007, $0207 ; Carregar quadro / Tempo do quadro
                dc.l    ($FF<<$18)|EHz_Flower_2 ; Offset_0x049794                  
                dc.w    $72C0                   ; VRAM
                dc.w    $0802                   ; Quadros / Tiles
                dc.w    $027F, $000B, $020B, $000B, $0205, $0005, $0205, $0005 ; Carregar quadro / Tempo do quadro
                dc.l    ($07<<$18)|EHz_Flower_3 ; Offset_0x049814 
                dc.w    $7300                   ; VRAM
                dc.w    $0202                   ; Quadros / Tiles
                dc.w    $0002                   ; Carregar quadro / Tempo do quadro
                dc.l    ($FF<<$18)|EHz_Flower_4 ; Offset_0x049894   
                dc.w    $7340                   ; VRAM
                dc.w    $0802                   ; Quadros / Tiles
                dc.w    $007F, $0207, $0007, $0207, $0007, $020B, $000B, $020B ; Carregar quadro / Tempo do quadro
                dc.l    ($FF<<$18)|EHz_Dyn_Wall ; Offset_0x049914 
                dc.w    $7380                   ; VRAM
                dc.w    $0602                   ; Quadros / Tiles
                dc.w    $0017, $0209, $040B, $0617, $040B, $0209 ; Carregar quadro / Tempo do quadro  
;===============================================================================
; Script de animação das sprites para a Hill Top
; [ Término ]
;===============================================================================

;===============================================================================
; Script de animação das sprites para a Hidden Palace. Apesar de não existirem 
; [ Início ]      os gráficos dos "Orbs" o script está totalmente funcional
;===============================================================================                    
HPz_Animate: ; Offset_0x03FDE8: 
                dc.w    $0002                   ; Total de Animações
                dc.l    ($08<<$18)|HPz_Orbs     ; Offset_0x04BF7E
                dc.w    $5D00                   ; VRAM
                dc.w    $0608                   ; Quadros / Tiles
                dc.w    $0000, $0810, $1008     ; Carregar quadro / Tempo do quadro                
                dc.l    ($08<<$18)|HPz_Orbs     ; Offset_0x04BF7E
                dc.w    $5E00                   ; VRAM
                dc.w    $0608                   ; Quadros / Tiles
                dc.w    $0810, $1008, $0000     ; Carregar quadro / Tempo do quadro
                dc.l    ($08<<$18)|HPz_Orbs     ; Offset_0x04BF7E
                dc.w    $5F00                   ; VRAM
                dc.w    $0608                   ; Quadros / Tiles
                dc.w    $1008, $0000, $0810     ; Carregar quadro / Tempo do quadro  
;===============================================================================
; Script de animação das sprites para a Hidden Palace. Apesar de não existirem 
; [ Término ]     os gráficos dos "Orbs" o script está totalmente funcional
;=============================================================================== 

;===============================================================================
; Script de animação das sprites para a Oil Ocean
; [ Início ]
;===============================================================================                    
OOz_Animate: ; Offset_0x03FE14:  
                dc.w    $0004                   ; Total de Animações
                dc.l    ($FF<<$18)|OOz_Red_Balls ; Offset_0x04BF7E
                dc.w    $56C0                   ; VRAM
                dc.w    $0404                   ; Quadros / Tiles
                dc.w    $000B, $0405, $0809, $0403 ; Carregar quadro / Tempo do quadro                                                                                                       
                dc.l    ($06<<$18)|OOz_Rotating_Square_1 ; Offset_0x04C0FE
                dc.w    $5740                   ; VRAM
                dc.w    $0404                   ; Quadros / Tiles
                dc.w    $0004, $080C            ; Carregar quadro / Tempo do quadro                                                                              
                dc.l    ($06<<$18)|OOz_Rotating_Square_2 ; Offset_0x04C2FE
                dc.w    $57C0                   ; VRAM
                dc.w    $0404                   ; Quadros / Tiles
                dc.w    $0004, $080C            ; Carregar quadro / Tempo do quadro                                                            
                dc.l    ($11<<$18)|OOz_Oil_1    ; Offset_0x04C4FE
                dc.w    $5840                   ; VRAM
                dc.w    $0610                   ; Quadros / Tiles
                dc.w    $0010, $2030, $2010     ; Carregar quadro / Tempo do quadro                                                            
                dc.l    ($11<<$18)|OOz_Oil_2    ; Offset_0x04CCFE
                dc.w    $5A40                   ; VRAM
                dc.w    $0610                   ; Quadros / Tiles
                dc.w    $0010, $2030, $2010     ; Carregar quadro / Tempo do quadro 
;===============================================================================
; Script de animação das sprites para a Oil Ocean
; [ Término ]
;===============================================================================

;===============================================================================
; Script de animação das sprites para a Casino Night
; [ Início ]
;===============================================================================                    
CNz_Animate: ; Offset_0x03FE5A:
                dc.w    $0001                   ; Total de Animações
                dc.l    ($FF<<$18)|CNz_Symbols_Spr ; Offset_0x04D4FE
                dc.w    $A800                   ; VRAM
                dc.w    $1010                   ; Quadros / Tiles
                dc.w    $00C7, $1005, $2005, $3005, $40C7, $5005, $2005, $6005 ; Carregar quadro / Tempo do quadro  
                dc.w    $0005, $1005, $2005, $3005, $4005, $5005, $2005, $6005 ; Carregar quadro / Tempo do quadro 
                dc.l    ($FF<<$18)|CNz_Symbols_Spr ; Offset_0x04D4FE
                dc.w    $6600                   ; VRAM
                dc.w    $1010                   ; Quadros / Tiles
                dc.w    $7005, $8005, $2005, $9005, $A005, $B005, $2005, $C005 ; Carregar quadro / Tempo do quadro 
                dc.w    $70C7, $8005, $2005, $9005, $A0C7, $B005, $2005, $C005 ; Carregar quadro / Tempo do quadro
;===============================================================================
; Script de animação das sprites para a Casino Night
; [ Término ]
;===============================================================================

;===============================================================================
; Script de animação das sprites para a Casino Night para o modo 2 jogadores
; [ Início ]
;===============================================================================                    
CNz_Animate_2P: ; Offset_0x03FEAC:
                dc.w    $0001                   ; Total de Animações
                dc.l    ($FF<<$18)|CNz_Symbols_Spr ; Offset_0x04D4FE
                dc.w    $E800                   ; VRAM
                dc.w    $1010                   ; Quadros / Tiles
                dc.w    $00C7, $1005, $2005, $3005, $40C7, $5005, $2005, $6005 ; Carregar quadro / Tempo do quadro  
                dc.w    $0005, $1005, $2005, $3005, $4005, $5005, $2005, $6005 ; Carregar quadro / Tempo do quadro 
                dc.l    ($FF<<$18)|CNz_Symbols_Spr ; Offset_0x04D4FE
                dc.w    $6600                   ; VRAM
                dc.w    $1010                   ; Quadros / Tiles
                dc.w    $7005, $8005, $2005, $9005, $A005, $B005, $2005, $C005 ; Carregar quadro / Tempo do quadro 
                dc.w    $70C7, $8005, $2005, $9005, $A0C7, $B005, $2005, $C005 ; Carregar quadro / Tempo do quadro
;===============================================================================
; Script de animação das sprites para a Casino Night para o modo 2 jogadores
; [ Término ]
;===============================================================================

;===============================================================================
; Script de animação das sprites para a Chemical Plant
; [ Início ]
;===============================================================================                    
CPz_Animate: ; Offset_0x03FEFE:
                dc.w    $0000                   ; Total de Animações
                dc.l    ($04<<$18)|CPz_Dyn_Background ; Offset_0x04FAFE:
                dc.w    $6E00                   ; VRAM
                dc.w    $0802                   ; Quadros / Tiles
                dc.w    $0002, $0406, $080A, $0C0E ; Carregar quadro / Tempo do quadro
;===============================================================================
; Script de animação das sprites para a Chemical Plant
; [ Término ]
;===============================================================================  

;===============================================================================
; Script de animação das sprites para a Death Egg
; [ Início ]
;===============================================================================                    
DEz_Animate: ; Offset_0x03FF10:
                dc.w    $0000                   ; Total de Animações
                dc.l    ($04<<$18)|CPz_Dyn_Background ; Offset_0x04FAFE
                dc.w    $64C0                   ; VRAM
                dc.w    $0802                   ; Quadros / Tiles
                dc.w    $0002, $0406, $080A, $0C0E ; Carregar quadro / Tempo do quadro 
;===============================================================================
; Script de animação das sprites para a Death Egg
; [ Término ]
;===============================================================================

;===============================================================================
; Script de animação das sprites para a Aquatic Ruin
; [ Início ]
;===============================================================================                    
ARz_Animate: ; Offset_0x03FF22:
                dc.w    $0003                   ; Total de Animações
                dc.l    ($05<<$18)|ARz_Water_Falls_1 ; Offset_0x04FCFE
                dc.w    $AAE0                   ; VRAM
                dc.w    $0204                   ; Quadros / Tiles  
                dc.w    $0004                   ; Carregar quadro / Tempo do quadro 
                dc.l    ($05<<$18)|ARz_Water_Falls_1 ; Offset_0x04FCFE
                dc.w    $8600                   ; VRAM
                dc.w    $0204                   ; Quadros / Tiles   
                dc.w    $0400                   ; Carregar quadro / Tempo do quadro 
                dc.l    ($05<<$18)|ARz_Water_Falls_2 ; Offset_0x04FDFE
                dc.w    $8580                   ; VRAM
                dc.w    $0204                   ; Quadros / Tiles
                dc.w    $0004                   ; Carregar quadro / Tempo do quadro 
                dc.l    ($05<<$18)|ARz_Water_Falls_3 ; Offset_0x04FEFE
                dc.w    $8500                   ; VRAM
                dc.w    $0204                   ; Quadros / Tiles 
                dc.w    $0004                   ; Carregar quadro / Tempo do quadro    
;===============================================================================
; Script de animação das sprites para a Aquatic Ruin
; [ Término ]
;===============================================================================

;===============================================================================
; Ponteiro para as fases sem script de animação
; [ Início ]
;=============================================================================== 
Null_Animate: ; Offset_0x03FF4C:                
                cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
                beq.s   CPZ_Unused_Sub                         ; Offset_0x03FF56
Exit_CPZ_Unused_Sub: ; Offset_0x03FF54:                
                rts
;===============================================================================
; Ponteiro para as fases sem script de animação
; [ Término ]
;===============================================================================  

;===============================================================================
; Rotina não usada para executar algum efeito na Chemical Plant
; [ Início ]
;===============================================================================                    
CPZ_Unused_Sub: ; Offset_0x03FF56:
                move.w  ($FFFFEE00).w, D0
                cmpi.w  #$1940, D0
                bcs.s   Exit_CPZ_Unused_Sub                    ; Offset_0x03FF54
                cmpi.w  #$1F80, D0
                bcc.s   Exit_CPZ_Unused_Sub                    ; Offset_0x03FF54
                subq.b  #$01, ($FFFFF72D).w
                bpl.s   Exit_CPZ_Unused_Sub                    ; Offset_0x03FF54
                move.b  #$07, ($FFFFF72D).w
                move.b  #$01, ($FFFFF72C).w
                lea     ($FFFF7500), A1
                bsr.s   CPZ_Unused_Sub_01                      ; Offset_0x03FF86
                lea     ($FFFF7D00), A1
CPZ_Unused_Sub_01: ; Offset_0x03FF86:
                move.w  #$0007, D1
CPZ_Unused_Sub_Loop: ; Offset_0x03FF8A:
                move.w  (A1), D0
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0072(A1), (A1)+
                adda.w  #$0070, A1
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0072(A1), (A1)+
                adda.w  #$0070, A1
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0072(A1), (A1)+
                adda.w  #$0070, A1
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  D0, (A1)+
                suba.w  #$0180, A1
                dbra    D1, CPZ_Unused_Sub_Loop                ; Offset_0x03FF8A
                rts
;===============================================================================
; Rotina não usada para executar algum efeito na Chemical Plant
; [ Término ]
;===============================================================================   

;===============================================================================
; Sub Rotina para carregar os sprites dinamicamente para a VRAM
; [ Término ]      Ex: Flores na Emerald Hill, Óleo na Oil Ocean, etc ....
;===============================================================================   

;===============================================================================
; Sub Rotina para carregar os mapeamentos dos sprites animados dinamicamente.
; [ Início ]      Ex: Flores na Emerald Hill, Óleo na Oil Ocean, etc ....
;===============================================================================  
Load_16x16_Mappings_For_Dyn_Sprites: ; Offset_0x040020:
                cmpi.b  #$07, (Level_Id).w                           ; $FFFFFE10
                bne.s   Load_16x16_Map_Dyn_Spr_Not_HTz         ; Offset_0x040038
                bsr     Hill_Top_Init_Dyn_Sprites              ; Offset_0x04050C
                move.b  #$FF, ($FFFFF7F1).w
                move.w  #$FFFF, ($FFFFA820).w
Load_16x16_Map_Dyn_Spr_Not_HTz: ; Offset_0x040038:
                cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
                bne.s   Load_16x16_Map_Dyn_Spr_Not_CPz         ; Offset_0x040046
                move.b  #$FF, ($FFFFF7F1).w
Load_16x16_Map_Dyn_Spr_Not_CPz: ; Offset_0x040046:
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                add.w   D0, D0
                move.w  Map16Delta_Index(PC, D0), D0           ; Offset_0x04009C
                lea     Map16Delta_Index(PC, D0), A0           ; Offset_0x04009C
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x04006A                              ; $FFFFFE10
                cmpi.b  #$0C, (Level_Id).w
                bne.s   Offset_0x04006A
                lea     (Map16Delta_CNz_2P), A0                ; Offset_0x04040A
Offset_0x04006A:
                tst.w   (A0)
                beq.s   Offset_0x040082
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
                adda.w  (A0)+, A1
                move.w  (A0)+, D1
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   Offset_0x040084
Offset_0x04007C:
                move.w  (A0)+, (A1)+
                dbra    D1, Offset_0x04007C
Offset_0x040082:
                rts
Offset_0x040084:
                move.w  (A0)+, D0
                move.w  D0, D1
                andi.w  #$F800, D0
                andi.w  #$07FF, D1
                lsr.w   #$01, D1
                or.w    D1, D0
                move.w  D0, (A1)+
                dbra    D1, Offset_0x040084
                rts
;-------------------------------------------------------------------------------
Map16Delta_Index: ; Offset_0x04009C:  
                dc.w    Map16Delta_EHz-Map16Delta_Index        ; Offset_0x0400BE
                dc.w    Map16Delta_Null-Map16Delta_Index       ; Offset_0x04050A
                dc.w    Map16Delta_Null-Map16Delta_Index       ; Offset_0x04050A
                dc.w    Map16Delta_Null-Map16Delta_Index       ; Offset_0x04050A
                dc.w    Map16Delta_Mz-Map16Delta_Index         ; Offset_0x04013A
                dc.w    Map16Delta_Mz-Map16Delta_Index         ; Offset_0x04013A
                dc.w    Map16Delta_Null-Map16Delta_Index       ; Offset_0x04050A
                dc.w    Map16Delta_HTz-Map16Delta_Index        ; Offset_0x0400BE
                dc.w    Map16Delta_HPz-Map16Delta_Index        ; Offset_0x04020E
                dc.w    Map16Delta_Null-Map16Delta_Index       ; Offset_0x04050A
                dc.w    Map16Delta_OOz-Map16Delta_Index        ; Offset_0x040302
                dc.w    Map16Delta_Null-Map16Delta_Index       ; Offset_0x04050A 
                dc.w    Map16Delta_CNz-Map16Delta_Index        ; Offset_0x040366
                dc.w    Map16Delta_CPz-Map16Delta_Index        ; Offset_0x0404AE
                dc.w    Map16Delta_DEz-Map16Delta_Index        ; Offset_0x0404BA
                dc.w    Map16Delta_ARz-Map16Delta_Index        ; Offset_0x0404C6
                dc.w    Map16Delta_Null-Map16Delta_Index       ; Offset_0x04050A                 
;===============================================================================
; Emerald Hill / Hill Top -> Mapeamentos 16x16 para os sprites animados 
; [ Início ]                 dinamicamente  
;===============================================================================                
Map16Delta_EHz: ; 
Map16Delta_HTz: ; Offset_0x0400BE:
                dc.w    $1788 ; Endereço da RAM para carregar os mapeamentos ($1788+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $003B ; Quantidade de Words a serem movidas para RAM    ($0000..$003B) -> move.w  (A0)+, D1                
                dc.w    $4500, $4504, $4501, $4505, $4508, $450C, $4509, $450D
                dc.w    $4510, $4514, $4511, $4515, $4502, $4506, $4503, $4507
                dc.w    $450A, $450E, $450B, $450F, $4512, $4516, $4513, $4517
                dc.w    $6518, $651A, $6519, $651B, $651C, $651E, $651D, $651F
                dc.w    $439C, $4B9C, $439D, $4B9D, $4158, $439C, $4159, $439D
                dc.w    $4B9C, $4958, $4B9D, $4959, $6394, $6B94, $6395, $6B95
                dc.w    $E396, $EB96, $E397, $EB97, $6398, $6B98, $6399, $6B99
                dc.w    $E39A, $EB9A, $E39B, $EB9B
;===============================================================================
; Emerald Hill / Hill Top -> Mapeamentos 16x16 para os sprites animados 
; [ Término ]                dinamicamente 
;===============================================================================   

;===============================================================================
; Metropolis -> Mapeamentos 16x16 para os sprites animados dinamicamente  
; [ Início ]                 
;===============================================================================    
Map16Delta_Mz: ; Offset_0x04013A: 
                dc.w    $1730 ; Endereço da RAM para carregar os mapeamentos ($1730+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $0067 ; Quantidade de Words a serem movidas para RAM    ($0000..$0067) -> move.w  (A0)+, D1                
                dc.w    $235C, $2B5C, $235D, $2B5D, $235E, $2B5E, $235F, $2B5F
                dc.w    $635A, $635A, $635B, $635B, $6358, $6358, $6359, $6359
                dc.w    $6356, $6356, $6357, $6357, $6354, $6354, $6355, $6355
                dc.w    $6352, $6352, $6353, $6353, $6350, $6350, $6351, $6351
                dc.w    $634E, $634E, $634F, $634F, $634C, $634C, $634D, $634D
                dc.w    $2360, $2B60, $2361, $2B61, $2362, $2B62, $2363, $2B63
                dc.w    $2364, $2B64, $2365, $2B65, $2366, $2B66, $2367, $2B67
                dc.w    $C000, $C000, $C340, $C341, $C000, $C000, $C342, $C343
                dc.w    $C344, $C345, $C348, $C349, $C346, $C347, $C34A, $C34B
                dc.w    $E35A, $E35A, $E35B, $E35B, $E358, $E358, $E359, $E359
                dc.w    $E356, $E356, $E357, $E357, $E354, $E354, $E355, $E355
                dc.w    $E352, $E352, $E353, $E353, $E350, $E350, $E351, $E351
                dc.w    $E34E, $E34E, $E34F, $E34F, $E34C, $E34C, $E34D, $E34D
;===============================================================================
; Metropolis -> Mapeamentos 16x16 para os sprites animados dinamicamente  
; [ Término ]                 
;=============================================================================== 

;===============================================================================
; Hidden Palace -> Mapeamentos 16x16 para os sprites animados dinamicamente  
; [ Início ]                 
;===============================================================================   
Map16Delta_HPz: ; Offset_0x04020E: 
                dc.w    $1710 ; Endereco da RAM para carregar os mapeamentos ($1710+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $0077 ; Quantidade de Words a serem movidas para RAM    ($0000..$0077) -> move.w  (A0)+, D1               
                dc.w    $62E8, $62E9, $62EA, $62EB, $62EC, $62ED, $62EE, $62EF
                dc.w    $62F0, $62F1, $62F2, $62F3, $62F4, $62F5, $62F6, $62F7
                dc.w    $62F8, $62F9, $62FA, $62FB, $62FC, $62FD, $62FE, $62FF
                dc.w    $42E8, $42E9, $42EA, $42EB, $42EC, $42ED, $42EE, $42EF
                dc.w    $42F0, $42F1, $42F2, $42F3, $42F4, $42F5, $42F6, $42F7
                dc.w    $42F8, $42F9, $42FA, $42FB, $42FC, $42FD, $42FE, $42FF
                dc.w    $6000, $62E8, $6000, $62EA, $62E9, $62EC, $62EB, $62EE
                dc.w    $62ED, $6000, $62EF, $6000, $6000, $62F0, $6000, $62F2
                dc.w    $62F1, $62F4, $62F3, $62F6, $62F5, $6000, $62F7, $6000
                dc.w    $6000, $62F8, $6000, $62FA, $62F9, $62FC, $62FB, $62FE
                dc.w    $62FD, $6000, $62FF, $6000, $4000, $42E8, $4000, $42EA
                dc.w    $42E9, $42EC, $42EB, $42EE, $42ED, $4000, $42EF, $4000
                dc.w    $4000, $42F0, $4000, $42F2, $42F1, $42F4, $42F3, $42F6
                dc.w    $42F5, $4000, $42F7, $4000, $4000, $42F8, $4000, $42FA
                dc.w    $42F9, $42FC, $42FB, $42FE, $42FD, $4000, $42FF, $4000              
;===============================================================================
; Hidden Palace -> Mapeamentos 16x16 para os sprites animados dinamicamente  
; [ Término ]                 
;===============================================================================  

;===============================================================================
; Oil Ocean -> Mapeamentos 16x16 para os sprites animados dinamicamente  
; [ Início ]                 
;===============================================================================  
Map16Delta_OOz: ; Offset_0x040302:  
                dc.w    $17A0 ; Endereco da RAM para carregar os mapeamentos ($17A0+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $002F ; Quantidade de Words a serem movidas para RAM    ($0000..$0027) -> move.w  (A0)+, D1               
                dc.w    $82B6, $82B8, $82B7, $82B9, $E2BA, $E2BB, $E2BC, $E2BD
                dc.w    $4000, $62BE, $4000, $62C0, $62BF, $4000, $62C1, $4000
                dc.w    $C2C2, $C2C3, $C2CA, $C2CB, $C2C4, $C2C5, $C2CC, $C2CD
                dc.w    $C2C6, $C2C7, $C2CE, $C2CF, $C2C8, $C2C9, $C2D0, $C2D1
                dc.w    $C2D2, $C2D3, $C2DA, $C2DB, $C2D4, $C2D5, $C2DC, $C2DD
                dc.w    $C2D6, $C2D7, $C2DE, $C2DF, $C2D8, $C2D9, $C2E0, $C2E1            
;===============================================================================
; Oil Ocean -> Mapeamentos 16x16 para os sprites animados dinamicamente  
; [ Término ]                 
;=============================================================================== 

;===============================================================================
; Casino Night -> Mapeamentos 16x16 para os sprites animados dinamicamente  
; [ Início ]                 
;===============================================================================  
Map16Delta_CNz: ; Offset_0x040366:
                dc.w    $1760 ; Endereco da RAM para carregar os mapeamentos ($1760+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $004F ; Quantidade de Words a serem movidas para RAM    ($0000..$004F) -> move.w  (A0)+, D1                
                dc.w    $0550, $0554, $0551, $0555, $0558, $055C, $0559, $055D
                dc.w    $0552, $0556, $0553, $0557, $055A, $055E, $055B, $055F
                dc.w    $0560, $0564, $0561, $0565, $0568, $056C, $0569, $056D
                dc.w    $0562, $0566, $0563, $0567, $056A, $056E, $056B, $056F
                dc.w    $0570, $0574, $0571, $0575, $0578, $057C, $0579, $057D
                dc.w    $0572, $0576, $0573, $0577, $057A, $057E, $057B, $057F
                dc.w    $E540, $E544, $E541, $E545, $E548, $E54C, $E549, $E54D
                dc.w    $E542, $E546, $E543, $E547, $E54A, $E54E, $E54B, $E54F
                dc.w    $E330, $E334, $E331, $E335, $E338, $E33C, $E339, $E33D
                dc.w    $E332, $E336, $E333, $E337, $E33A, $E33E, $E33B, $E33F                
;===============================================================================
; Casino Night -> Mapeamentos 16x16 para os sprites animados dinamicamente  
; [ Término ]                 
;=============================================================================== 

;===============================================================================
; Casino Night -> Mapeamentos 16x16 para os sprites animados dinamicamente  
; [ Início ]      no modo 2 jogadores           
;===============================================================================  
Map16Delta_CNz_2P: ; Offset_0x04040A:
                dc.w    $1760 ; Endereco da RAM para carregar os mapeamentos ($1760+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $004F ; Quantidade de Words a serem movidas para RAM    ($0000..$004F) -> move.w  (A0)+, D1                
                dc.w    $0750, $0754, $0751, $0755, $0758, $075C, $0759, $075D
                dc.w    $0752, $0756, $0753, $0757, $075A, $075E, $075B, $075F
                dc.w    $0760, $0764, $0761, $0765, $0768, $076C, $0769, $076D
                dc.w    $0762, $0766, $0763, $0767, $076A, $076E, $076B, $076F
                dc.w    $0770, $0774, $0771, $0775, $0778, $077C, $0779, $077D
                dc.w    $0772, $0776, $0773, $0777, $077A, $077E, $077B, $077F
                dc.w    $E740, $E744, $E741, $E745, $E748, $E74C, $E749, $E74D
                dc.w    $E742, $E746, $E743, $E747, $E74A, $E74E, $E74B, $E74F
                dc.w    $E330, $E334, $E331, $E335, $E338, $E33C, $E339, $E33D
                dc.w    $E332, $E336, $E333, $E337, $E33A, $E33E, $E33B, $E33F                
;===============================================================================
; Casino Night -> Mapeamentos 16x16 para os sprites animados dinamicamente  
; [ Término ]     no modo 2 jogadores           
;=============================================================================== 

;===============================================================================
; Chemical Plant -> Mapeamentos 16x16 para os sprites animados dinamicamente  
; [ Início ]               
;===============================================================================  
Map16Delta_CPz: ; Offset_0x0404AE;
                dc.w    $17F8 ; Endereco da RAM para carregar os mapeamentos ($17F8+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $0003 ; Quantidade de Words a serem movidas para RAM    ($0000..$0003) -> move.w  (A0)+, D1                
                dc.w    $4370, $4371, $4370, $4371                
;===============================================================================
; Chemical Plant -> Mapeamentos 16x16 para os sprites animados dinamicamente  
; [ Término ]               
;===============================================================================

;===============================================================================
; Death Egg -> Mapeamentos 16x16 para os sprites animados dinamicamente  
; [ Início ]               
;=============================================================================== 
Map16Delta_DEz: ; Offset_0x0404BA;
                dc.w    $17F8 ; Endereco da RAM para carregar os mapeamentos ($17F8+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $0003 ; Quantidade de Words a serem movidas para RAM    ($0000..$0003) -> move.w  (A0)+, D1                
                dc.w    $4326, $4327, $4326, $4327                  
;===============================================================================
; Death Egg -> Mapeamentos 16x16 para os sprites animados dinamicamente  
; [ Término ]               
;=============================================================================== 

;===============================================================================
; Aquatic Ruin -> Mapeamentos 16x16 para os sprites animados dinamicamente  
; [ Início ]               
;=============================================================================== 
Map16Delta_ARz: ; Offset_0x0404C6: 
                dc.w    $17C0 ; Endereco da RAM para carregar os mapeamentos ($17C0+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $001F ; Quantidade de Words a serem movidas para RAM    ($0000..$001F) -> move.w  (A0)+, D1                
                dc.w    $C428, $C429, $C42A, $C42B, $C42C, $C42D, $C42E, $C42F
                dc.w    $C430, $C431, $C432, $C433, $C563, $C564, $C565, $C566
                dc.w    $4428, $4429, $442A, $442B, $442C, $442D, $442E, $442F
                dc.w    $4430, $4431, $4432, $4433, $4563, $4564, $4565, $4566                
;===============================================================================
; Aquatic Ruin -> Mapeamentos 16x16 para os sprites animados dinamicamente  
; [ Término ]               
;=============================================================================== 

;===============================================================================
; Mapeamentos 16x16 para as fases sem sprites animados dinamicamente.  
; [ Início ]        Nenhum mapeamento é carregado para a memória         
;=============================================================================== 
Map16Delta_Null: ; Offset_0x04050A: 
                dc.w    $0000                 
;===============================================================================
; Mapeamentos 16x16 para as fases sem sprites animados dinamicamente.  
; [ Término ]       Nenhum mapeamento é carregado para a memória                                                                
;=============================================================================== 
                      
;===============================================================================
; Sub Rotina para carregar os mapeamentos dos sprites animados dinamicamente.
; [ Término ]     Ex: Flores na Emerald Hill, Óleo na Oil Ocean, etc ....
;===============================================================================  

;===============================================================================
; Sub Rotina para carregar o sprites a serem animados dinamicamente a partir da    
; [ Início ]      Ram para a Hill Top
;===============================================================================  
Hill_Top_Init_Dyn_Sprites: ; Offset_0x04050C:  
                lea     (Hill_Top_Background), A0              ; Offset_0x049A14
                lea     ($FFFFB800).w, A4
                jsr     (NemesisDec_ToRAM)                     ; Offset_0x0014AC
                lea     ($FFFFB800).w, A1
                lea     (HTz_Ram_Dyn_Sprites), A4              ; Offset_0x03FAE8
                moveq   #$00, D2
                moveq   #$07, D4
Offset_0x04052A:
                moveq   #$05, D3
Offset_0x04052C:
                moveq   #$FFFFFFFF, D0
                move.w  (A4)+, D0
                move.l  D0, A2
                moveq   #$1F, D1
Offset_0x040534:
                move.l  (A1), (A2)+
                move.l  D2, (A1)+
                dbra    D1, Offset_0x040534
                dbra    D3, Offset_0x04052C
                adda.w  #$000C, A4
                dbra    D4, Offset_0x04052A
                rts
;===============================================================================
; Sub Rotina para carregar o sprites a serem animados dinamicamente a partir da    
; [ Término ]     Ram para a Hill Top
;===============================================================================   

;===============================================================================
; Sub Rotina Build_HUD - Rotina para mostrar o HUD na tela    
; [ Início ]
;===============================================================================   
Build_HUD: ; Offset_0x04054A:
                tst.w   ($FFFFFE20).w
                beq.s   Offset_0x040566
                moveq   #$00, D1
                btst    #$03, ($FFFFFE05).w
                bne.s   Offset_0x040564
                cmpi.b  #$09, ($FFFFFE23).w
                bne.s   Offset_0x040564
                addq.w  #$02, D1
Offset_0x040564:
                bra.s   Offset_0x04057C
Offset_0x040566:
                moveq   #$00, D1
                btst    #$03, ($FFFFFE05).w
                bne.s   Offset_0x04057C
                addq.w  #$01, D1
                cmpi.b  #$09, ($FFFFFE23).w
                bne.s   Offset_0x04057C
                addq.w  #$02, D1
Offset_0x04057C:
                move.w  #$0090, D3
                move.w  #$0108, D2
                lea     (HUD_Mappings_1P), A1                  ; Offset_0x0407F0
                move.w  #$86CA, A3
                add.w   D1, D1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x0405A0
                jsr     (Offset_0x0167B2)
Offset_0x0405A0:
                rts
;===============================================================================
; Sub Rotina Build_HUD - Rotina para mostrar o HUD na tela    
; [ Término ]
;===============================================================================  

;===============================================================================
; Sub Rotina Build_HUD_2P - Rotina para mostrar o HUD na tela    
; [ Início ]
;===============================================================================   
Build_HUD_2P: ; Offset_0x0405A2:
                tst.w   ($FFFFFE20).w
                beq.s   Offset_0x0405BE
                moveq   #$00, D1
                btst    #$03, ($FFFFFE05).w
                bne.s   Offset_0x0405BC
                cmpi.b  #$09, ($FFFFFE23).w
                bne.s   Offset_0x0405BC
                addq.w  #$02, D1
Offset_0x0405BC:
                bra.s   Offset_0x0405D4
Offset_0x0405BE:
                moveq   #$00, D1
                btst    #$03, ($FFFFFE05).w
                bne.s   Offset_0x0405D4
                addq.w  #$01, D1
                cmpi.b  #$09, ($FFFFFE23).w
                bne.s   Offset_0x0405D4
                addq.w  #$02, D1
Offset_0x0405D4:
                move.w  #$0090, D3
                move.w  #$0188, D2
                lea     (HUD_Mappings_2P), A1                  ; Offset_0x040940
                move.w  #$8365, A3
                add.w   D1, D1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                jsr     (Offset_0x016D52)
                move.w  #$00B8, D3
                move.w  #$0108, D2
                move.w  #$8371, A3
                moveq   #$00, D7
                move.b  ($FFFFFE23).w, D7
                bsr     Offset_0x04067A
                bsr     Offset_0x0406B8
                moveq   #$00, D7
                move.b  ($FFFFFE24).w, D7
                bsr     Offset_0x040684
                move.w  #$00C0, D3
                move.w  #$0118, D2
                move.w  #$8371, A3
                moveq   #$00, D7
                move.w  ($FFFFFE20).w, D7
                bsr     Offset_0x0406D4
                tst.b   ($FFFFFECA).w
                bne.s   Offset_0x040652
                tst.b   ($FFFFFE1E).w
                beq.s   Offset_0x040652
                move.w  #$0110, D3
                move.w  #$01B8, D2
                move.w  #$8371, A3
                moveq   #$00, D7
                move.b  ($FFFFFEF8).w, D7
                bsr     Offset_0x040684
Offset_0x040652:
                moveq   #$04, D1
                move.w  #$0090, D3
                move.w  #$0188, D2
                lea     (HUD_Mappings_2P), A1                  ; Offset_0x040940
                move.w  #$8365, A3
                add.w   D1, D1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                jsr     (Offset_0x016D52)
                moveq   #$00, D4
                rts     
Offset_0x04067A:
                lea     (HUD_Val_000001), A4                   ; Offset_0x040F64
                moveq   #$00, D6
                bra.s   Offset_0x04068C
Offset_0x040684:
                lea     (HUD_Val_000010), A4                   ; Offset_0x040F60
                moveq   #$01, D6
Offset_0x04068C:
                moveq   #$00, D1
                move.l  (A4)+, D4
Offset_0x040690:                
                sub.l   D4, D7
                bcs.s   Offset_0x040698
                addq.w  #$01, D1
                bra.s   Offset_0x040690
Offset_0x040698:
                add.l   D4, D7
                lea     (HUD_Map_Numbers_2P), A1               ; Offset_0x0409D8
                add.w   D1, D1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                jsr     (Offset_0x016D52)
                addq.w  #$08, D3
                dbra    D6, Offset_0x04068C
                rts  
Offset_0x0406B8:
                moveq   #$0A, D1
                lea     (HUD_Map_Numbers_2P), A1               ; Offset_0x0409D8
                add.w   D1, D1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                jsr     (Offset_0x016D52)
                addq.w  #$08, D3
                rts
Offset_0x0406D4:
                lea     (HUD_Val_000100), A4                   ; Offset_0x040F5C
                moveq   #$02, D6
Offset_0x0406DC:                
                moveq   #$00, D1
                move.l  (A4)+, D4
Offset_0x0406E0:                
                sub.l   D4, D7
                bcs.s   Offset_0x0406E8
                addq.w  #$01, D1
                bra.s   Offset_0x0406E0
Offset_0x0406E8:
                add.l   D4, D7
                tst.w   D6
                beq.s   Offset_0x0406FA
                tst.w   D1
                beq.s   Offset_0x0406F6
                bset    #$1F, D6
Offset_0x0406F6:
                tst.l   D6
                bpl.s   Offset_0x040710
Offset_0x0406FA:
                lea     (HUD_Map_Numbers_2P), A1               ; Offset_0x0409D8
                add.w   D1, D1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                jsr     (Offset_0x016D52)
Offset_0x040710:
                addq.w  #$08, D3
                dbra    D6, Offset_0x0406DC
                rts   
;-------------------------------------------------------------------------------                
Build_HUD_2P_Miles: ; Offset_0x040718:
                tst.w   ($FFFFFED0).w
                beq.s   Offset_0x040734
                moveq   #$00, D1
                btst    #$03, ($FFFFFE05).w
                bne.s   Offset_0x040732
                cmpi.b  #$09, ($FFFFFED3).w
                bne.s   Offset_0x040732
                addq.w  #$02, D1
Offset_0x040732:
                bra.s   Offset_0x04074A
Offset_0x040734:
                moveq   #$00, D1
                btst    #$03, ($FFFFFE05).w
                bne.s   Offset_0x04074A
                addq.w  #$01, D1
                cmpi.b  #$09, ($FFFFFED3).w
                bne.s   Offset_0x04074A
                addq.w  #$02, D1
Offset_0x04074A:
                move.w  #$0090, D3
                move.w  #$0268, D2
                lea     (HUD_Mappings_2P), A1                  ; Offset_0x040940
                move.w  #$8365, A3
                add.w   D1, D1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                jsr     (Offset_0x016D52)
                move.w  #$00B8, D3
                move.w  #$01E8, D2
                move.w  #$8371, A3
                moveq   #$00, D7
                move.b  ($FFFFFED3).w, D7
                bsr     Offset_0x04067A
                bsr     Offset_0x0406B8
                moveq   #$00, D7
                move.b  ($FFFFFED4).w, D7
                bsr     Offset_0x040684
                move.w  #$00C0, D3
                move.w  #$01F8, D2
                move.w  #$8371, A3
                moveq   #$00, D7
                move.w  ($FFFFFED0).w, D7
                bsr     Offset_0x0406D4
                tst.b   ($FFFFFE1E).w
                bne.s   Offset_0x0407C8
                tst.b   ($FFFFFECA).w
                beq.s   Offset_0x0407C8
                move.w  #$0110, D3
                move.w  #$0298, D2
                move.w  #$8371, A3
                moveq   #$00, D7
                move.b  ($FFFFFEF8).w, D7
                bsr     Offset_0x040684
Offset_0x0407C8:
                moveq   #$05, D1
                move.w  #$0090, D3
                move.w  #$0268, D2
                lea     (HUD_Mappings_2P), A1                  ; Offset_0x040940
                move.w  #$8340, A3
                add.w   D1, D1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                jsr     (Offset_0x016D52)
                moveq   #$00, D4
                rts                                                         
;===============================================================================
; Sub Rotina Build_HUD_2P - Rotina para mostrar o HUD na tela    
; [ Término ]
;===============================================================================  
HUD_Mappings_1P: ; Offset_0x0407F0:
                dc.w    Offset_0x0407F8-HUD_Mappings_1P
                dc.w    Offset_0x04084A-HUD_Mappings_1P
                dc.w    Offset_0x04089C-HUD_Mappings_1P
                dc.w    Offset_0x0408EE-HUD_Mappings_1P
Offset_0x0407F8:
                dc.w    $000A
                dc.l    $800D2000, $20000000, $800D2018, $200C0020
                dc.l    $800D2020, $20100040, $900D2010, $20080000
                dc.l    $900D2028, $20140028, $A00D2008, $20040000
                dc.l    $A0012000, $20000020, $A0092030, $20180030
                dc.l    $4005010A, $00850000, $400D210E, $20870010
Offset_0x04084A:
                dc.w    $000A
                dc.l    $800D2000, $20000000, $800D2018, $200C0020
                dc.l    $800D2020, $20100040, $900D2010, $20080000
                dc.l    $900D2028, $20140028, $A00D0008, $00040000
                dc.l    $A0010000, $00000020, $A0092030, $20180030
                dc.l    $4005010A, $00850000, $400D210E, $20870010
Offset_0x04089C:
                dc.w    $000A
                dc.l    $800D2000, $20000000, $800D2018, $200C0020
                dc.l    $800D2020, $20100040, $900D0010, $00080000
                dc.l    $900D2028, $20140028, $A00D2008, $20040000
                dc.l    $A0012000, $20000020, $A0092030, $20180030
                dc.l    $4005010A, $00850000, $400D210E, $20870010
Offset_0x0408EE:
                dc.w    $000A
                dc.l    $800D2000, $20000000, $800D2018, $200C0020
                dc.l    $800D2020, $20100040, $900D0010, $00080000
                dc.l    $900D2028, $20140028, $A00D0008, $00040000
                dc.l    $A0010000, $00000020, $A0092030, $20180030
                dc.l    $4005010A, $00850000, $400D210E, $20870010
;-------------------------------------------------------------------------------
HUD_Mappings_2P: ;  Offset_0x040940:
                dc.w    Offset_0x04094C-HUD_Mappings_2P
                dc.w    Offset_0x040966-HUD_Mappings_2P
                dc.w    Offset_0x040980-HUD_Mappings_2P
                dc.w    Offset_0x04099A-HUD_Mappings_2P
                dc.w    Offset_0x0409B4-HUD_Mappings_2P
                dc.w    Offset_0x0409C6-HUD_Mappings_2P
Offset_0x04094C:
                dc.w    $0003
                dc.l    $800D2010, $20080000, $900D2008, $20040000
                dc.l    $90012000, $20000020
Offset_0x040966:
                dc.w    $0003
                dc.l    $800D2010, $20080000, $900D0008, $00040000
                dc.l    $90010000, $00000020
Offset_0x040980:
                dc.w    $0003
                dc.l    $800D0010, $00080000, $900D2008, $20040000
                dc.l    $90012000, $20000020
Offset_0x04099A:
                dc.w    $0003
                dc.l    $800D0010, $00080000, $900D0008, $00040000
                dc.l    $90010000, $00000020
Offset_0x0409B4:
                dc.w    $0002
                dc.l    $4005010A, $00850000, $400D210E, $20870010
Offset_0x0409C6:
                dc.w    $0002
                dc.l    $4005001C, $000E0000, $400D2078, $203C0010
;-------------------------------------------------------------------------------                
HUD_Map_Numbers_2P: ; Offset_0x0409D8:
                dc.w    Offset_0x0409EE-HUD_Map_Numbers_2P
                dc.w    Offset_0x0409F8-HUD_Map_Numbers_2P
                dc.w    Offset_0x040A02-HUD_Map_Numbers_2P
                dc.w    Offset_0x040A0C-HUD_Map_Numbers_2P
                dc.w    Offset_0x040A16-HUD_Map_Numbers_2P
                dc.w    Offset_0x040A20-HUD_Map_Numbers_2P
                dc.w    Offset_0x040A2A-HUD_Map_Numbers_2P
                dc.w    Offset_0x040A34-HUD_Map_Numbers_2P
                dc.w    Offset_0x040A3E-HUD_Map_Numbers_2P
                dc.w    Offset_0x040A48-HUD_Map_Numbers_2P
                dc.w    Offset_0x040A52-HUD_Map_Numbers_2P
Offset_0x0409EE:
                dc.w    $0001
                dc.l    $00012000, $20000000
Offset_0x0409F8:
                dc.w    $0001
                dc.l    $00012002, $20010000
Offset_0x040A02:
                dc.w    $0001
                dc.l    $00012004, $20020000
Offset_0x040A0C:
                dc.w    $0001
                dc.l    $00012006, $20030000
Offset_0x040A16:
                dc.w    $0001
                dc.l    $00012008, $20040000
Offset_0x040A20:
                dc.w    $0001
                dc.l    $0001200A, $20050000
Offset_0x040A2A:
                dc.w    $0001
                dc.l    $0001200C, $20060000
Offset_0x040A34:
                dc.w    $0001
                dc.l    $0001200E, $20070000
Offset_0x040A3E:
                dc.w    $0001
                dc.l    $00012010, $20080000
Offset_0x040A48:
                dc.w    $0001
                dc.l    $00012012, $20090000
Offset_0x040A52:
                dc.w    $0001
                dc.l    $00012014, $200A0000                
            
;===============================================================================
; Sub Rotina para adicionar pontos ao HUD do primeiro jogador
; [ Início ]
;===============================================================================  
Add_Points_Player_One: ; Offset_0x040A5C:
                move.b  #$01, ($FFFFFE1F).w
                lea     ($FFFFFE26).w, A3
                add.l   D0, (A3)
                move.l  #$000F423F, D1
                cmp.l   (A3), D1
                bhi.s   Offset_0x040A74
                move.l  D1, (A3)
Offset_0x040A74:
                move.l  (A3), D0
                cmp.l   ($FFFFFFA0).w, D0
                bcs.s   Offset_0x040A96
                addi.l  #$00001388, ($FFFFFFA0).w
                addq.b  #$01, ($FFFFFE12).w
                addq.b  #$01, ($FFFFFE1C).w
                move.w  #Extra_Life_Snd, D0     ; $0098
                jmp     (Play_Music)                           ; Offset_0x00131A
Offset_0x040A96:
                rts        
;===============================================================================
; Sub Rotina para adicionar pontos ao HUD do primeiro jogador
; [ Término ]
;=============================================================================== 
                                      
;===============================================================================
; Sub Rotina para adicionar pontos ao HUD
; [ Início ]
;===============================================================================            
Add_Points: ; Offset_0x040A98:   
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Add_Points_Player_One                  ; Offset_0x040A5C
                cmpa.w  #$B000, A3  ; Testa qual o jogador deve ter sua pontuação bonificada 
                beq.s   Add_Points_Player_One                  ; Offset_0x040A5C
;-------------------------------------------------------------------------------
Add_Points_Player_Two: ; Offset_0x040AA4:               
                move.b  #$01, ($FFFFFECB).w
                lea     ($FFFFFED6).w, A3
                add.l   D0, (A3)
                move.l  #$000F423F, D1
                cmp.l   (A3), D1
                bhi.s   Offset_0x040ABC
                move.l  D1, (A3)
Offset_0x040ABC:
                move.l  (A3), D0
                cmp.l   ($FFFFFFA4).w, D0
                bcs.s   Exit_Add_Points                        ; Offset_0x040ADE
                addi.l  #$00001388, ($FFFFFFA4).w
                addq.b  #$01, ($FFFFFEC6).w
                addq.b  #$01, ($FFFFFEC8).w
                move.w  #Extra_Life_Snd, D0     ; $0098
                jmp     (Play_Music)                           ; Offset_0x00131A
Exit_Add_Points: ; Offset_0x040ADE:
                rts
;===============================================================================
; Sub Rotina para adicionar pontos ao HUD
; [ Término ]
;===============================================================================   
                
;===============================================================================
; Sub Rotina HudUpdate - Atualiza o display dos pontos, tempo, anéis, vidas...     
; [ Início ]
;===============================================================================   
HudUpdate: ; Offset_0x040AE0  
                nop
                lea     (VDP_Data_Port), A6                          ; $00C00000
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne     HUD_Update_2P                          ; Offset_0x040CA6
                tst.w   (Debug_Mode_Active).w                        ; $FFFFFFDA
                bne     Offset_0x040BF0
                tst.b   (HUD_Score_Refresh_Flag).w                   ; $FFFFFE1F
                beq.s   Offset_0x040B10
                clr.b   (HUD_Score_Refresh_Flag).w                   ; $FFFFFE1F
                move.l  #$5C800003, D0
                move.l  ($FFFFFE26).w, D1
                bsr     Offset_0x040E9A
Offset_0x040B10:
                tst.b   (HUD_Rings_Refresh_Flag).w                   ; $FFFFFE1D
                beq.s   Offset_0x040B30
                bpl.s   Offset_0x040B1C
                bsr     Offset_0x040DB0
Offset_0x040B1C:
                clr.b   (HUD_Rings_Refresh_Flag).w                   ; $FFFFFE1D
                move.l  #$5F400003, D0
                moveq   #$00, D1
                move.w  ($FFFFFE20).w, D1
                bsr     Offset_0x040E90
Offset_0x040B30:
                tst.b   (HUD_Timer_Refresh_Flag).w                   ; $FFFFFE1E
                beq.s   Offset_0x040B8E
                tst.w   ($FFFFF63A).w
                bne.s   Offset_0x040B8E
                lea     ($FFFFFE22).w, A1
                cmpi.l  #$00093B3B, (A1)+
                beq     Time_Over                              ; Offset_0x040BDA
                addq.b  #$01, -(A1)
                cmpi.b  #$3C, (A1)
                bcs.s   Offset_0x040B8E
                move.b  #$00, (A1)
                addq.b  #$01, -(A1)
                cmpi.b  #$3C, (A1)
                bcs.s   Offset_0x040B6E
                move.b  #$00, (A1)
                addq.b  #$01, -(A1)
                cmpi.b  #$09, (A1)
                bcs.s   Offset_0x040B6E
                move.b  #$09, (A1)
Offset_0x040B6E:
                move.l  #$5E400003, D0
                moveq   #$00, D1
                move.b  ($FFFFFE23).w, D1
                bsr     Offset_0x040F68
                move.l  #$5EC00003, D0
                moveq   #$00, D1
                move.b  ($FFFFFE24).w, D1
                bsr     Offset_0x040F72
Offset_0x040B8E:
                tst.b   ($FFFFFE1C).w
                beq.s   Offset_0x040B9C
                clr.b   ($FFFFFE1C).w
                bsr     Offset_0x04103C
Offset_0x040B9C:
                tst.b   ($FFFFF7D6).w
                beq.s   Offset_0x040BD8
                clr.b   ($FFFFF7D6).w
                move.l  #$64000002, (VDP_Control_Port)               ; $00C00004
                moveq   #$00, D1
                move.w  ($FFFFFF6E).w, D1
                bsr     Offset_0x040FCC
                moveq   #$00, D1
                move.w  ($FFFFF7D2).w, D1
                bsr     Offset_0x040FCC
                moveq   #$00, D1
                move.w  ($FFFFF7D4).w, D1
                bsr     Offset_0x040FCC
                moveq   #$00, D1
                move.w  ($FFFFFF72).w, D1
                bsr     Offset_0x040FCC
Offset_0x040BD8:
                rts
Time_Over: ; Offset_0x040BDA:
                clr.b   ($FFFFFE1E).w
                lea     ($FFFFB000).w, A0
                move.l  A0, A2
                bsr     Kill_Player                            ; Offset_0x03F690
                move.b  #$01, ($FFFFFE1A).w
                rts
Offset_0x040BF0:
                bsr     Offset_0x040E3A
                tst.b   ($FFFFFE1D).w
                beq.s   Offset_0x040C14
                bpl.s   Offset_0x040C00
                bsr     Offset_0x040DB0
Offset_0x040C00:
                clr.b   ($FFFFFE1D).w
                move.l  #$5F400003, D0
                moveq   #$00, D1
                move.w  ($FFFFFE20).w, D1
                bsr     Offset_0x040E90
Offset_0x040C14:
                move.l  #$5EC00003, D0
                moveq   #$00, D1
                move.b  ($FFFFF62C).w, D1
                bsr     Offset_0x040F72
                tst.b   ($FFFFFE1C).w
                beq.s   Offset_0x040C32
                clr.b   ($FFFFFE1C).w
                bsr     Offset_0x04103C
Offset_0x040C32:
                tst.b   ($FFFFF7D6).w
                beq.s   Offset_0x040C6E
                clr.b   ($FFFFF7D6).w
                move.l  #$64000002, (VDP_Control_Port)               ; $00C00004
                moveq   #$00, D1
                move.w  ($FFFFFF6E).w, D1
                bsr     Offset_0x040FCC
                moveq   #$00, D1
                move.w  ($FFFFF7D2).w, D1
                bsr     Offset_0x040FCC
                moveq   #$00, D1
                move.w  ($FFFFF7D4).w, D1
                bsr     Offset_0x040FCC
                moveq   #$00, D1
                move.w  ($FFFFFF72).w, D1
                bsr     Offset_0x040FCC
Offset_0x040C6E:
                tst.w   ($FFFFF63A).w
                bne.s   Offset_0x040CA4
                lea     ($FFFFFE22).w, A1
                cmpi.l  #$00093B3B, (A1)+
                nop
                addq.b  #$01, -(A1)
                cmpi.b  #$3C, (A1)
                bcs.s   Offset_0x040CA4
                move.b  #$00, (A1)
                addq.b  #$01, -(A1)
                cmpi.b  #$3C, (A1)
                bcs.s   Offset_0x040CA4
                move.b  #$00, (A1)
                addq.b  #$01, -(A1)
                cmpi.b  #$09, (A1)
                bcs.s   Offset_0x040CA4
                move.b  #$09, (A1)
Offset_0x040CA4:
                rts
HUD_Update_2P: ; Offset_0x040CA6:
                tst.w   ($FFFFF63A).w
                bne     Offset_0x040D70
                tst.b   ($FFFFFE1E).w
                beq.s   Offset_0x040CE6
                lea     ($FFFFFE22).w, A1
                cmpi.l  #$00093B3B, (A1)+
                beq     Time_Over_2P_Sonic                     ; Offset_0x040D80
                addq.b  #$01, -(A1)
                cmpi.b  #$3C, (A1)
                bcs.s   Offset_0x040CE6
                move.b  #$00, (A1)
                addq.b  #$01, -(A1)
                cmpi.b  #$3C, (A1)
                bcs.s   Offset_0x040CE6
                move.b  #$00, (A1)
                addq.b  #$01, -(A1)
                cmpi.b  #$09, (A1)
                bcs.s   Offset_0x040CE6
                move.b  #$09, (A1)
Offset_0x040CE6:
                tst.b   ($FFFFFECA).w
                beq.s   Offset_0x040D1E
                lea     ($FFFFFED2).w, A1
                cmpi.l  #$00093B3B, (A1)+
                beq     Timer_Over_2P_Miles                    ; Offset_0x040D9A
                addq.b  #$01, -(A1)
                cmpi.b  #$3C, (A1)
                bcs.s   Offset_0x040D1E
                move.b  #$00, (A1)
                addq.b  #$01, -(A1)
                cmpi.b  #$3C, (A1)
                bcs.s   Offset_0x040D1E
                move.b  #$00, (A1)
                addq.b  #$01, -(A1)
                cmpi.b  #$09, (A1)
                bcs.s   Offset_0x040D1E
                move.b  #$09, (A1)
Offset_0x040D1E:
                tst.b   ($FFFFFE1C).w
                beq.s   Offset_0x040D2C
                clr.b   ($FFFFFE1C).w
                bsr     Offset_0x04103C
Offset_0x040D2C:
                tst.b   ($FFFFFEC8).w
                beq.s   Offset_0x040D3A
                clr.b   ($FFFFFEC8).w
                bsr     Offset_0x04102E
Offset_0x040D3A:
                move.b  ($FFFFFE1E).w, D0
                or.b    ($FFFFFECA).w, D0
                beq.s   Offset_0x040D70
                lea     ($FFFFFEF8).w, A1
                tst.w   (A1)+
                beq.s   Offset_0x040D70
                subq.b  #$01, -(A1)
                bhi.s   Offset_0x040D70
                move.b  #$3C, (A1)
                cmpi.b  #$0C, $FFFF(A1)
                bne.s   Offset_0x040D66
                move.w  #Panic_Snd, D0          ; $009F
                jsr     (Play_Music)                           ; Offset_0x00131A
Offset_0x040D66:
                subq.b  #$01, -(A1)
                bcc.s   Offset_0x040D70
                move.w  #$0000, (A1)
                bsr.s   Offset_0x040D72  
Offset_0x040D70:
                rts
Offset_0x040D72:
                tst.b   ($FFFFFE1E).w
                bne.s   Time_Over_2P_Sonic                    ; OOffset_0x040D80
                tst.b   ($FFFFFECA).w
                bne.s   Timer_Over_2P_Miles                    ; Offset_0x040D9A
                rts
Time_Over_2P_Sonic: ; Offset_0x040D80:
                clr.b   ($FFFFFE1E).w
                lea     ($FFFFB000).w, A0
                move.l  A0, A2
                bsr     Kill_Player                            ; Offset_0x03F690
                move.b  #$01, ($FFFFFE1A).w
                tst.b   ($FFFFFECA).w
                beq.s   Offset_0x040DAE
Timer_Over_2P_Miles: ; Offset_0x040D9A:
                clr.b   ($FFFFFECA).w
                lea     ($FFFFB040).w, A0
                move.l  A0, A2
                bsr     Kill_Player                            ; Offset_0x03F690
                move.b  #$01, ($FFFFFECC).w
Offset_0x040DAE:
                rts   
Offset_0x040DB0:
                move.l  #$5F400003, (VDP_Control_Port)               ; $00C00004
                lea     HUD_Rings_Mask(PC), A2                 ; Offset_0x040E36
                move.w  #$0002, D2
                bra.s   Offset_0x040DE6 
;-------------------------------------------------------------------------------
Head_Up_Display_Base: ; Offset_0x040DC4:
                lea     (VDP_Data_Port), A6                          ; $00C00000
                bsr     Offset_0x04103C
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                bne.s   Offset_0x040E12
                move.l  #$5C400003, (VDP_Control_Port)               ; $00C00004
                lea     HUD_ScoreTime_Mask(PC), A2             ; Offset_0x040E2A
                move.w  #$000E, D2
Offset_0x040DE6:
                lea     HUD_Art_Numbers(PC), A1                ; Offset_0x0410A8
Offset_0x040DEA:                
                move.w  #$000F, D1
                move.b  (A2)+, D0
                bmi.s   Offset_0x040E06
                ext.w   D0
                lsl.w   #$05, D0
                lea     $00(A1, D0), A3
Offset_0x040DFA:                
                move.l  (A3)+, (A6)
                dbra    D1, Offset_0x040DFA
Offset_0x040E00:                
                dbra    D2, Offset_0x040DEA
                rts
Offset_0x040E06:
                move.l  #$00000000, (A6)
                dbra    D1, Offset_0x040E06
                bra.s   Offset_0x040E00
Offset_0x040E12:
                bsr     Offset_0x04102E
                move.l  #HUD_Art_Numbers, D1                   ; Offset_0x0410A8
                move.w  #$DC40, D2
                move.w  #$0160, D3
                jmp     (DMA_68KtoVRAM)                        ; Offset_0x00140A
;-------------------------------------------------------------------------------                
HUD_ScoreTime_Mask: ; Offset_0x040E2A:
                dc.l    $16FFFFFF, $FFFFFF00, $00140000  
HUD_Rings_Mask: ; Offset_0x040E36:   
                dc.l    $FFFF0000   
;-------------------------------------------------------------------------------
Offset_0x040E3A:
                move.l  #$5C400003, (VDP_Control_Port)               ; $00C00004
                move.w  ($FFFFEE00).w, D1
                swap.w  D1
                move.w  ($FFFFB008).w, D1
                bsr.s   Offset_0x040E5A
                move.w  ($FFFFEE04).w, D1
                swap.w  D1
                move.w  ($FFFFB00C).w, D1
Offset_0x040E5A:
                moveq   #$07, D6
                lea     (HUD_Art_Debug_Numbers), A1            ; Offset_0x0414E8
Offset_0x040E62:                
                rol.w   #$04, D1
                move.w  D1, D2
                andi.w  #$000F, D2
                cmpi.w  #$000A, D2
                bcs.s   Offset_0x040E72
                addq.w  #$07, D2
Offset_0x040E72:
                lsl.w   #$05, D2
                lea     $00(A1, D2), A3
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                swap.w  D1
                dbra    D6, Offset_0x040E62
                rts 
;-------------------------------------------------------------------------------                
Offset_0x040E90:
                lea     (HUD_Val_000100), A2                   ; Offset_0x040F5C
                moveq   #$02, D6
                bra.s   Offset_0x040EA2
Offset_0x040E9A:
                lea     (HUD_Val_100000), A2                   ; Offset_0x040F50
                moveq   #$05, D6
Offset_0x040EA2:
                moveq   #$00, D4
                lea     HUD_Art_Numbers(PC), A1                ; Offset_0x0410A8
Offset_0x040EA8:                
                moveq   #$00, D2
                move.l  (A2)+, D3
Offset_0x040EAC:                
                sub.l   D3, D1
                bcs.s   Offset_0x040EB4
                addq.w  #$01, D2
                bra.s   Offset_0x040EAC
Offset_0x040EB4:
                add.l   D3, D1
                tst.w   D2
                beq.s   Offset_0x040EBE
                move.w  #$0001, D4
Offset_0x040EBE:
                tst.w   D4
                beq.s   Offset_0x040EEC
                lsl.w   #$06, D2
                move.l  D0, $0004(A6)
                lea     $00(A1, D2), A3
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
Offset_0x040EEC:
                addi.l  #$00400000, D0
                dbra    D6, Offset_0x040EA8
                rts    
;-------------------------------------------------------------------------------
Time_Count_Down: ; Offset_0x040EF8:
                move.l  #$5F800003, (VDP_Control_Port)               ; $00C00004
                lea     (VDP_Data_Port), A6                          ; $00C00000
                lea     (HUD_Val_000010), A2                   ; Offset_0x040F60
                moveq   #$01, D6
                moveq   #$00, D4
                lea     HUD_Art_Numbers(PC), A1                ; Offset_0x0410A8
Offset_0x040F16:                
                moveq   #$00, D2
                move.l  (A2)+, D3
Offset_0x040F1A:                
                sub.l   D3, D1
                bcs.s   Offset_0x040F22
                addq.w  #$01, D2
                bra.s   Offset_0x040F1A
Offset_0x040F22:
                add.l   D3, D1
                lsl.w   #$06, D2
                lea     $00(A1, D2), A3
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                dbra    D6, Offset_0x040F16
                rts    
;-------------------------------------------------------------------------------                
HUD_Val_100000: ; Offset_0x040F50:
                dc.l    $000186A0
HUD_Val_010000: ; Offset_0x040F54:
                dc.l    $00002710
HUD_Val_001000: ; Offset_0x040F58:
                dc.l    $000003E8
HUD_Val_000100: ; Offset_0x040F5C:
                dc.l    $00000064
HUD_Val_000010: ; Offset_0x040F60:
                dc.l    $0000000A 
HUD_Val_000001: ; Offset_0x040F64:  
                dc.l    $00000001  
;-------------------------------------------------------------------------------
Offset_0x040F68:
                lea     (HUD_Val_000001), A2                   ; Offset_0x040F64
                moveq   #$00, D6
                bra.s   Offset_0x040F7A
Offset_0x040F72:
                lea     (HUD_Val_000010), A2                   ; Offset_0x040F60
                moveq   #$01, D6
Offset_0x040F7A:
                moveq   #$00, D4
                lea     HUD_Art_Numbers(PC), A1                ; Offset_0x0410A8
Offset_0x040F80:                
                moveq   #$00, D2
                move.l  (A2)+, D3
Offset_0x040F84:                
                sub.l   D3, D1
                bcs.s   Offset_0x040F8C
                addq.w  #$01, D2
                bra.s   Offset_0x040F84
Offset_0x040F8C:
                add.l   D3, D1
                tst.w   D2
                beq.s   Offset_0x040F96
                move.w  #$0001, D4
Offset_0x040F96:
                lsl.w   #$06, D2
                move.l  D0, $0004(A6)
                lea     $00(A1, D2), A3
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                addi.l  #$00400000, D0
                dbra    D6, Offset_0x040F80
                rts
;-------------------------------------------------------------------------------                
Offset_0x040FCC:
                lea     (HUD_Val_001000), A2                   ; Offset_0x040F58
                moveq   #$03, D6
                moveq   #$00, D4
                lea     HUD_Art_Numbers(PC), A1                ; Offset_0x0410A8
Offset_0x040FDA:                
                moveq   #$00, D2
                move.l  (A2)+, D3
Offset_0x040FDE:                
                sub.l   D3, D1
                bcs.s   Offset_0x040FE6
                addq.w  #$01, D2
                bra.s   Offset_0x040FDE
Offset_0x040FE6:
                add.l   D3, D1
                tst.w   D2
                beq.s   Offset_0x040FF0
                move.w  #$0001, D4
Offset_0x040FF0:
                tst.w   D4
                beq.s   Offset_0x041020
                lsl.w   #$06, D2
                lea     $00(A1, D2), A3
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
Offset_0x04101A:                
                dbra    D6, Offset_0x040FDA
                rts
Offset_0x041020:
                moveq   #$0F, D5
Offset_0x041022:                
                move.l  #$00000000, (A6)
                dbra    D5, Offset_0x041022
                bra.s   Offset_0x04101A
Offset_0x04102E:
                move.l  #$5FA00003, D0
                moveq   #$00, D1
                move.b  ($FFFFFEC6).w, D1
                bra.s   Offset_0x041048
Offset_0x04103C:
                move.l  #$7BA00003, D0
                moveq   #$00, D1
                move.b  ($FFFFFE12).w, D1
Offset_0x041048:
                lea     (HUD_Val_000010), A2                   ; Offset_0x040F60
                moveq   #$01, D6
                moveq   #$00, D4
                lea     HUD_Art_Life_Numbers(PC), A1           ; Offset_0x0413A8
Offset_0x041056:                
                move.l  D0, $0004(A6)
                moveq   #$00, D2     
                move.l  (A2)+, D3
Offset_0x04105E:                
                sub.l   D3, D1
                bcs.s   Offset_0x041066
                addq.w  #$01, D2
                bra.s   Offset_0x04105E
Offset_0x041066:
                add.l   D3, D1
                tst.w   D2
                beq.s   Offset_0x041070
                move.w  #$0001, D4
Offset_0x041070:
                tst.w   D4
                beq.s   Offset_0x041096
Offset_0x041074:                
                lsl.w   #$05, D2
                lea     $00(A1, D2), A3
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
Offset_0x04108A:                
                addi.l  #$00400000, D0
                dbra    D6, Offset_0x041056
                rts
Offset_0x041096:
                tst.w   D6
                beq.s   Offset_0x041074
                moveq   #$07, D5
Offset_0x04109C:                
                move.l  #$00000000, (A6)
                dbra    D5, Offset_0x04109C
                bra.s   Offset_0x04108A  
;-------------------------------------------------------------------------------                 
HUD_Art_Numbers: ; Offset_0x0410A8:  
                incbin  'data\sprites\hud_numb.dat'  
;-------------------------------------------------------------------------------                  
HUD_Art_Life_Numbers: ; Offset_0x0413A8:    
                incbin  'data\sprites\hud_num2.dat'  
;-------------------------------------------------------------------------------                                                     
HUD_Art_Debug_Numbers: ; Offset_0x0414E8:    
                incbin  'data\sprites\hud_debg.dat'                                 
;===============================================================================
; Sub Rotina HudUpdate - Atualiza o display dos pontos, tempo, anéis, vidas...     
; [ Término ]
;===============================================================================   

;===============================================================================
; Sub Rotina Debug_Mode - Rotina usada para depurar o jogo       
; [ Início ]
;===============================================================================                 
Debug_Mode: ; Offset_0x0417C8:
                moveq   #$00, D0
                move.b  ($FFFFFE08).w, D0
                move.w  Offset_0x0417D6(PC, D0), D1
                jmp     Offset_0x0417D6(PC, D1)
Offset_0x0417D6:
                dc.w    Offset_0x0417DA-Offset_0x0417D6
                dc.w    Offset_0x04185C-Offset_0x0417D6
Offset_0x0417DA:
                addq.b  #$02, ($FFFFFE08).w
                move.w  ($FFFFEECC).w, ($FFFFFFAC).w
                move.w  ($FFFFEEC6).w, ($FFFFFFAE).w
                cmpi.b  #$10, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x0417FE
                move.w  #$0000, ($FFFFEEC8).w
                move.w  #$3FFF, ($FFFFEECA).w
Offset_0x0417FE:
                andi.w  #$07FF, ($FFFFB00C).w
                andi.w  #$07FF, ($FFFFEE04).w
                andi.w  #$07FF, ($FFFFEE0C).w
                clr.b   ($FFFFEEBE).w
                move.b  #$00, $001A(A0)
                move.b  #$00, $001C(A0)
                cmpi.b  #gm_SpecialStage, (Game_Mode).w         ; $10, $FFFFF600
                bne.s   Offset_0x04182C
                moveq   #$06, D0
                bra.s   Offset_0x041832
Offset_0x04182C:
                moveq   #$00, D0                          
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
Offset_0x041832:
                lea     (Debug_Index), A2                      ; Offset_0x041A5E
                add.w   D0, D0
                adda.w  $00(A2, D0), A2
                move.w  (A2)+, D6
                cmp.b   ($FFFFFE06).w, D6
                bhi.s   Offset_0x04184C
                move.b  #$00, ($FFFFFE06).w
Offset_0x04184C:
                bsr     Offset_0x041A3C
                move.b  #$0C, ($FFFFFE0A).w
                move.b  #$01, ($FFFFFE0B).w
Offset_0x04185C:
                moveq   #$06, D0
                cmpi.b  #gm_SpecialStage, (Game_Mode).w         ; $10, $FFFFF600
                beq.s   Offset_0x04186C
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
Offset_0x04186C:
                lea     (Debug_Index), A2                      ; Offset_0x041A5E
                add.w   D0, D0
                adda.w  $00(A2, D0), A2
                move.w  (A2)+, D6
                bsr     Offset_0x041884
                jmp     (DisplaySprite)                        ; Offset_0x01647A
Offset_0x041884:
                moveq   #$00, D4
                move.w  #$0001, D1
                move.b  ($FFFFF605).w, D4
                andi.w  #$000F, D4
                bne.s   Offset_0x0418C6
                move.b  ($FFFFF604).w, D0
                andi.w  #$000F, D0
                bne.s   Offset_0x0418AE
                move.b  #$0C, ($FFFFFE0A).w
                move.b  #$0F, ($FFFFFE0B).w
                bra     Offset_0x04192A
Offset_0x0418AE:
                subq.b  #$01, ($FFFFFE0A).w
                bne.s   Offset_0x0418CA
                move.b  #$01, ($FFFFFE0A).w
                addq.b  #$01, ($FFFFFE0B).w
                bne.s   Offset_0x0418C6
                move.b  #$FF, ($FFFFFE0B).w
Offset_0x0418C6:
                move.b  ($FFFFF604).w, D4
Offset_0x0418CA:
                moveq   #$00, D1
                move.b  ($FFFFFE0B).w, D1
                addq.w  #$01, D1
                swap.w  D1
                asr.l   #$04, D1
                move.l  $000C(A0), D2
                move.l  $0008(A0), D3
                btst    #$00, D4
                beq.s   Offset_0x0418F4
                sub.l   D1, D2
                moveq   #$00, D0
                move.w  ($FFFFEECC).w, D0
                swap.w  D0
                cmp.l   D0, D2
                bge.s   Offset_0x0418F4
                move.l  D0, D2
Offset_0x0418F4:
                btst    #$01, D4
                beq.s   Offset_0x04190E
                add.l   D1, D2
                moveq   #$00, D0
                move.w  ($FFFFEEC6).w, D0
                addi.w  #$00DF, D0
                swap.w  D0
                cmp.l   D0, D2
                blt.s   Offset_0x04190E
                move.l  D0, D2
Offset_0x04190E:
                btst    #$02, D4
                beq.s   Offset_0x04191A
                sub.l   D1, D3
                bcc.s   Offset_0x04191A
                moveq   #$00, D3
Offset_0x04191A:
                btst    #$03, D4
                beq.s   Offset_0x041922
                add.l   D1, D3
Offset_0x041922:
                move.l  D2, $000C(A0)
                move.l  D3, $0008(A0)
Offset_0x04192A:
                btst    #$06, ($FFFFF604).w
                beq.s   Offset_0x041962
                btst    #$05, ($FFFFF605).w
                beq.s   Offset_0x041946
                subq.b  #$01, ($FFFFFE06).w
                bcc.s   Offset_0x04195E
                add.b   D6, ($FFFFFE06).w
                bra.s   Offset_0x04195E
Offset_0x041946:
                btst    #$06, ($FFFFF605).w
                beq.s   Offset_0x041962
                addq.b  #$01, ($FFFFFE06).w
                cmp.b   ($FFFFFE06).w, D6
                bhi.s   Offset_0x04195E
                move.b  #$00, ($FFFFFE06).w
Offset_0x04195E:
                bra     Offset_0x041A3C
Offset_0x041962:
                btst    #$05, ($FFFFF605).w
                beq.s   Offset_0x0419A6
                jsr     (SingleObjectLoad)                     ; Offset_0x017F48
                bne.s   Offset_0x0419A6
                move.w  $0008(A0), $0008(A1)
                move.w  $000C(A0), $000C(A1)
                move.b  $0004(A0), $0000(A1)
                move.b  $0001(A0), $0001(A1)
                move.b  $0001(A0), $0022(A1)
                andi.b  #$7F, $0022(A1)
                moveq   #$00, D0
                move.b  ($FFFFFE06).w, D0
                lsl.w   #$03, D0
                move.b  $04(A2, D0), $0028(A1)
                rts
Offset_0x0419A6:
                btst    #$04, ($FFFFF605).w
                beq.s   Offset_0x041A06
                moveq   #$00, D0
                move.w  D0, ($FFFFFE08).w
                lea     ($FFFFB000).w, A1
                move.l  #Sonic_Mappings, $0004(A1)            ; Offset_0x006FBE0
                move.w  #$0780, $0002(A1)
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFB8
                beq.s   Offset_0x0419D2
                move.w  #$03C0, $0002(A1)
Offset_0x0419D2:
                bsr.s   Offset_0x041A08
                move.b  #$13, $0016(A1)
                move.b  #$09, $0017(A1)
                move.w  ($FFFFFFAC).w, ($FFFFEECC).w
                move.w  ($FFFFFFAE).w, ($FFFFEEC6).w
                cmpi.b  #gm_SpecialStage, (Game_Mode).w         ; $10, $FFFFF600
                bne.s   Offset_0x041A06
                move.b  #$02, ($FFFFB01C).w
                bset    #$02, ($FFFFB022).w
                bset    #$01, ($FFFFB022).w
Offset_0x041A06:
                rts
Offset_0x041A08:
                move.b  D0, $001C(A1)
                move.w  D0, $000A(A1)
                move.w  D0, $000E(A1)
                move.b  D0, $002A(A1)
                move.b  D0, $0039(A1)
                move.w  D0, $0010(A1)
                move.w  D0, $0012(A1)
                move.w  D0, $0014(A1)
                move.b  #$02, $0022(A1)
                move.b  #$02, $0024(A1)
                move.b  #$00, $0025(A1)
                rts
Offset_0x041A3C:
                moveq   #$00, D0
                move.b  ($FFFFFE06).w, D0
                lsl.w   #$03, D0
                move.l  $00(A2, D0), $0004(A0)
                move.w  $06(A2, D0), $0002(A0)
                move.b  $05(A2, D0), $001A(A0)
                jsr     (ModifySpriteAttr_2P)                  ; Offset_0x016CFA
                rts    
;-------------------------------------------------------------------------------                
Debug_Index: ; Offset_0x041A5E:                 
                dc.w    Debug_EHz-Debug_Index                  ; Offset_0x041A92
                dc.w    Debug_Null-Debug_Index                 ; Offset_0x041A80
                dc.w    Debug_Null-Debug_Index                 ; Offset_0x041A80
                dc.w    Debug_Null-Debug_Index                 ; Offset_0x041A80
                dc.w    Debug_Mz-Debug_Index                   ; Offset_0x041B2C
                dc.w    Debug_Mz-Debug_Index                   ; Offset_0x041B2C
                dc.w    Debug_WFz-Debug_Index                  ; Offset_0x041C3E
                dc.w    Debug_HTz-Debug_Index                  ; Offset_0x041D40
                dc.w    Debug_OOz-Debug_Index                  ; Offset_0x041E3A
                dc.w    Debug_Null-Debug_Index                 ; Offset_0x041A80
                dc.w    Debug_OOz-Debug_Index                  ; Offset_0x041E3A
                dc.w    Debug_MCz-Debug_Index                  ; Offset_0x041F44
                dc.w    Debug_CNz-Debug_Index                  ; Offset_0x042006
                dc.w    Debug_CPz-Debug_Index                  ; Offset_0x0420C8
                dc.w    Debug_Null-Debug_Index                 ; Offset_0x041A80
                dc.w    Debug_ARz-Debug_Index                  ; Offset_0x04218A
                dc.w    Debug_SCz-Debug_Index                  ; Offset_0x042274
;-------------------------------------------------------------------------------
Debug_Null: ; Offset_0x041A80:                                              
                dc.w    (((Debug_Null_End-Debug_Null-$02)/$08)) ; Auto Detect Number of Objects Esrael L. G. Neto                
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x012328
                dc.b    $00, $00
                dc.w    $26BC 
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x012CD0 
                dc.b    $08, $00
                dc.w    $0680
Debug_Null_End:  
;-------------------------------------------------------------------------------   
Debug_EHz: ; Offset_0x041A92:
                dc.w    (((Debug_EHz_End-Debug_EHz-$02)/$08)) ; Auto Detect Number of Objects Esrael L. G. Neto                              
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x012328
                dc.b    $00, $00
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x012CD0  
                dc.b    $08, $00
                dc.w    $0680
                dc.l    ($79<<$18)|Star_Post_Mappings          ; Offset_0x01F3B8
                dc.b    $01, 00
                dc.w    $047C
                dc.l    ($03<<$18)|Layer_Switch_Mappings       ; Offset_0x01FF16
                dc.b    $09, $01
                dc.w    $26BC
                dc.l    ($49<<$18)|Waterfall_Mappings          ; Offset_0x020B84
                dc.b    $00, $00
                dc.w    $239E
                dc.l    ($49<<$18)|Waterfall_Mappings          ; Offset_0x020B84
                dc.b    $02, $03
                dc.w    $239E
                dc.l    ($49<<$18)|Waterfall_Mappings          ; Offset_0x020B84                  
                dc.b    $04, $05
                dc.w    $239E
                dc.l    ($18<<$18)|EHz_HTz_Platform_Mappings   ; Offset_0x0107C4
                dc.b    $01, $00
                dc.w    $4000
                dc.l    ($18<<$18)|EHz_HTz_Platform_Mappings   ; Offset_0x0107C4
                dc.b    $9A, $01
                dc.w    $4000
                dc.l    ($36<<$18)|Spikes_Mappings             ; Offset_0x015AF2
                dc.b    $00, $00
                dc.w    $2434
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C                
                dc.b    $81, $00
                dc.w    $045C
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C 
                dc.b    $90, $03
                dc.w    $0470
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C 
                dc.b    $A0, $06
                dc.w    $045C
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C 
                dc.b    $30, $07
                dc.w    $043C
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C                 
                dc.b    $40, $0A
                dc.w    $043C
                dc.l    ($4B<<$18)|Buzzer_Mappings             ; Offset_0x02CEC4
                dc.b    $00, $00
                dc.w    $03D2
                dc.l    ($5C<<$18)|Masher_Mappings             ; Offset_0x02D002
                dc.b    $00, $00
                dc.w    $0414
                dc.l    ($9D<<$18)|Coconuts_Mappings           ; Offset_0x03787E
                dc.b    $1E, $00
                dc.w    $03EE
                dc.l    ($3E<<$18)|Egg_Prison_Mappings         ; Offset_0x03F1AC
                dc.b    $00, $00
                dc.w    $2680
Debug_EHz_End:
;-------------------------------------------------------------------------------  
Debug_Mz: ; Offset_0x041B2C:
                dc.w    (((Debug_Mz_End-Debug_Mz-$02)/$08)) ; Auto Detect Number of Objects Esrael L. G. Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x012328
                dc.b    $00, $00  
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x012CD0    
                dc.b    $08, $00
                dc.w    $0680                     
                dc.l    ($79<<$18)|Star_Post_Mappings          ; Offset_0x01F3B8
                dc.b    $01, 00
                dc.w    $047C                   
                dc.l    ($03<<$18)|Layer_Switch_Mappings       ; Offset_0x01FF16
                dc.b    $09, $01
                dc.w    $26BC
                dc.l    ($42<<$18)|Steam_Vent_Mappings         ; Offset_0x02669E                 
                dc.b    $01, $07
                dc.w    $6000
                dc.l    ($64<<$18)|Pistons_Mappings            ; Offset_0x02686E
                dc.b    $01, $00
                dc.w    $2000
                dc.l    ($64<<$18)|Pistons_Mappings            ; Offset_0x02686E                
                dc.b    $11, $01
                dc.w    $2000
                dc.l    ($65<<$18)|Mz_Platform_Mappings        ; Offset_0x026CD4
                dc.b    $80, $00
                dc.w    $6000
                dc.l    ($65<<$18)|Mz_Platform_Mappings        ; Offset_0x026CD4
                dc.b    $13, $01
                dc.w    $6000
                dc.l    ($47<<$18)|Switch_Mappings             ; Offset_0x024C34 
                dc.b    $00, $02
                dc.w    $0424
                dc.l    ($2D<<$18)|Automatic_Door_Mappings     ; Offset_0x0117D6
                dc.b    $01, $01
                dc.w    $6000
                dc.l    ($66<<$18)|Springs_Wall_Mappings       ; Offset_0x026F20
                dc.b    $01, $00
                dc.w    $8680
                dc.l    ($66<<$18)|Springs_Wall_Mappings       ; Offset_0x026F20
                dc.b    $11, $01
                dc.w    $8680
                dc.l    ($68<<$18)|Block_Harpon_Mappings       ; Offset_0x02753C 
                dc.b    $00, $04
                dc.w    $6414
                dc.l    ($69<<$18)|Screw_Nut_Mappings          ; Offset_0x027800
                dc.b    $04, $00
                dc.w    $2500
                dc.l    ($6A<<$18)|Mz_Platform_Mappings        ; Offset_0x026CD4
                dc.b    $00, $01
                dc.w    $6000
                dc.l    ($6B<<$18)|Mz_Platform_Mappings        ; Offset_0x026CD4
                dc.b    $07, $01
                dc.w    $6000
                dc.l    ($6D<<$18)|Block_Harpon_Mappings       ; Offset_0x02753C
                dc.b    $00, $00
                dc.w    $241C
                dc.l    ($6E<<$18)|Machine_Mappings            ; Offset_0x0282B2
                dc.b    $00, $00
                dc.w    $6000
                dc.l    ($6E<<$18)|Machine_Mappings            ; Offset_0x0282B2 
                dc.b    $10, $01
                dc.w    $6000
                dc.l    ($6E<<$18)|Machine_Mappings            ; Offset_0x0282B2
                dc.b    $20, $02
                dc.w    $6000
                dc.l    ($70<<$18)|Rotating_Gears_Mappings     ; Offset_0x028506 
                dc.b    $10, $00
                dc.w    $E378
                dc.l    ($71<<$18)|Mz_Lava_Bubble_Mappings     ; Offset_0x011528
                dc.b    $22, $05
                dc.w    $4536
                dc.l    ($1C<<$18)|Mz_Misc_Mappings            ; Offset_0x011504
                dc.b    $00, $00
                dc.w    $43FD
                dc.l    ($1C<<$18)|Mz_Misc_Mappings            ; Offset_0x011504
                dc.b    $01, $01
                dc.w    $43FD
                dc.l    ($1C<<$18)|Mz_Misc_Mappings            ; Offset_0x011504
                dc.b    $03, $02
                dc.w    $23FD
                dc.l    ($65<<$18)|Mz_Platform_Mappings        ; Offset_0x026CD4                   
                dc.b    $B0, $00
                dc.w    $6000                   
                dc.l    ($9F<<$18)|Shellcracker_Mappings       ; Offset_0x037E2C
                dc.b    $24, $00
                dc.w    $031C
                dc.l    ($A4<<$18)|Asteron_Mappings            ; Offset_0x0385FC
                dc.b    $2E, $00
                dc.w    $8368
                dc.l    ($A1<<$18)|Slicer_Mappings             ; Offset_0x03811E
                dc.b    $28, $00
                dc.w    $243C
                dc.l    ($31<<$18)|Lava_Attributes_Mappings    ; Offset_0x020DAA
                dc.b    $00, $00
                dc.w    $8680
                dc.l    ($31<<$18)|Lava_Attributes_Mappings    ; Offset_0x020DAA
                dc.b    $01, $01
                dc.w    $8680
                dc.l    ($31<<$18)|Lava_Attributes_Mappings    ; Offset_0x020DAA
                dc.b    $02, $02
                dc.w    $8680
                dc.l    ($3E<<$18)|Egg_Prison_Mappings         ; Offset_0x03F1AC
                dc.b    $00, $00
                dc.w    $2680
Debug_Mz_End:   
;-------------------------------------------------------------------------------        
Debug_WFz: ; Offset_0x041C3E: 
                dc.w    (((Debug_WFz_End-Debug_WFz-$02)/$08)) ; Auto Detect Number of Objects Esrael L. G. Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x012328
                dc.b    $00, $00  
                dc.w    $26BC                              
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x012CD0    
                dc.b    $08, $00
                dc.w    $0680                                       
                dc.l    ($8B<<$18)|Layer_Switch_Mappings       ; Offset_0x01FF16
                dc.b    $00, $00
                dc.w    $06BC                    
                dc.l    ($79<<$18)|Star_Post_Mappings          ; Offset_0x01F3B8
                dc.b    $01, 00
                dc.w    $047C     
                dc.l    ($B3<<$18)|Clouds_Mappings             ; Offset_0x03AF80       
                dc.b    $5E, $00
                dc.w    $454F
                dc.l    ($B3<<$18)|Clouds_Mappings             ; Offset_0x03AF80  
                dc.b    $60, $01
                dc.w    $454F
                dc.l    ($B3<<$18)|Clouds_Mappings             ; Offset_0x03AF80  
                dc.b    $62, $02
                dc.w    $454F
                dc.l    ($B4<<$18)|Vertical_Helix_Mappings     ; Offset_0x03B018
                dc.b    $64, $00
                dc.w    $A561
                dc.l    ($B5<<$18)|Horizontal_Helix_Mappings   ; Offset_0x03B1AA
                dc.b    $66, $00
                dc.w    $A3CD
                dc.l    ($B5<<$18)|Horizontal_Helix_Mappings   ; Offset_0x03B1AA
                dc.b    $68, $00
                dc.w    $A3CD
                dc.l    ($AD<<$18)|Clucker_Mappings            ; Offset_0x039176                
                dc.b    $42, $0C
                dc.w    $0379
                dc.l    ($AE<<$18)|Clucker_Mappings            ; Offset_0x039176    
                dc.b    $44, $0B
                dc.w    $0379
                dc.l    ($B6<<$18)|Platform_Helix_Mappings     ; Offset_0x03B4CE
                dc.b    $6A, $00
                dc.w    $A393
                dc.l    ($B6<<$18)|Platform_Helix_Mappings     ; Offset_0x03B4CE
                dc.b    $6C, $00
                dc.w    $A393
                dc.l    ($B6<<$18)|Platform_Helix_Mappings     ; Offset_0x03B4CE
                dc.b    $6E, $00
                dc.w    $A393
                dc.l    ($B6<<$18)|Platform_Helix_Mappings     ; Offset_0x03B4CE
                dc.b    $70, $00
                dc.w    $A393
                dc.l    ($B7<<$18)|Vertical_Large_Laser_Mappings ; Offset_0x03B55E
                dc.b    $72, $00
                dc.w    $C39F
                dc.l    ($B8<<$18)|WFz_Cannon_Mappings         ; Offset_0x03B6CA 
                dc.b    $74, $00
                dc.w    $03AB
                dc.l    ($B9<<$18)|Laser_Mappings              ; Offset_0x03B7A2
                dc.b    $76, $00
                dc.w    $C3C3
                dc.l    ($BA<<$18)|Conveyor_Belt_Wheels_Mappings ; Offset_0x03B7FC
                dc.b    $78, $00
                dc.w    $C3EA
                dc.l    ($BC<<$18)|Ship_Boost_Mappings         ; Offset_0x03B898
                dc.b    $7C, $00
                dc.w    $4465
                dc.l    ($BD<<$18)|WFz_Elevators_Mappings      ; Offset_0x03B9DC 
                dc.b    $7E, $00
                dc.w    $E40E
                dc.l    ($BD<<$18)|WFz_Elevators_Mappings      ; Offset_0x03B9DC                
                dc.b    $80, $00
                dc.w    $E40E
                dc.l    ($BE<<$18)|Hatchway_Mappings           ; Offset_0x03BAF4
                dc.b    $82, $00
                dc.w    $E41A
                dc.l    ($BF<<$18)|Engine_Part_Mappings        ; Offset_0x03BB92
                dc.b    $84, $00
                dc.w    $E450
                dc.l    ($C0<<$18)|Speed_Booster_Mappings      ; Offset_0x03BD52
                dc.b    $08, $00
                dc.w    $245C
                dc.l    ($C1<<$18)|Breakable_Wall_Mappings     ; Offset_0x03BF42
                dc.b    $88, $00
                dc.w    $E48C
                dc.l    ($C2<<$18)|WFz_Boss_Access_Switch_Mappings ; Offset_0x03C08A
                dc.b    $8A, $00
                dc.w    $A461
                dc.l    ($19<<$18)|Rotating_Platforms_Mappings ; Offset_0x022146
                dc.b    $38, $03
                dc.w    $A46D
                dc.l    ($D9<<$18)|Rings_Mappings              ; Offset_0x012328
                dc.b    $00, $00
                dc.w    $26BC
                dc.l    ($80<<$18)|Chain_Hook_Mappings         ; Offset_0x029AB0
                dc.b    $00, $00
                dc.w    $23FE
                dc.l    ($3E<<$18)|Egg_Prison_Mappings         ; Offset_0x03F1AC
                dc.b    $00, $00
                dc.w    $2680
Debug_WFz_End:                
;-------------------------------------------------------------------------------  
Debug_HTz: ; Offset_0x041D40:
                dc.w    (((Debug_HTz_End-Debug_HTz-$02)/$08)) ; Auto Detect Number of Objects Esrael L. G. Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x012328
                dc.b    $00, $00  
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x012CD0    
                dc.b    $08, $00
                dc.w    $0680                     
                dc.l    ($79<<$18)|Star_Post_Mappings          ; Offset_0x01F3B8
                dc.b    $01, 00
                dc.w    $047C                   
                dc.l    ($84<<$18)|Layer_Switch_Mappings       ; Offset_0x01FF16
                dc.b    $00, $00
                dc.w    $06BC     
                dc.l    ($84<<$18)|Layer_Switch_Mappings       ; Offset_0x01FF16
                dc.b    $04, $04
                dc.w    $06BC
                dc.l    ($03<<$18)|Layer_Switch_Mappings       ; Offset_0x01FF16
                dc.b    $09, $01
                dc.w    $26BC
                dc.l    ($18<<$18)|EHz_HTz_Platform_Mappings   ; Offset_0x0107C4
                dc.b    $01, $00
                dc.w    $4000
                dc.l    ($18<<$18)|EHz_HTz_Platform_Mappings   ; Offset_0x0107C4
                dc.b    $9A, $01
                dc.w    $4000
                dc.l    ($36<<$18)|Spikes_Mappings             ; Offset_0x015AF2
                dc.b    $00, $00
                dc.w    $2434
                dc.l    ($14<<$18)|See_Saw_Mappings            ; Offset_0x021C2A             
                dc.b    $00, $00
                dc.w    $03C6
                dc.l    ($2D<<$18)|Automatic_Door_Mappings     ; Offset_0x0117D6
                dc.b    $00, $00
                dc.w    $2426
                dc.l    ($2F<<$18)|Breakable_Floor_Mappings    ; Offset_0x0235FC 
                dc.b    $00, $00
                dc.w    $C000
                dc.l    ($20<<$18)|Lava_Bubble_Mappings        ; Offset_0x023160
                dc.b    $44, $02
                dc.w    $8416                  
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C                 
                dc.b    $81, $00
                dc.w    $045C                     
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C  
                dc.b    $90, $03
                dc.w    $0470                  
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C  
                dc.b    $A0, $06
                dc.w    $045C                  
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C  
                dc.b    $30, $07
                dc.w    $043C                       
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C                  
                dc.b    $40, $0A
                dc.w    $043C
                dc.l    ($16<<$18)|Teleferics_Mappings         ; Offset_0x021E42
                dc.b    $00, $00
                dc.w    $43E6
                dc.l    ($1C<<$18)|Teleferics_Mappings         ; Offset_0x021E42
                dc.b    $04, $03
                dc.w    $43E6
                dc.l    ($1C<<$18)|Teleferics_Mappings         ; Offset_0x021E42
                dc.b    $05, $04
                dc.w    $43E6
                dc.l    ($1C<<$18)|HTz_Misc_Mappings           ; Offset_0x011388
                dc.b    $07, $00
                dc.w    $4000
                dc.l    ($1C<<$18)|HTz_Misc_Mappings           ; Offset_0x011388
                dc.b    $08, $01
                dc.w    $4000
                dc.l    ($32<<$18)|HTz_Rock_Mappings           ; Offset_0x023754
                dc.b    $00, $00
                dc.w    $43B2
                dc.l    ($31<<$18)|Lava_Attributes_Mappings    ; Offset_0x020DAA
                dc.b    $00, $00
                dc.w    $8680
                dc.l    ($31<<$18)|Lava_Attributes_Mappings    ; Offset_0x020DAA
                dc.b    $01, $01
                dc.w    $8680
                dc.l    ($31<<$18)|Lava_Attributes_Mappings    ; Offset_0x020DAA                
                dc.b    $02, $02
                dc.w    $8680
                dc.l    ($96<<$18)|Rexon_Mappings              ; Offset_0x037120
                dc.b    $0E, $02
                dc.w    $637E
                dc.l    ($92<<$18)|Spiker_Mappings             ; Offset_0x036B00
                dc.b    $0A, $00
                dc.w    $0000
                dc.l    ($95<<$18)|Sol_Mappings                ; Offset_0x036D70
                dc.b    $00, $00
                dc.w    $0000
                dc.l    ($3E<<$18)|Egg_Prison_Mappings         ; Offset_0x03F1AC
                dc.b    $00, $00
                dc.w    $2680
Debug_HTz_End:                
;------------------------------------------------------------------------------- 
Debug_OOz: ; Offset_0x041E3A:
                dc.w    (((Debug_OOz_End-Debug_OOz-$02)/$08)) ; Auto Detect Number of Objects Esrael L. G. Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x012328
                dc.b    $00, $00  
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x012CD0    
                dc.b    $08, $00
                dc.w    $0680                     
                dc.l    ($79<<$18)|Star_Post_Mappings          ; Offset_0x01F3B8
                dc.b    $01, 00
                dc.w    $047C      
                dc.l    ($33<<$18)|Touch_Booster_Mappings      ; Offset_0x023CB2 
                dc.b    $01, $00
                dc.w    $632C
                dc.l    ($43<<$18)|Giant_Spikeball_Mappings    ; Offset_0x023EA6
                dc.b    $00, $00
                dc.w    $C30C
                dc.l    ($19<<$18)|Rotating_Platforms_Mappings ; Offset_0x022146
                dc.b    $23, $02
                dc.w    $62F4
                dc.l    ($45<<$18)|Spring_Push_Boost_Mappings  ; Offset_0x0243D4                
                dc.b    $02, $00
                dc.w    $43C5
                dc.l    ($45<<$18)|Spring_Push_Boost_Mappings  ; Offset_0x0243D4  
                dc.b    $12, $0A
                dc.w    $43C5
                dc.l    ($46<<$18)|Spring_Ball_Mappings        ; Offset_0x024B1C
                dc.b    $00, $01
                dc.w    $6354
                dc.l    ($47<<$18)|Switch_Mappings             ; Offset_0x024C34
                dc.b    $00, $02
                dc.w    $0424
                dc.l    ($15<<$18)|OOz_Swing_Platforms_Mappings ; Offset_0x0101CC
                dc.b    $88, $01
                dc.w    $43E3
                dc.l    ($3D<<$18)|Break_Boost_Mappings        ; Offset_0x024F50
                dc.b    $00, $00
                dc.w    $6332
                dc.l    ($48<<$18)|Cannon_Mappings             ; Offset_0x025376
                dc.b    $80, $00
                dc.w    $6368
                dc.l    ($48<<$18)|Cannon_Mappings             ; Offset_0x025376
                dc.b    $81, $01
                dc.w    $6368
                dc.l    ($48<<$18)|Cannon_Mappings             ; Offset_0x025376
                dc.b    $82, $02
                dc.w    $6368
                dc.l    ($48<<$18)|Cannon_Mappings             ; Offset_0x025376
                dc.b    $83, $03
                dc.w    $6368
                dc.l    ($1F<<$18)|OOz_Collapsing_Platforms_Mappings ; Offset_0x011084
                dc.b    $00, $00
                dc.w    $639D
                dc.l    ($3F<<$18)|Vertical_Fan_Mappings       ; Offset_0x02A696
                dc.b    $00, $00
                dc.w    $6403
                dc.l    ($3F<<$18)|Horizontal_Fan_Mappings     ; Offset_0x02A748
                dc.b    $80, $00
                dc.w    $6403
                dc.l    ($50<<$18)|Aquis_Mappings              ; Offset_0x02CB8A
                dc.b    $00, $00
                dc.w    $2500 
                dc.l    ($4A<<$18)|Octus_Mappings              ; Offset_0x02C7FA
                dc.b    $00, $00
                dc.w    $2538
                dc.l    ($1C<<$18)|OOz_Misc_Mappings           ; Offset_0x0113B8
                dc.b    $0A, $00
                dc.w    $4346
                dc.l    ($1C<<$18)|OOz_Misc_Mappings           ; Offset_0x0113B8
                dc.b    $0B, $01
                dc.w    $4346
                dc.l    ($1C<<$18)|OOz_Misc_Mappings           ; Offset_0x0113B8
                dc.b    $0C, $02
                dc.w    $4346
                dc.l    ($1C<<$18)|OOz_Misc_Mappings           ; Offset_0x0113B8 
                dc.b    $0D, $03
                dc.w    $4346
                dc.l    ($1C<<$18)|OOz_Misc_Mappings           ; Offset_0x0113B8 
                dc.b    $0E, $04
                dc.w    $4346
                dc.l    ($1C<<$18)|OOz_Misc_Mappings           ; Offset_0x0113B8 
                dc.b    $0F, $05
                dc.w    $4346
                dc.l    ($1C<<$18)|OOz_Misc_Mappings_01        ; Offset_0x011460                
                dc.b    $10, $00
                dc.w    $4346
                dc.l    ($1C<<$18)|OOz_Misc_Mappings_01        ; Offset_0x011460    
                dc.b    $11, $01
                dc.w    $4346
                dc.l    ($1C<<$18)|OOz_Misc_Mappings_01        ; Offset_0x011460  
                dc.b    $12, $02
                dc.w    $4346
                dc.l    ($1C<<$18)|OOz_Misc_Mappings_01        ; Offset_0x011460  
                dc.b    $13, $03
                dc.w    $4346
                dc.l    ($1C<<$18)|OOz_Misc_Mappings_01        ; Offset_0x011460  
                dc.b    $14, $04
                dc.w    $4346
                dc.l    ($3E<<$18)|Egg_Prison_Mappings         ; Offset_0x03F1AC
                dc.b    $00, $00
                dc.w    $2680                  
Debug_OOz_End:                
;-------------------------------------------------------------------------------
Debug_MCz: ; Offset_0x041F44: 
                dc.w    (((Debug_MCz_End-Debug_MCz-$02)/$08)) ; Auto Detect Number of Objects Esrael L. G. Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x012328
                dc.b    $00, $00  
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x012CD0    
                dc.b    $08, $00
                dc.w    $0680                     
                dc.l    ($79<<$18)|Star_Post_Mappings          ; Offset_0x01F3B8
                dc.b    $01, 00
                dc.w    $047C      
                dc.l    ($15<<$18)|MCz_Swing_Platforms_Mappings ; Offset_0x01023A
                dc.b    $48, $02
                dc.w    $0000
                dc.l    ($1F<<$18)|MCz_Collapsing_Platforms_Mappings ; Offset_0x0110C4
                dc.b    $00, $00
                dc.w    $63F4   
                dc.l    ($73<<$18)|Rotating_Rings_Mappings     ; Offset_0x02890E               
                dc.b    $F5, $00
                dc.w    $26BC  
                dc.l    ($6A<<$18)|Rotating_Boxes_Mappings     ; Offset_0x027AF6                
                dc.b    $18, $00
                dc.w    $63D4
                dc.l    ($2A<<$18)|Up_Down_Pillar_Mappings     ; Offset_0x011618
                dc.b    $00, $00
                dc.w    $4000
                dc.l    ($36<<$18)|Spikes_Mappings             ; Offset_0x015AF2
                dc.b    $00, $00
                dc.w    $2434    
                dc.l    ($36<<$18)|Spikes_Mappings             ; Offset_0x015AF2
                dc.b    $40, $04
                dc.w    $242C                  
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C                 
                dc.b    $81, $00
                dc.w    $045C                               
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C  
                dc.b    $90, $03
                dc.w    $0470    
                dc.l    ($40<<$18)|Diagonal_Spring_Mappings    ; Offset_0x02642C                                         
                dc.b    $01, $00
                dc.w    $0440
                dc.l    ($74<<$18)|Invisible_Block_Mappings    ; Offset_0x020E9E
                dc.b    $11, $00
                dc.w    $8680
                dc.l    ($75<<$18)|Spikeball_Chain_Mappings    ; Offset_0x028AF0
                dc.b    $18, $02
                dc.w    $2000
                dc.l    ($76<<$18)|Platform_Spikes_Mappings    ; Offset_0x028C70
                dc.b    $00, $00
                dc.w    $0000
                dc.l    ($77<<$18)|MCz_Bridge_Mappings         ; Offset_0x028D88 
                dc.b    $01, $00
                dc.w    $643C
                dc.l    ($7F<<$18)|Vines_Switch_Mappings       ; Offset_0x02961C 
                dc.b    $00, $00
                dc.w    $640E
                dc.l    ($80<<$18)|Vines_Mappings              ; Offset_0x029944 
                dc.b    $00, $00
                dc.w    $641E
                dc.l    ($81<<$18)|Vertical_Bridge_Mappings    ; Offset_0x029F34
                dc.b    $00, $01
                dc.w    $643C
                dc.l    ($7A<<$18)|MCz_Swing_Platforms_Mappings ; Offset_0x01023A 
                dc.b    $12, $00
                dc.w    $0000
                dc.l    ($A3<<$18)|Flasher_Mappings            ; Offset_0x038448
                dc.b    $2C, $00
                dc.w    $83A8
                dc.l    ($9E<<$18)|Crawlton_Mappings           ; Offset_0x037AEE
                dc.b    $22, $00
                dc.w    $23C0
                dc.l    ($3E<<$18)|Egg_Prison_Mappings         ; Offset_0x03F1AC
                dc.b    $00, $00
                dc.w    $2680 
Debug_MCz_End:                
;-------------------------------------------------------------------------------
Debug_CNz: ; Offset_0x042006:
                dc.w    (((Debug_CNz_End-Debug_CNz-$02)/$08)) ; Auto Detect Number of Objects Esrael L. G. Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x012328
                dc.b    $00, $00  
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x012CD0    
                dc.b    $08, $00
                dc.w    $0680                                   
                dc.l    ($79<<$18)|Star_Post_Mappings          ; Offset_0x01F3B8
                dc.b    $01, 00
                dc.w    $047C                                
                dc.l    ($84<<$18)|Layer_Switch_Mappings       ; Offset_0x01FF16
                dc.b    $00, $00
                dc.w    $06BC                     
                dc.l    ($84<<$18)|Layer_Switch_Mappings       ; Offset_0x01FF16
                dc.b    $04, $04
                dc.w    $06BC                  
                dc.l    ($03<<$18)|Layer_Switch_Mappings       ; Offset_0x01FF16
                dc.b    $09, $01
                dc.w    $26BC                    
                dc.l    ($03<<$18)|Layer_Switch_Mappings       ; Offset_0x01FF16
                dc.b    $0D, $05
                dc.w    $26BC
                dc.l    ($44<<$18)|Red_Ball_Bumper_Mappings    ; Offset_0x01F7D8
                dc.b    $00, $00
                dc.w    $439A
                dc.l    ($85<<$18)|Diagonal_Pinball_Spring_Mappings ; Offset_0x02ACFE
                dc.b    $00, $00
                dc.w    $0422
                dc.l    ($85<<$18)|Vertical_Pinball_Spring_Mappings ; Offset_0x02AD6C
                dc.b    $81, $00
                dc.w    $0402
                dc.l    ($86<<$18)|Flippers_Mappings           ; Offset_0x02B0D6
                dc.b    $00, $00
                dc.w    $43B2
                dc.l    ($86<<$18)|Flippers_Mappings           ; Offset_0x02B0D6
                dc.b    $01, $04
                dc.w    $43B2
                dc.l    ($D2<<$18)|Green_Platform_Mappings     ; Offset_0x02B2F2
                dc.b    $01, $00
                dc.w    $437C
                dc.l    ($D3<<$18)|Spikeball_Mappings          ; Offset_0x02B520
                dc.b    $00, $00
                dc.w    $0380
                dc.l    ($D4<<$18)|Blue_Box_Mappings           ; Offset_0x02B612
                dc.b    $00, $00
                dc.w    $436C
                dc.l    ($D4<<$18)|Blue_Box_Mappings           ; Offset_0x02B612
                dc.b    $02, $00
                dc.w    $436C
                dc.l    ($D5<<$18)|CNz_Elevator_Mappings       ; Offset_0x02B776
                dc.b    $18, $00
                dc.w    $4384
                dc.l    ($D6<<$18)|Slot_Machine_Starter_Mappings ; Offset_0x02BAF0
                dc.b    $01, $00
                dc.w    $0388
                dc.l    ($D7<<$18)|Blue_Bumper_Mappings        ; Offset_0x02C238
                dc.b    $00, $00
                dc.w    $4394
                dc.l    ($D8<<$18)|Green_Bumper_Mappings       ; Offset_0x02C4D0
                dc.b    $00, $00
                dc.w    $43E6
                dc.l    ($D8<<$18)|Green_Bumper_Mappings       ; Offset_0x02C4D0
                dc.b    $40, $01
                dc.w    $43E6
                dc.l    ($D8<<$18)|Green_Bumper_Mappings       ; Offset_0x02C4D0
                dc.b    $80, $02
                dc.w    $43E6
                dc.l    ($C8<<$18)|Crawl_Mappings              ; Offset_0x03D1DA 
                dc.b    $AC, $00
                dc.w    $8340
                dc.l    ($3E<<$18)|Egg_Prison_Mappings         ; Offset_0x03F1AC
                dc.b    $00, $00
                dc.w    $2680
Debug_CNz_End:                
;-------------------------------------------------------------------------------
Debug_CPz: ; : Offset_0x0420C8:
                dc.w    (((Debug_CPz_End-Debug_CPz-$02)/$08)) ; Auto Detect Number of Objects Esrael L. G. Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x012328
                dc.b    $00, $00  
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x012CD0    
                dc.b    $08, $00
                dc.w    $0680                                   
                dc.l    ($79<<$18)|Star_Post_Mappings          ; Offset_0x01F3B8
                dc.b    $01, 00
                dc.w    $047C                                
                dc.l    ($0B<<$18)|Open_Close_Platform_Mappings ; Offset_0x0200FC
                dc.b    $70, $00
                dc.w    $E3B0
                dc.l    ($1B<<$18)|CPz_Speed_Booster_Mappings  ; Offset_0x0222E6
                dc.b    $00, $00
                dc.w    $E39C
                dc.l    ($1D<<$18)|Worms_Mappings              ; Offset_0x02247C
                dc.b    $05, $00
                dc.w    $E43C
                dc.l    ($19<<$18)|Rotating_Platforms_Mappings ; Offset_0x022146
                dc.b    $06, $00
                dc.w    $63A0
                dc.l    ($2D<<$18)|Automatic_Door_Mappings     ; Offset_0x0117D6
                dc.b    $02, $02
                dc.w    $2394
                dc.l    ($32<<$18)|CPz_Tunel_Obstacle_Mappings ; Offset_0x023788 
                dc.b    $00, $00
                dc.w    $6430
                dc.l    ($6B<<$18)|CPz_Block_Mappings          ; Offset_0x027DC2
                dc.b    $10, $00      
                dc.w    $6418
                dc.l    ($78<<$18)|CPz_Block_Mappings          ; Offset_0x027DC2
                dc.b    $00, $00
                dc.w    $6418
                dc.l    ($7A<<$18)|Platform_Horizontal_Mappings ; Offset_0x02926C
                dc.b    $00, $00
                dc.w    $E418
                dc.l    ($7B<<$18)|Spring_Tubes_Mappings       ; Offset_0x029482
                dc.b    $02, $00
                dc.w    $03E0
                dc.l    ($03<<$18)|Layer_Switch_Mappings       ; Offset_0x01FF16
                dc.b    $09, $01
                dc.w    $26BC
                dc.l    ($03<<$18)|Layer_Switch_Mappings       ; Offset_0x01FF16
                dc.b    $0D, $05
                dc.w    $26BC
                dc.l    ($36<<$18)|Spikes_Mappings             ; Offset_0x015AF2
                dc.b    $00, $00
                dc.w    $2434                    
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C                 
                dc.b    $81, $00
                dc.w    $045C   
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C                
                dc.b    $90, $03
                dc.w    $0470
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C  
                dc.b    $A0, $06
                dc.w    $045C
                dc.l    ($40<<$18)|Diagonal_Spring_Mappings    ; Offset_0x02642C
                dc.b    $01, $00
                dc.w    $0440
                dc.l    ($A5<<$18)|Spiny_Mappings              ; Offset_0x038850
                dc.b    $32, $00
                dc.w    $252D
                dc.l    ($A6<<$18)|Spiny_Mappings              ; Offset_0x038850
                dc.b    $32, $03
                dc.w    $252D
                dc.l    ($A7<<$18)|Grabber_Mappings            ; Offset_0x038DB8
                dc.b    $36, $00
                dc.w    $A500
                dc.l    ($3E<<$18)|Egg_Prison_Mappings         ; Offset_0x03F1AC
                dc.b    $00, $00
                dc.w    $2680
Debug_CPz_End:
;-------------------------------------------------------------------------------
Debug_ARz: ; Offset_0x04218A:
                dc.w    (((Debug_ARz_End-Debug_ARz-$02)/$08)) ; Auto Detect Number of Objects Esrael L. G. Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x012328
                dc.b    $00, $00  
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x012CD0    
                dc.b    $08, $00
                dc.w    $0680                                   
                dc.l    ($79<<$18)|Star_Post_Mappings          ; Offset_0x01F3B8
                dc.b    $01, 00
                dc.w    $047C                                
                dc.l    ($15<<$18)|ARz_Swing_Platforms_Mappings ; Offset_0x010202
                dc.b    $88, $02
                dc.w    $0000
                dc.l    ($18<<$18)|ARz_Platform_Mappings       ; Offset_0x01081C
                dc.b    $01, $00
                dc.w    $4000
                dc.l    ($18<<$18)|ARz_Platform_Mappings       ; Offset_0x01081C
                dc.b    $9A, $01
                dc.w    $4000
                dc.l    ($22<<$18)|Arrow_Shooter_Mappings      ; Offset_0x02567C
                dc.b    $00, $01
                dc.w    $0417
                dc.l    ($23<<$18)|Pillar_Mappings             ; Offset_0x025844
                dc.b    $00, $00
                dc.w    $2000
                dc.l    ($2B<<$18)|Raising_Pillar_Mappings     ; Offset_0x025AD8
                dc.b    $00, $00
                dc.w    $2000
                dc.l    ($2C<<$18)|Lava_Attributes_Mappings    ; Offset_0x020DAA
                dc.b    $00, $00
                dc.w    $8680
                dc.l    ($2C<<$18)|Lava_Attributes_Mappings    ; Offset_0x020DAA
                dc.b    $01, $01
                dc.w    $8680
                dc.l    ($2C<<$18)|Lava_Attributes_Mappings    ; Offset_0x020DAA
                dc.b    $02, $02
                dc.w    $8680
                dc.l    ($40<<$18)|Diagonal_Spring_Mappings    ; Offset_0x02642C
                dc.b    $01, $00
                dc.w    $0440
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C                 
                dc.b    $81, $00
                dc.w    $045C                      
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C                
                dc.b    $90, $03
                dc.w    $0470                  
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x018F8C  
                dc.b    $A0, $06
                dc.w    $045C
                dc.l    ($03<<$18)|Layer_Switch_Mappings       ; Offset_0x01FF16
                dc.b    $09, $01
                dc.w    $26BC
                dc.l    ($36<<$18)|Spikes_Mappings             ; Offset_0x015AF2
                dc.b    $00, $00
                dc.w    $2434   
                dc.l    ($2D<<$18)|Automatic_Door_Mappings     ; Offset_0x0117D6
                dc.b    $03, $03
                dc.w    $23F8
                dc.l    ($1F<<$18)|ARz_Collapsing_Platforms_Mappings ; Offset_0x01111C
                dc.b    $00, $00
                dc.w    $4000
                dc.l    ($82<<$18)|Falling_Pillar_Mappings     ; Offset_0x02A138   
                dc.b    $03, $00
                dc.w    $0000
                dc.l    ($82<<$18)|Falling_Pillar_Mappings     ; Offset_0x02A138  
                dc.b    $11, $01
                dc.w    $0000
                dc.l    ($83<<$18)|ARz_Swing_Platforms_Mappings ; Offset_0x010202
                dc.b    $10, $01
                dc.w    $0000
                dc.l    ($24<<$18)|Sonic_Underwater_Mappings   ; Offset_0x01FB6C
                dc.b    $81, $0E
                dc.w    $855B
                dc.l    ($91<<$18)|Chop_Chop_Mappings          ; Offset_0x03694E
                dc.b    $08, $00
                dc.w    $253B
                dc.l    ($8C<<$18)|Whisp_Mappings              ; Offset_0x036474
                dc.b    $00, $00
                dc.w    $A500
                dc.l    ($8D<<$18)|Grounder_Mappings           ; Offset_0x03673A
                dc.b    $02, $00
                dc.w    $A509
                dc.l    ($8E<<$18)|Grounder_Mappings           ; Offset_0x03673A 
                dc.b    $02, $00
                dc.w    $A509
                dc.l    ($3E<<$18)|Egg_Prison_Mappings         ; Offset_0x03F1AC
                dc.b    $00, $00
                dc.w    $2680
Debug_ARz_End:                
;-------------------------------------------------------------------------------
Debug_SCz: ; Offset_0x042274:
                dc.w    (((Debug_SCz_End-Debug_SCz-$02)/$08)) ; Auto Detect Number of Objects Esrael L. G. Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x012328
                dc.b    $00, $00  
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x012CD0    
                dc.b    $08, $00
                dc.w    $0680                  
                dc.l    ($8B<<$18)|Layer_Switch_Mappings       ; Offset_0x01FF16                             
                dc.b    $00, $00
                dc.w    $06BC
                dc.l    ($B3<<$18)|Clouds_Mappings             ; Offset_0x03AF80 
                dc.b    $5E, $00
                dc.w    $454F
                dc.l    ($B3<<$18)|Clouds_Mappings             ; Offset_0x03AF80 
                dc.b    $60, $01
                dc.w    $454F
                dc.l    ($B3<<$18)|Clouds_Mappings             ; Offset_0x03AF80 
                dc.b    $62, $02
                dc.w    $454F
                dc.l    ($B4<<$18)|Vertical_Helix_Mappings     ; Offset_0x03B018  
                dc.b    $64, $00
                dc.w    $A561
                dc.l    ($B5<<$18)|Horizontal_Helix_Mappings   ; Offset_0x03B1AA
                dc.b    $66, $00
                dc.w    $A3CD
                dc.l    ($B5<<$18)|Horizontal_Helix_Mappings   ; Offset_0x03B1AA
                dc.b    $68, $00
                dc.w    $A3CD
                dc.l    ($9A<<$18)|Turtloid_Mappings           ; Offset_0x037636 
                dc.b    $16, $00
                dc.w    $038A
                dc.l    ($AC<<$18)|Balkiry_Mappings            ; Offset_0x038F6E
                dc.b    $40, $00
                dc.w    $0565
                dc.l    ($99<<$18)|Nebula_Mappings             ; Offset_0x037360
                dc.b    $12, $00
                dc.w    $A36E
                dc.l    ($3E<<$18)|Egg_Prison_Mappings         ; Offset_0x03F1AC
                dc.b    $00, $00
                dc.w    $2680                     
Debug_SCz_End:                                              
;===============================================================================
; Sub Rotina Debug_Mode - Rotina usada para depurar o jogo       
; [ Término ]
;=============================================================================== 
                  
;===============================================================================
; Carga dos sprites das fases       
; [ Início ]
;===============================================================================  
TilesMainTable: ; Offset_0x0422DE: 
                dc.l    ($04<<$18)|Emerald_Hill_Tiles    ; Offset_0x095C24  $04 = ponteiro em ArtLoadCues
                dc.l    ($05<<$18)|Emerald_Hill_Blocks   ; Offset_0x094E74  $05 = ponteiro em ArtLoadCues 
                dc.l    ($04<<$18)|Emerald_Hill_Chunks   ; Offset_0x099D34  $04 = ponteiro em PalPointers  
                dc.l    ($06<<$18)|Emerald_Hill_Tiles    ; Offset_0x095C24  $06 = ponteiro em ArtLoadCues
                dc.l    ($07<<$18)|Emerald_Hill_Blocks   ; Offset_0x094E74  $07 = ponteiro em ArtLoadCues 
                dc.l    ($05<<$18)|Emerald_Hill_Chunks   ; Offset_0x099D34  $05 = ponteiro em PalPointers 
                dc.l    ($08<<$18)|Emerald_Hill_Tiles    ; Offset_0x095C24  $08 = ponteiro em ArtLoadCues
                dc.l    ($09<<$18)|Emerald_Hill_Blocks   ; Offset_0x094E74  $09 = ponteiro em ArtLoadCues 
                dc.l    ($06<<$18)|Emerald_Hill_Chunks   ; Offset_0x099D34  $06 = ponteiro em PalPointers  
                dc.l    ($0A<<$18)|Emerald_Hill_Tiles    ; Offset_0x095C24  $0A = ponteiro em ArtLoadCues
                dc.l    ($0B<<$18)|Emerald_Hill_Blocks   ; Offset_0x094E74  $0B = ponteiro em ArtLoadCues 
                dc.l    ($07<<$18)|Emerald_Hill_Chunks   ; Offset_0x099D34  $07 = ponteiro em PalPointers  
                dc.l    ($0C<<$18)|Metropolis_Tiles      ; Offset_0x09DB64  $0C = ponteiro em ArtLoadCues
                dc.l    ($0D<<$18)|Metropolis_Blocks     ; Offset_0x09CFD4  $0D = ponteiro em ArtLoadCues
                dc.l    ($08<<$18)|Metropolis_Chunks     ; Offset_0x0A06C4  $08 = ponteiro em PalPointers
                dc.l    ($0C<<$18)|Metropolis_Tiles      ; Offset_0x09DB64  $0C = ponteiro em ArtLoadCues
                dc.l    ($0D<<$18)|Metropolis_Blocks     ; Offset_0x09CFD4  $0D = ponteiro em ArtLoadCues
                dc.l    ($08<<$18)|Metropolis_Chunks     ; Offset_0x0A06C4  $08 = ponteiro em PalPointers
                dc.l    ($10<<$18)|Sky_Chase_Tiles       ; Offset_0x0C5004  $10 = ponteiro em ArtLoadCues
                dc.l    ($11<<$18)|Sky_Chase_Blocks      ; Offset_0x0C4074  $11 = ponteiro em ArtLoadCues
                dc.l    ($0A<<$18)|Sky_Chase_Chunks      ; Offset_0x0C85E4  $0A = ponteiro em PalPointers
                dc.l    ($12<<$18)|Emerald_Hill_Tiles    ; Offset_0x095C24  $12 = ponteiro em ArtLoadCues
                dc.l    ($13<<$18)|Emerald_Hill_Blocks   ; Offset_0x094E74  $13 = ponteiro em ArtLoadCues 
                dc.l    ($0B<<$18)|Emerald_Hill_Chunks   ; Offset_0x099D34  $0B = ponteiro em PalPointers  
                dc.l    ($14<<$18)|Hidden_Palace_Tiles   ; Offset_0x0A3364  $14 = ponteiro em ArtLoadCues
                dc.l    ($15<<$18)|Hidden_Palace_Blocks  ; Offset_0x0A3364  $15 = ponteiro em ArtLoadCues
                dc.l    ($0C<<$18)|Hidden_Palace_Chunks  ; Offset_0x0A3364  $0C = ponteiro em PalPointers 
                dc.l    ($16<<$18)|Emerald_Hill_Tiles    ; Offset_0x095C24  $16 = ponteiro em ArtLoadCues
                dc.l    ($17<<$18)|Emerald_Hill_Blocks   ; Offset_0x094E74  $17 = ponteiro em ArtLoadCues 
                dc.l    ($0D<<$18)|Emerald_Hill_Chunks   ; Offset_0x099D34  $0D = ponteiro em PalPointers                             
                dc.l    ($18<<$18)|Oil_Ocean_Tiles       ; Offset_0x0A4204  $18 = ponteiro em ArtLoadCues 
                dc.l    ($19<<$18)|Oil_Ocean_Blocks      ; Offset_0x0A3364  $19 = ponteiro em ArtLoadCues 
                dc.l    ($0E<<$18)|Oil_Ocean_Chunks      ; Offset_0x0A6834  $0E = ponteiro em PalPointers 
                dc.l    ($1A<<$18)|Mystic_Cave_Tiles     ; Offset_0x0A9D74  $1A = ponteiro em ArtLoadCues 
                dc.l    ($1B<<$18)|Mystic_Cave_Blocks    ; Offset_0x0A8D04  $1B = ponteiro em ArtLoadCues 
                dc.l    ($0F<<$18)|Mystic_Cave_Chunks    ; Offset_0x0AD454  $0F = ponteiro em PalPointers 
                dc.l    ($1C<<$18)|Casino_Night_Tiles    ; Offset_0x0B0894  $1C = ponteiro em ArtLoadCues 
                dc.l    ($1D<<$18)|Casino_Night_Blocks   ; Offset_0x0AFFC4  $1D = ponteiro em ArtLoadCues 
                dc.l    ($10<<$18)|Casino_Night_Chunks   ; Offset_0x0B2CF4  $10 = ponteiro em PalPointers 
                dc.l    ($1E<<$18)|Chemical_Plant_Tiles  ; Offset_0x0B6174  $1E = ponteiro em ArtLoadCues 
                dc.l    ($1F<<$18)|Chemical_Plant_Blocks ; Offset_0x0B5234  $1F = ponteiro em ArtLoadCues 
                dc.l    ($11<<$18)|Chemical_Plant_Chunks ; Offset_0x0B90F4  $11 = ponteiro em PalPointers 
                dc.l    ($20<<$18)|Chemical_Plant_Tiles  ; Offset_0x0B6174  $20 = ponteiro em ArtLoadCues 
                dc.l    ($21<<$18)|Chemical_Plant_Blocks ; Offset_0x0B5234  $21 = ponteiro em ArtLoadCues 
                dc.l    ($12<<$18)|Chemical_Plant_Chunks ; Offset_0x0B90F4  $12 = ponteiro em PalPointers 
                dc.l    ($22<<$18)|Aquatic_Ruin_Tiles    ; Offset_0x0BCC24  $22 = ponteiro em ArtLoadCues 
                dc.l    ($23<<$18)|Aquatic_Ruin_Blocks   ; Offset_0x0BB944  $23 = ponteiro em ArtLoadCues 
                dc.l    ($13<<$18)|Aquatic_Ruin_Chunks   ; Offset_0x0C1434  $13 = ponteiro em PalPointers 
                dc.l    ($24<<$18)|Sky_Chase_Tiles       ; Offset_0x0C5004  $24 = ponteiro em ArtLoadCues
                dc.l    ($25<<$18)|Sky_Chase_Blocks      ; Offset_0x0C4074  $25 = ponteiro em ArtLoadCues
                dc.l    ($14<<$18)|Sky_Chase_Chunks      ; Offset_0x0C85E4  $14 = ponteiro em PalPointers
;-------------------------------------------------------------------------------
ArtLoadCues: ; Offset_0x0423AA:
                dc.w    Default_Sprs-ArtLoadCues                        ; $00 - Offset_0x042430
                dc.w    Default_Level_Sprs-ArtLoadCues                  ; $01 - Offset_0x04244A
                dc.w    Default_After_Title_Cards_Sprs-ArtLoadCues      ; $02 - Offset_0x042464
                dc.w    Game_Over_Time_Over_Spr-ArtLoadCues             ; $03 - Offset_0x042478
                dc.w    Emerald_Hill_Sprites_0-ArtLoadCues              ; $04 - Offset_0x042480
                dc.w    Emerald_Hill_Sprites_1-ArtLoadCues              ; $05 - Offset_0x0424A6
                dc.w    Miles_2_Player_VS-ArtLoadCues                   ; $06 - Offset_0x0424C0
                dc.w    Miles_Alone-ArtLoadCues                         ; $07 - Offset_0x0424C8
                dc.w    Tails_2_Player_VS-ArtLoadCues                   ; $08 - Offset_0x0424D0
                dc.w    Tails_Alone-ArtLoadCues                         ; $09 - Offset_0x0424D8
                dc.w    Metropolis_Sprites_0-ArtLoadCues                ; $0A - Offset_0x0424E0
                dc.w    Metropolis_Sprites_0-ArtLoadCues                ; $0B - Offset_0x0424E0
                dc.w    Metropolis_Sprites_0-ArtLoadCues                ; $0C - Offset_0x0424E0
                dc.w    Metropolis_Sprites_1-ArtLoadCues                ; $0D - Offset_0x042518
                dc.w    Wing_Fortress_Sprites_0-ArtLoadCues             ; $0E - Offset_0x042550
                dc.w    Wing_Fortress_Sprites_0-ArtLoadCues             ; $0F - Offset_0x042550
                dc.w    Wing_Fortress_Sprites_0-ArtLoadCues             ; $10 - Offset_0x042550
                dc.w    Wing_Fortress_Sprites_1-ArtLoadCues             ; $11 - Offset_0x04258E
                dc.w    Hill_Top_Sprites_0-ArtLoadCues                  ; $12 - Offset_0x0425E4
                dc.w    Hill_Top_Sprites_1-ArtLoadCues                  ; $13 - Offset_0x042622
                dc.w    Hidden_Palace_Sprites_0-ArtLoadCues             ; $14 - Offset_0x042636
                dc.w    Hidden_Palace_Sprites_1-ArtLoadCues             ; $15 - Offset_0x042636
                dc.w    Oil_Ocean_Sprites_0-ArtLoadCues                 ; $16 - Offset_0x042636
                dc.w    Oil_Ocean_Sprites_0-ArtLoadCues                 ; $17 - Offset_0x042636
                dc.w    Oil_Ocean_Sprites_0-ArtLoadCues                 ; $18 - Offset_0x042636
                dc.w    Oil_Ocean_Sprites_1-ArtLoadCues                 ; $19 - Offset_0x04266E
                dc.w    Mystic_Cave_Sprites_0-ArtLoadCues               ; $1A - Offset_0x0426B8
                dc.w    Mystic_Cave_Sprites_1-ArtLoadCues               ; $1B - Offset_0x0426DE
                dc.w    Casino_Night_Sprites_0-ArtLoadCues              ; $1C - Offset_0x042704
                dc.w    Casino_Night_Sprites_1-ArtLoadCues              ; $1D - Offset_0x042742
                dc.w    Chemical_Plant_Sprites_0-ArtLoadCues            ; $1E - Offset_0x042768
                dc.w    Chemical_Plant_Sprites_1-ArtLoadCues            ; $1F - Offset_0x0427A0
                dc.w    Death_Egg_Sprites_0-ArtLoadCues                 ; $20 - Offset_0x0427CC
                dc.w    Death_Egg_Sprites_1-ArtLoadCues                 ; $21 - Offset_0x0427D4
                dc.w    Aquatic_Ruin_Sprites_0-ArtLoadCues              ; $22 - Offset_0x0427F4
                dc.w    Aquatic_Ruin_Sprites_1-ArtLoadCues              ; $23 - Offset_0x04280E
                dc.w    Sky_Chase_Sprites_0-ArtLoadCues                 ; $24 - Offset_0x042840
                dc.w    Sky_Chase_Sprites_1-ArtLoadCues                 ; $25 - Offset_0x042848
                dc.w    Level_Results_Sprites-ArtLoadCues               ; $26 - Offset_0x04286E
                dc.w    End_Level_Sprites-ArtLoadCues                   ; $27 - Offset_0x042888
                dc.w    Chemical_Plant_Boss_Sprites-ArtLoadCues         ; $28 - Offset_0x042890
                dc.w    Emerald_Hill_Boss_Sprites-ArtLoadCues           ; $29 - Offset_0x0428B0
                dc.w    Hill_Top_Boss_Sprites-ArtLoadCues               ; $2A - Offset_0x0428CA
                dc.w    Aquatic_Ruin_Boss_Sprites-ArtLoadCues           ; $2B - Offset_0x0428E4
                dc.w    Mystic_Cave_Boss_Sprites-ArtLoadCues            ; $2C - Offset_0x0428F8
                dc.w    Casino_Night_Boss_Sprites-ArtLoadCues           ; $2D - Offset_0x04290C
                dc.w    Metropolis_Boss_Sprites-ArtLoadCues             ; $2E - Offset_0x042920
                dc.w    Oil_Ocean_Boss_Sprites-ArtLoadCues              ; $2F - Offset_0x04293A
                dc.w    Death_Egg_Boss_Sprites-ArtLoadCues              ; $30 - Offset_0x042948
                dc.w    Final_Boss_Sprites-ArtLoadCues                  ; $31 - Offset_0x042950
                dc.w    Emerald_Hill_Flickies_Sprites-ArtLoadCues       ; $32 - Offset_0x042958
                dc.w    Mystic_Cave_Flickies_Sprites-ArtLoadCues        ; $33 - Offset_0x042966
                dc.w    Metropolis_Flickies_Sprites-ArtLoadCues         ; $34 - Offset_0x042974
                dc.w    Death_Egg_Flickies_Sprites-ArtLoadCues          ; $35 - Offset_0x042982
                dc.w    Hidden_Palace_Flickies_Sprites-ArtLoadCues      ; $36 - Offset_0x042990
                dc.w    Oil_Ocean_Flickies_Sprites-ArtLoadCues          ; $37 - Offset_0x04299E
                dc.w    Sky_Chase_Flickies_Sprites-ArtLoadCues          ; $38 - Offset_0x0429AC
                dc.w    Casino_Night_Flickies_Sprites-ArtLoadCues       ; $39 - Offset_0x0429BA
                dc.w    Chemical_Plant_Flickies_Sprites-ArtLoadCues     ; $3A - Offset_0x0429C8
                dc.w    Aquatic_Ruin_Flickies_Sprites-ArtLoadCues       ; $3B - Offset_0x0429D6
                dc.w    Special_Stage_Sprites_0-ArtLoadCues             ; $3C - Offset_0x0429E4
                dc.w    Special_Stage_Sprites_1-ArtLoadCues             ; $3D - Offset_0x042A34
                dc.w    Wing_Fortress_Boss_Sprites-ArtLoadCues          ; $3E - Offset_0x042A3C
                dc.w    Wing_Fortress_Chase_Sprites-ArtLoadCues         ; $3F - Offset_0x042A5C
                dc.w    Boss_Defeated_Sprites_0-ArtLoadCues             ; $40 - Offset_0x042A70
                dc.w    Boss_Defeated_Sprites_1-ArtLoadCues             ; $41 - Offset_0x042A78
                dc.w    Special_Stage_Results_Sprites-ArtLoadCues       ; $42 - Offset_0x042A80
;===============================================================================
; Sprites padrões carregados durante a tela título
; [ Início ] 
;===============================================================================
Default_Sprs: ; Offset_0x042430:
PLC_00:
                dc.w    (((PLC_00_End-PLC_00-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Head_up_display_Sprites                ; Offset_0x07923E
                dc.w    $D940
                dc.l    Head_up_display_Sonic                  ; Offset_0x079346
                dc.w    $FA80
                dc.l    Rings_Sprites                          ; Offset_0x07945C
                dc.w    $D780
                dc.l    Enemy_Points_Spr                       ; Offset_0x0799AC
                dc.w    $9580
PLC_00_End:
;===============================================================================
; Sprites padrões carregados durante a tela título
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites padrões carregados durante o início das fases
; [ Início ] 
;===============================================================================
Default_Level_Sprs: ; Offset_0x04244A:
PLC_01:
                dc.w    (((PLC_01_End-PLC_01-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Star_Post                              ; Offset_0x079A86
                dc.w    $8F80
                dc.l    Monitors                               ; Offset_0x079550
                dc.w    $D000
                dc.l    Shield                                 ; Offset_0x071D8E
                dc.w    $97C0
                dc.l    Invencibility_Stars                    ; Offset_0x071F14
                dc.w    $9BC0
PLC_01_End:
;===============================================================================
; Sprites padrões carregados durante o início das fases
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites padrões carregados após os title cards serem liberados da memória
; [ Início ] 
;===============================================================================
Default_After_Title_Cards_Sprs: ; Offset_0x042464:
PLC_02:
                dc.w    (((PLC_02_End-PLC_02-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Explosion                              ; Offset_0x07B592
                dc.w    $B480
                dc.l    Water_Splash                           ; Offset_0x07393C
                dc.w    $BE40
                dc.l    Bubbles                                ; Offset_0x07AEE2
                dc.w    $BD00
PLC_02_End:
;===============================================================================
; Sprites padrões carregados após os title cards serem liberados da memória
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites utilizados durante a mensagem "Time Over" / "Game Over"
; [ Início ] 
;===============================================================================
Game_Over_Time_Over_Spr: ; Offset_0x042478:
PLC_03:
                dc.w    (((PLC_03_End-PLC_03-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Game_Over_Time_Over                    ; Offset_0x07B400
                dc.w    $9BC0
PLC_03_End:
;===============================================================================
; Sprites utilizados durante a mensagem "Time Over" / "Game Over"
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso na fase Emerald Hill
; [ Início ] 
;===============================================================================
Emerald_Hill_Sprites_0: ; Offset_0x042480:
PLC_04:
                dc.w    (((PLC_04_End-PLC_04-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    EHz_Waterfall                          ; Offset_0x0F02D6
                dc.w    $73C0
                dc.l    EHz_Bridge                             ; Offset_0x0F052A
                dc.w    $76C0
                dc.l    HTz_FireBall                           ; Offset_0x0F0160
                dc.w    $77C0
                dc.l    Buzzer                                 ; Offset_0x08316A
                dc.w    $7A40
                dc.l    Coconuts                               ; Offset_0x08A87A
                dc.w    $7DC0
                dc.l    Masher                                 ; Offset_0x0839EA
                dc.w    $8280
PLC_04_End:
;-------------------------------------------------------------------------------
Emerald_Hill_Sprites_1: ; Offset_0x0424A6:
PLC_05:
                dc.w    (((PLC_05_End-PLC_05-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Spikes                                 ; Offset_0x07995C
                dc.w    $8680
                dc.l    Diagonal_Spring                        ; Offset_0x07906A
                dc.w    $8780
                dc.l    Vertical_Spring                        ; Offset_0x078E84
                dc.w    $8B80
                dc.l    Horizontal_Spring                      ; Offset_0x078FA0
                dc.w    $8E00
PLC_05_End:
;===============================================================================
; Sprites carregados para uso na fase Emerald Hill
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprite usado para Hardware japonês jogando no modo 2 jogadores
; [ Início ] 
;===============================================================================
Miles_2_Player_VS: ; Offset_0x0424C0:
PLC_06:
                dc.w    (((PLC_06_End-PLC_06-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Head_up_display_Miles                  ; Offset_0x07B946
                dc.w    $DE80
PLC_06_End:
;===============================================================================
; Sprite usado para Hardware japonês jogando no modo 2 jogadores
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprite usado para Hardware japonês jogando como Miles sozinho 
; [ Início ] 
;===============================================================================
Miles_Alone: ; Offset_0x0424C8:
PLC_07:
                dc.w    (((PLC_07_End-PLC_07-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Head_up_display_Miles                  ; Offset_0x07B946
                dc.w    $FA80
PLC_07_End:
;===============================================================================
; Sprite usado para Hardware japonês jogando como Miles sozinho 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprite usado para Hardware americano jogando no modo 2 jogadores 
; [ Início ] 
;===============================================================================
Tails_2_Player_VS: ; Offset_0x0424D0:
PLC_08:
                dc.w    (((PLC_08_End-PLC_08-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Head_up_display_Tails                  ; Offset_0x07C20C
                dc.w    $DE80
PLC_08_End:
;===============================================================================
; Sprite usado para Hardware americano jogando no modo 2 jogadores 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprite usado para Hardware americano jogando como Miles sozinho 
; [ Início ] 
;===============================================================================
Tails_Alone: ; Offset_0x0424D8:
PLC_09:
                dc.w    (((PLC_09_End-PLC_09-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Head_up_display_Tails                  ; Offset_0x07C20C
                dc.w    $FA80
PLC_09_End:
;===============================================================================
; Sprite usado para Hardware americano jogando como Miles sozinho 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso na fase Metropolis 
; [ Início ] 
;===============================================================================
Metropolis_Sprites_0: ; Offset_0x0424E0:
PLC_0C:
                dc.w    (((PLC_0C_End-PLC_0C-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Mz_Rotating_Gear                       ; Offset_0x0F0DB6
                dc.w    $6F00
                dc.l    Mz_Gear_Holes                          ; Offset_0x0F120E
                dc.w    $7E00
                dc.l    Mz_Elevator                            ; Offset_0x0F167C
                dc.w    $7F20
                dc.l    Mz_Miscellaneous                       ; Offset_0x0F16EC
                dc.w    $7FA0
                dc.l    Mz_Steam                               ; Offset_0x0F1384
                dc.w    $80A0
                dc.l    Mz_Harpon_Platform                     ; Offset_0x0F12B6
                dc.w    $8280
                dc.l    Mz_Harpon                              ; Offset_0x0F148E
                dc.w    $8380
                dc.l    Shellcracker                           ; Offset_0x08B058
                dc.w    $6380
                dc.l    Asteron                                ; Offset_0x08B300
                dc.w    $6D00
PLC_0C_End:
;-------------------------------------------------------------------------------
Metropolis_Sprites_1: ; Offset_0x042518:
PLC_0D:
                dc.w    (((PLC_0D_End-PLC_0D-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Switch                                 ; Offset_0x078DAC
                dc.w    $8480
                dc.l    Spikes                                 ; Offset_0x07995C
                dc.w    $8680
                dc.l    Slicer                                 ; Offset_0x08AD80
                dc.w    $8780
                dc.l    Vertical_Spring                        ; Offset_0x078E84
                dc.w    $8B80
                dc.l    Horizontal_Spring                      ; Offset_0x078FA0
                dc.w    $8E00
                dc.l    Mz_Screw_Nut                           ; Offset_0x0F1550
                dc.w    $A000
                dc.l    Mz_Lava_Bubble                         ; Offset_0x0F15C6
                dc.w    $A6C0
                dc.l    Mz_Mini_Gear                           ; Offset_0x0F178E
                dc.w    $ABE0
                dc.l    Mz_Teleport_Flash                      ; Offset_0x0F1870
                dc.w    $AD60
PLC_0D_End:
;===============================================================================
; Sprites carregados para uso na fase Metropolis 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso na fase Wing Fortress 
; [ Início ] 
;===============================================================================
Wing_Fortress_Sprites_0: ; Offset_0x042550:
PLC_0E:
                dc.w    (((PLC_0E_End-PLC_0E-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Tornado                                ; Offset_0x08CC44
                dc.w    $A000
                dc.l    Clouds                                 ; Offset_0x08DAFC
                dc.w    $A9E0
                dc.l    Vertical_Helix_Spr                     ; Offset_0x08DEB8
                dc.w    $AC20
                dc.l    Horizontal_Helix_Spr                   ; Offset_0x08DEE8
                dc.w    $79A0
                dc.l    Balkiry                                ; Offset_0x08BC16
                dc.w    $ACA0
                dc.l    Breakable_Wall                         ; Offset_0x07FF98
                dc.w    $9180
                dc.l    Clucker                                ; Offset_0x08B9DC
                dc.w    $6F20
                dc.l    Rotating_Helix                         ; Offset_0x08E010
                dc.w    $7260
                dc.l    Tornado                                ; Offset_0x08CC44
                dc.w    $A000
                dc.l    Clouds                                 ; Offset_0x08DAFC
                dc.w    $A9E0
PLC_0E_End:
;-------------------------------------------------------------------------------
Wing_Fortress_Sprites_1: ; Offset_0x04258E:
PLC_11:
                dc.w    (((PLC_11_End-PLC_11-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Vertical_Helix_Spr                     ; Offset_0x08DEB8
                dc.w    $AC20
                dc.l    Horizontal_Helix_Spr                   ; Offset_0x08DEE8
                dc.w    $79A0
                dc.l    Vertical_Laser                         ; Offset_0x08DA6E
                dc.w    $73E0
                dc.l    WFz_Cannon                             ; Offset_0x08D1A0
                dc.w    $7560
                dc.l    Horizontal_Laser                       ; Offset_0x08DC42
                dc.w    $7860
                dc.l    Conveyor_Belts_Wheels                  ; Offset_0x08D7D8
                dc.w    $7D40
                dc.l    Chain_Hook                             ; Offset_0x08D388
                dc.w    $7F40
                dc.l    Rocket_Flame_Spr                       ; Offset_0x08E0C4
                dc.w    $8CA0
                dc.l    WFz_Elevators                          ; Offset_0x08DD0C
                dc.w    $81C0
                dc.l    Hatchways                              ; Offset_0x08D540
                dc.w    $8340
                dc.l    Engine_Part                            ; Offset_0x08DDF6
                dc.w    $8A00
                dc.l    Speed_Boost                            ; Offset_0x08DCA2
                dc.w    $8B80
                dc.l    Boss_Switch_Spr                        ; Offset_0x07FF2A
                dc.w    $8C20
                dc.l    WFz_Platform                           ; Offset_0x08D96E
                dc.w    $8DA0
PLC_11_End:
;===============================================================================
; Sprites carregados para uso na fase Wing Fortress 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso na fase Hill Top 
; [ Início ] 
;===============================================================================
Hill_Top_Sprites_0: ; Offset_0x0425E4:
PLC_12:
                dc.w    (((PLC_12_End-PLC_12-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    HTz_FireBall                           ; Offset_0x0F0160
                dc.w    $73C0
                dc.l    Htz_Rock                               ; Offset_0x0F0C14
                dc.w    $7640
                dc.l    Htz_See_saw                            ; Offset_0x0F096E
                dc.w    $78C0
                dc.l    Htz_See_saw_badnick                    ; Offset_0x0F0D4A
                dc.w    $7BC0
                dc.l    Rexon                                  ; Offset_0x089DEC
                dc.w    $6FC0
                dc.l    Spiker                                 ; Offset_0x089FAA
                dc.w    $A400
                dc.l    Spikes                                 ; Offset_0x07995C
                dc.w    $8680
                dc.l    Diagonal_Spring                        ; Offset_0x07906A
                dc.w    $8780
                dc.l    Vertical_Spring                        ; Offset_0x078E84
                dc.w    $8B80
                dc.l    Horizontal_Spring                      ; Offset_0x078FA0
                dc.w    $8E00
PLC_12_End:                             
;-------------------------------------------------------------------------------
Hill_Top_Sprites_1: ; Offset_0x042622:
PLC_13:
                dc.w    (((PLC_13_End-PLC_13-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Htz_Teleferic                          ; Offset_0x0F0602
                dc.w    $7CC0
                dc.l    Htz_Lava_Bubble                        ; Offset_0x0F03DC
                dc.w    $82C0
                dc.l    Htz_Automatic_Door                     ; Offset_0x0F08F6
                dc.w    $84C0
PLC_13_End:
;===============================================================================
; Sprites carregados para uso na fase Hill Top
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso na fase Hidden Palace
; [ Início ] 
;===============================================================================   
Hidden_Palace_Sprites_0:
;-------------------------------------------------------------------------------
Hidden_Palace_Sprites_1: 
;===============================================================================
; Sprites carregados para uso na fase Hidden Palace
; [ Término ] 
;===============================================================================    

;===============================================================================
; Sprites carregados para uso na fase Oil Ocean
; [ Início ] 
;===============================================================================
Oil_Ocean_Sprites_0: ; Offset_0x042636:
PLC_18:
                dc.w    (((PLC_18_End-PLC_18-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    OOz_Fire_Booster                       ; Offset_0x081514
                dc.w    $5C40
                dc.l    OOz_Elevator                           ; Offset_0x0810B8
                dc.w    $5E80
                dc.l    OOz_Giant_Spikeball                    ; Offset_0x08007C
                dc.w    $6180
                dc.l    OOz_Touch_Boost_Up                     ; Offset_0x080274
                dc.w    $6580
                dc.l    OOz_Break_To_Boost_Horizontal          ; Offset_0x08030A
                dc.w    $6640
                dc.l    OOz_Oil                                ; Offset_0x080376
                dc.w    $66C0
                dc.l    OOz_Oil_01                             ; Offset_0x0804F2
                dc.w    $68C0
                dc.l    OOz_Ball                               ; Offset_0x0805C0
                dc.w    $6A80
                dc.l    OOz_Cannon                             ; Offset_0x0806E0
                dc.w    $6D00
PLC_18_End:
;-------------------------------------------------------------------------------
Oil_Ocean_Sprites_1: ; Offset_0x04266E:
PLC_19:
                dc.w    (((PLC_19_End-PLC_19-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    OOz_Collapsing_Platform                ; Offset_0x0809D0
                dc.w    $73A0
                dc.l    OOz_Spring_Push_Boost                  ; Offset_0x080C64
                dc.w    $78A0
                dc.l    OOz_Swing_Platform                     ; Offset_0x080E26
                dc.w    $7C60
                dc.l    OOz_Break_To_Boost_Vertical            ; Offset_0x081048
                dc.w    $7FE0
                dc.l    OOz_Fans                               ; Offset_0x081254
                dc.w    $8060
                dc.l    Switch                                 ; Offset_0x078DAC
                dc.w    $8480
                dc.l    Spikes                                 ; Offset_0x07995C
                dc.w    $8680
                dc.l    Diagonal_Spring                        ; Offset_0x07906A
                dc.w    $8780
                dc.l    Vertical_Spring                        ; Offset_0x078E84
                dc.w    $8B80
                dc.l    Horizontal_Spring                      ; Offset_0x078FA0
                dc.w    $8E00
                dc.l    Aquis                                  ; Offset_0x08368A
                dc.w    $A000
                dc.l    Octus                                  ; Offset_0x08336A
                dc.w    $A700
PLC_19_End:
;===============================================================================
; Sprites carregados para uso na fase Oil Ocean 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso na fase Mystic Cave
; [ Início ] 
;===============================================================================
Mystic_Cave_Sprites_0: ; Offset_0x0426B8:
PLC_1A:
                dc.w    (((PLC_1A_End-PLC_1A-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    MCz_Box                                ; Offset_0x0F187C
                dc.w    $7A80
                dc.l    MCz_Collapsing_Platform                ; Offset_0x0F1ABA
                dc.w    $7E80
                dc.l    MCz_Vines                              ; Offset_0x0F1C64
                dc.w    $81C0
                dc.l    MCz_Vines_1                            ; Offset_0x0F1D5C
                dc.w    $83C0
                dc.l    Flasher                                ; Offset_0x08AC5E
                dc.w    $7500
                dc.l    Crawlton                               ; Offset_0x08AB36
                dc.w    $7800
PLC_1A_End:
;-------------------------------------------------------------------------------
Mystic_Cave_Sprites_1: ; Offset_0x0426DE:
PLC_1B:
                dc.w    (((PLC_1B_End-PLC_1B-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    MCz_Horizontal_Spikes                  ; Offset_0x07AC9A
                dc.w    $8580
                dc.l    Spikes                                 ; Offset_0x07995C
                dc.w    $8680
                dc.l    MCz_Bridge                             ; Offset_0x0F1E06
                dc.w    $8780
                dc.l    Diagonal_Spring_1                      ; Offset_0x07AB4A
                dc.w    $8800
                dc.l    Vertical_Spring                        ; Offset_0x078E84
                dc.w    $8B80
                dc.l    Horizontal_Spring                      ; Offset_0x078FA0
                dc.w    $8E00
PLC_1B_End:
;===============================================================================
; Sprites carregados para uso na fase Mystic Cave
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso na fase Casino Night
; [ Início ] 
;===============================================================================
Casino_Night_Sprites_0: ; Offset_0x042704:
PLC_1C:
                dc.w    (((PLC_1C_End-PLC_1C-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Crawl                                  ; Offset_0x0901A4
                dc.w    $6800
                dc.l    CNz_Box                                ; Offset_0x0816C8
                dc.w    $6D80
                dc.l    CNz_Green_Platforms                    ; Offset_0x081600
                dc.w    $6F80
                dc.l    CNz_Spikeball_Slot_Machine             ; Offset_0x081668
                dc.w    $7000
                dc.l    CNz_Elevator                           ; Offset_0x0817B4
                dc.w    $7080
                dc.l    CNz_Slot_Machine_Starter               ; Offset_0x081826
                dc.w    $7100
                dc.l    CNz_Blue_Bumper                        ; Offset_0x081894
                dc.w    $7280
                dc.l    CNz_Bumpers                            ; Offset_0x08191E
                dc.w    $7340
                dc.l    CNz_Flippers                           ; Offset_0x081EF2
                dc.w    $7640
                dc.l    CNz_Green_Bumpers                      ; Offset_0x081DCC
                dc.w    $7CC0
PLC_1C_End:
;-------------------------------------------------------------------------------
Casino_Night_Sprites_1: ; Offset_0x042742:
PLC_1D:
                dc.w    (((PLC_1D_End-PLC_1D-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    CNz_Diagonal_Launcher                  ; Offset_0x081AB0
                dc.w    $8040
                dc.l    CNz_Vertical_Launcher                  ; Offset_0x081C96
                dc.w    $8440
                dc.l    Spikes                                 ; Offset_0x07995C
                dc.w    $8680
                dc.l    Diagonal_Spring                        ; Offset_0x07906A
                dc.w    $8780
                dc.l    Vertical_Spring                        ; Offset_0x078E84
                dc.w    $8B80
                dc.l    Horizontal_Spring                      ; Offset_0x078FA0
                dc.w    $8E00
PLC_1D_End:
;===============================================================================
; Sprites carregados para uso na fase Casino Night
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso na fase Chemical Plant
; [ Início ] 
;===============================================================================
Chemical_Plant_Sprites_0: ; Offset_0x042768:
PLC_1E:
                dc.w    (((PLC_1E_End-PLC_1E-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    CPz_Metal_Structure                    ; Offset_0x0825AE
                dc.w    $6E60
                dc.l    CPz_Automatic_Door                     ; Offset_0x0827F8
                dc.w    $7280
                dc.l    CPz_Speed_Booster                      ; Offset_0x0824D4
                dc.w    $7380
                dc.l    CPz_Triangle_Platform                  ; Offset_0x082216
                dc.w    $7400
                dc.l    CPz_Open_Close_Platform                ; Offset_0x082864
                dc.w    $7600
                dc.l    CPz_Spring_Tubes                       ; Offset_0x082C06
                dc.w    $7C00
                dc.l    CPz_Water_Surface                      ; Offset_0x082364
                dc.w    $8000
                dc.l    CPz_Platforms                          ; Offset_0x082A46
                dc.w    $8300
                dc.l    CPz_Breakable_Block                    ; Offset_0x0827B8
                dc.w    $8600
PLC_1E_End:
;-------------------------------------------------------------------------------
Chemical_Plant_Sprites_1: ; Offset_0x0427A0:
PLC_1F:
                dc.w    (((PLC_1F_End-PLC_1F-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Grabber                                ; Offset_0x08B6B4
                dc.w    $A000
                dc.l    Lander                                 ; Offset_0x08B430
                dc.w    $A5A0
                dc.l    Spikes                                 ; Offset_0x07995C
                dc.w    $8680
                dc.l    CPz_Worms                              ; Offset_0x08253C
                dc.w    $8780
                dc.l    Diagonal_Spring_1                      ; Offset_0x07AB4A
                dc.w    $8800
                dc.l    Vertical_Spring                        ; Offset_0x078E84
                dc.w    $8B80
                dc.l    Horizontal_Spring                      ; Offset_0x078FA0
                dc.w    $8E00
PLC_1F_End:
;===============================================================================
; Sprites carregados para uso na fase Chemical Plant
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso na fase Death Egg
; [ Início ] 
;===============================================================================
Death_Egg_Sprites_0: ; Offset_0x0427CC:
PLC_20:
                dc.w    (((PLC_20_End-PLC_20-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    CPz_Automatic_Door                     ; Offset_0x0827F8
                dc.w    $6500
PLC_20_End:
;-------------------------------------------------------------------------------
Death_Egg_Sprites_1: ; Offset_0x0427D4:
PLC_21:
                dc.w    (((PLC_21_End-PLC_21-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Metal_Sonic                            ; Offset_0x08BE12
                dc.w    $7000
                dc.l    Robotnik_Window                        ; Offset_0x08EF96
                dc.w    $6F00
                dc.l    Robotnik                               ; Offset_0x08EA5A
                dc.w    $A300
                dc.l    Robotnik_Faces                         ; Offset_0x08E886
                dc.w    $A000
                dc.l    Robotnik_Body                          ; Offset_0x08EE52
                dc.w    $AC80
PLC_21_End:
;===============================================================================
; Sprites carregados para uso na fase Death Egg
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso na fase Aquatic Ruin
; [ Início ] 
;===============================================================================
Aquatic_Ruin_Sprites_0: ; Offset_0x0427F4:
PLC_22:
                dc.w    (((PLC_22_End-PLC_22-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    ARz_Automatic_Door                     ; Offset_0x0830D2
                dc.w    $7F00
                dc.l    ARz_Water_Surface                      ; Offset_0x082E02
                dc.w    $8000
                dc.l    ARz_Leaves                             ; Offset_0x082EE8
                dc.w    $8200
                dc.l    ARz_Arrow_Shooter                      ; Offset_0x082F74
                dc.w    $82E0
PLC_22_End:
;-------------------------------------------------------------------------------
Aquatic_Ruin_Sprites_1: ; Offset_0x04280E:
PLC_23:
                dc.w    (((PLC_23_End-PLC_23-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Chop_Chop                              ; Offset_0x089B9A
                dc.w    $A760
                dc.l    Whisp                                  ; Offset_0x0895E4
                dc.w    $A000
                dc.l    Grounder                               ; Offset_0x08970E
                dc.w    $A120
                dc.l    Oxygen_Bubbles                         ; Offset_0x07AD16
                dc.w    $AB60
                dc.l    Spikes                                 ; Offset_0x07995C
                dc.w    $8680
                dc.l    Diagonal_Spring_1                      ; Offset_0x07AB4A
                dc.w    $8800
                dc.l    Vertical_Spring                        ; Offset_0x078E84
                dc.w    $8B80
                dc.l    Horizontal_Spring                      ; Offset_0x078FA0
                dc.w    $8E00
PLC_23_End:
;===============================================================================
; Sprites carregados para uso na fase Aquatic Ruin
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso na fase Sky Chase
; [ Início ] 
;===============================================================================
Sky_Chase_Sprites_0: ; Offset_0x042840:
PLC_24:
                dc.w    (((PLC_24_End-PLC_24-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Tornado                                ; Offset_0x08CC44
                dc.w    $A000
PLC_24_End:
;-------------------------------------------------------------------------------
Sky_Chase_Sprites_1: ; Offset_0x042848:
PLC_25:
                dc.w    (((PLC_25_End-PLC_25-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Clouds                                 ; Offset_0x08DAFC
                dc.w    $A9E0
                dc.l    Vertical_Helix_Spr                     ; Offset_0x08DEB8
                dc.w    $AC20
                dc.l    Horizontal_Helix_Spr                   ; Offset_0x08DEE8
                dc.w    $79A0
                dc.l    Balkiry                                ; Offset_0x08BC16
                dc.w    $ACA0
                dc.l    Turtloid                               ; Offset_0x08A362
                dc.w    $7140
                dc.l    Nebula                                 ; Offset_0x08A142
                dc.w    $6DC0
PLC_25_End:
;===============================================================================
; Sprites carregados para uso na fase Sky Chase 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no resultado das fases 
; [ Início ] 
;===============================================================================
Level_Results_Sprites: ; Offset_0x04286E:
PLC_26:
                dc.w    (((PLC_26_End-PLC_26-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Title_Card_ZONE_123                    ; Offset_0x07D22C
                dc.w    $B000
                dc.l    Title_Card_Results                     ; Offset_0x07E86A
                dc.w    $B600
                dc.l    Mini_Sonic                             ; Offset_0x07C0AA
                dc.w    $BE80
                dc.l    Perfect                                ; Offset_0x07EEBE
                dc.w    $A800
PLC_26_End:
;===============================================================================
; Sprites carregados para uso no resultado das fases 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no final das fases  
; [ Início ] 
;===============================================================================
End_Level_Sprites: ; Offset_0x042888:
PLC_27:
                dc.w    (((PLC_27_End-PLC_27-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    End_Panel                              ; Offset_0x079BDE
                dc.w    $8680
PLC_27_End:
;===============================================================================
; Sprites carregados para uso no final das fases 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Chemical Plant 
; [ Início ] 
;===============================================================================
Chemical_Plant_Boss_Sprites: ; Offset_0x042890:
PLC_28:
                dc.w    (((PLC_28_End-PLC_28-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Robotnik_Ship                          ; Offset_0x083BF6
                dc.w    $8400
                dc.l    CPz_Boss                               ; Offset_0x084332
                dc.w    $A000
                dc.l    Ship_Boost                             ; Offset_0x084F18
                dc.w    $8300
                dc.l    Boss_Smokes                            ; Offset_0x084F96
                dc.w    $AE00
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_28_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Chemical Plant 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Emerald Hill 
; [ Início ] 
;===============================================================================
Emerald_Hill_Boss_Sprites: ; Offset_0x0428B0:
PLC_29:
                dc.w    (((PLC_29_End-PLC_29-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Robotnik_Ship                          ; Offset_0x083BF6
                dc.w    $7400
                dc.l    EHz_Boss_Car                           ; Offset_0x08507C
                dc.w    $8000
                dc.l    Ehz_Boss_Blades                        ; Offset_0x085868
                dc.w    $AD80
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_29_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Emerald Hill 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Hill Top  
; [ Início ] 
;===============================================================================
Hill_Top_Boss_Sprites: ; Offset_0x0428CA:
PLC_2A:
                dc.w    (((PLC_2A_End-PLC_2A-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Robotnik_Ship                          ; Offset_0x083BF6
                dc.w    $7820
                dc.l    HTz_Boss_Fire_Cannon                   ; Offset_0x08595C
                dc.w    $8420
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
                dc.l    Boss_Smokes                            ; Offset_0x084F96
                dc.w    $BC80
PLC_2A_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Hill Top  
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Aquatic Ruin 
; [ Início ] 
;===============================================================================
Aquatic_Ruin_Boss_Sprites: ; Offset_0x0428E4:
PLC_2B:
                dc.w    (((PLC_2B_End-PLC_2B-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Robotnik_Ship                          ; Offset_0x083BF6
                dc.w    $A000
                dc.l    ARz_Boss                               ; Offset_0x086128
                dc.w    $7C00
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_2B_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Aquatic Ruin 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Mystic Cave
; [ Início ] 
;===============================================================================
Mystic_Cave_Boss_Sprites: ; Offset_0x0428F8:
PLC_2C:
                dc.w    (((PLC_2C_End-PLC_2C-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Robotnik_Ship                          ; Offset_0x083BF6
                dc.w    $A000
                dc.l    MCz_Boss                               ; Offset_0x086B6E
                dc.w    $7800
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_2C_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Mystic Cave
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Casino Night
; [ Início ] 
;===============================================================================
Casino_Night_Boss_Sprites: ; Offset_0x04290C:
PLC_2D:
                dc.w    (((PLC_2D_End-PLC_2D-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Robotnik_Ship                          ; Offset_0x083BF6
                dc.w    $A000
                dc.l    CNz_Boss                               ; Offset_0x087AAC
                dc.w    $80E0
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_2D_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Casino Night
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Metropolis 
; [ Início ] 
;===============================================================================
Metropolis_Boss_Sprites: ; Offset_0x042920:
PLC_2E:
                dc.w    (((PLC_2E_End-PLC_2E-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Robotnik_Ship                          ; Offset_0x083BF6
                dc.w    $A000
                dc.l    Mz_Boss_Balls_And_Robotniks            ; Offset_0x088DA6
                dc.w    $6F80
                dc.l    Ship_Boost                             ; Offset_0x084F18
                dc.w    $AC00
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_2E_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Metropolis 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Oil Ocean
; [ Início ] 
;===============================================================================
Oil_Ocean_Boss_Sprites: ; Offset_0x04293A:
PLC_2F:
                dc.w    (((PLC_2F_End-PLC_2F-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    OOz_Boss                               ; Offset_0x0882D6
                dc.w    $7180
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_2F_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Oil Ocean
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Death Egg 
; [ Início ] 
;===============================================================================
Death_Egg_Boss_Sprites: ; Offset_0x042948:
PLC_30:
                dc.w    (((PLC_30_End-PLC_30-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_30_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Death Egg
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Death Egg (Último chefe do jogo) 
; [ Início ] 
;===============================================================================
Final_Boss_Sprites: ; Offset_0x042950:
PLC_31:
                dc.w    (((PLC_31_End-PLC_31-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Robotnik_Final                         ; Offset_0x08F024
                dc.w    $6600
PLC_31_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Death Egg (Último chefe do jogo) 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Emerald Hill
; [ Início ] 
;===============================================================================
Emerald_Hill_Flickies_Sprites: ; Offset_0x042958:
PLC_32:
                dc.w    (((PLC_32_End-PLC_32-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Squirrel                               ; Offset_0x07F0A2
                dc.w    $B000
                dc.l    Blue_Bird                              ; Offset_0x07EF60
                dc.w    $B280
PLC_32_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Emerald Hill
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Mystic Cave
; [ Início ] 
;===============================================================================
Mystic_Cave_Flickies_Sprites: ; Offset_0x042966:
PLC_33:
                dc.w    (((PLC_33_End-PLC_33-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Mouse                                  ; Offset_0x07F206
                dc.w    $B000
                dc.l    White_Bird                             ; Offset_0x07F340
                dc.w    $B280
PLC_33_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Mystic Cave
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Metropolis 
; [ Início ] 
;===============================================================================
Metropolis_Flickies_Sprites: ; Offset_0x042974:
PLC_34:
                dc.w    (((PLC_34_End-PLC_34-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Monkey                                 ; Offset_0x07F4A2
                dc.w    $B000
                dc.l    Black_Bird                             ; Offset_0x07F5E2
                dc.w    $B280
PLC_34_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Metropolis 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Death Egg
; [ Início ] 
;===============================================================================
Death_Egg_Flickies_Sprites: ; Offset_0x042982:
PLC_35:
                dc.w    (((PLC_35_End-PLC_35-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Pig                                    ; Offset_0x07F710
                dc.w    $B000
                dc.l    White_Bird                             ; Offset_0x07F340
                dc.w    $B280
PLC_35_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Death Egg
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Hidden Palace
; [ Início ] 
;===============================================================================
Hidden_Palace_Flickies_Sprites: ; Offset_0x042990:
PLC_36:
                dc.w    (((PLC_36_End-PLC_36-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Mouse                                  ; Offset_0x07F206
                dc.w    $B000
                dc.l    Seal                                   ; Offset_0x07F846
                dc.w    $B280
PLC_36_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Hidden Palace
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Oil Ocean 
; [ Início ] 
;===============================================================================
Oil_Ocean_Flickies_Sprites: ; Offset_0x04299E:
PLC_37:
                dc.w    (((PLC_37_End-PLC_37-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Penguin                                ; Offset_0x07F962
                dc.w    $B000
                dc.l    Seal                                   ; Offset_0x07F846
                dc.w    $B280
PLC_37_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Oil Ocean 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Sky Chase
; [ Início ] 
;===============================================================================
Sky_Chase_Flickies_Sprites: ; Offset_0x0429AC:
PLC_38:
                dc.w    (((PLC_38_End-PLC_38-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Turtle                                 ; Offset_0x07FADE
                dc.w    $B000
                dc.l    White_Bird                             ; Offset_0x07F340
                dc.w    $B280
PLC_38_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Sky Chase
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Casino Night
; [ Início ] 
;===============================================================================
Casino_Night_Flickies_Sprites: ; Offset_0x0429BA:
PLC_39:
                dc.w    (((PLC_39_End-PLC_39-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Bear                                   ; Offset_0x07FC90
                dc.w    $B000
                dc.l    Blue_Bird                              ; Offset_0x07EF60
                dc.w    $B280
PLC_39_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Casino Night
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Chemical Plant
; [ Início ] 
;===============================================================================
Chemical_Plant_Flickies_Sprites: ; Offset_0x0429C8:
PLC_3A:
                dc.w    (((PLC_3A_End-PLC_3A-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Rabbit                                 ; Offset_0x07FDD2
                dc.w    $B000
                dc.l    Black_Bird                             ; Offset_0x07F5E2
                dc.w    $B280
PLC_3A_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Chemical Plant
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Aquatic Ruin
; [ Início ] 
;===============================================================================
Aquatic_Ruin_Flickies_Sprites: ; Offset_0x0429D6:
PLC_3B:
                dc.w    (((PLC_3B_End-PLC_3B-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Penguin                                ; Offset_0x07F962
                dc.w    $B000
                dc.l    Blue_Bird                              ; Offset_0x07EF60
                dc.w    $B280
PLC_3B_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Aquatic Ruin
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no Special Stage
; [ Início ] 
;===============================================================================
Special_Stage_Sprites_0: ; Offset_0x0429E4:
PLC_3C:
                dc.w    (((PLC_3C_End-PLC_3C-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    SS_Emerald                             ; Offset_0x0DE8AC
                dc.w    $2E80
                dc.l    SS_Wings_Hand                          ; Offset_0x0DEAF4
                dc.w    $3440
                dc.l    SS_HUD_Font                            ; Offset_0x0DD48A
                dc.w    $3F40
                dc.l    SS_Player_Shadow                       ; Offset_0x0DDFA4
                dc.w    $4780
                dc.l    SS_Player_Diagonal_Shadow              ; Offset_0x0DE05A
                dc.w    $4C40
                dc.l    SS_Player_Vertical_Shadow              ; Offset_0x0DE120
                dc.w    $5380
                dc.l    SS_Bomb_Explosion                      ; Offset_0x0DE188
                dc.w    $56A0
                dc.l    SS_Rings                               ; Offset_0x0DDA7E
                dc.w    $6440
                dc.l    SS_START                               ; Offset_0x0DD790
                dc.w    $7140
                dc.l    SS_PAYMW_vs                            ; Offset_0x0DD9C8
                dc.w    $7BE0
                dc.l    SS_Background_8x8_Tiles                ; Offset_0x0DCD68
                dc.w    $E000
                dc.l    SS_Background_Stars                    ; Offset_0x0DD8CE
                dc.w    $EFE0
                dc.l    SS_Tails_Text                          ; Offset_0x0E247E
                dc.w    $F480
PLC_3C_End:
;-------------------------------------------------------------------------------
Special_Stage_Sprites_1: ; Offset_0x042A34:
PLC_3D:
                dc.w    (((PLC_3D_End-PLC_3D-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    SS_Bombs                               ; Offset_0x0DE4BC
                dc.w    $7140
PLC_3D_End:
;===============================================================================
; Sprites carregados para uso no Special Stage
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Wing Fortress 
; [ Início ] 
;===============================================================================
Wing_Fortress_Boss_Sprites: ; Offset_0x042A3C:
PLC_3E:
                dc.w    (((PLC_3E_End-PLC_3E-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Spikeball_Laser                        ; Offset_0x08E138
                dc.w    $6F20
                dc.l    Robotnik                               ; Offset_0x08EA5A
                dc.w    $A300
                dc.l    Robotnik_Faces                         ; Offset_0x08E886
                dc.w    $A000
                dc.l    Robotnik_Body                          ; Offset_0x08EE52
                dc.w    $AC80
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_3E_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Wing Fortress 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso na perseguição do Robotnik com o Tornado melhorado 
; [ Início ]    com turbina na Wing Fortress 
;===============================================================================
Wing_Fortress_Chase_Sprites: ; Offset_0x042A5C:
PLC_3F:
                dc.w    (((PLC_3F_End-PLC_3F-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Tornado                                ; Offset_0x08CC44
                dc.w    $A000
                dc.l    Tornado_Rocket                         ; Offset_0x090520
                dc.w    $AC20
                dc.l    Clouds                                 ; Offset_0x08DAFC
                dc.w    $A9E0
PLC_3F_End:
;===============================================================================
; Sprites carregados para uso na perseguição do Robotnik com o Tornado melhorado 
; [ Término ]   com turbina na Wing Fortress  
;===============================================================================

;===============================================================================
; Sprites carregados para uso no final das fases ao derrotar o chefe de fase
; [ Início ] 
;===============================================================================
Boss_Defeated_Sprites_0: ; Offset_0x042A70:
PLC_40:
                dc.w    (((PLC_40_End-PLC_40-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Egg_Prison                             ; Offset_0x07BA32
                dc.w    $D000
PLC_40_End:
;-------------------------------------------------------------------------------
Boss_Defeated_Sprites_1: ; Offset_0x042A78:
PLC_41:
                dc.w    (((PLC_41_End-PLC_41-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Explosion                              ; Offset_0x07B592
                dc.w    $B480
PLC_41_End:
;===============================================================================
; Sprites carregados para uso no final das fases ao derrotar o chefe de fase
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos resultados do Special Stage
; [ Início ] 
;===============================================================================
Special_Stage_Results_Sprites: ; Offset_0x042A80:
PLC_42:
                dc.w    (((PLC_42_End-PLC_42-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Title_Card_ZONE_123                    ; Offset_0x07D22C
                dc.w    $B000
                dc.l    Title_Card_Results                     ; Offset_0x07E86A
                dc.w    $B600
                dc.l    Mini_Miles                             ; Offset_0x07C2F2
                dc.w    $BE80
                dc.l    Perfect                                ; Offset_0x07EEBE
                dc.w    $A800
PLC_42_End:
;===============================================================================
; Sprites carregados para uso nos resultados do Special Stage 
; [ Término ] 
;===============================================================================

;===============================================================================
; Carga dos sprites das fases       
; [ Término ]
;===============================================================================     

;===============================================================================
; Carga dos Sprites de uma compilação anterior (Left over)
; [ Início ]
;===============================================================================   

;===============================================================================
; Sprites carregados para uso na fase Death Egg
; [ Início ] 
;===============================================================================        
; Offset_0x042A9A:
                dc.w    ((Robotnik)&($FFFF))                   ; Offset_0x08EA5A
                dc.w    $A300
                dc.l    Robotnik_Faces                         ; Offset_0x08E886
                dc.w    $A000
                dc.l    Robotnik_Body                          ; Offset_0x08EE52
                dc.w    $AC80
PLC_PB_21_End:
;===============================================================================
; Sprites carregados para uso na fase Death Egg
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso na fase Aquatic Ruin
; [ Início ] 
;===============================================================================
PB_Aquatic_Ruin_Sprites_0: ; Offset_0x042AAA:
PLC_PB_22:
                dc.w    (((PLC_PB_22_End-PLC_PB_22-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    ARz_Automatic_Door                     ; Offset_0x0830D2
                dc.w    $7F00
                dc.l    ARz_Water_Surface                      ; Offset_0x082E02
                dc.w    $8000
                dc.l    ARz_Leaves                             ; Offset_0x082EE8
                dc.w    $8200
                dc.l    ARz_Arrow_Shooter                      ; Offset_0x082F74
                dc.w    $82E0
PLC_PB_22_End:
;-------------------------------------------------------------------------------
PB_Aquatic_Ruin_Sprites_1: ; Offset_0x042AC4:
PLC_PB_23:
                dc.w    (((PLC_PB_23_End-PLC_PB_23-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Chop_Chop                              ; Offset_0x089B9A
                dc.w    $A760
                dc.l    Whisp                                  ; Offset_0x0895E4
                dc.w    $A000
                dc.l    Grounder                               ; Offset_0x08970E
                dc.w    $A120
                dc.l    Oxygen_Bubbles                         ; Offset_0x07AD16
                dc.w    $AB60
                dc.l    Spikes                                 ; Offset_0x07995C
                dc.w    $8680
                dc.l    Diagonal_Spring_1                      ; Offset_0x07AB4A
                dc.w    $8800
                dc.l    Vertical_Spring                        ; Offset_0x078E84
                dc.w    $8B80
                dc.l    Horizontal_Spring                      ; Offset_0x078FA0
                dc.w    $8E00
PLC_PB_23_End:
;===============================================================================
; Sprites carregados para uso na fase Aquatic Ruin
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso na fase Sky Chase
; [ Início ] 
;===============================================================================
PB_Sky_Chase_Sprites_0: ; Offset_0x042AF6:
PLC_PB_24:
                dc.w    (((PLC_PB_24_End-PLC_PB_24-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Tornado                                ; Offset_0x08CC44
                dc.w    $A000
PLC_PB_24_End:
;-------------------------------------------------------------------------------
PB_Sky_Chase_Sprites_1: ; Offset_0x042AFE:
PLC_PB_25:
                dc.w    (((PLC_PB_25_End-PLC_PB_25-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Clouds                                 ; Offset_0x08DAFC
                dc.w    $A9E0
                dc.l    Vertical_Helix_Spr                     ; Offset_0x08DEB8
                dc.w    $AC20
                dc.l    Horizontal_Helix_Spr                   ; Offset_0x08DEE8
                dc.w    $79A0
                dc.l    Balkiry                                ; Offset_0x08BC16
                dc.w    $ACA0
                dc.l    Turtloid                               ; Offset_0x08A362
                dc.w    $7140
                dc.l    Nebula                                 ; Offset_0x08A142
                dc.w    $6DC0
PLC_PB_25_End:
;===============================================================================
; Sprites carregados para uso na fase Sky Chase 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no resultado das fases 
; [ Início ] 
;===============================================================================
PB_Level_Results_Sprites: ; Offset_0x042B24:
PLC_PB_26:
                dc.w    (((PLC_PB_26_End-PLC_PB_26-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Title_Card_ZONE_123                    ; Offset_0x07D22C
                dc.w    $B000
                dc.l    Title_Card_Results                     ; Offset_0x07E86A
                dc.w    $B600
                dc.l    Mini_Sonic                             ; Offset_0x07C0AA
                dc.w    $BE80
                dc.l    Perfect                                ; Offset_0x07EEBE
                dc.w    $A800
PLC_PB_26_End:
;===============================================================================
; Sprites carregados para uso no resultado das fases 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no final das fases  
; [ Início ] 
;===============================================================================
PB_End_Level_Sprites: ; Offset_0x042B3E:
PLC_PB_27:
                dc.w    (((PLC_PB_27_End-PLC_PB_27-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    End_Panel                              ; Offset_0x079BDE
                dc.w    $8680
PLC_PB_27_End:
;===============================================================================
; Sprites carregados para uso no final das fases 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Chemical Plant 
; [ Início ] 
;===============================================================================
PB_Chemical_Plant_Boss_Sprites: ; Offset_0x042B46:
PLC_PB_28:
                dc.w    (((PLC_PB_28_End-PLC_PB_28-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Robotnik_Ship                          ; Offset_0x083BF6
                dc.w    $8400
                dc.l    CPz_Boss                               ; Offset_0x084332
                dc.w    $A000
                dc.l    Ship_Boost                             ; Offset_0x084F18
                dc.w    $8300
                dc.l    Boss_Smokes                            ; Offset_0x084F96
                dc.w    $AE00
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_PB_28_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Chemical Plant 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Emerald Hill 
; [ Início ] 
;===============================================================================
PB_Emerald_Hill_Boss_Sprites: ; Offset_0x042B66:
PLC_PB_29:
                dc.w    (((PLC_PB_29_End-PLC_PB_29-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Robotnik_Ship                          ; Offset_0x083BF6
                dc.w    $7400
                dc.l    EHz_Boss_Car                           ; Offset_0x08507C
                dc.w    $8000
                dc.l    Ehz_Boss_Blades                        ; Offset_0x085868
                dc.w    $AD80
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_PB_29_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Emerald Hill 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Hill Top  
; [ Início ] 
;===============================================================================
PB_Hill_Top_Boss_Sprites: ; Offset_0x042B80:
PLC_PB_2A:
                dc.w    (((PLC_PB_2A_End-PLC_PB_2A-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Robotnik_Ship                          ; Offset_0x083BF6
                dc.w    $7820
                dc.l    HTz_Boss_Fire_Cannon                   ; Offset_0x08595C
                dc.w    $8420
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
                dc.l    Boss_Smokes                            ; Offset_0x084F96
                dc.w    $BC80
PLC_PB_2A_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Hill Top  
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Aquatic Ruin 
; [ Início ] 
;===============================================================================
PB_Aquatic_Ruin_Boss_Sprites: ; Offset_0x042B9A:
PLC_PB_2B:
                dc.w    (((PLC_PB_2B_End-PLC_PB_2B-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Robotnik_Ship                          ; Offset_0x083BF6
                dc.w    $A000
                dc.l    ARz_Boss                               ; Offset_0x086128
                dc.w    $7C00
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_PB_2B_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Aquatic Ruin 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Mystic Cave
; [ Início ] 
;===============================================================================
PB_Mystic_Cave_Boss_Sprites: ; Offset_0x042BAE:
PLC_PB_2C:
                dc.w    (((PLC_PB_2C_End-PLC_PB_2C-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Robotnik_Ship                          ; Offset_0x083BF6
                dc.w    $A000
                dc.l    MCz_Boss                               ; Offset_0x086B6E
                dc.w    $7800
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_PB_2C_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Mystic Cave
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Casino Night
; [ Início ] 
;===============================================================================
PB_Casino_Night_Boss_Sprites: ; Offset_0x042BC2:
PLC_PB_2D:
                dc.w    (((PLC_PB_2D_End-PLC_PB_2D-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Robotnik_Ship                          ; Offset_0x083BF6
                dc.w    $A000
                dc.l    CNz_Boss                               ; Offset_0x087AAC
                dc.w    $80E0
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_PB_2D_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Casino Night
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Metropolis 
; [ Início ] 
;===============================================================================
PB_Metropolis_Boss_Sprites: ; Offset_0x042BD6:
PLC_PB_2E:
                dc.w    (((PLC_PB_2E_End-PLC_PB_2E-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Robotnik_Ship                          ; Offset_0x083BF6
                dc.w    $A000
                dc.l    Mz_Boss_Balls_And_Robotniks            ; Offset_0x088DA6
                dc.w    $6F80
                dc.l    Ship_Boost                             ; Offset_0x084F18
                dc.w    $AC00
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_PB_2E_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Metropolis 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Oil Ocean
; [ Início ] 
;===============================================================================
PB_Oil_Ocean_Boss_Sprites: ; Offset_0x042BF0:
PLC_PB_2F:
                dc.w    (((PLC_PB_2F_End-PLC_PB_2F-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    OOz_Boss                               ; Offset_0x0882D6
                dc.w    $7180
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_PB_2F_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Oil Ocean
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Death Egg 
; [ Início ] 
;===============================================================================
PB_Death_Egg_Boss_Sprites: ; Offset_0x042BFE:
PLC_PB_30:
                dc.w    (((PLC_PB_30_End-PLC_PB_30-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_PB_30_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Death Egg
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Death Egg (Último chefe do jogo) 
; [ Início ] 
;===============================================================================
PB_Final_Boss_Sprites: ; Offset_0x042C06:
PLC_PB_31:
                dc.w    (((PLC_PB_31_End-PLC_PB_31-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Robotnik_Final                         ; Offset_0x08F024
                dc.w    $6600
PLC_PB_31_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Death Egg (Último chefe do jogo) 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Emerald Hill
; [ Início ] 
;===============================================================================
PB_Emerald_Hill_Flickies_Sprites: ; Offset_0x042C0E:
PLC_PB_32:
                dc.w    (((PLC_PB_32_End-PLC_PB_32-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Squirrel                               ; Offset_0x07F0A2
                dc.w    $B000
                dc.l    Blue_Bird                              ; Offset_0x07EF60
                dc.w    $B280
PLC_PB_32_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Emerald Hill
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Mystic Cave
; [ Início ] 
;===============================================================================
PB_Mystic_Cave_Flickies_Sprites: ; Offset_0x042C1C:
PLC_PB_33:
                dc.w    (((PLC_PB_33_End-PLC_PB_33-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Mouse                                  ; Offset_0x07F206
                dc.w    $B000
                dc.l    White_Bird                             ; Offset_0x07F340
                dc.w    $B280
PLC_PB_33_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Mystic Cave
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Metropolis 
; [ Início ] 
;===============================================================================
PB_Metropolis_Flickies_Sprites: ; Offset_0x042C2A:
PLC_PB_34:
                dc.w    (((PLC_PB_34_End-PLC_PB_34-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Monkey                                 ; Offset_0x07F4A2
                dc.w    $B000
                dc.l    Black_Bird                             ; Offset_0x07F5E2
                dc.w    $B280
PLC_PB_34_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Metropolis 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Death Egg
; [ Início ] 
;===============================================================================
PB_Death_Egg_Flickies_Sprites: ; Offset_0x042C38:
PLC_PB_35:
                dc.w    (((PLC_PB_35_End-PLC_PB_35-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Pig                                    ; Offset_0x07F710
                dc.w    $B000
                dc.l    White_Bird                             ; Offset_0x07F340
                dc.w    $B280
PLC_PB_35_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Death Egg
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Hidden Palace
; [ Início ] 
;===============================================================================
PB_Hidden_Palace_Flickies_Sprites: ; Offset_0x042C46:
PLC_PB_36:
                dc.w    (((PLC_PB_36_End-PLC_PB_36-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Mouse                                  ; Offset_0x07F206
                dc.w    $B000
                dc.l    Seal                                   ; Offset_0x07F846
                dc.w    $B280
PLC_PB_36_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Hidden Palace
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Oil Ocean 
; [ Início ] 
;===============================================================================
PB_Oil_Ocean_Flickies_Sprites: ; Offset_0x042C54:
PLC_PB_37:
                dc.w    (((PLC_PB_37_End-PLC_PB_37-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Penguin                                ; Offset_0x07F962
                dc.w    $B000
                dc.l    Seal                                   ; Offset_0x07F846
                dc.w    $B280
PLC_PB_37_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Oil Ocean 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Sky Chase
; [ Início ] 
;===============================================================================
PB_Sky_Chase_Flickies_Sprites: ; Offset_0x042C62:
PLC_PB_38:
                dc.w    (((PLC_PB_38_End-PLC_PB_38-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Turtle                                 ; Offset_0x07FADE
                dc.w    $B000
                dc.l    White_Bird                             ; Offset_0x07F340
                dc.w    $B280
PLC_PB_38_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Sky Chase
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Casino Night
; [ Início ] 
;===============================================================================
PB_Casino_Night_Flickies_Sprites: ; Offset_0x042C70:
PLC_PB_39:
                dc.w    (((PLC_PB_39_End-PLC_PB_39-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Bear                                   ; Offset_0x07FC90
                dc.w    $B000
                dc.l    Blue_Bird                              ; Offset_0x07EF60
                dc.w    $B280
PLC_PB_39_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Casino Night
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Chemical Plant
; [ Início ] 
;===============================================================================
PB_Chemical_Plant_Flickies_Sprites: ; Offset_0x042C7E:
PLC_PB_3A:
                dc.w    (((PLC_PB_3A_End-PLC_PB_3A-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Rabbit                                 ; Offset_0x07FDD2
                dc.w    $B000
                dc.l    Black_Bird                             ; Offset_0x07F5E2
                dc.w    $B280
PLC_PB_3A_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Chemical Plant
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos animais da fase Aquatic Ruin
; [ Início ] 
;===============================================================================
PB_Aquatic_Ruin_Flickies_Sprites: ; Offset_0x042C8C:
PLC_PB_3B:
                dc.w    (((PLC_PB_3B_End-PLC_PB_3B-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Penguin                                ; Offset_0x07F962
                dc.w    $B000
                dc.l    Blue_Bird                              ; Offset_0x07EF60
                dc.w    $B280
PLC_PB_3B_End:
;===============================================================================
; Sprites carregados para uso nos animais da fase Aquatic Ruin
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no Special Stage
; [ Início ] 
;===============================================================================
PB_Special_Stage_Sprites_0: ; Offset_0x042C9A:
PLC_PB_3C:
                dc.w    (((PLC_PB_3C_End-PLC_PB_3C-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    SS_Emerald                             ; Offset_0x0DE8AC
                dc.w    $2E80
                dc.l    SS_Wings_Hand                          ; Offset_0x0DEAF4
                dc.w    $3440
                dc.l    SS_HUD_Font                            ; Offset_0x0DD48A
                dc.w    $3F40
                dc.l    SS_Player_Shadow                       ; Offset_0x0DDFA4
                dc.w    $4780
                dc.l    SS_Player_Diagonal_Shadow              ; Offset_0x0DE05A
                dc.w    $4C40
                dc.l    SS_Player_Vertical_Shadow              ; Offset_0x0DE120
                dc.w    $5380
                dc.l    SS_Bomb_Explosion                      ; Offset_0x0DE188
                dc.w    $56A0
                dc.l    SS_Rings                               ; Offset_0x0DDA7E
                dc.w    $6440
                dc.l    SS_START                               ; Offset_0x0DD790
                dc.w    $7140
                dc.l    SS_PAYMW_vs                            ; Offset_0x0DD9C8
                dc.w    $7BE0
                dc.l    SS_Background_8x8_Tiles                ; Offset_0x0DCD68
                dc.w    $E000
                dc.l    SS_Background_Stars                    ; Offset_0x0DD8CE
                dc.w    $EFE0
                dc.l    SS_Tails_Text                          ; Offset_0x0E247E
                dc.w    $F480
PLC_PB_3C_End:
;-------------------------------------------------------------------------------
PB_Special_Stage_Sprites_1: ; Offset_0x042CEA:
PLC_PB_3D:
                dc.w    (((PLC_PB_3D_End-PLC_PB_3D-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    SS_Bombs                               ; Offset_0x0DE4BC
                dc.w    $7140
PLC_PB_3D_End:
;===============================================================================
; Sprites carregados para uso no Special Stage
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso no chefe da fase Wing Fortress 
; [ Início ] 
;===============================================================================
PB_Wing_Fortress_Boss_Sprites: ; Offset_0x042CF2:
PLC_PB_3E:
                dc.w    (((PLC_PB_3E_End-PLC_PB_3E-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Spikeball_Laser                        ; Offset_0x08E138
                dc.w    $6F20
                dc.l    Robotnik                               ; Offset_0x08EA5A
                dc.w    $A300
                dc.l    Robotnik_Faces                         ; Offset_0x08E886
                dc.w    $A000
                dc.l    Robotnik_Body                          ; Offset_0x08EE52
                dc.w    $AC80
                dc.l    Boss_Explosions                        ; Offset_0x084890
                dc.w    $B000
PLC_PB_3E_End:
;===============================================================================
; Sprites carregados para uso no chefe da fase Wing Fortress 
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso na perseguição do Robotnik com o Tornado melhorado 
; [ Início ]    com turbina na Wing Fortress 
;===============================================================================
PB_Wing_Fortress_Chase_Sprites: ; Offset_0x042D12:
PLC_PB_3F:
                dc.w    (((PLC_PB_3F_End-PLC_PB_3F-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Tornado                                ; Offset_0x08CC44
                dc.w    $A000
                dc.l    Tornado_Rocket                         ; Offset_0x090520
                dc.w    $AC20
                dc.l    Clouds                                 ; Offset_0x08DAFC
                dc.w    $A9E0
PLC_PB_3F_End:
;===============================================================================
; Sprites carregados para uso na perseguição do Robotnik com o Tornado melhorado 
; [ Término ]   com turbina na Wing Fortress  
;===============================================================================

;===============================================================================
; Sprites carregados para uso no final das fases ao derrotar o chefe de fase
; [ Início ] 
;===============================================================================
PB_Boss_Defeated_Sprites_0: ; Offset_0x042D26:
PLC_PB_40:
                
                dc.w    (((PLC_PB_40_End-PLC_PB_40-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Egg_Prison                             ; Offset_0x07BA32
                dc.w    $D000
PLC_PB_40_End:
;-------------------------------------------------------------------------------
PB_Boss_Defeated_Sprites_1: ; Offset_0x042D2E:
PLC_PB_41:
                dc.w    (((PLC_PB_41_End-PLC_PB_41-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Explosion                              ; Offset_0x07B592
                dc.w    $B480
PLC_PB_41_End:
;===============================================================================
; Sprites carregados para uso no final das fases ao derrotar o chefe de fase
; [ Término ] 
;===============================================================================

;===============================================================================
; Sprites carregados para uso nos resultados do Special Stage
; [ Início ] 
;===============================================================================
PB_Special_Stage_Results_Sprites: ; Offset_0x042D36:
PLC_PB_42:
                dc.w    (((PLC_PB_42_End-PLC_PB_42-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Title_Card_ZONE_123                    ; Offset_0x07D22C
                dc.w    $B000
                dc.l    Title_Card_Results                     ; Offset_0x07E86A
                dc.w    $B600
                dc.l    Mini_Miles                             ; Offset_0x07C2F2
                dc.w    $BE80
                dc.l    Perfect                                ; Offset_0x07EEBE
                dc.w    $A800
PLC_PB_42_End:
;===============================================================================
; Sprites carregados para uso nos resultados do Special Stage 
; [ Término ] 
;===============================================================================   

;===============================================================================
; Carga dos Sprites de uma compilação anterior (Left over)
; [ Término ]
;=============================================================================== 

                cnop    $00000000, $00042D50, $00000000   
;===============================================================================
; Início da área de dados do jogo o único código nesta área é do driver de Som
;===============================================================================
AngleMap:                                                     ; Offset_0x042D50:  
                incbin  'data\all\anglemap.dat'
Colision_Array_1:                                             ; Offset_0x042E50: 
                incbin  'data\all\c_array1.dat'
Colision_Array_2:                                             ; Offset_0x043E50: 
                incbin  'data\all\c_array2.dat'  
;-------------------------------------------------------------------------------                 
Emerald_Hill_Colision_1:                                      ; Offset_0x044E50:
                incbin  'data\ehz\ehz_col1.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000     ; Filler
Emerald_Hill_Colision_2:                                      ; Offset_0x044F40:
                incbin  'data\ehz\ehz_col2.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000     ; Filler
                dc.b    $00                                   ; Filler
;-------------------------------------------------------------------------------                 
Metropolis_Colision:                                          ; Offset_0x045040:
                incbin  'data\mz\mz_col.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000 ; Filler
;-------------------------------------------------------------------------------                 
Hidden_Palace_Colision:                                       ; Offset_0x045100:
              ; incbin  'data\hpz\hpz_col.kos'
;-------------------------------------------------------------------------------               
Oil_Ocean_Colision:                                           ; Offset_0x045100:
                incbin  'data\ooz\ooz_col.kos'
                dc.w    $0000, $0000, $0000                   ; Filler
;-------------------------------------------------------------------------------                 
Mystic_Cave_Colision:                                         ; Offset_0x045200:
                incbin  'data\mcz\mcz_col.kos'
                dc.w    $0000                                 ; Filler
;------------------------------------------------------------------------------- 
Casino_Night_Colision_1:                                      ; Offset_0x0452A0:
                incbin  'data\cnz\cnz_col1.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000     ; Filler
                dc.b    $00                                   ; Filler
Casino_Night_Colision_2:                                      ; Offset_0x045330:
                incbin  'data\cnz\cnz_col2.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000 ; Filler
;-------------------------------------------------------------------------------  
Chemical_Plant_Colision_1:                                    ; Offset_0x0453C0:
                incbin  'data\cpz\cpz_col1.kos'
                dc.w    $0000, $0000, $0000                   ; Filler
Chemical_Plant_Colision_2:                                    ; Offset_0x0454E0:
                incbin  'data\cpz\cpz_col2.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000 ; Filler
                dc.b    $00
;------------------------------------------------------------------------------- 
Aquatic_Ruin_Colision_1:                                      ; Offset_0x045610:
                incbin  'data\arz\arz_col1.kos'
                dc.w    $0000, $0000                          ; Filler
Aquatic_Ruin_Colision_2:                                      ; Offset_0x045760:
                incbin  'data\arz\arz_col2.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000 ; Filler
;-------------------------------------------------------------------------------                   
Wing_Fortress_Colision_1:                                     ; Offset_0x0458C0:
                incbin  'data\wfz\wfz_col1.kos'
                dc.w    $0000, $0000, $0000                   ; Filler
Wing_Fortress_Colision_2:                                     ; Offset_0x0459A0:   
                incbin  'data\wfz\wfz_col2.kos'
                dc.w    $0000, $0000, $0000                   ; Filler
;-------------------------------------------------------------------------------                 
Null_Colision:                                                ; Offset_0x045A80:
;-------------------------------------------------------------------------------    

;=============================================================================== 
; Mapa das fases comprimidos no formato Kosinski
; [ Início ]
;===============================================================================  
Level_Layout: ; Offset_0x045A80:                
                dc.w    EHz_Map_Act1-Level_Layout ; Offset_0x045AC4
                dc.w    EHz_Map_Act2-Level_Layout ; Offset_0x045C84
                dc.w    EHz_Map_Act1-Level_Layout ; Offset_0x045AC4
                dc.w    EHz_Map_Act1-Level_Layout ; Offset_0x045AC4
                dc.w    EHz_Map_Act1-Level_Layout ; Offset_0x045AC4
                dc.w    EHz_Map_Act1-Level_Layout ; Offset_0x045AC4
                dc.w    EHz_Map_Act1-Level_Layout ; Offset_0x045AC4
                dc.w    EHz_Map_Act1-Level_Layout ; Offset_0x045AC4
                dc.w    Mz_Map_Act1-Level_Layout  ; Offset_0x045E74
                dc.w    Mz_Map_Act2-Level_Layout  ; Offset_0x0462A4
                dc.w    Mz_Map_Act3-Level_Layout  ; Offset_0x046684
                dc.w    Mz_Map_Act3-Level_Layout  ; Offset_0x046684
                dc.w    WFz_Map_Act1-Level_Layout ; Offset_0x046B04
                dc.w    WFz_Map_Act2-Level_Layout ; Offset_0x046B04
                dc.w    HTz_Map_Act1-Level_Layout ; Offset_0x046DD4
                dc.w    HTz_Map_Act2-Level_Layout ; Offset_0x047044
                dc.w    HPz_Map_Act1-Level_Layout ; Offset_0x047404
                dc.w    HPz_Map_Act2-Level_Layout ; Offset_0x047404
                dc.w    EHz_Map_Act1-Level_Layout ; Offset_0x045AC4
                dc.w    EHz_Map_Act1-Level_Layout ; Offset_0x045AC4
                dc.w    OOz_Map_Act1-Level_Layout ; Offset_0x047404
                dc.w    OOz_Map_Act2-Level_Layout ; Offset_0x047784
                dc.w    MCz_Map_Act1-Level_Layout ; Offset_0x047B24
                dc.w    MCz_Map_Act2-Level_Layout ; Offset_0x047D24
                dc.w    CNz_Map_Act1-Level_Layout ; Offset_0x047FF4
                dc.w    CNz_Map_Act2-Level_Layout ; Offset_0x0483C4
                dc.w    CPz_Map_Act1-Level_Layout ; Offset_0x048774
                dc.w    CPz_Map_Act2-Level_Layout ; Offset_0x048A84
                dc.w    DEz_Map_Act1-Level_Layout ; Offset_0x048DE4
                dc.w    DEz_Map_Act1-Level_Layout ; Offset_0x048DE4
                dc.w    ARz_Map_Act1-Level_Layout ; Offset_0x048E94
                dc.w    ARz_Map_Act2-Level_Layout ; Offset_0x049264
                dc.w    SCz_Map_Act1-Level_Layout ; Offset_0x049634
                dc.w    SCz_Map_Act1-Level_Layout ; Offset_0x049634
;-------------------------------------------------------------------------------
EHz_Map_Act1:                                                 ; Offset_0x045AC4:
                incbin  'data\ehz\ehz_map1.kos'
                dc.w    $0000, $0000, $0000, $0000            ; Filler
EHz_Map_Act2:                                                 ; Offset_0x045C84: 
                incbin  'data\ehz\ehz_map2.kos'
                dc.w    $0000, $0000, $0000, $0000            ; Filler
                dc.b    $00                                   ; Filler
;-------------------------------------------------------------------------------                
Mz_Map_Act1:                                                  ; Offset_0x045E74:
                incbin  'data\mz\mz_map1.kos'
                dc.w    $0000, $0000, $0000, $0000            ; Filler
Mz_Map_Act2:                                                  ; Offset_0x0462A4:
                incbin  'data\mz\mz_map2.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000     ; Filler
Mz_Map_Act3:                                                  ; Offset_0x046684: 
                incbin  'data\mz\mz_map3.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000     ; Filler
                dc.b    $00                                   ; Filler
;-------------------------------------------------------------------------------                 
WFz_Map_Act1:                                                 ; Offset_0x046B04:  
WFz_Map_Act2:                                                 ; Offset_0x046B04: 
                incbin  'data\wfz\wfz_map.kos'
                dc.b    $00                                   ; Filler
;-------------------------------------------------------------------------------   
HTz_Map_Act1:                                                 ; Offset_0x046DD4:
                incbin  'data\htz\htz_map1.kos'
                dc.w    $0000, $0000, $0000                   ; Filler
HTz_Map_Act2:                                                 ; Offset_0x047044:
                incbin  'data\htz\htz_map2.kos'                    
;-------------------------------------------------------------------------------     
HPz_Map_Act1:                                                 ; Offset_0x047404:                 
HPz_Map_Act2:                                                 ; Offset_0x047404:
              ; incbin  'data\hpz\hpz_map.kos'
;-------------------------------------------------------------------------------  
OOz_Map_Act1:                                                 ; Offset_0x047404: 
                incbin  'data\ooz\ooz_map1.kos'
                dc.w    $0000                                 ; Filler
OOz_Map_Act2:                                                 ; Offset_0x047784:  
                incbin  'data\ooz\ooz_map2.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000 ; Filler
                dc.b    $00                                   ; Filler
;-------------------------------------------------------------------------------
MCz_Map_Act1:                                                 ; Offset_0x047B24:
                incbin  'data\mcz\mcz_map1.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000     ; Filler
                dc.b    $00                                   ; Filler
MCz_Map_Act2:                                                 ; Offset_0x047D24:
                incbin  'data\mcz\mcz_map2.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000 ; Filler
;-------------------------------------------------------------------------------
CNz_Map_Act1:                                                 ; Offset_0x047FF4:
                incbin  'data\cnz\cnz_map1.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000 ; Filler
CNz_Map_Act2:                                                 ; Offset_0x0483C4:
                incbin  'data\cnz\cnz_map2.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000 ; Filler
;-------------------------------------------------------------------------------
CPz_Map_Act1:                                                 ; Offset_0x048774:
                incbin  'data\cpz\cpz_map1.kos'
                dc.w    $0000, $0000                          ; Filler
                dc.b    $00                                   ; Filler
CPz_Map_Act2:                                                 ; Offset_0x048A84:
                incbin  'data\cpz\cpz_map2.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000 ; Filler
                dc.b    $00                                   ; Filler
;-------------------------------------------------------------------------------
DEz_Map_Act1:                                                 ; Offset_0x048DE4:
DEz_Map_Act2:                                                 ; Offset_0x048DE4:
                incbin  'data\dez\dez_map.kos'
                dc.w    $0000                                 ; Filler
                dc.b    $00                                   ; Filler
;-------------------------------------------------------------------------------
ARz_Map_Act1:                                                 ; Offset_0x048E94:
                incbin  'data\arz\arz_map1.kos'
                dc.w    $0000, $0000, $0000                   ; Filler
                dc.b    $00                                   ; Filler
ARz_Map_Act2:                                                 ; Offset_0x049264:
                incbin  'data\arz\arz_map2.kos'
                dc.w    $0000, $0000                          ; Filler
;-------------------------------------------------------------------------------
SCz_Map_Act1:                                                 ; Offset_0x049634: 
SCz_Map_Act2:                                                 ; Offset_0x049634:
                incbin  'data\scz\scz_map.kos'
                dc.b    $00                                   ; Filler
;=============================================================================== 
; Mapa das fases comprimidos no formato Kosinski
; [ Término ]
;===============================================================================  
EHz_Flower_1:                                                 ; Offset_0x049714:
                incbin  'data\ehz\flower_1.dat'
EHz_Flower_2:                                                 ; Offset_0x049794:  
                incbin  'data\ehz\flower_2.dat'
EHz_Flower_3:                                                 ; Offset_0x049814:
                incbin  'data\ehz\flower_3.dat'
EHz_Flower_4:                                                 ; Offset_0x049894:
                incbin  'data\ehz\flower_4.dat'
EHz_Dyn_Wall:                                                 ; Offset_0x049914: 
                incbin  'data\ehz\dyn_wall.dat' 
Hill_Top_Background:                                          ; Offset_0x049A14:
                incbin  'data\htz\backgnd.nem'  
Hill_Top_Background_Unc:                                      ; Offset_0x04A33E:
                incbin  'data\htz\backgnd.dat' 
Mz_Spinnig_Cylinder:                                          ; Offset_0x04A73E: 
                incbin  'data\mz\spin_cyl.dat'
Mz_Lava:                                                      ; Offset_0x04B73E:
                incbin  'data\mz\lava.dat'
Mz_Pistons:                                                   ; Offset_0x04BD3E:
                incbin  'data\mz\pistons.dat'
HPz_Orbs: ; dados removidos porém o script está funcional     ; Offset_0x04BF7E:
              ; incbin  'data\hpz\orbs.dat'  
OOz_Red_Balls:                                                ; Offset_0x04BF7E:
                incbin  'data\ooz\red_ball.dat'
OOz_Rotating_Square_1:                                        ; Offset_0x04C0FE:
                incbin  'data\ooz\r_squar1.dat'
OOz_Rotating_Square_2:                                        ; Offset_0x04C2FE:
                incbin  'data\ooz\r_squar2.dat'
OOz_Oil_1:                                                    ; Offset_0x04C4FE;
                incbin  'data\ooz\oil_1.dat'
OOz_Oil_2:                                                    ; Offset_0x04CCFE:
                incbin  'data\ooz\oil_2.dat'                                              
CNz_Symbols_Spr:                                              ; Offset_0x04D4FE:
                incbin  'data\cnz\symbols.dat'                                                
CNz_Slot_Machine_Checks:                                      ; Offset_0x04EEFE:
                incbin  'data\cnz\sm_check.dat' 
CPz_Dyn_Background:                                           ; Offset_0x04FAFE:
                incbin  'data\cpz\backgnd.dat' 
ARz_Water_Falls_1:                                            ; Offset_0x04FCFE:
                incbin  'data\arz\water_f1.dat'
ARz_Water_Falls_2:                                            ; Offset_0x04FDFE:
                incbin  'data\arz\water_f2.dat'
ARz_Water_Falls_3:                                            ; Offset_0x04FEFE:                
                incbin  'data\arz\water_f3.dat'  
;-------------------------------------------------------------------------------                
                cnop    $00000000, $00050000, $00000000   
;-------------------------------------------------------------------------------                 
Sonic_Sprites:                                                ; Offset_0x050000:
                incbin  'data\sprites\sonic.dat'  
Miles_Sprites:                                                ; Offset_0x064320:           
                incbin  'data\sprites\miles.dat' 
;===============================================================================
; Mapeamento do Sonic      
; [ Início ]
;=============================================================================== 
Sonic_Mappings: ; Offset_0x06FBE0                     
                dc.w    Offset_0x06FD8C-Sonic_Mappings
                dc.w    Offset_0x06FD8E-Sonic_Mappings
                dc.w    Offset_0x06FDB0-Sonic_Mappings
                dc.w    Offset_0x06FDC2-Sonic_Mappings
                dc.w    Offset_0x06FDE4-Sonic_Mappings
                dc.w    Offset_0x06FE06-Sonic_Mappings
                dc.w    Offset_0x06FE30-Sonic_Mappings
                dc.w    Offset_0x06FE4A-Sonic_Mappings
                dc.w    Offset_0x06FE5C-Sonic_Mappings
                dc.w    Offset_0x06FE6E-Sonic_Mappings
                dc.w    Offset_0x06FE80-Sonic_Mappings
                dc.w    Offset_0x06FE92-Sonic_Mappings
                dc.w    Offset_0x06FEB4-Sonic_Mappings
                dc.w    Offset_0x06FED6-Sonic_Mappings
                dc.w    Offset_0x06FEF0-Sonic_Mappings
                dc.w    Offset_0x06FF12-Sonic_Mappings
                dc.w    Offset_0x06FF2C-Sonic_Mappings
                dc.w    Offset_0x06FF3E-Sonic_Mappings
                dc.w    Offset_0x06FF58-Sonic_Mappings
                dc.w    Offset_0x06FF7A-Sonic_Mappings
                dc.w    Offset_0x06FF94-Sonic_Mappings
                dc.w    Offset_0x06FFA6-Sonic_Mappings
                dc.w    Offset_0x06FFC8-Sonic_Mappings
                dc.w    Offset_0x06FFF2-Sonic_Mappings
                dc.w    Offset_0x070014-Sonic_Mappings
                dc.w    Offset_0x070036-Sonic_Mappings
                dc.w    Offset_0x070060-Sonic_Mappings
                dc.w    Offset_0x07008A-Sonic_Mappings
                dc.w    Offset_0x0700AC-Sonic_Mappings
                dc.w    Offset_0x0700D6-Sonic_Mappings
                dc.w    Offset_0x0700F0-Sonic_Mappings
                dc.w    Offset_0x07010A-Sonic_Mappings
                dc.w    Offset_0x070124-Sonic_Mappings
                dc.w    Offset_0x070136-Sonic_Mappings
                dc.w    Offset_0x070150-Sonic_Mappings
                dc.w    Offset_0x07016A-Sonic_Mappings
                dc.w    Offset_0x070184-Sonic_Mappings
                dc.w    Offset_0x070196-Sonic_Mappings
                dc.w    Offset_0x0701B8-Sonic_Mappings
                dc.w    Offset_0x0701E2-Sonic_Mappings
                dc.w    Offset_0x070204-Sonic_Mappings
                dc.w    Offset_0x070226-Sonic_Mappings
                dc.w    Offset_0x070248-Sonic_Mappings
                dc.w    Offset_0x070272-Sonic_Mappings
                dc.w    Offset_0x070294-Sonic_Mappings
                dc.w    Offset_0x0702B6-Sonic_Mappings
                dc.w    Offset_0x0702C8-Sonic_Mappings
                dc.w    Offset_0x0702DA-Sonic_Mappings
                dc.w    Offset_0x0702EC-Sonic_Mappings
                dc.w    Offset_0x0702FE-Sonic_Mappings
                dc.w    Offset_0x070320-Sonic_Mappings
                dc.w    Offset_0x07033A-Sonic_Mappings
                dc.w    Offset_0x07035C-Sonic_Mappings
                dc.w    Offset_0x070376-Sonic_Mappings
                dc.w    Offset_0x070388-Sonic_Mappings
                dc.w    Offset_0x07039A-Sonic_Mappings
                dc.w    Offset_0x0703AC-Sonic_Mappings
                dc.w    Offset_0x0703BE-Sonic_Mappings
                dc.w    Offset_0x0703D8-Sonic_Mappings
                dc.w    Offset_0x0703EA-Sonic_Mappings
                dc.w    Offset_0x070404-Sonic_Mappings
                dc.w    Offset_0x070416-Sonic_Mappings
                dc.w    Offset_0x070420-Sonic_Mappings
                dc.w    Offset_0x07042A-Sonic_Mappings
                dc.w    Offset_0x070434-Sonic_Mappings
                dc.w    Offset_0x07043E-Sonic_Mappings
                dc.w    Offset_0x070448-Sonic_Mappings
                dc.w    Offset_0x070452-Sonic_Mappings
                dc.w    Offset_0x07045C-Sonic_Mappings
                dc.w    Offset_0x070466-Sonic_Mappings
                dc.w    Offset_0x070470-Sonic_Mappings
                dc.w    Offset_0x07047A-Sonic_Mappings
                dc.w    Offset_0x070484-Sonic_Mappings
                dc.w    Offset_0x07049E-Sonic_Mappings
                dc.w    Offset_0x0704B8-Sonic_Mappings
                dc.w    Offset_0x0704D2-Sonic_Mappings
                dc.w    Offset_0x0704EC-Sonic_Mappings
                dc.w    Offset_0x0704F6-Sonic_Mappings
                dc.w    Offset_0x070500-Sonic_Mappings
                dc.w    Offset_0x070512-Sonic_Mappings
                dc.w    Offset_0x070524-Sonic_Mappings
                dc.w    Offset_0x07053E-Sonic_Mappings
                dc.w    Offset_0x070558-Sonic_Mappings
                dc.w    Offset_0x07056A-Sonic_Mappings
                dc.w    Offset_0x07057C-Sonic_Mappings
                dc.w    Offset_0x070596-Sonic_Mappings
                dc.w    Offset_0x0705B8-Sonic_Mappings
                dc.w    Offset_0x0705D2-Sonic_Mappings
                dc.w    Offset_0x0705EC-Sonic_Mappings
                dc.w    Offset_0x070606-Sonic_Mappings
                dc.w    Offset_0x070620-Sonic_Mappings
                dc.w    Offset_0x07063A-Sonic_Mappings
                dc.w    Offset_0x07064C-Sonic_Mappings
                dc.w    Offset_0x07066E-Sonic_Mappings
                dc.w    Offset_0x070690-Sonic_Mappings
                dc.w    Offset_0x0706AA-Sonic_Mappings
                dc.w    Offset_0x0706C4-Sonic_Mappings
                dc.w    Offset_0x0706DE-Sonic_Mappings
                dc.w    Offset_0x0706F0-Sonic_Mappings
                dc.w    Offset_0x0706FA-Sonic_Mappings
                dc.w    Offset_0x07070C-Sonic_Mappings
                dc.w    Offset_0x070726-Sonic_Mappings
                dc.w    Offset_0x070740-Sonic_Mappings
                dc.w    Offset_0x07075A-Sonic_Mappings
                dc.w    Offset_0x07076C-Sonic_Mappings
                dc.w    Offset_0x07077E-Sonic_Mappings
                dc.w    Offset_0x070798-Sonic_Mappings
                dc.w    Offset_0x0707AA-Sonic_Mappings
                dc.w    Offset_0x0707C4-Sonic_Mappings
                dc.w    Offset_0x0707DE-Sonic_Mappings
                dc.w    Offset_0x0707E8-Sonic_Mappings
                dc.w    Offset_0x070802-Sonic_Mappings
                dc.w    Offset_0x07081C-Sonic_Mappings
                dc.w    Offset_0x070846-Sonic_Mappings
                dc.w    Offset_0x070870-Sonic_Mappings
                dc.w    Offset_0x070882-Sonic_Mappings
                dc.w    Offset_0x070894-Sonic_Mappings
                dc.w    Offset_0x0708A6-Sonic_Mappings
                dc.w    Offset_0x0708C0-Sonic_Mappings
                dc.w    Offset_0x0708E2-Sonic_Mappings
                dc.w    Offset_0x0708FC-Sonic_Mappings
                dc.w    Offset_0x07090E-Sonic_Mappings
                dc.w    Offset_0x070928-Sonic_Mappings
                dc.w    Offset_0x07094A-Sonic_Mappings
                dc.w    Offset_0x070964-Sonic_Mappings
                dc.w    Offset_0x070976-Sonic_Mappings
                dc.w    Offset_0x070998-Sonic_Mappings
                dc.w    Offset_0x0709C2-Sonic_Mappings
                dc.w    Offset_0x0709EC-Sonic_Mappings
                dc.w    Offset_0x070A16-Sonic_Mappings
                dc.w    Offset_0x070A48-Sonic_Mappings
                dc.w    Offset_0x070A7A-Sonic_Mappings
                dc.w    Offset_0x070AA4-Sonic_Mappings
                dc.w    Offset_0x070ACE-Sonic_Mappings
                dc.w    Offset_0x070AE8-Sonic_Mappings
                dc.w    Offset_0x070B02-Sonic_Mappings
                dc.w    Offset_0x070B1C-Sonic_Mappings
                dc.w    Offset_0x070B2E-Sonic_Mappings
                dc.w    Offset_0x070B48-Sonic_Mappings
                dc.w    Offset_0x070B62-Sonic_Mappings
                dc.w    Offset_0x070B7C-Sonic_Mappings
                dc.w    Offset_0x070B8E-Sonic_Mappings
                dc.w    Offset_0x070BB0-Sonic_Mappings
                dc.w    Offset_0x070BDA-Sonic_Mappings
                dc.w    Offset_0x070BFC-Sonic_Mappings
                dc.w    Offset_0x070C1E-Sonic_Mappings
                dc.w    Offset_0x070C40-Sonic_Mappings
                dc.w    Offset_0x070C6A-Sonic_Mappings
                dc.w    Offset_0x070C8C-Sonic_Mappings
                dc.w    Offset_0x070CAE-Sonic_Mappings
                dc.w    Offset_0x070CC8-Sonic_Mappings
                dc.w    Offset_0x070CEA-Sonic_Mappings
                dc.w    Offset_0x070D04-Sonic_Mappings
                dc.w    Offset_0x070D16-Sonic_Mappings
                dc.w    Offset_0x070D30-Sonic_Mappings
                dc.w    Offset_0x070D52-Sonic_Mappings
                dc.w    Offset_0x070D6C-Sonic_Mappings
                dc.w    Offset_0x070D7E-Sonic_Mappings
                dc.w    Offset_0x070DA8-Sonic_Mappings
                dc.w    Offset_0x070DDA-Sonic_Mappings
                dc.w    Offset_0x070E04-Sonic_Mappings
                dc.w    Offset_0x070E2E-Sonic_Mappings
                dc.w    Offset_0x070E60-Sonic_Mappings
                dc.w    Offset_0x070E92-Sonic_Mappings
                dc.w    Offset_0x070EBC-Sonic_Mappings
                dc.w    Offset_0x070EEE-Sonic_Mappings
                dc.w    Offset_0x070F08-Sonic_Mappings
                dc.w    Offset_0x070F22-Sonic_Mappings
                dc.w    Offset_0x070F3C-Sonic_Mappings
                dc.w    Offset_0x070F4E-Sonic_Mappings
                dc.w    Offset_0x070F68-Sonic_Mappings
                dc.w    Offset_0x070F82-Sonic_Mappings
                dc.w    Offset_0x070F9C-Sonic_Mappings
                dc.w    Offset_0x070FAE-Sonic_Mappings
                dc.w    Offset_0x070FD0-Sonic_Mappings
                dc.w    Offset_0x070FFA-Sonic_Mappings
                dc.w    Offset_0x071024-Sonic_Mappings
                dc.w    Offset_0x071046-Sonic_Mappings
                dc.w    Offset_0x071068-Sonic_Mappings
                dc.w    Offset_0x071092-Sonic_Mappings
                dc.w    Offset_0x0710BC-Sonic_Mappings
                dc.w    Offset_0x0710E6-Sonic_Mappings
                dc.w    Offset_0x071108-Sonic_Mappings
                dc.w    Offset_0x07112A-Sonic_Mappings
                dc.w    Offset_0x07114C-Sonic_Mappings
                dc.w    Offset_0x071176-Sonic_Mappings
                dc.w    Offset_0x071198-Sonic_Mappings
                dc.w    Offset_0x0711BA-Sonic_Mappings
                dc.w    Offset_0x0711DC-Sonic_Mappings
                dc.w    Offset_0x071206-Sonic_Mappings
                dc.w    Offset_0x071228-Sonic_Mappings
                dc.w    Offset_0x07124A-Sonic_Mappings
                dc.w    Offset_0x07126C-Sonic_Mappings
                dc.w    Offset_0x07128E-Sonic_Mappings
                dc.w    Offset_0x0712A0-Sonic_Mappings
                dc.w    Offset_0x0712BA-Sonic_Mappings
                dc.w    Offset_0x0712D4-Sonic_Mappings
                dc.w    Offset_0x0712EE-Sonic_Mappings
                dc.w    Offset_0x071308-Sonic_Mappings
                dc.w    Offset_0x071322-Sonic_Mappings
                dc.w    Offset_0x07133C-Sonic_Mappings
                dc.w    Offset_0x071356-Sonic_Mappings
                dc.w    Offset_0x071370-Sonic_Mappings
                dc.w    Offset_0x07138A-Sonic_Mappings
                dc.w    Offset_0x0713B4-Sonic_Mappings
                dc.w    Offset_0x0713D6-Sonic_Mappings
                dc.w    Offset_0x0713F8-Sonic_Mappings
                dc.w    Offset_0x07141A-Sonic_Mappings
                dc.w    Offset_0x071434-Sonic_Mappings
                dc.w    Offset_0x07144E-Sonic_Mappings
                dc.w    Offset_0x071468-Sonic_Mappings
                dc.w    Offset_0x07148A-Sonic_Mappings
                dc.w    Offset_0x0714AC-Sonic_Mappings
                dc.w    Offset_0x0714CE-Sonic_Mappings
Offset_0x06FD8C:
                dc.w    $0000
Offset_0x06FD8E:
                dc.w    $0004
                dc.l    $E4050000, $0000FFF8, $EC030004, $0002FFF0
                dc.l    $F4090008, $0004FFF8, $0409000E, $0007FFF8
Offset_0x06FDB0:
                dc.w    $0002
                dc.l    $EC0B0000, $0000FFF0, $0C09000C, $0006FFF8
Offset_0x06FDC2:
                dc.w    $0004
                dc.l    $EC030000, $0000FFF0, $EC050004, $0002FFF8
                dc.l    $FC050008, $0004FFF8, $0C09000C, $0006FFF8
Offset_0x06FDE4:
                dc.w    $0004
                dc.l    $EC030000, $0000FFF0, $EC050004, $0002FFF8
                dc.l    $FC050008, $0004FFF8, $0C09000C, $0006FFF8
Offset_0x06FE06:
                dc.w    $0005
                dc.l    $EC030000, $0000FFF0, $EC050004, $0002FFF8
                dc.l    $FC050008, $0004FFF8, $0C01000C, $0006FFF8
                dc.l    $0C05000E, $00070000
Offset_0x06FE30:
                dc.w    $0003
                dc.l    $EC030000, $0000FFF0, $EC070004, $0002FFF8
                dc.l    $0C09000C, $0006FFF8
Offset_0x06FE4A:
                dc.w    $0002
                dc.l    $F40B0000, $0000FFF0, $0401000C, $00060008
Offset_0x06FE5C:
                dc.w    $0002
                dc.l    $F40B0000, $0000FFE8, $0405000C, $00060000
Offset_0x06FE6E:
                dc.w    $0002
                dc.l    $F40B0000, $0000FFE8, $0405000C, $00060000
Offset_0x06FE80:
                dc.w    $0002
                dc.l    $E40B0000, $0000FFF0, $040D000C, $0006FFF0
Offset_0x06FE92:
                dc.w    $0004
                dc.l    $E4050000, $0000FFF8, $EC030004, $0002FFF0
                dc.l    $F4090008, $0004FFF8, $0409000E, $0007FFF8
Offset_0x06FEB4:
                dc.w    $0004
                dc.l    $EC030000, $0000FFF0, $E4050004, $0002FFF8
                dc.l    $F4050008, $0004FFF8, $0409000C, $0006FFF8
Offset_0x06FED6:
                dc.w    $0003
                dc.l    $EB0D0000, $0000FFEE, $03010008, $0004FFEC
                dc.l    $FB0F000A, $0005FFF4
Offset_0x06FEF0:
                dc.w    $0004
                dc.l    $EC0D0000, $0000FFEE, $04010008, $0004FFEC
                dc.l    $FC0B000A, $0005FFF4, $04010016, $000B000C
Offset_0x06FF12:
                dc.w    $0003
                dc.l    $ED0D0000, $0000FFED, $FD090008, $0004FFF4
                dc.l    $0D05000E, $0007FFF7
Offset_0x06FF2C:
                dc.w    $0002
                dc.l    $EC090000, $0000FFF4, $FC0F0006, $0003FFEE
Offset_0x06FF3E:
                dc.w    $0003
                dc.l    $EB090000, $0000FFF4, $FB0F0006, $0003FFEE
                dc.l    $FB010016, $000B000E
Offset_0x06FF58:
                dc.w    $0004
                dc.l    $EC090000, $0000FFF4, $04010006, $0003FFEC
                dc.l    $FC0B0008, $0004FFF4, $04010014, $000A000C
Offset_0x06FF7A:
                dc.w    $0003
                dc.l    $ED0D0000, $0000FFED, $FD090008, $0004FFF4
                dc.l    $0D05000E, $0007FFF7
Offset_0x06FF94:
                dc.w    $0002
                dc.l    $EC0D0000, $0000FFEE, $FC0B0008, $0004FFF3
Offset_0x06FFA6:
                dc.w    $0004
                dc.l    $EB090000, $0000FFEA, $FB090006, $0003FFEA
                dc.l    $F305000C, $00060002, $0B010010, $0008FFFA
Offset_0x06FFC8:
                dc.w    $0005
                dc.l    $EC090000, $0000FFEB, $EC010006, $00030003
                dc.l    $FC0D0008, $0004FFEB, $FC050010, $0008000B
                dc.l    $0C010014, $000AFFFB
Offset_0x06FFF2:
                dc.w    $0004
                dc.l    $ED070000, $0000FFEC, $ED030008, $0004FFFC
                dc.l    $F501000C, $00060004, $0505000E, $00070004
Offset_0x070014:
                dc.w    $0004
                dc.l    $EC090000, $0000FFEB, $EC010006, $00030003
                dc.l    $FC050008, $0004FFEB, $FC0B000C, $0006FFFB
Offset_0x070036:
                dc.w    $0005
                dc.l    $EB090000, $0000FFEA, $EB010006, $00030002
                dc.l    $FB0D0008, $0004FFEA, $F3010010, $0008000A
                dc.l    $0B050012, $0009FFF2
Offset_0x070060:
                dc.w    $0005
                dc.l    $EC090000, $0000FFEB, $EC010006, $00030003
                dc.l    $FC0D0008, $0004FFEB, $FA050010, $0008000B
                dc.l    $0C010014, $000AFFFB
Offset_0x07008A:
                dc.w    $0004
                dc.l    $ED070000, $0000FFEC, $ED030008, $0004FFFC
                dc.l    $F501000C, $00060004, $0505000E, $00070004
Offset_0x0700AC:
                dc.w    $0005
                dc.l    $EC090000, $0000FFEB, $FC090006, $0003FFEB
                dc.l    $F401000C, $00060003, $0C01000E, $0007FFFB
                dc.l    $04050010, $00080003
Offset_0x0700D6:
                dc.w    $0003
                dc.l    $F2070000, $0000FFEB, $EC0B0008, $0004FFFB
                dc.l    $0C050014, $000A0003
Offset_0x0700F0:
                dc.w    $0003
                dc.l    $F2070000, $0000FFEC, $EC0B0008, $0004FFFC
                dc.l    $0C050014, $000A0004
Offset_0x07010A:
                dc.w    $0003
                dc.l    $F3070000, $0000FFED, $F4030008, $0004FFFD
                dc.l    $F905000C, $00060005
Offset_0x070124:
                dc.w    $0002
                dc.l    $F4070000, $0000FFEC, $F20B0008, $0004FFFC
Offset_0x070136:
                dc.w    $0003
                dc.l    $F4070000, $0000FFEB, $E3050008, $0004FFFB
                dc.l    $F30B000C, $0006FFFB
Offset_0x070150:
                dc.w    $0003
                dc.l    $F4070000, $0000FFEC, $EC0B0008, $0004FFFC
                dc.l    $0C050014, $000A0004
Offset_0x07016A:
                dc.w    $0003
                dc.l    $F3070000, $0000FFED, $F4030008, $0004FFFD
                dc.l    $F905000C, $00060005
Offset_0x070184:
                dc.w    $0002
                dc.l    $F2070000, $0000FFEC, $F40B0008, $0004FFFC
Offset_0x070196:
                dc.w    $0004
                dc.l    $EE050000, $0000FFF3, $FE070004, $0002FFEB
                dc.l    $FE0D000C, $0006FFFB, $0E010014, $000AFFFB
Offset_0x0701B8:
                dc.w    $0005
                dc.l    $DD050000, $0000FFFC, $ED090004, $0002FFF4
                dc.l    $FD07000A, $0005FFEC, $FD0D0012, $0009FFFC
                dc.l    $0D01001A, $000DFFFC
Offset_0x0701E2:
                dc.w    $0004
                dc.l    $EC0D0000, $0000FFF5, $FC070008, $0004FFED
                dc.l    $FC050010, $0008FFFD, $0C010014, $000AFFFD
Offset_0x070204:
                dc.w    $0004
                dc.l    $ED0D0000, $0000FFF4, $FD070008, $0004FFEC
                dc.l    $FD090010, $0008FFFC, $0D010016, $000BFFFC
Offset_0x070226:
                dc.w    $0004
                dc.l    $EE090000, $0000FFF3, $FE070006, $0003FFEB
                dc.l    $FE0D000E, $0007FFFB, $0E010016, $000BFFFB
Offset_0x070248:
                dc.w    $0005
                dc.l    $DD050000, $0000FFFA, $ED090004, $0002FFF4
                dc.l    $FD07000A, $0005FFEC, $FD0D0012, $0009FFFC
                dc.l    $0D01001A, $000DFFFC
Offset_0x070272:
                dc.w    $0004
                dc.l    $EC0D0000, $0000FFF5, $FC070008, $0004FFED
                dc.l    $FC050010, $0008FFFD, $0C010014, $000AFFFD
Offset_0x070294:
                dc.w    $0004
                dc.l    $ED0D0000, $0000FFF4, $FD070008, $0004FFEC
                dc.l    $FD090010, $0008FFFC, $0D010016, $000BFFFC
Offset_0x0702B6:
                dc.w    $0002
                dc.l    $EE090000, $0000FFF8, $FE0F0006, $0003FFF0
Offset_0x0702C8:
                dc.w    $0002
                dc.l    $EE090000, $0000FFF8, $FE0F0006, $0003FFF0
Offset_0x0702DA:
                dc.w    $0002
                dc.l    $EE090000, $0000FFF8, $FE0F0006, $0003FFF0
Offset_0x0702EC:
                dc.w    $0002
                dc.l    $EE090000, $0000FFF8, $FE0F0006, $0003FFF0
Offset_0x0702FE:
                dc.w    $0004
                dc.l    $EC090000, $0000FFED, $EC010006, $00030005
                dc.l    $FC0D0008, $0004FFF4, $0C090010, $0008FFFA
Offset_0x070320:
                dc.w    $0003
                dc.l    $EC0D0000, $0000FFED, $FC0D0008, $0004FFF5
                dc.l    $0C090010, $0008FFF8
Offset_0x07033A:
                dc.w    $0004
                dc.l    $EC090000, $0000FFED, $EC010006, $00030005
                dc.l    $FC0D0008, $0004FFF4, $0C090010, $0008FFFD
Offset_0x07035C:
                dc.w    $0003
                dc.l    $EC0D0000, $0000FFED, $FC0D0008, $0004FFF5
                dc.l    $0C090010, $0008FFF8
Offset_0x070376:
                dc.w    $0002
                dc.l    $F0070000, $0000FFEE, $F00B0008, $0004FFFE
Offset_0x070388:
                dc.w    $0002
                dc.l    $F0070000, $0000FFEE, $F00B0008, $0004FFFE
Offset_0x07039A:
                dc.w    $0002
                dc.l    $F0070000, $0000FFEE, $F00B0008, $0004FFFE
Offset_0x0703AC:
                dc.w    $0002
                dc.l    $F0070000, $0000FFEE, $F00B0008, $0004FFFE
Offset_0x0703BE:
                dc.w    $0003
                dc.l    $E9010000, $0000FFF4, $F9070002, $0001FFEC
                dc.l    $EC0B000A, $0005FFFC
Offset_0x0703D8:
                dc.w    $0002
                dc.l    $F3070000, $0000FFEC, $EB0B0008, $0004FFFC
Offset_0x0703EA:
                dc.w    $0003
                dc.l    $E9010000, $0000FFF4, $F9070002, $0001FFEC
                dc.l    $EC0B000A, $0005FFFC
Offset_0x070404:
                dc.w    $0002
                dc.l    $F3070000, $0000FFEC, $EB0B0008, $0004FFFC
Offset_0x070416:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x070420:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x07042A:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x070434:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x07043E:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x070448:
                dc.w    $0001
                dc.l    $F80F0000, $0000FFF4
Offset_0x070452:
                dc.w    $0001
                dc.l    $F80F0000, $0000FFF4
Offset_0x07045C:
                dc.w    $0001
                dc.l    $F80F0000, $0000FFF4
Offset_0x070466:
                dc.w    $0001
                dc.l    $F80F0000, $0000FFF4
Offset_0x070470:
                dc.w    $0001
                dc.l    $F80F0000, $0000FFF4
Offset_0x07047A:
                dc.w    $0001
                dc.l    $F80F0000, $0000FFF4
Offset_0x070484:
                dc.w    $0003
                dc.l    $E5090000, $0000FFF3, $F5090006, $0003FFF3
                dc.l    $050D000C, $0006FFEB
Offset_0x07049E:
                dc.w    $0003
                dc.l    $E4090000, $0000FFF3, $F4090006, $0003FFF3
                dc.l    $0409000C, $0006FFF3
Offset_0x0704B8:
                dc.w    $0003
                dc.l    $E5090000, $0000FFF3, $F5090006, $0003FFF3
                dc.l    $050D000C, $0006FFEB
Offset_0x0704D2:
                dc.w    $0003
                dc.l    $E5090000, $0000FFF3, $F5090006, $0003FFF3
                dc.l    $0509000C, $0006FFF3
Offset_0x0704EC:
                dc.w    $0001
                dc.l    $F40B0000, $0000FFF6
Offset_0x0704F6:
                dc.w    $0001
                dc.l    $F40F0000, $0000FFF2
Offset_0x070500:
                dc.w    $0002
                dc.l    $F8010000, $0000FFEC, $F00F0002, $0001FFF4
Offset_0x070512:
                dc.w    $0002
                dc.l    $F0030000, $0000FFEC, $F00F0004, $0002FFF4
Offset_0x070524:
                dc.w    $0003
                dc.l    $E80F0000, $0000FFE8, $E8010010, $00080008
                dc.l    $F8050012, $00090008
Offset_0x07053E:
                dc.w    $0003
                dc.l    $E80F0000, $0000FFE8, $E8010010, $00080008
                dc.l    $F8050012, $00090008
Offset_0x070558:
                dc.w    $0002
                dc.l    $E80B0000, $0000FFF4, $0809000C, $0006FFF4
Offset_0x07056A:
                dc.w    $0002
                dc.l    $E80B0000, $0000FFF4, $0809000C, $0006FFF4
Offset_0x07057C:
                dc.w    $0003
                dc.l    $FC050000, $0000FFEC, $F40B0004, $0002FFFC
                dc.l    $F4010010, $00080014
Offset_0x070596:
                dc.w    $0004
                dc.l    $F4010000, $0000FFE8, $F4070002, $0001FFF0
                dc.l    $F4070802, $08010000, $F4010800, $08000010
Offset_0x0705B8:
                dc.w    $0003
                dc.l    $FC050800, $08000004, $F40B0804, $0802FFEC
                dc.l    $F4010810, $0808FFE4
Offset_0x0705D2:
                dc.w    $0003
                dc.l    $F4010000, $0000FFE4, $F40B0002, $0001FFEC
                dc.l    $FC01000E, $00070004
Offset_0x0705EC:
                dc.w    $0003
                dc.l    $F4010800, $08000014, $F40B0802, $0801FFFC
                dc.l    $FC01080E, $0807FFF4
Offset_0x070606:
                dc.w    $0003
                dc.l    $FC050000, $0000FFEC, $F40B0004, $0002FFFC
                dc.l    $F4010010, $00080014
Offset_0x070620:
                dc.w    $0003
                dc.l    $E4090000, $0000FFF4, $F40F0006, $0003FFEC
                dc.l    $04010016, $000B000C
Offset_0x07063A:
                dc.w    $0002
                dc.l    $E80B0000, $0000FFF4, $0805000C, $0006FFFC
Offset_0x07064C:
                dc.w    $0004
                dc.l    $EA010000, $0000FFE8, $EA0B0002, $0001FFF0
                dc.l    $EA01000E, $00070008, $0A0D0010, $0008FFF0
Offset_0x07066E:
                dc.w    $0004
                dc.l    $EA010000, $0000FFE8, $EA0B0002, $0001FFF0
                dc.l    $EA01000E, $00070008, $0A0D0010, $0008FFF0
Offset_0x070690:
                dc.w    $0003
                dc.l    $EA0D0000, $0000FFE8, $EA010008, $00040008
                dc.l    $FA0B000A, $0005FFF0
Offset_0x0706AA:
                dc.w    $0003
                dc.l    $E4090000, $0000FFF0, $F40B0006, $0003FFF0
                dc.l    $F4010012, $00090008
Offset_0x0706C4:
                dc.w    $0003
                dc.l    $E50B0000, $0000FFF0, $F401000C, $00060008
                dc.l    $0505000E, $0007FFF8
Offset_0x0706DE:
                dc.w    $0002
                dc.l    $EC0B0000, $0000FFF1, $FC01000C, $00060009
Offset_0x0706F0:
                dc.w    $0001
                dc.l    $EE0F0000, $0000FFF0
Offset_0x0706FA:
                dc.w    $0002
                dc.l    $F20B0000, $0000FFF0, $FA01000C, $00060008
Offset_0x07070C:
                dc.w    $0003
                dc.l    $E4010000, $00000000, $F40B0002, $0001FFF0
                dc.l    $F401000E, $00070008
Offset_0x070726:
                dc.w    $0003
                dc.l    $E5090000, $0000FFF0, $F50B0006, $0003FFF0
                dc.l    $ED030012, $00090008
Offset_0x070740:
                dc.w    $0003
                dc.l    $E4050000, $0000FFF8, $F40B0004, $0002FFF0
                dc.l    $F4010010, $00080008
Offset_0x07075A:
                dc.w    $0002
                dc.l    $ED0B0000, $0000FFF0, $F501000C, $00060008
Offset_0x07076C:
                dc.w    $0002
                dc.l    $F4010000, $0000FFF0, $F10B0002, $0001FFF8
Offset_0x07077E:
                dc.w    $0003
                dc.l    $E4050000, $0000FFF1, $F40B0004, $0002FFF0
                dc.l    $F4010010, $00080008
Offset_0x070798:
                dc.w    $0002
                dc.l    $E1050000, $0000FFF0, $F10F0004, $0002FFF0
Offset_0x0707AA:
                dc.w    $0003
                dc.l    $E8070000, $0000FFF0, $E0030008, $00040000
                dc.l    $0009000C, $00060000
Offset_0x0707C4:
                dc.w    $0003
                dc.l    $E8070000, $0000FFF0, $E0030008, $00040000
                dc.l    $0009000C, $00060000
Offset_0x0707DE:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFF5
Offset_0x0707E8:
                dc.w    $0003
                dc.l    $E60B0000, $0000FFF0, $EE01000C, $00060008
                dc.l    $0609000E, $0007FFF0
Offset_0x070802:
                dc.w    $0003
                dc.l    $E40A0000, $0000FFF0, $FC000009, $00040008
                dc.l    $FC0A000A, $0005FFF0
Offset_0x07081C:
                dc.w    $0005
                dc.l    $E4080000, $0000FFF0, $EC010003, $0001FFF0
                dc.l    $EC050005, $0002FFF8, $FC0A0009, $0004FFF0
                dc.l    $FD000012, $00090008
Offset_0x070846:
                dc.w    $0005
                dc.l    $E4080000, $0000FFF0, $EC010003, $0001FFF0
                dc.l    $EC050005, $0002FFF8, $FC0A0009, $0004FFF0
                dc.l    $FD000012, $00090008
Offset_0x070870:
                dc.w    $0002
                dc.l    $E70A0000, $0000FFF1, $FF0A0009, $0004FFF3
Offset_0x070882:
                dc.w    $0002
                dc.l    $E70A0000, $0000FFF1, $FF0A0009, $0004FFF3
Offset_0x070894:
                dc.w    $0002
                dc.l    $E70A0000, $0000FFF1, $FF0A0009, $0004FFF3
Offset_0x0708A6:
                dc.w    $0003
                dc.l    $E30E0000, $0000FFEE, $0301000C, $0006FFEC
                dc.l    $FB0F000E, $0007FFF4
Offset_0x0708C0:
                dc.w    $0004
                dc.l    $E40E0000, $0000FFEE, $0401000C, $0006FFEC
                dc.l    $FC0B000E, $0007FFF4, $0401001A, $000D000C
Offset_0x0708E2:
                dc.w    $0003
                dc.l    $E50E0000, $0000FFED, $FD09000C, $0006FFF4
                dc.l    $0D050012, $0009FFF7
Offset_0x0708FC:
                dc.w    $0002
                dc.l    $E40A0000, $0000FFF4, $FC0F0009, $0004FFEE
Offset_0x07090E:
                dc.w    $0003
                dc.l    $E30A0000, $0000FFF4, $FB0F0009, $0004FFEE
                dc.l    $FB010019, $000C000E
Offset_0x070928:
                dc.w    $0004
                dc.l    $E40A0000, $0000FFF4, $04010009, $0004FFEC
                dc.l    $FC0B000B, $0005FFF4, $04010017, $000B000C
Offset_0x07094A:
                dc.w    $0003
                dc.l    $E50E0000, $0000FFED, $FD09000C, $0006FFF4
                dc.l    $0D050012, $0009FFF7
Offset_0x070964:
                dc.w    $0002
                dc.l    $E40E0000, $0000FFEE, $FC0B000C, $0006FFF3
Offset_0x070976:
                dc.w    $0004
                dc.l    $EB0D0000, $0000FFE2, $F3050008, $00040002
                dc.l    $FB09000C, $0006FFEA, $0B010012, $0009FFFA
Offset_0x070998:
                dc.w    $0005
                dc.l    $EC0D0000, $0000FFE3, $EC010008, $00040003
                dc.l    $FC0D000A, $0005FFEB, $FC050012, $0009000B
                dc.l    $0C010016, $000BFFFB
Offset_0x0709C2:
                dc.w    $0005
                dc.l    $ED0A0000, $0000FFE4, $ED030009, $0004FFFC
                dc.l    $0500000D, $0006FFF4, $F501000E, $00070004
                dc.l    $05050010, $00080004
Offset_0x0709EC:
                dc.w    $0005
                dc.l    $E4000000, $0000FFF1, $EC0D0001, $0000FFE3
                dc.l    $EC010009, $00040003, $FC05000B, $0005FFEB
                dc.l    $FC0B000F, $0007FFFB
Offset_0x070A16:
                dc.w    $0006
                dc.l    $E3000000, $0000FFF0, $EB0D0001, $0000FFE2
                dc.l    $EB010009, $00040002, $F301000B, $0005000A
                dc.l    $FB0D000D, $0006FFEA, $0B050015, $000AFFF2
Offset_0x070A48:
                dc.w    $0006
                dc.l    $E4000000, $0000FFF1, $EC0D0001, $0000FFE3
                dc.l    $EC010009, $00040003, $FC0D000B, $0005FFEB
                dc.l    $FA050013, $0009000B, $0C010017, $000BFFFB
Offset_0x070A7A:
                dc.w    $0005
                dc.l    $ED0A0000, $0000FFE4, $ED030009, $0004FFFC
                dc.l    $0500000D, $0006FFF4, $F501000E, $00070004
                dc.l    $05050010, $00080004
Offset_0x070AA4:
                dc.w    $0005
                dc.l    $EC0D0000, $0000FFE3, $F4010008, $00040003
                dc.l    $FC09000A, $0005FFEB, $0C000010, $0008FFFB
                dc.l    $04050011, $00080003
Offset_0x070ACE:
                dc.w    $0003
                dc.l    $F20B0000, $0000FFE3, $EC0B000C, $0006FFFB
                dc.l    $0C050018, $000C0003
Offset_0x070AE8:
                dc.w    $0003
                dc.l    $F20B0000, $0000FFE4, $EC0B000C, $0006FFFC
                dc.l    $0C050018, $000C0004
Offset_0x070B02:
                dc.w    $0003
                dc.l    $F30B0000, $0000FFE5, $F403000C, $0006FFFD
                dc.l    $F9050010, $00080005
Offset_0x070B1C:
                dc.w    $0002
                dc.l    $F40A0000, $0000FFE4, $F20B0009, $0004FFFC
Offset_0x070B2E:
                dc.w    $0003
                dc.l    $F40A0000, $0000FFE3, $E3050009, $0004FFFB
                dc.l    $F30B000D, $0006FFFB
Offset_0x070B48:
                dc.w    $0003
                dc.l    $F40A0000, $0000FFE4, $EC0B0009, $0004FFFC
                dc.l    $0C050015, $000A0004
Offset_0x070B62:
                dc.w    $0003
                dc.l    $F30B0000, $0000FFE5, $F403000C, $0006FFFD
                dc.l    $F9050010, $00080005
Offset_0x070B7C:
                dc.w    $0002
                dc.l    $F40B0000, $0000FFE4, $F20B000C, $0006FFFC
Offset_0x070B8E:
                dc.w    $0004
                dc.l    $EE050000, $0000FFF3, $FE070004, $0002FFEB
                dc.l    $FE0D000C, $0006FFFB, $0E000014, $000AFFFB
Offset_0x070BB0:
                dc.w    $0005
                dc.l    $DD050000, $0000FFFC, $ED090004, $0002FFF4
                dc.l    $FD07000A, $0005FFEC, $FD0D0012, $0009FFFC
                dc.l    $0D00001A, $000DFFFC
Offset_0x070BDA:
                dc.w    $0004
                dc.l    $EC0D0000, $0000FFF5, $FC070008, $0004FFED
                dc.l    $FC050010, $0008FFFD, $0C010014, $000AFFFD
Offset_0x070BFC:
                dc.w    $0004
                dc.l    $ED0D0000, $0000FFF4, $FD0B0008, $0004FFE4
                dc.l    $FD090014, $000AFFFC, $0D00001A, $000DFFFC
Offset_0x070C1E:
                dc.w    $0004
                dc.l    $EE090000, $0000FFF3, $FE0B0006, $0003FFE3
                dc.l    $FE0D0012, $0009FFFB, $0E00001A, $000DFFFB
Offset_0x070C40:
                dc.w    $0005
                dc.l    $DD050000, $0000FFFA, $ED090004, $0002FFF4
                dc.l    $FD0B000A, $0005FFE4, $FD0D0016, $000BFFFC
                dc.l    $0D00001E, $000FFFFC
Offset_0x070C6A:
                dc.w    $0004
                dc.l    $EC0D0000, $0000FFF5, $FC070008, $0004FFED
                dc.l    $FC050010, $0008FFFD, $0C010014, $000AFFFD
Offset_0x070C8C:
                dc.w    $0004
                dc.l    $ED0D0000, $0000FFF4, $FD070008, $0004FFEC
                dc.l    $FD090010, $0008FFFC, $0D000016, $000BFFFC
Offset_0x070CAE:
                dc.w    $0003
                dc.l    $E30E0000, $0000FFEE, $0301000C, $0006FFEC
                dc.l    $FB0F000E, $0007FFF4
Offset_0x070CC8:
                dc.w    $0004
                dc.l    $E40E0000, $0000FFEE, $0401000C, $0006FFEC
                dc.l    $FC0B000E, $0007FFF4, $0401001A, $000D000C
Offset_0x070CEA:
                dc.w    $0003
                dc.l    $E50E0000, $0000FFED, $FD09000C, $0006FFF4
                dc.l    $0D050012, $0009FFF7
Offset_0x070D04:
                dc.w    $0002
                dc.l    $E40A0000, $0000FFF4, $FC0F0009, $0004FFEE
Offset_0x070D16:
                dc.w    $0003
                dc.l    $E30A0000, $0000FFF4, $FB0F0009, $0004FFEE
                dc.l    $FB010019, $000C000E
Offset_0x070D30:
                dc.w    $0004
                dc.l    $E40A0000, $0000FFF4, $04010009, $0004FFEC
                dc.l    $FC0B000B, $0005FFF4, $04010017, $000B000C
Offset_0x070D52:
                dc.w    $0003
                dc.l    $E50E0000, $0000FFED, $FD09000C, $0006FFF4
                dc.l    $0D050012, $0009FFF7
Offset_0x070D6C:
                dc.w    $0002
                dc.l    $E40E0000, $0000FFEE, $FC0B000C, $0006FFF3
Offset_0x070D7E:
                dc.w    $0005
                dc.l    $E3040000, $0000FFEA, $EB0D0002, $0001FFE2
                dc.l    $FB09000A, $0005FFEA, $F3050010, $00080002
                dc.l    $0B010014, $000AFFFA
Offset_0x070DA8:
                dc.w    $0006
                dc.l    $E4040000, $0000FFEB, $EC0D0002, $0001FFE3
                dc.l    $EC01000A, $00050003, $FC0D000C, $0006FFEB
                dc.l    $FC050014, $000A000B, $0C010018, $000CFFFB
Offset_0x070DDA:
                dc.w    $0005
                dc.l    $EB090000, $0000FFE4, $FB050006, $0003FFEC
                dc.l    $ED03000A, $0005FFFC, $F501000E, $00070004
                dc.l    $05050010, $00080004
Offset_0x070E04:
                dc.w    $0005
                dc.l    $E4040000, $0000FFEB, $EC0D0002, $0001FFE3
                dc.l    $EC01000A, $00050003, $FC05000C, $0006FFEB
                dc.l    $FC0B0010, $0008FFFB
Offset_0x070E2E:
                dc.w    $0006
                dc.l    $E3040000, $0000FFEA, $EB0D0002, $0001FFE2
                dc.l    $EB01000A, $00050002, $F301000C, $0006000A
                dc.l    $FB0D000E, $0007FFEA, $0B050016, $000BFFF2
Offset_0x070E60:
                dc.w    $0006
                dc.l    $E4040000, $0000FFEB, $EC0D0002, $0001FFE3
                dc.l    $EC01000A, $00050003, $FC0D000C, $0006FFEB
                dc.l    $FA050014, $000A000B, $0C010018, $000CFFFB
Offset_0x070E92:
                dc.w    $0005
                dc.l    $EB090000, $0000FFE4, $FB050006, $0003FFEC
                dc.l    $ED03000A, $0005FFFC, $F501000E, $00070004
                dc.l    $05050010, $00080004
Offset_0x070EBC:
                dc.w    $0006
                dc.l    $E4040000, $0000FFEB, $EC0D0002, $0001FFE3
                dc.l    $FC09000A, $0005FFEB, $F4010010, $00080003
                dc.l    $04050012, $00090003, $0C010016, $000BFFFB
Offset_0x070EEE:
                dc.w    $0003
                dc.l    $F20B0000, $0000FFE3, $EC0B000C, $0006FFFB
                dc.l    $0C050018, $000C0003
Offset_0x070F08:
                dc.w    $0003
                dc.l    $F20B0000, $0000FFE4, $EC0B000C, $0006FFFC
                dc.l    $0C050018, $000C0004
Offset_0x070F22:
                dc.w    $0003
                dc.l    $F30B0000, $0000FFE5, $F403000C, $0006FFFD
                dc.l    $F9050010, $00080005
Offset_0x070F3C:
                dc.w    $0002
                dc.l    $F40A0000, $0000FFE4, $F20B0009, $0004FFFC
Offset_0x070F4E:
                dc.w    $0003
                dc.l    $F40A0000, $0000FFE3, $E3050009, $0004FFFB
                dc.l    $F30B000D, $0006FFFB
Offset_0x070F68:
                dc.w    $0003
                dc.l    $F40A0000, $0000FFE4, $EC0B0009, $0004FFFC
                dc.l    $0C050015, $000A0004
Offset_0x070F82:
                dc.w    $0003
                dc.l    $F30B0000, $0000FFE5, $F403000C, $0006FFFD
                dc.l    $F9050010, $00080005
Offset_0x070F9C:
                dc.w    $0002
                dc.l    $F20B0000, $0000FFE4, $F40B000C, $0006FFFC
Offset_0x070FAE:
                dc.w    $0004
                dc.l    $EE050000, $0000FFF3, $FE0B0004, $0002FFE3
                dc.l    $FE0D0010, $0008FFFB, $0E000018, $000CFFFB
Offset_0x070FD0:
                dc.w    $0005
                dc.l    $DD050000, $0000FFFC, $ED090004, $0002FFF4
                dc.l    $FD0B000A, $0005FFE4, $FD0D0016, $000BFFFC
                dc.l    $0D00001E, $000FFFFC
Offset_0x070FFA:
                dc.w    $0005
                dc.l    $EC0D0000, $0000FFF5, $04010008, $0004FFE5
                dc.l    $FC07000A, $0005FFED, $FC050012, $0009FFFD
                dc.l    $0C000016, $000BFFFD
Offset_0x071024:
                dc.w    $0004
                dc.l    $ED0D0000, $0000FFF4, $FD0B0008, $0004FFE4
                dc.l    $FD090014, $000AFFFC, $0D00001A, $000DFFFC
Offset_0x071046:
                dc.w    $0004
                dc.l    $EE090000, $0000FFF3, $FE0B0006, $0003FFE3
                dc.l    $FE0D0012, $0009FFFB, $0E00001A, $000DFFFB
Offset_0x071068:
                dc.w    $0005
                dc.l    $DD050000, $0000FFFA, $ED090004, $0002FFF4
                dc.l    $FD0B000A, $0005FFE4, $FD0D0016, $000BFFFC
                dc.l    $0D00001E, $000FFFFC
Offset_0x071092:
                dc.w    $0005
                dc.l    $EC0D0000, $0000FFF5, $04010008, $0004FFE5
                dc.l    $FC07000A, $0005FFED, $FC050012, $0009FFFD
                dc.l    $0C000016, $000BFFFD
Offset_0x0710BC:
                dc.w    $0005
                dc.l    $ED0D0000, $0000FFF4, $05010008, $0004FFE4
                dc.l    $FD07000A, $0005FFEC, $FD090012, $0009FFFC
                dc.l    $0D000018, $000CFFFC
Offset_0x0710E6:
                dc.w    $0004
                dc.l    $F0080000, $0000FFFC, $F8000003, $0001FFFC
                dc.l    $F8050004, $00020004, $00090008, $0004FFEC
Offset_0x071108:
                dc.w    $0004
                dc.l    $E6040000, $0000FFFA, $EE0B0002, $0001FFF2
                dc.l    $EE02000E, $0007000A, $0E040011, $0008FFFA
Offset_0x07112A:
                dc.w    $0004
                dc.l    $EC020000, $0000FFF0, $EC050003, $0001FFF8
                dc.l    $FC080007, $0003FFF8, $0405000A, $00050000
Offset_0x07114C:
                dc.w    $0005
                dc.l    $EE080000, $0000FFEE, $F60D0003, $0001FFE6
                dc.l    $F605000B, $00050006, $0604000F, $0007FFEE
                dc.l    $06000011, $00080006
Offset_0x071176:
                dc.w    $0004
                dc.l    $E8090000, $0000FFFC, $F8000006, $0003FFFC
                dc.l    $F8050007, $00030004, $0009000B, $0005FFEC
Offset_0x071198:
                dc.w    $0004
                dc.l    $E6040000, $0000FFFA, $EE0B0002, $0001FFF2
                dc.l    $EE02000E, $0007000A, $0E000011, $0008FFFA
Offset_0x0711BA:
                dc.w    $0004
                dc.l    $EC060000, $0000FFE8, $EC050006, $0003FFF8
                dc.l    $FC00000A, $0005FFF8, $FC06000B, $00050000
Offset_0x0711DC:
                dc.w    $0005
                dc.l    $EE080000, $0000FFEE, $F60D0003, $0001FFE6
                dc.l    $F605000B, $00050006, $0604000F, $0007FFEE
                dc.l    $06000011, $00080006
Offset_0x071206:
                dc.w    $0004
                dc.l    $E5090000, $0000FFEE, $F5050006, $0003FFEB
                dc.l    $F505000A, $0005FFFB, $050D000E, $0007FFEB
Offset_0x071228:
                dc.w    $0004
                dc.l    $E4090000, $0000FFEE, $F4050006, $0003FFEB
                dc.l    $F405000A, $0005FFFB, $040D000E, $0007FFEB
Offset_0x07124A:
                dc.w    $0004
                dc.l    $E5090000, $0000FFEE, $F5050006, $0003FFEB
                dc.l    $F505000A, $0005FFFB, $050D000E, $0007FFEB
Offset_0x07126C:
                dc.w    $0004
                dc.l    $E4090000, $0000FFEE, $F4050006, $0003FFEB
                dc.l    $F405000A, $0005FFFB, $040D000E, $0007FFEB
Offset_0x07128E:
                dc.w    $0002
                dc.l    $FC020000, $0000FFF0, $F40B0003, $0001FFF8
Offset_0x0712A0:
                dc.w    $0003
                dc.l    $E40A0000, $0000FFEC, $FC080009, $0004FFEC
                dc.l    $0405000C, $0006FFF1
Offset_0x0712BA:
                dc.w    $0003
                dc.l    $E40A0000, $0000FFEC, $FC080009, $0004FFEC
                dc.l    $0405000C, $0006FFF1
Offset_0x0712D4:
                dc.w    $0003
                dc.l    $E40A0000, $0000FFEC, $FC080009, $0004FFEC
                dc.l    $0405000C, $0006FFF1
Offset_0x0712EE:
                dc.w    $0003
                dc.l    $E50A0000, $0000FFED, $FD080009, $0004FFED
                dc.l    $0505000C, $0006FFF1
Offset_0x071308:
                dc.w    $0003
                dc.l    $E50A0000, $0000FFED, $FD080009, $0004FFED
                dc.l    $0505000C, $0006FFF1
Offset_0x071322:
                dc.w    $0003
                dc.l    $E50A0000, $0000FFED, $FD080009, $0004FFED
                dc.l    $0505000C, $0006FFF1
Offset_0x07133C:
                dc.w    $0003
                dc.l    $EC0B0000, $0000FFF0, $EC03000C, $00060008
                dc.l    $0C050010, $0008FFF1
Offset_0x071356:
                dc.w    $0003
                dc.l    $EC0B0000, $0000FFF0, $EC03000C, $00060008
                dc.l    $0C050010, $0008FFF1
Offset_0x071370:
                dc.w    $0003
                dc.l    $EC0B0000, $0000FFF0, $EC03000C, $00060008
                dc.l    $0C050010, $0008FFF1
Offset_0x07138A:
                dc.w    $0005
                dc.l    $EC0B0000, $0000FFF0, $EC01000C, $00060008
                dc.l    $EC01000E, $00070010, $FC010010, $00080008
                dc.l    $0C050012, $0009FFF1
Offset_0x0713B4:
                dc.w    $0004
                dc.l    $EC070000, $0000FFEB, $EC090008, $0004FFFB
                dc.l    $FC05000E, $0007FFFB, $0C090012, $0009FFEE
Offset_0x0713D6:
                dc.w    $0004
                dc.l    $EC070000, $0000FFEC, $EC090008, $0004FFFC
                dc.l    $FC05000E, $0007FFFC, $0C090012, $0009FFEF
Offset_0x0713F8:
                dc.w    $0004
                dc.l    $EC070000, $0000FFEC, $EC090008, $0004FFFC
                dc.l    $FC09000E, $0007FFFC, $0C090014, $000AFFF0
Offset_0x07141A:
                dc.w    $0003
                dc.l    $F4030000, $0000FFE8, $EC0B0004, $0002FFF0
                dc.l    $0C050010, $0008FFF0
Offset_0x071434:
                dc.w    $0003
                dc.l    $F4030800, $0800000C, $EC0B0804, $0802FFF4
                dc.l    $0C050810, $0808FFFC
Offset_0x07144E:
                dc.w    $0003
                dc.l    $F4030800, $0800000C, $EC0B0804, $0802FFF4
                dc.l    $0C050810, $0808FFFC
Offset_0x071468:
                dc.w    $0004
                dc.l    $EC0D0000, $0000FFED, $FC0D0008, $0004FFEF
                dc.l    $FC010010, $0008000F, $0C050012, $00090001
Offset_0x07148A:
                dc.w    $0004
                dc.l    $EC0D0000, $0000FFEE, $FC0D0008, $0004FFEF
                dc.l    $FC010010, $0008000F, $0C050012, $00090001
Offset_0x0714AC:
                dc.w    $0004
                dc.l    $EC0D0000, $0000FFEF, $FC0D0008, $0004FFEF
                dc.l    $FC010010, $0008000F, $0C050012, $00090001
Offset_0x0714CE:
                dc.w    $0002
                dc.l    $EC090000, $0000FFF4, $FC0B0006, $0003FFF7
;===============================================================================
; Mapeamento do Sonic      
; [ Término ]
;=============================================================================== 

;===============================================================================
; Script para carga dos Sprites do Sonic      
; [ Início ]
;===============================================================================
Sonic_Dyn_Script: ; Offset_0x0714E0
                dc.w    Offset_0x07168C-Sonic_Dyn_Script
                dc.w    Offset_0x07168E-Sonic_Dyn_Script
                dc.w    Offset_0x071698-Sonic_Dyn_Script
                dc.w    Offset_0x07169E-Sonic_Dyn_Script
                dc.w    Offset_0x0716A8-Sonic_Dyn_Script
                dc.w    Offset_0x0716B2-Sonic_Dyn_Script
                dc.w    Offset_0x0716BE-Sonic_Dyn_Script
                dc.w    Offset_0x0716C6-Sonic_Dyn_Script
                dc.w    Offset_0x0716CC-Sonic_Dyn_Script
                dc.w    Offset_0x0716D2-Sonic_Dyn_Script
                dc.w    Offset_0x0716D8-Sonic_Dyn_Script
                dc.w    Offset_0x0716DE-Sonic_Dyn_Script
                dc.w    Offset_0x0716E8-Sonic_Dyn_Script
                dc.w    Offset_0x0716F2-Sonic_Dyn_Script
                dc.w    Offset_0x0716FA-Sonic_Dyn_Script
                dc.w    Offset_0x071704-Sonic_Dyn_Script
                dc.w    Offset_0x07170C-Sonic_Dyn_Script
                dc.w    Offset_0x071712-Sonic_Dyn_Script
                dc.w    Offset_0x07171A-Sonic_Dyn_Script
                dc.w    Offset_0x071724-Sonic_Dyn_Script
                dc.w    Offset_0x07172C-Sonic_Dyn_Script
                dc.w    Offset_0x071732-Sonic_Dyn_Script
                dc.w    Offset_0x07173C-Sonic_Dyn_Script
                dc.w    Offset_0x071748-Sonic_Dyn_Script
                dc.w    Offset_0x071752-Sonic_Dyn_Script
                dc.w    Offset_0x07175C-Sonic_Dyn_Script
                dc.w    Offset_0x071768-Sonic_Dyn_Script
                dc.w    Offset_0x071774-Sonic_Dyn_Script
                dc.w    Offset_0x07177E-Sonic_Dyn_Script
                dc.w    Offset_0x07178A-Sonic_Dyn_Script
                dc.w    Offset_0x071792-Sonic_Dyn_Script
                dc.w    Offset_0x07179A-Sonic_Dyn_Script
                dc.w    Offset_0x0717A2-Sonic_Dyn_Script
                dc.w    Offset_0x0717A8-Sonic_Dyn_Script
                dc.w    Offset_0x0717B0-Sonic_Dyn_Script
                dc.w    Offset_0x0717B8-Sonic_Dyn_Script
                dc.w    Offset_0x0717C0-Sonic_Dyn_Script
                dc.w    Offset_0x0717C6-Sonic_Dyn_Script
                dc.w    Offset_0x0717D0-Sonic_Dyn_Script
                dc.w    Offset_0x0717DC-Sonic_Dyn_Script
                dc.w    Offset_0x0717E6-Sonic_Dyn_Script
                dc.w    Offset_0x0717F0-Sonic_Dyn_Script
                dc.w    Offset_0x0717FA-Sonic_Dyn_Script
                dc.w    Offset_0x071806-Sonic_Dyn_Script
                dc.w    Offset_0x071810-Sonic_Dyn_Script
                dc.w    Offset_0x07181A-Sonic_Dyn_Script
                dc.w    Offset_0x071820-Sonic_Dyn_Script
                dc.w    Offset_0x071826-Sonic_Dyn_Script
                dc.w    Offset_0x07182C-Sonic_Dyn_Script
                dc.w    Offset_0x071832-Sonic_Dyn_Script
                dc.w    Offset_0x07183C-Sonic_Dyn_Script
                dc.w    Offset_0x071844-Sonic_Dyn_Script
                dc.w    Offset_0x07184E-Sonic_Dyn_Script
                dc.w    Offset_0x071856-Sonic_Dyn_Script
                dc.w    Offset_0x07185C-Sonic_Dyn_Script
                dc.w    Offset_0x071862-Sonic_Dyn_Script
                dc.w    Offset_0x071868-Sonic_Dyn_Script
                dc.w    Offset_0x07186E-Sonic_Dyn_Script
                dc.w    Offset_0x071876-Sonic_Dyn_Script
                dc.w    Offset_0x07187C-Sonic_Dyn_Script
                dc.w    Offset_0x071884-Sonic_Dyn_Script
                dc.w    Offset_0x07188A-Sonic_Dyn_Script
                dc.w    Offset_0x07188E-Sonic_Dyn_Script
                dc.w    Offset_0x071892-Sonic_Dyn_Script
                dc.w    Offset_0x071896-Sonic_Dyn_Script
                dc.w    Offset_0x07189A-Sonic_Dyn_Script
                dc.w    Offset_0x07189E-Sonic_Dyn_Script
                dc.w    Offset_0x0718A2-Sonic_Dyn_Script
                dc.w    Offset_0x0718A6-Sonic_Dyn_Script
                dc.w    Offset_0x0718AA-Sonic_Dyn_Script
                dc.w    Offset_0x0718AE-Sonic_Dyn_Script
                dc.w    Offset_0x0718B2-Sonic_Dyn_Script
                dc.w    Offset_0x0718B6-Sonic_Dyn_Script
                dc.w    Offset_0x0718BE-Sonic_Dyn_Script
                dc.w    Offset_0x0718C6-Sonic_Dyn_Script
                dc.w    Offset_0x0718CE-Sonic_Dyn_Script
                dc.w    Offset_0x0718D6-Sonic_Dyn_Script
                dc.w    Offset_0x0718DA-Sonic_Dyn_Script
                dc.w    Offset_0x0718DE-Sonic_Dyn_Script
                dc.w    Offset_0x0718E4-Sonic_Dyn_Script
                dc.w    Offset_0x0718EA-Sonic_Dyn_Script
                dc.w    Offset_0x0718F2-Sonic_Dyn_Script
                dc.w    Offset_0x0718FA-Sonic_Dyn_Script
                dc.w    Offset_0x071900-Sonic_Dyn_Script
                dc.w    Offset_0x071906-Sonic_Dyn_Script
                dc.w    Offset_0x07190E-Sonic_Dyn_Script
                dc.w    Offset_0x071906-Sonic_Dyn_Script
                dc.w    Offset_0x071914-Sonic_Dyn_Script
                dc.w    Offset_0x071914-Sonic_Dyn_Script
                dc.w    Offset_0x07191C-Sonic_Dyn_Script
                dc.w    Offset_0x071924-Sonic_Dyn_Script
                dc.w    Offset_0x07192C-Sonic_Dyn_Script
                dc.w    Offset_0x071932-Sonic_Dyn_Script
                dc.w    Offset_0x07193C-Sonic_Dyn_Script
                dc.w    Offset_0x071946-Sonic_Dyn_Script
                dc.w    Offset_0x07194E-Sonic_Dyn_Script
                dc.w    Offset_0x071956-Sonic_Dyn_Script
                dc.w    Offset_0x07195E-Sonic_Dyn_Script
                dc.w    Offset_0x071964-Sonic_Dyn_Script
                dc.w    Offset_0x071968-Sonic_Dyn_Script
                dc.w    Offset_0x07196E-Sonic_Dyn_Script
                dc.w    Offset_0x071976-Sonic_Dyn_Script
                dc.w    Offset_0x07197E-Sonic_Dyn_Script
                dc.w    Offset_0x071986-Sonic_Dyn_Script
                dc.w    Offset_0x07198C-Sonic_Dyn_Script
                dc.w    Offset_0x071992-Sonic_Dyn_Script
                dc.w    Offset_0x07199A-Sonic_Dyn_Script
                dc.w    Offset_0x0719A0-Sonic_Dyn_Script
                dc.w    Offset_0x0719A8-Sonic_Dyn_Script
                dc.w    Offset_0x0719B0-Sonic_Dyn_Script
                dc.w    Offset_0x0719B4-Sonic_Dyn_Script
                dc.w    Offset_0x0719BC-Sonic_Dyn_Script
                dc.w    Offset_0x0719C4-Sonic_Dyn_Script
                dc.w    Offset_0x0719D0-Sonic_Dyn_Script
                dc.w    Offset_0x0719DC-Sonic_Dyn_Script
                dc.w    Offset_0x0719E2-Sonic_Dyn_Script
                dc.w    Offset_0x0719E8-Sonic_Dyn_Script
                dc.w    Offset_0x0719EE-Sonic_Dyn_Script
                dc.w    Offset_0x0719F6-Sonic_Dyn_Script
                dc.w    Offset_0x071A00-Sonic_Dyn_Script
                dc.w    Offset_0x071A08-Sonic_Dyn_Script
                dc.w    Offset_0x071A0E-Sonic_Dyn_Script
                dc.w    Offset_0x071A16-Sonic_Dyn_Script
                dc.w    Offset_0x071A20-Sonic_Dyn_Script
                dc.w    Offset_0x071A28-Sonic_Dyn_Script
                dc.w    Offset_0x071A2E-Sonic_Dyn_Script
                dc.w    Offset_0x071A38-Sonic_Dyn_Script
                dc.w    Offset_0x071A44-Sonic_Dyn_Script
                dc.w    Offset_0x071A50-Sonic_Dyn_Script
                dc.w    Offset_0x071A5C-Sonic_Dyn_Script
                dc.w    Offset_0x071A6A-Sonic_Dyn_Script
                dc.w    Offset_0x071A78-Sonic_Dyn_Script
                dc.w    Offset_0x071A84-Sonic_Dyn_Script
                dc.w    Offset_0x071A90-Sonic_Dyn_Script
                dc.w    Offset_0x071A98-Sonic_Dyn_Script
                dc.w    Offset_0x071AA0-Sonic_Dyn_Script
                dc.w    Offset_0x071AA8-Sonic_Dyn_Script
                dc.w    Offset_0x071AAE-Sonic_Dyn_Script
                dc.w    Offset_0x071AB6-Sonic_Dyn_Script
                dc.w    Offset_0x071ABE-Sonic_Dyn_Script
                dc.w    Offset_0x071AC6-Sonic_Dyn_Script
                dc.w    Offset_0x071ACC-Sonic_Dyn_Script
                dc.w    Offset_0x071AD6-Sonic_Dyn_Script
                dc.w    Offset_0x071AE2-Sonic_Dyn_Script
                dc.w    Offset_0x071AEC-Sonic_Dyn_Script
                dc.w    Offset_0x071AF6-Sonic_Dyn_Script
                dc.w    Offset_0x071B00-Sonic_Dyn_Script
                dc.w    Offset_0x071B0C-Sonic_Dyn_Script
                dc.w    Offset_0x071B16-Sonic_Dyn_Script
                dc.w    Offset_0x071B20-Sonic_Dyn_Script
                dc.w    Offset_0x071B28-Sonic_Dyn_Script
                dc.w    Offset_0x071B32-Sonic_Dyn_Script
                dc.w    Offset_0x071B3A-Sonic_Dyn_Script
                dc.w    Offset_0x071B40-Sonic_Dyn_Script
                dc.w    Offset_0x071B48-Sonic_Dyn_Script
                dc.w    Offset_0x071B52-Sonic_Dyn_Script
                dc.w    Offset_0x071B5A-Sonic_Dyn_Script
                dc.w    Offset_0x071B60-Sonic_Dyn_Script
                dc.w    Offset_0x071B6C-Sonic_Dyn_Script
                dc.w    Offset_0x071B7A-Sonic_Dyn_Script
                dc.w    Offset_0x071B86-Sonic_Dyn_Script
                dc.w    Offset_0x071B92-Sonic_Dyn_Script
                dc.w    Offset_0x071BA0-Sonic_Dyn_Script
                dc.w    Offset_0x071BAE-Sonic_Dyn_Script
                dc.w    Offset_0x071BBA-Sonic_Dyn_Script
                dc.w    Offset_0x071BC8-Sonic_Dyn_Script
                dc.w    Offset_0x071BD0-Sonic_Dyn_Script
                dc.w    Offset_0x071BD8-Sonic_Dyn_Script
                dc.w    Offset_0x071BE0-Sonic_Dyn_Script
                dc.w    Offset_0x071BE6-Sonic_Dyn_Script
                dc.w    Offset_0x071BEE-Sonic_Dyn_Script
                dc.w    Offset_0x071BF6-Sonic_Dyn_Script
                dc.w    Offset_0x071BFE-Sonic_Dyn_Script
                dc.w    Offset_0x071C04-Sonic_Dyn_Script
                dc.w    Offset_0x071C0E-Sonic_Dyn_Script
                dc.w    Offset_0x071C1A-Sonic_Dyn_Script
                dc.w    Offset_0x071C26-Sonic_Dyn_Script
                dc.w    Offset_0x071C30-Sonic_Dyn_Script
                dc.w    Offset_0x071C3A-Sonic_Dyn_Script
                dc.w    Offset_0x071C46-Sonic_Dyn_Script
                dc.w    Offset_0x071C52-Sonic_Dyn_Script
                dc.w    Offset_0x071C5E-Sonic_Dyn_Script
                dc.w    Offset_0x071C68-Sonic_Dyn_Script
                dc.w    Offset_0x071C72-Sonic_Dyn_Script
                dc.w    Offset_0x071C7C-Sonic_Dyn_Script
                dc.w    Offset_0x071C88-Sonic_Dyn_Script
                dc.w    Offset_0x071C92-Sonic_Dyn_Script
                dc.w    Offset_0x071C9C-Sonic_Dyn_Script
                dc.w    Offset_0x071CA6-Sonic_Dyn_Script
                dc.w    Offset_0x071CB2-Sonic_Dyn_Script
                dc.w    Offset_0x071CBC-Sonic_Dyn_Script
                dc.w    Offset_0x071CC6-Sonic_Dyn_Script
                dc.w    Offset_0x071CD0-Sonic_Dyn_Script
                dc.w    Offset_0x071CDA-Sonic_Dyn_Script
                dc.w    Offset_0x071CE0-Sonic_Dyn_Script
                dc.w    Offset_0x071CE8-Sonic_Dyn_Script
                dc.w    Offset_0x071CF0-Sonic_Dyn_Script
                dc.w    Offset_0x071CF8-Sonic_Dyn_Script
                dc.w    Offset_0x071D00-Sonic_Dyn_Script
                dc.w    Offset_0x071D08-Sonic_Dyn_Script
                dc.w    Offset_0x071D10-Sonic_Dyn_Script
                dc.w    Offset_0x071D18-Sonic_Dyn_Script
                dc.w    Offset_0x071D20-Sonic_Dyn_Script
                dc.w    Offset_0x071D28-Sonic_Dyn_Script
                dc.w    Offset_0x071D34-Sonic_Dyn_Script
                dc.w    Offset_0x071D3E-Sonic_Dyn_Script
                dc.w    Offset_0x071D48-Sonic_Dyn_Script
                dc.w    Offset_0x071D52-Sonic_Dyn_Script
                dc.w    Offset_0x071D5A-Sonic_Dyn_Script
                dc.w    Offset_0x071D62-Sonic_Dyn_Script
                dc.w    Offset_0x071D6A-Sonic_Dyn_Script
                dc.w    Offset_0x071D74-Sonic_Dyn_Script
                dc.w    Offset_0x071D7E-Sonic_Dyn_Script
                dc.w    Offset_0x071D88-Sonic_Dyn_Script
Offset_0x07168C:
                dc.w    $0000
Offset_0x07168E:
                dc.w    $0004
                dc.w    $3000, $3004, $5008, $500E
Offset_0x071698:
                dc.w    $0002
                dc.w    $B014, $5020
Offset_0x07169E:
                dc.w    $0004
                dc.w    $3026, $302A, $302E, $5032
Offset_0x0716A8:
                dc.w    $0004
                dc.w    $3026, $3038, $302E, $5032
Offset_0x0716B2:
                dc.w    $0005
                dc.w    $3026, $3038, $302E, $1032, $303C
Offset_0x0716BE:
                dc.w    $0003
                dc.w    $3026, $7040, $5032
Offset_0x0716C6:
                dc.w    $0002
                dc.w    $B048, $1054
Offset_0x0716CC:
                dc.w    $0002
                dc.w    $B056, $3062
Offset_0x0716D2:
                dc.w    $0002
                dc.w    $B056, $3066
Offset_0x0716D8:
                dc.w    $0002
                dc.w    $B06A, $7076
Offset_0x0716DE:
                dc.w    $0004
                dc.w    $307E, $3082, $5086, $500E
Offset_0x0716E8:
                dc.w    $0004
                dc.w    $308C, $3090, $3094, $500E
Offset_0x0716F2:
                dc.w    $0003
                dc.w    $7098, $10A0, $F0A2
Offset_0x0716FA:
                dc.w    $0004
                dc.w    $7098, $10B2, $B0B4, $10C0
Offset_0x071704:
                dc.w    $0003
                dc.w    $70C2, $50CA, $30D0
Offset_0x07170C:
                dc.w    $0002
                dc.w    $50D4, $F0DA
Offset_0x071712:
                dc.w    $0003
                dc.w    $50D4, $F0EA, $10FA
Offset_0x07171A:
                dc.w    $0004
                dc.w    $50D4, $10FC, $B0FE, $110A
Offset_0x071724:
                dc.w    $0003
                dc.w    $70C2, $510C, $3112
Offset_0x07172C:
                dc.w    $0002
                dc.w    $7098, $B116
Offset_0x071732:
                dc.w    $0004
                dc.w    $5122, $5128, $312E, $1132
Offset_0x07173C:
                dc.w    $0005
                dc.w    $5122, $1134, $7136, $313E, $1142
Offset_0x071748:
                dc.w    $0004
                dc.w    $7144, $314C, $1150, $3152
Offset_0x071752:
                dc.w    $0004
                dc.w    $5156, $115C, $315E, $B162
Offset_0x07175C:
                dc.w    $0005
                dc.w    $5156, $116E, $7170, $1178, $317A
Offset_0x071768:
                dc.w    $0005
                dc.w    $5156, $117E, $7180, $3188, $118C
Offset_0x071774:
                dc.w    $0004
                dc.w    $7144, $318E, $1192, $3194
Offset_0x07177E:
                dc.w    $0005
                dc.w    $5122, $5198, $119E, $11A0, $31A2
Offset_0x07178A:
                dc.w    $0003
                dc.w    $71A6, $B1AE, $31BA
Offset_0x071792:
                dc.w    $0003
                dc.w    $71A6, $B1BE, $31CA
Offset_0x07179A:
                dc.w    $0003
                dc.w    $71CE, $31D6, $31DA
Offset_0x0717A2:
                dc.w    $0002
                dc.w    $71DE, $B1E6
Offset_0x0717A8:
                dc.w    $0003
                dc.w    $71DE, $31F2, $B1F6
Offset_0x0717B0:
                dc.w    $0003
                dc.w    $71DE, $B202, $320E
Offset_0x0717B8:
                dc.w    $0003
                dc.w    $71CE, $3212, $3216
Offset_0x0717C0:
                dc.w    $0002
                dc.w    $71A6, $B21A
Offset_0x0717C6:
                dc.w    $0004
                dc.w    $3226, $722A, $7232, $123A
Offset_0x0717D0:
                dc.w    $0005
                dc.w    $323C, $5240, $722A, $7246, $123A
Offset_0x0717DC:
                dc.w    $0004
                dc.w    $724E, $7256, $325E, $1262
Offset_0x0717E6:
                dc.w    $0004
                dc.w    $7264, $726C, $5274, $127A
Offset_0x0717F0:
                dc.w    $0004
                dc.w    $527C, $726C, $7282, $127A
Offset_0x0717FA:
                dc.w    $0005
                dc.w    $328A, $528E, $726C, $7294, $127A
Offset_0x071806:
                dc.w    $0004
                dc.w    $729C, $7256, $32A4, $1262
Offset_0x071810:
                dc.w    $0004
                dc.w    $72A8, $722A, $52B0, $123A
Offset_0x07181A:
                dc.w    $0002
                dc.w    $52B6, $F2BC
Offset_0x071820:
                dc.w    $0002
                dc.w    $52CC, $F2D2
Offset_0x071826:
                dc.w    $0002
                dc.w    $52B6, $F2E2
Offset_0x07182C:
                dc.w    $0002
                dc.w    $52CC, $F2F2
Offset_0x071832:
                dc.w    $0004
                dc.w    $5302, $1308, $730A, $5312
Offset_0x07183C:
                dc.w    $0003
                dc.w    $7318, $7320, $5328
Offset_0x071844:
                dc.w    $0004
                dc.w    $5302, $132E, $7330, $5338
Offset_0x07184E:
                dc.w    $0003
                dc.w    $7318, $733E, $5346
Offset_0x071856:
                dc.w    $0002
                dc.w    $734C, $B354
Offset_0x07185C:
                dc.w    $0002
                dc.w    $7360, $B368
Offset_0x071862:
                dc.w    $0002
                dc.w    $734C, $B374
Offset_0x071868:
                dc.w    $0002
                dc.w    $7360, $B380
Offset_0x07186E:
                dc.w    $0003
                dc.w    $138C, $738E, $B396
Offset_0x071876:
                dc.w    $0002
                dc.w    $73A2, $B3AA
Offset_0x07187C:
                dc.w    $0003
                dc.w    $13B6, $738E, $B3C0
Offset_0x071884:
                dc.w    $0002
                dc.w    $73A2, $B3CC
Offset_0x07188A:
                dc.w    $0001
                dc.w    $F400
Offset_0x07188E:
                dc.w    $0001
                dc.w    $F410
Offset_0x071892:
                dc.w    $0001
                dc.w    $F420
Offset_0x071896:
                dc.w    $0001
                dc.w    $F430
Offset_0x07189A:
                dc.w    $0001
                dc.w    $F440
Offset_0x07189E:
                dc.w    $0001
                dc.w    $F450
Offset_0x0718A2:
                dc.w    $0001
                dc.w    $F460
Offset_0x0718A6:
                dc.w    $0001
                dc.w    $F470
Offset_0x0718AA:
                dc.w    $0001
                dc.w    $F480
Offset_0x0718AE:
                dc.w    $0001
                dc.w    $F490
Offset_0x0718B2:
                dc.w    $0001
                dc.w    $F4A0
Offset_0x0718B6:
                dc.w    $0003
                dc.w    $53D8, $53DE, $73E4
Offset_0x0718BE:
                dc.w    $0003
                dc.w    $53D8, $53EC, $53F2
Offset_0x0718C6:
                dc.w    $0003
                dc.w    $53D8, $53DE, $73B8
Offset_0x0718CE:
                dc.w    $0003
                dc.w    $53D8, $53EC, $54B0
Offset_0x0718D6:
                dc.w    $0001
                dc.w    $B4B6
Offset_0x0718DA:
                dc.w    $0001
                dc.w    $F4C2
Offset_0x0718DE:
                dc.w    $0002
                dc.w    $14D2, $F4D4
Offset_0x0718E4:
                dc.w    $0002
                dc.w    $34E4, $F4E8
Offset_0x0718EA:
                dc.w    $0003
                dc.w    $F4F8, $1508, $350A
Offset_0x0718F2:
                dc.w    $0003
                dc.w    $F50E, $151E, $3520
Offset_0x0718FA:
                dc.w    $0002
                dc.w    $B524, $5530
Offset_0x071900:
                dc.w    $0002
                dc.w    $B536, $5542
Offset_0x071906:
                dc.w    $0003
                dc.w    $3548, $B54C, $1558
Offset_0x07190E:
                dc.w    $0002
                dc.w    $155A, $755C
Offset_0x071914:
                dc.w    $0003
                dc.w    $1564, $B566, $1572
Offset_0x07191C:
                dc.w    $0003
                dc.w    $3574, $B578, $1584
Offset_0x071924:
                dc.w    $0003
                dc.w    $5586, $F58C, $159C
Offset_0x07192C:
                dc.w    $0002
                dc.w    $B59E, $35AA
Offset_0x071932:
                dc.w    $0004
                dc.w    $15AE, $B5B0, $15BC, $75BE
Offset_0x07193C:
                dc.w    $0004
                dc.w    $15AE, $B5C6, $15BC, $75BE
Offset_0x071946:
                dc.w    $0003
                dc.w    $75D2, $15DA, $B5DC
Offset_0x07194E:
                dc.w    $0003
                dc.w    $55E8, $B5EE, $15FA
Offset_0x071956:
                dc.w    $0003
                dc.w    $B5FC, $1608, $360A
Offset_0x07195E:
                dc.w    $0002
                dc.w    $B60E, $161A
Offset_0x071964:
                dc.w    $0001
                dc.w    $F61C
Offset_0x071968:
                dc.w    $0002
                dc.w    $B62C, $1638
Offset_0x07196E:
                dc.w    $0003
                dc.w    $163A, $B63C, $1648
Offset_0x071976:
                dc.w    $0003
                dc.w    $564A, $B650, $365C
Offset_0x07197E:
                dc.w    $0003
                dc.w    $3660, $B664, $1670
Offset_0x071986:
                dc.w    $0002
                dc.w    $B672, $167E
Offset_0x07198C:
                dc.w    $0002
                dc.w    $1680, $B682
Offset_0x071992:
                dc.w    $0003
                dc.w    $368E, $B692, $169E
Offset_0x07199A:
                dc.w    $0002
                dc.w    $36A0, $F6A4
Offset_0x0719A0:
                dc.w    $0003
                dc.w    $76B4, $36BC, $56C0
Offset_0x0719A8:
                dc.w    $0003
                dc.w    $76C6, $36BC, $56CE
Offset_0x0719B0:
                dc.w    $0001
                dc.w    $B7D6
Offset_0x0719B4:
                dc.w    $0003
                dc.w    $B7E2, $17EE, $57F0
Offset_0x0719BC:
                dc.w    $0003
                dc.w    $87F6, $0A18, $8800
Offset_0x0719C4:
                dc.w    $0005
                dc.w    $2809, $180C, $380E, $8812, $081B
Offset_0x0719D0:
                dc.w    $0005
                dc.w    $281C, $181F, $380E, $8812, $081B
Offset_0x0719DC:
                dc.w    $0002
                dc.w    $8821, $882A
Offset_0x0719E2:
                dc.w    $0002
                dc.w    $8833, $882A
Offset_0x0719E8:
                dc.w    $0002
                dc.w    $883C, $882A
Offset_0x0719EE:
                dc.w    $0003
                dc.w    $B6D4, $10A0, $F0A2
Offset_0x0719F6:
                dc.w    $0004
                dc.w    $B6D4, $10B2, $B0B4, $10C0
Offset_0x071A00:
                dc.w    $0003
                dc.w    $B6E0, $50CA, $30D0
Offset_0x071A08:
                dc.w    $0002
                dc.w    $86EC, $F0DA
Offset_0x071A0E:
                dc.w    $0003
                dc.w    $86EC, $F0EA, $10FA
Offset_0x071A16:
                dc.w    $0004
                dc.w    $86EC, $10FC, $B0FE, $110A
Offset_0x071A20:
                dc.w    $0003
                dc.w    $B6E0, $510C, $3112
Offset_0x071A28:
                dc.w    $0002
                dc.w    $B6D4, $B116
Offset_0x071A2E:
                dc.w    $0004
                dc.w    $76F5, $312E, $5128, $1132
Offset_0x071A38:
                dc.w    $0005
                dc.w    $76F5, $1134, $7136, $313E, $1142
Offset_0x071A44:
                dc.w    $0005
                dc.w    $86FD, $314C, $0706, $1150, $3152
Offset_0x071A50:
                dc.w    $0005
                dc.w    $0707, $7708, $115C, $315E, $B162
Offset_0x071A5C:
                dc.w    $0006
                dc.w    $0707, $7708, $116E, $1178, $7170, $317A
Offset_0x071A6A:
                dc.w    $0006
                dc.w    $0707, $7708, $117E, $7180, $3188, $118C
Offset_0x071A78:
                dc.w    $0005
                dc.w    $86FD, $318E, $0706, $1192, $3194
Offset_0x071A84:
                dc.w    $0005
                dc.w    $76F5, $119E, $5198, $01A0, $31A2
Offset_0x071A90:
                dc.w    $0003
                dc.w    $B710, $B1AE, $31BA
Offset_0x071A98:
                dc.w    $0003
                dc.w    $B710, $B1BE, $31CA
Offset_0x071AA0:
                dc.w    $0003
                dc.w    $B71C, $31D6, $31DA
Offset_0x071AA8:
                dc.w    $0002
                dc.w    $8728, $B1E6
Offset_0x071AAE:
                dc.w    $0003
                dc.w    $8728, $31F2, $B1F6
Offset_0x071AB6:
                dc.w    $0003
                dc.w    $8728, $B202, $320E
Offset_0x071ABE:
                dc.w    $0003
                dc.w    $B71C, $3212, $3216
Offset_0x071AC6:
                dc.w    $0002
                dc.w    $B710, $B21A
Offset_0x071ACC:
                dc.w    $0004
                dc.w    $3226, $7731, $7232, $0739
Offset_0x071AD6:
                dc.w    $0005
                dc.w    $323C, $5240, $7731, $7246, $0739
Offset_0x071AE2:
                dc.w    $0004
                dc.w    $724E, $773A, $325E, $1742
Offset_0x071AEC:
                dc.w    $0004
                dc.w    $7264, $B744, $5274, $0750
Offset_0x071AF6:
                dc.w    $0004
                dc.w    $527C, $B744, $7282, $0750
Offset_0x071B00:
                dc.w    $0005
                dc.w    $328A, $528E, $B744, $7294, $0750
Offset_0x071B0C:
                dc.w    $0004
                dc.w    $729C, $773A, $32A4, $1742
Offset_0x071B16:
                dc.w    $0004
                dc.w    $72A8, $7731, $52B0, $0739
Offset_0x071B20:
                dc.w    $0003
                dc.w    $B751, $10A0, $F0A2
Offset_0x071B28:
                dc.w    $0004
                dc.w    $B751, $10B2, $B0B4, $10C0
Offset_0x071B32:
                dc.w    $0003
                dc.w    $B75D, $50CA, $30D0
Offset_0x071B3A:
                dc.w    $0002
                dc.w    $8769, $F0DA
Offset_0x071B40:
                dc.w    $0003
                dc.w    $8769, $F0EA, $10FA
Offset_0x071B48:
                dc.w    $0004
                dc.w    $8769, $10FC, $B0FE, $110A
Offset_0x071B52:
                dc.w    $0003
                dc.w    $B75D, $510C, $3112
Offset_0x071B5A:
                dc.w    $0002
                dc.w    $B751, $B116
Offset_0x071B60:
                dc.w    $0005
                dc.w    $1772, $7774, $5128, $312E, $1132
Offset_0x071B6C:
                dc.w    $0006
                dc.w    $1772, $7774, $1134, $7136, $313E, $1142
Offset_0x071B7A:
                dc.w    $0005
                dc.w    $577C, $3782, $314C, $1150, $3152
Offset_0x071B86:
                dc.w    $0005
                dc.w    $1786, $7788, $115C, $315E, $B162
Offset_0x071B92:
                dc.w    $0006
                dc.w    $1786, $7788, $116E, $1178, $7170, $317A
Offset_0x071BA0:
                dc.w    $0006
                dc.w    $1786, $7788, $117E, $7180, $3188, $118C
Offset_0x071BAE:
                dc.w    $0005
                dc.w    $577C, $3782, $318E, $1192, $3194
Offset_0x071BBA:
                dc.w    $0006
                dc.w    $1772, $7774, $5198, $119E, $31A2, $11A0
Offset_0x071BC8:
                dc.w    $0003
                dc.w    $B790, $B1AE, $31BA
Offset_0x071BD0:
                dc.w    $0003
                dc.w    $B790, $B1BE, $31CA
Offset_0x071BD8:
                dc.w    $0003
                dc.w    $B79C, $31D6, $31DA
Offset_0x071BE0:
                dc.w    $0002
                dc.w    $87A8, $B1E6
Offset_0x071BE6:
                dc.w    $0003
                dc.w    $87A8, $31F2, $B1F6
Offset_0x071BEE:
                dc.w    $0003
                dc.w    $87A8, $B202, $320E
Offset_0x071BF6:
                dc.w    $0003
                dc.w    $B79C, $3212, $3216
Offset_0x071BFE:
                dc.w    $0002
                dc.w    $B790, $B21A
Offset_0x071C04:
                dc.w    $0004
                dc.w    $3226, $B7B1, $7232, $07BD
Offset_0x071C0E:
                dc.w    $0005
                dc.w    $323C, $5240, $B7B1, $7246, $07BD
Offset_0x071C1A:
                dc.w    $0005
                dc.w    $724E, $17BE, $77C0, $325E, $07C8
Offset_0x071C26:
                dc.w    $0004
                dc.w    $7264, $B7C9, $5274, $07D5
Offset_0x071C30:
                dc.w    $0004
                dc.w    $527C, $B7C9, $7282, $07D5
Offset_0x071C3A:
                dc.w    $0005
                dc.w    $328A, $528E, $B7C9, $7294, $07D5
Offset_0x071C46:
                dc.w    $0005
                dc.w    $729C, $17BE, $77C0, $32A4, $07C8
Offset_0x071C52:
                dc.w    $0005
                dc.w    $72A8, $17B2, $77B5, $52B0, $07BD
Offset_0x071C5E:
                dc.w    $0004
                dc.w    $2845, $0848, $3849, $584D
Offset_0x071C68:
                dc.w    $0004
                dc.w    $1853, $B855, $2861, $1864
Offset_0x071C72:
                dc.w    $0004
                dc.w    $2866, $3869, $286D, $3870
Offset_0x071C7C:
                dc.w    $0005
                dc.w    $2874, $7877, $387F, $1883, $0885
Offset_0x071C88:
                dc.w    $0004
                dc.w    $5886, $088C, $3849, $588D
Offset_0x071C92:
                dc.w    $0004
                dc.w    $1893, $B895, $2861, $08A1
Offset_0x071C9C:
                dc.w    $0004
                dc.w    $58A2, $3869, $08A8, $58A9
Offset_0x071CA6:
                dc.w    $0005
                dc.w    $2874, $78AF, $38B7, $18BB, $0885
Offset_0x071CB2:
                dc.w    $0004
                dc.w    $58BD, $38C3, $38C7, $78CB
Offset_0x071CBC:
                dc.w    $0004
                dc.w    $58D3, $38D9, $38C7, $78DD
Offset_0x071CC6:
                dc.w    $0004
                dc.w    $58BD, $38C3, $38C7, $78E5
Offset_0x071CD0:
                dc.w    $0004
                dc.w    $58D3, $38D9, $38C7, $78ED
Offset_0x071CDA:
                dc.w    $0002
                dc.w    $28F5, $B8F8
Offset_0x071CE0:
                dc.w    $0003
                dc.w    $8904, $290D, $3910
Offset_0x071CE8:
                dc.w    $0003
                dc.w    $8833, $290D, $3910
Offset_0x071CF0:
                dc.w    $0003
                dc.w    $883C, $290D, $3910
Offset_0x071CF8:
                dc.w    $0003
                dc.w    $8904, $290D, $3914
Offset_0x071D00:
                dc.w    $0003
                dc.w    $8833, $290D, $3914
Offset_0x071D08:
                dc.w    $0003
                dc.w    $883C, $290D, $3914
Offset_0x071D10:
                dc.w    $0003
                dc.w    $B918, $3924, $3928
Offset_0x071D18:
                dc.w    $0003
                dc.w    $B92C, $3938, $3928
Offset_0x071D20:
                dc.w    $0003
                dc.w    $B93C, $3948, $3928
Offset_0x071D28:
                dc.w    $0005
                dc.w    $B94C, $1924, $1958, $193A, $3928
Offset_0x071D34:
                dc.w    $0004
                dc.w    $795A, $5962, $3968, $596C
Offset_0x071D3E:
                dc.w    $0004
                dc.w    $7972, $5962, $397A, $597E
Offset_0x071D48:
                dc.w    $0004
                dc.w    $7984, $5962, $598C, $5992
Offset_0x071D52:
                dc.w    $0003
                dc.w    $3998, $B99C, $39A8
Offset_0x071D5A:
                dc.w    $0003
                dc.w    $39AC, $B9B0, $39BC
Offset_0x071D62:
                dc.w    $0003
                dc.w    $39C0, $B9C4, $39BC
Offset_0x071D6A:
                dc.w    $0004
                dc.w    $79D0, $79D8, $19E0, $39E2
Offset_0x071D74:
                dc.w    $0004
                dc.w    $79E6, $79EE, $19E0, $39E2
Offset_0x071D7E:
                dc.w    $0004
                dc.w    $79F6, $79FE, $19E0, $39E2
Offset_0x071D88:
                dc.w    $0002
                dc.w    $5A06, $BA0C  
;===============================================================================
; Script para carga dos Sprites do Sonic      
; [ Término ]
;===============================================================================    

Shield:                                                       ; Offset_0x071D8E:
                incbin  'data\sprites\shield.nem'   
Invencibility_Stars:                                          ; Offset_0x071F14:                
                incbin  'data\sprites\invstars.nem' 
Water_Splash_Dust_Spr:                                        ; Offset_0x071FFC:
                incbin  'data\sprites\spshdust.dat'                   
Water_Splash:                                                 ; Offset_0x07393C:
                incbin  'data\sprites\w_splash.nem'    

;===============================================================================
; Mapeamento do Miles / "Tails"      
; [ Início ]
;===============================================================================
Miles_Mappings: ; Offset_0x0739E2:
                dc.w    Offset_0x073AF8-Miles_Mappings
                dc.w    Offset_0x073AFA-Miles_Mappings
                dc.w    Offset_0x073B0C-Miles_Mappings
                dc.w    Offset_0x073B1E-Miles_Mappings
                dc.w    Offset_0x073B30-Miles_Mappings
                dc.w    Offset_0x073B42-Miles_Mappings
                dc.w    Offset_0x073B4C-Miles_Mappings
                dc.w    Offset_0x073B56-Miles_Mappings
                dc.w    Offset_0x073B68-Miles_Mappings
                dc.w    Offset_0x073B7A-Miles_Mappings
                dc.w    Offset_0x073B84-Miles_Mappings
                dc.w    Offset_0x073B8E-Miles_Mappings
                dc.w    Offset_0x073B98-Miles_Mappings
                dc.w    Offset_0x073BA2-Miles_Mappings
                dc.w    Offset_0x073BAC-Miles_Mappings
                dc.w    Offset_0x073BC6-Miles_Mappings
                dc.w    Offset_0x073BE0-Miles_Mappings
                dc.w    Offset_0x073BFA-Miles_Mappings
                dc.w    Offset_0x073C14-Miles_Mappings
                dc.w    Offset_0x073C2E-Miles_Mappings
                dc.w    Offset_0x073C48-Miles_Mappings
                dc.w    Offset_0x073C62-Miles_Mappings
                dc.w    Offset_0x073C7C-Miles_Mappings
                dc.w    Offset_0x073C96-Miles_Mappings
                dc.w    Offset_0x073CB0-Miles_Mappings
                dc.w    Offset_0x073CCA-Miles_Mappings
                dc.w    Offset_0x073CE4-Miles_Mappings
                dc.w    Offset_0x073CFE-Miles_Mappings
                dc.w    Offset_0x073D18-Miles_Mappings
                dc.w    Offset_0x073D32-Miles_Mappings
                dc.w    Offset_0x073D4C-Miles_Mappings
                dc.w    Offset_0x073D66-Miles_Mappings
                dc.w    Offset_0x073D80-Miles_Mappings
                dc.w    Offset_0x073D9A-Miles_Mappings
                dc.w    Offset_0x073DB4-Miles_Mappings
                dc.w    Offset_0x073DCE-Miles_Mappings
                dc.w    Offset_0x073DE8-Miles_Mappings
                dc.w    Offset_0x073E02-Miles_Mappings
                dc.w    Offset_0x073E1C-Miles_Mappings
                dc.w    Offset_0x073E2E-Miles_Mappings
                dc.w    Offset_0x073E48-Miles_Mappings
                dc.w    Offset_0x073E5A-Miles_Mappings
                dc.w    Offset_0x073E74-Miles_Mappings
                dc.w    Offset_0x073E86-Miles_Mappings
                dc.w    Offset_0x073EA0-Miles_Mappings
                dc.w    Offset_0x073EB2-Miles_Mappings
                dc.w    Offset_0x073ECC-Miles_Mappings
                dc.w    Offset_0x073EDE-Miles_Mappings
                dc.w    Offset_0x073EF0-Miles_Mappings
                dc.w    Offset_0x073F02-Miles_Mappings
                dc.w    Offset_0x073F14-Miles_Mappings
                dc.w    Offset_0x073F26-Miles_Mappings
                dc.w    Offset_0x073F38-Miles_Mappings
                dc.w    Offset_0x073F52-Miles_Mappings
                dc.w    Offset_0x073F6C-Miles_Mappings
                dc.w    Offset_0x073F86-Miles_Mappings
                dc.w    Offset_0x073FA0-Miles_Mappings
                dc.w    Offset_0x073FBA-Miles_Mappings
                dc.w    Offset_0x073FD4-Miles_Mappings
                dc.w    Offset_0x073FEE-Miles_Mappings
                dc.w    Offset_0x074008-Miles_Mappings
                dc.w    Offset_0x073FEE-Miles_Mappings
                dc.w    Offset_0x074022-Miles_Mappings
                dc.w    Offset_0x07403C-Miles_Mappings
                dc.w    Offset_0x074056-Miles_Mappings
                dc.w    Offset_0x074070-Miles_Mappings
                dc.w    Offset_0x07408A-Miles_Mappings
                dc.w    Offset_0x0740A4-Miles_Mappings
                dc.w    Offset_0x0740BE-Miles_Mappings
                dc.w    Offset_0x0740D8-Miles_Mappings
                dc.w    Offset_0x0740F2-Miles_Mappings
                dc.w    Offset_0x0740FC-Miles_Mappings
                dc.w    Offset_0x074106-Miles_Mappings
                dc.w    Offset_0x074110-Miles_Mappings
                dc.w    Offset_0x07411A-Miles_Mappings
                dc.w    Offset_0x074124-Miles_Mappings
                dc.w    Offset_0x07412E-Miles_Mappings
                dc.w    Offset_0x074138-Miles_Mappings
                dc.w    Offset_0x074142-Miles_Mappings
                dc.w    Offset_0x07414C-Miles_Mappings
                dc.w    Offset_0x074156-Miles_Mappings
                dc.w    Offset_0x074160-Miles_Mappings
                dc.w    Offset_0x07416A-Miles_Mappings
                dc.w    Offset_0x074174-Miles_Mappings
                dc.w    Offset_0x07417E-Miles_Mappings
                dc.w    Offset_0x074188-Miles_Mappings
                dc.w    Offset_0x074192-Miles_Mappings
                dc.w    Offset_0x07419C-Miles_Mappings
                dc.w    Offset_0x0741A6-Miles_Mappings
                dc.w    Offset_0x0741B0-Miles_Mappings
                dc.w    Offset_0x0741C2-Miles_Mappings
                dc.w    Offset_0x0741D4-Miles_Mappings
                dc.w    Offset_0x0741DE-Miles_Mappings
                dc.w    Offset_0x0741E8-Miles_Mappings
                dc.w    Offset_0x0741F2-Miles_Mappings
                dc.w    Offset_0x074204-Miles_Mappings
                dc.w    Offset_0x074216-Miles_Mappings
                dc.w    Offset_0x074220-Miles_Mappings
                dc.w    Offset_0x07422A-Miles_Mappings
                dc.w    Offset_0x074234-Miles_Mappings
                dc.w    Offset_0x074246-Miles_Mappings
                dc.w    Offset_0x074258-Miles_Mappings
                dc.w    Offset_0x07426A-Miles_Mappings
                dc.w    Offset_0x07427C-Miles_Mappings
                dc.w    Offset_0x07428E-Miles_Mappings
                dc.w    Offset_0x0742A0-Miles_Mappings
                dc.w    Offset_0x0742B2-Miles_Mappings
                dc.w    Offset_0x0742C4-Miles_Mappings
                dc.w    Offset_0x0742CE-Miles_Mappings
                dc.w    Offset_0x0742E0-Miles_Mappings
                dc.w    Offset_0x0742F2-Miles_Mappings
                dc.w    Offset_0x074304-Miles_Mappings
                dc.w    Offset_0x074316-Miles_Mappings
                dc.w    Offset_0x074328-Miles_Mappings
                dc.w    Offset_0x07433A-Miles_Mappings
                dc.w    Offset_0x07434C-Miles_Mappings
                dc.w    Offset_0x07435E-Miles_Mappings
                dc.w    Offset_0x074368-Miles_Mappings
                dc.w    Offset_0x074372-Miles_Mappings
                dc.w    Offset_0x074384-Miles_Mappings
                dc.w    Offset_0x07438E-Miles_Mappings
                dc.w    Offset_0x074398-Miles_Mappings
                dc.w    Offset_0x0743A2-Miles_Mappings
                dc.w    Offset_0x0743AC-Miles_Mappings
                dc.w    Offset_0x0743B6-Miles_Mappings
                dc.w    Offset_0x0743C0-Miles_Mappings
                dc.w    Offset_0x0743CA-Miles_Mappings
                dc.w    Offset_0x0743D4-Miles_Mappings
                dc.w    Offset_0x0743E6-Miles_Mappings
                dc.w    Offset_0x0743F8-Miles_Mappings
                dc.w    Offset_0x074402-Miles_Mappings
                dc.w    Offset_0x07440C-Miles_Mappings
                dc.w    Offset_0x074416-Miles_Mappings
                dc.w    Offset_0x074420-Miles_Mappings
                dc.w    Offset_0x074432-Miles_Mappings
                dc.w    Offset_0x074444-Miles_Mappings
                dc.w    Offset_0x07444E-Miles_Mappings
                dc.w    Offset_0x074458-Miles_Mappings
                dc.w    Offset_0x074462-Miles_Mappings
Offset_0x073AF8:
                dc.w    $0000
Offset_0x073AFA:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
Offset_0x073B0C:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
Offset_0x073B1E:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
Offset_0x073B30:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
Offset_0x073B42:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFF4
Offset_0x073B4C:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFF4
Offset_0x073B56:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
Offset_0x073B68:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
Offset_0x073B7A:
                dc.w    $0001
                dc.l    $F0070000, $0000FFEC
Offset_0x073B84:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFE4
Offset_0x073B8E:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFE4
Offset_0x073B98:
                dc.w    $0001
                dc.l    $00090000, $0000FFE4
Offset_0x073BA2:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFE4
Offset_0x073BAC:
                dc.w    $0003
                dc.l    $EC090000, $0000FFF0, $FC0D0006, $0003FFF0
                dc.l    $FC09000E, $0007FFE2
Offset_0x073BC6:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF3, $000D0006, $0003FFF0
                dc.l    $0009000E, $0007FFE4
Offset_0x073BE0:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF8, $00090006, $0003FFF3
                dc.l    $FD09000C, $0006FFE4
Offset_0x073BFA:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF2, $00090006, $0003FFF2
                dc.l    $FD09000C, $0006FFE6
Offset_0x073C14:
                dc.w    $0003
                dc.l    $EC090000, $0000FFF0, $FC0D0006, $0003FFF0
                dc.l    $FC09000E, $0007FFE2
Offset_0x073C2E:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF3, $000D0006, $0003FFF0
                dc.l    $0009000E, $0007FFE4
Offset_0x073C48:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF8, $00090006, $0003FFF1
                dc.l    $FD09000C, $0006FFE4
Offset_0x073C62:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF2, $00090006, $0003FFF2
                dc.l    $FD09000C, $0006FFE6
Offset_0x073C7C:
                dc.w    $0003
                dc.l    $E3010000, $0000FFF3, $F3030002, $0001FFEC
                dc.l    $F30B0006, $0003FFF4
Offset_0x073C96:
                dc.w    $0003
                dc.l    $E7050000, $0000FFF6, $F70B0004, $0002FFEE
                dc.l    $FE050010, $00080006
Offset_0x073CB0:
                dc.w    $0003
                dc.l    $E6050000, $0000FFF8, $F6030004, $0002FFEF
                dc.l    $F60B0008, $0004FFF7
Offset_0x073CCA:
                dc.w    $0003
                dc.l    $E3010000, $0000FFF7, $F30F0002, $0001FFEC
                dc.l    $FB010012, $0009000C
Offset_0x073CE4:
                dc.w    $0003
                dc.l    $E3010000, $0000FFF3, $F3030002, $0001FFEC
                dc.l    $F30B0006, $0003FFF4
Offset_0x073CFE:
                dc.w    $0003
                dc.l    $E7050000, $0000FFF6, $F70B0004, $0002FFEE
                dc.l    $FF050010, $00080006
Offset_0x073D18:
                dc.w    $0003
                dc.l    $E6050000, $0000FFF8, $F6030004, $0002FFEF
                dc.l    $F60B0008, $0004FFF7
Offset_0x073D32:
                dc.w    $0003
                dc.l    $E3010000, $0000FFF7, $F30F0002, $0001FFEC
                dc.l    $03010012, $0009000C
Offset_0x073D4C:
                dc.w    $0003
                dc.l    $F0070000, $0000FFEC, $F0070008, $0004FFFC
                dc.l    $06070010, $0008FFFC
Offset_0x073D66:
                dc.w    $0003
                dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
                dc.l    $04070010, $00080000
Offset_0x073D80:
                dc.w    $0003
                dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
                dc.l    $04070010, $0008FFFD
Offset_0x073D9A:
                dc.w    $0003
                dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
                dc.l    $04070010, $0008FFFD
Offset_0x073DB4:
                dc.w    $0003
                dc.l    $F0070000, $0000FFEC, $F0070008, $0004FFFC
                dc.l    $06070010, $0008FFFC
Offset_0x073DCE:
                dc.w    $0003
                dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
                dc.l    $04070010, $00080000
Offset_0x073DE8:
                dc.w    $0003
                dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
                dc.l    $04070010, $0008FFFD
Offset_0x073E02:
                dc.w    $0003
                dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
                dc.l    $04070010, $0008FFFD
Offset_0x073E1C:
                dc.w    $0002
                dc.l    $04010000, $0000FFEB, $F40F0002, $0001FFF3
Offset_0x073E2E:
                dc.w    $0003
                dc.l    $E2050000, $0000FFF8, $FA010004, $0002FFF0
                dc.l    $F20F0006, $0003FFF8
Offset_0x073E48:
                dc.w    $0002
                dc.l    $F9010000, $0000FFEC, $F10F0002, $0001FFF4
Offset_0x073E5A:
                dc.w    $0003
                dc.l    $FC010000, $0000FFEF, $E5010002, $0001FFFF
                dc.l    $F50F0004, $0002FFF7
Offset_0x073E74:
                dc.w    $0002
                dc.l    $04010000, $0000FFEB, $F40F0002, $0001FFF3
Offset_0x073E86:
                dc.w    $0003
                dc.l    $E2010000, $00000000, $FA010002, $0001FFF0
                dc.l    $F20F0004, $0002FFF8
Offset_0x073EA0:
                dc.w    $0002
                dc.l    $F9010000, $0000FFEC, $F10F0002, $0001FFF4
Offset_0x073EB2:
                dc.w    $0003
                dc.l    $E4010000, $0000FFFF, $FC010002, $0001FFEF
                dc.l    $F40F0004, $0002FFF7
Offset_0x073ECC:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFF0, $F0070010, $0008FFEA
Offset_0x073EDE:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFF0, $F8050010, $0008FFEA
Offset_0x073EF0:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFF0, $F8050010, $0008FFEA
Offset_0x073F02:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFF0, $F8051010, $1008FFEA
Offset_0x073F14:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFF0, $F0070010, $0008FFEA
Offset_0x073F26:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFF0, $F0071810, $1808FFE8
Offset_0x073F38:
                dc.w    $0003
                dc.l    $E4010000, $0000FFFA, $F40B0002, $0001FFF0
                dc.l    $FE0B000E, $0007FFE8
Offset_0x073F52:
                dc.w    $0003
                dc.l    $E4050000, $0000FFF8, $F40B0004, $0002FFF0
                dc.l    $04050010, $0008FFEF
Offset_0x073F6C:
                dc.w    $0003
                dc.l    $E4010000, $0000FFFA, $F40B0002, $0001FFF0
                dc.l    $0405000E, $0007FFEF
Offset_0x073F86:
                dc.w    $0003
                dc.l    $E4050000, $0000FFF8, $F40B0004, $0002FFF0
                dc.l    $04050010, $0008FFEF
Offset_0x073FA0:
                dc.w    $0003
                dc.l    $E4010000, $0000FFFA, $F40B0002, $0001FFF0
                dc.l    $FC0B000E, $0007FFEA
Offset_0x073FBA:
                dc.w    $0003
                dc.l    $E4050000, $0000FFF8, $F40B0004, $0002FFF0
                dc.l    $F70B1810, $1808FFEA
Offset_0x073FD4:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
                dc.l    $060D000E, $0007FFF0
Offset_0x073FEE:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
                dc.l    $0605000E, $0007FFF8
Offset_0x074008:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
                dc.l    $0605000E, $0007FFF8
Offset_0x074022:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
                dc.l    $060D000E, $0007FFF0
Offset_0x07403C:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
                dc.l    $080D180E, $1807FFF0
Offset_0x074056:
                dc.w    $0003
                dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
                dc.l    $FE0B0810, $08080000
Offset_0x074070:
                dc.w    $0003
                dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
                dc.l    $01050810, $08080004
Offset_0x07408A:
                dc.w    $0003
                dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
                dc.l    $01050810, $08080004
Offset_0x0740A4:
                dc.w    $0003
                dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
                dc.l    $01050810, $08080004
Offset_0x0740BE:
                dc.w    $0003
                dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
                dc.l    $FC0B0810, $0808FFFE
Offset_0x0740D8:
                dc.w    $0003
                dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
                dc.l    $F70B1010, $1008FFFF
Offset_0x0740F2:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x0740FC:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x074106:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x074110:
                dc.w    $0001
                dc.l    $F8090000, $0000FFDC
Offset_0x07411A:
                dc.w    $0001
                dc.l    $F8090000, $0000FFDC
Offset_0x074124:
                dc.w    $0001
                dc.l    $F8090000, $0000FFDC
Offset_0x07412E:
                dc.w    $0001
                dc.l    $F8090000, $0000FFDC
Offset_0x074138:
                dc.w    $0001
                dc.l    $07090000, $0000FFE1
Offset_0x074142:
                dc.w    $0001
                dc.l    $07090000, $0000FFE1
Offset_0x07414C:
                dc.w    $0001
                dc.l    $07090000, $0000FFE1
Offset_0x074156:
                dc.w    $0001
                dc.l    $07090000, $0000FFE1
Offset_0x074160:
                dc.w    $0001
                dc.l    $0C070000, $0000FFF8
Offset_0x07416A:
                dc.w    $0001
                dc.l    $0C070000, $0000FFF8
Offset_0x074174:
                dc.w    $0001
                dc.l    $0C070000, $0000FFF8
Offset_0x07417E:
                dc.w    $0001
                dc.l    $0C070000, $0000FFF8
Offset_0x074188:
                dc.w    $0001
                dc.l    $07070000, $00000007
Offset_0x074192:
                dc.w    $0001
                dc.l    $07070000, $00000007
Offset_0x07419C:
                dc.w    $0001
                dc.l    $07070000, $00000007
Offset_0x0741A6:
                dc.w    $0001
                dc.l    $07070000, $00000007
Offset_0x0741B0:
                dc.w    $0002
                dc.l    $E8050000, $0000FFF8, $F80B0004, $0002FFF0
Offset_0x0741C2:
                dc.w    $0002
                dc.l    $E8050000, $0000FFF8, $F80B0004, $0002FFF0
Offset_0x0741D4:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFF9
Offset_0x0741DE:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x0741E8:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x0741F2:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFF0, $E40D0010, $0008FFEA
Offset_0x074204:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFF0, $E40D0810, $0808FFEA
Offset_0x074216:
                dc.w    $0001
                dc.l    $F40F0000, $0000FFF0
Offset_0x074220:
                dc.w    $0001
                dc.l    $F40F0000, $0000FFF0
Offset_0x07422A:
                dc.w    $0001
                dc.l    $F40F0000, $0000FFF0
Offset_0x074234:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF8, $000D0006, $0003FFF0
Offset_0x074246:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF8, $00090006, $0003FFF8
Offset_0x074258:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF8, $00090006, $0003FFF8
Offset_0x07426A:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF8, $00090006, $0003FFF8
Offset_0x07427C:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
Offset_0x07428E:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
Offset_0x0742A0:
                dc.w    $0002
                dc.l    $F8010000, $0000FFE8, $F00B0002, $0001FFF0
Offset_0x0742B2:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFE8
Offset_0x0742C4:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x0742CE:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFEC, $F0030010, $0008000C
Offset_0x0742E0:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFEC, $F0030010, $0008000C
Offset_0x0742F2:
                dc.w    $0002
                dc.l    $F8050000, $0000FFEC, $F00B0004, $0002FFFC
Offset_0x074304:
                dc.w    $0002
                dc.l    $F0070000, $0000FFF0, $F0070800, $08000000
Offset_0x074316:
                dc.w    $0002
                dc.l    $F8050800, $08000004, $F00B0804, $0802FFEC
Offset_0x074328:
                dc.w    $0002
                dc.l    $F0070000, $0000FFF0, $F8050008, $00040000
Offset_0x07433A:
                dc.w    $0002
                dc.l    $F0070800, $08000000, $F8050808, $0804FFF0
Offset_0x07434C:
                dc.w    $0002
                dc.l    $F8050000, $0000FFEC, $F00B0004, $0002FFFC
Offset_0x07435E:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x074368:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFF1
Offset_0x074372:
                dc.w    $0002
                dc.l    $E4050000, $0000FFF8, $F40B0004, $0002FFF1
Offset_0x074384:
                dc.w    $0001
                dc.l    $F20B0000, $0000FFF2
Offset_0x07438E:
                dc.w    $0001
                dc.l    $F40B0000, $0000FFF0
Offset_0x074398:
                dc.w    $0001
                dc.l    $F30B0000, $0000FFF2
Offset_0x0743A2:
                dc.w    $0001
                dc.l    $F20B0000, $0000FFF2
Offset_0x0743AC:
                dc.w    $0001
                dc.l    $F20B0000, $0000FFF2
Offset_0x0743B6:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFF1
Offset_0x0743C0:
                dc.w    $0001
                dc.l    $ED0B0000, $0000FFF0
Offset_0x0743CA:
                dc.w    $0001
                dc.l    $EC0B0000, $0000FFF1
Offset_0x0743D4:
                dc.w    $0002
                dc.l    $F4090000, $0000FFF3, $04050006, $0003FFF3
Offset_0x0743E6:
                dc.w    $0002
                dc.l    $F2070000, $0000FFF0, $EC030008, $00040000
Offset_0x0743F8:
                dc.w    $0001
                dc.l    $F8090000, $0000FFE0
Offset_0x074402:
                dc.w    $0001
                dc.l    $F8090000, $0000FFE0
Offset_0x07440C:
                dc.w    $0001
                dc.l    $F8090000, $0000FFE0
Offset_0x074416:
                dc.w    $0001
                dc.l    $F8090000, $0000FFE0
Offset_0x074420:
                dc.w    $0002
                dc.l    $E8090000, $0000FFF4, $F80D0006, $0003FFF4
Offset_0x074432:
                dc.w    $0002
                dc.l    $E8090000, $0000FFF4, $F80D0006, $0003FFF4
Offset_0x074444:
                dc.w    $0001
                dc.l    $FD090000, $0000FFE3
Offset_0x07444E:
                dc.w    $0001
                dc.l    $FD090000, $0000FFE3
Offset_0x074458:
                dc.w    $0001
                dc.l    $FD090000, $0000FFE3
Offset_0x074462:
                dc.w    $0001
                dc.l    $FD090000, $0000FFE3     
;===============================================================================
; Mapeamento do Miles / "Tails"      
; [ Término ]
;===============================================================================
  
;===============================================================================
; Script para carga dos Sprites do Miles / "Tails"      
; [ Início ]
;=============================================================================== 
Miles_Dyn_Script: ; Offset_0x07446C:
                dc.w    Offset_0x074582-Miles_Dyn_Script
                dc.w    Offset_0x074584-Miles_Dyn_Script
                dc.w    Offset_0x07458A-Miles_Dyn_Script
                dc.w    Offset_0x074590-Miles_Dyn_Script
                dc.w    Offset_0x074596-Miles_Dyn_Script
                dc.w    Offset_0x07459C-Miles_Dyn_Script
                dc.w    Offset_0x0745A0-Miles_Dyn_Script
                dc.w    Offset_0x0745A4-Miles_Dyn_Script
                dc.w    Offset_0x0745AA-Miles_Dyn_Script
                dc.w    Offset_0x0745B0-Miles_Dyn_Script
                dc.w    Offset_0x0745B4-Miles_Dyn_Script
                dc.w    Offset_0x0745B8-Miles_Dyn_Script
                dc.w    Offset_0x0745BC-Miles_Dyn_Script
                dc.w    Offset_0x0745C0-Miles_Dyn_Script
                dc.w    Offset_0x0745C4-Miles_Dyn_Script
                dc.w    Offset_0x0745CC-Miles_Dyn_Script
                dc.w    Offset_0x0745D4-Miles_Dyn_Script
                dc.w    Offset_0x0745DC-Miles_Dyn_Script
                dc.w    Offset_0x0745E4-Miles_Dyn_Script
                dc.w    Offset_0x0745EC-Miles_Dyn_Script
                dc.w    Offset_0x0745F4-Miles_Dyn_Script
                dc.w    Offset_0x0745FC-Miles_Dyn_Script
                dc.w    Offset_0x074604-Miles_Dyn_Script
                dc.w    Offset_0x07460C-Miles_Dyn_Script
                dc.w    Offset_0x074614-Miles_Dyn_Script
                dc.w    Offset_0x07461C-Miles_Dyn_Script
                dc.w    Offset_0x074624-Miles_Dyn_Script
                dc.w    Offset_0x07462C-Miles_Dyn_Script
                dc.w    Offset_0x074634-Miles_Dyn_Script
                dc.w    Offset_0x07463C-Miles_Dyn_Script
                dc.w    Offset_0x074644-Miles_Dyn_Script
                dc.w    Offset_0x07464C-Miles_Dyn_Script
                dc.w    Offset_0x074654-Miles_Dyn_Script
                dc.w    Offset_0x07465C-Miles_Dyn_Script
                dc.w    Offset_0x074664-Miles_Dyn_Script
                dc.w    Offset_0x07466C-Miles_Dyn_Script
                dc.w    Offset_0x074674-Miles_Dyn_Script
                dc.w    Offset_0x07467C-Miles_Dyn_Script
                dc.w    Offset_0x074684-Miles_Dyn_Script
                dc.w    Offset_0x07468A-Miles_Dyn_Script
                dc.w    Offset_0x074692-Miles_Dyn_Script
                dc.w    Offset_0x074698-Miles_Dyn_Script
                dc.w    Offset_0x0746A0-Miles_Dyn_Script
                dc.w    Offset_0x0746A6-Miles_Dyn_Script
                dc.w    Offset_0x0746AE-Miles_Dyn_Script
                dc.w    Offset_0x0746B4-Miles_Dyn_Script
                dc.w    Offset_0x0746BC-Miles_Dyn_Script
                dc.w    Offset_0x0746C2-Miles_Dyn_Script
                dc.w    Offset_0x0746C8-Miles_Dyn_Script
                dc.w    Offset_0x0746C2-Miles_Dyn_Script
                dc.w    Offset_0x0746CE-Miles_Dyn_Script
                dc.w    Offset_0x0746D4-Miles_Dyn_Script
                dc.w    Offset_0x0746DA-Miles_Dyn_Script
                dc.w    Offset_0x0746E2-Miles_Dyn_Script
                dc.w    Offset_0x0746EA-Miles_Dyn_Script
                dc.w    Offset_0x0746F2-Miles_Dyn_Script
                dc.w    Offset_0x0746FA-Miles_Dyn_Script
                dc.w    Offset_0x074702-Miles_Dyn_Script
                dc.w    Offset_0x07470A-Miles_Dyn_Script
                dc.w    Offset_0x074712-Miles_Dyn_Script
                dc.w    Offset_0x07471A-Miles_Dyn_Script
                dc.w    Offset_0x074712-Miles_Dyn_Script
                dc.w    Offset_0x074722-Miles_Dyn_Script
                dc.w    Offset_0x07472A-Miles_Dyn_Script
                dc.w    Offset_0x074732-Miles_Dyn_Script
                dc.w    Offset_0x07473A-Miles_Dyn_Script
                dc.w    Offset_0x074742-Miles_Dyn_Script
                dc.w    Offset_0x07474A-Miles_Dyn_Script
                dc.w    Offset_0x074752-Miles_Dyn_Script
                dc.w    Offset_0x07475A-Miles_Dyn_Script
                dc.w    Offset_0x074762-Miles_Dyn_Script
                dc.w    Offset_0x074766-Miles_Dyn_Script
                dc.w    Offset_0x07476A-Miles_Dyn_Script
                dc.w    Offset_0x07476E-Miles_Dyn_Script
                dc.w    Offset_0x074772-Miles_Dyn_Script
                dc.w    Offset_0x074776-Miles_Dyn_Script
                dc.w    Offset_0x07477A-Miles_Dyn_Script
                dc.w    Offset_0x07477E-Miles_Dyn_Script
                dc.w    Offset_0x074782-Miles_Dyn_Script
                dc.w    Offset_0x074786-Miles_Dyn_Script
                dc.w    Offset_0x07478A-Miles_Dyn_Script
                dc.w    Offset_0x07478E-Miles_Dyn_Script
                dc.w    Offset_0x074792-Miles_Dyn_Script
                dc.w    Offset_0x074796-Miles_Dyn_Script
                dc.w    Offset_0x07479A-Miles_Dyn_Script
                dc.w    Offset_0x07479E-Miles_Dyn_Script
                dc.w    Offset_0x0747A2-Miles_Dyn_Script
                dc.w    Offset_0x0747A6-Miles_Dyn_Script
                dc.w    Offset_0x0747AA-Miles_Dyn_Script
                dc.w    Offset_0x0747AE-Miles_Dyn_Script
                dc.w    Offset_0x0747B4-Miles_Dyn_Script
                dc.w    Offset_0x0747BA-Miles_Dyn_Script
                dc.w    Offset_0x0747BE-Miles_Dyn_Script
                dc.w    Offset_0x0747C2-Miles_Dyn_Script
                dc.w    Offset_0x0747C6-Miles_Dyn_Script
                dc.w    Offset_0x0747C6-Miles_Dyn_Script
                dc.w    Offset_0x0747CC-Miles_Dyn_Script
                dc.w    Offset_0x0747D0-Miles_Dyn_Script
                dc.w    Offset_0x0747D4-Miles_Dyn_Script
                dc.w    Offset_0x0747D8-Miles_Dyn_Script
                dc.w    Offset_0x0747DE-Miles_Dyn_Script
                dc.w    Offset_0x0747E4-Miles_Dyn_Script
                dc.w    Offset_0x0747EA-Miles_Dyn_Script
                dc.w    Offset_0x0747F0-Miles_Dyn_Script
                dc.w    Offset_0x0747F6-Miles_Dyn_Script
                dc.w    Offset_0x0747FC-Miles_Dyn_Script
                dc.w    Offset_0x074802-Miles_Dyn_Script
                dc.w    Offset_0x074808-Miles_Dyn_Script
                dc.w    Offset_0x07480C-Miles_Dyn_Script
                dc.w    Offset_0x074812-Miles_Dyn_Script
                dc.w    Offset_0x074818-Miles_Dyn_Script
                dc.w    Offset_0x07481E-Miles_Dyn_Script
                dc.w    Offset_0x074818-Miles_Dyn_Script
                dc.w    Offset_0x074824-Miles_Dyn_Script
                dc.w    Offset_0x074824-Miles_Dyn_Script
                dc.w    Offset_0x07482A-Miles_Dyn_Script
                dc.w    Offset_0x074830-Miles_Dyn_Script
                dc.w    Offset_0x074834-Miles_Dyn_Script
                dc.w    Offset_0x074838-Miles_Dyn_Script
                dc.w    Offset_0x07483E-Miles_Dyn_Script
                dc.w    Offset_0x074842-Miles_Dyn_Script
                dc.w    Offset_0x074846-Miles_Dyn_Script
                dc.w    Offset_0x07484A-Miles_Dyn_Script
                dc.w    Offset_0x07484E-Miles_Dyn_Script
                dc.w    Offset_0x074852-Miles_Dyn_Script
                dc.w    Offset_0x074856-Miles_Dyn_Script
                dc.w    Offset_0x07485A-Miles_Dyn_Script
                dc.w    Offset_0x07485E-Miles_Dyn_Script
                dc.w    Offset_0x074864-Miles_Dyn_Script
                dc.w    Offset_0x07476E-Miles_Dyn_Script
                dc.w    Offset_0x074772-Miles_Dyn_Script
                dc.w    Offset_0x074776-Miles_Dyn_Script
                dc.w    Offset_0x07477A-Miles_Dyn_Script
                dc.w    Offset_0x07486A-Miles_Dyn_Script
                dc.w    Offset_0x074870-Miles_Dyn_Script
                dc.w    Offset_0x07476E-Miles_Dyn_Script
                dc.w    Offset_0x074772-Miles_Dyn_Script
                dc.w    Offset_0x074776-Miles_Dyn_Script
                dc.w    Offset_0x07477A-Miles_Dyn_Script
Offset_0x074582:
                dc.w    $0000
Offset_0x074584:
                dc.w    $0002
                dc.w    $5000, $5006
Offset_0x07458A:
                dc.w    $0002
                dc.w    $500C, $5006
Offset_0x074590:
                dc.w    $0002
                dc.w    $5012, $5006
Offset_0x074596:
                dc.w    $0002
                dc.w    $5018, $5006
Offset_0x07459C:
                dc.w    $0001
                dc.w    $B01E
Offset_0x0745A0:
                dc.w    $0001
                dc.w    $B02A
Offset_0x0745A4:
                dc.w    $0002
                dc.w    $5036, $503C
Offset_0x0745AA:
                dc.w    $0002
                dc.w    $5036, $5042
Offset_0x0745B0:
                dc.w    $0001
                dc.w    $7048
Offset_0x0745B4:
                dc.w    $0001
                dc.w    $B050
Offset_0x0745B8:
                dc.w    $0001
                dc.w    $B05C
Offset_0x0745BC:
                dc.w    $0001
                dc.w    $5068
Offset_0x0745C0:
                dc.w    $0001
                dc.w    $B06E
Offset_0x0745C4:
                dc.w    $0003
                dc.w    $507A, $7080, $50CA
Offset_0x0745CC:
                dc.w    $0003
                dc.w    $5088, $708E, $50D0
Offset_0x0745D4:
                dc.w    $0003
                dc.w    $5096, $509C, $50D6
Offset_0x0745DC:
                dc.w    $0003
                dc.w    $50A2, $50A8, $50DC
Offset_0x0745E4:
                dc.w    $0003
                dc.w    $507A, $70AE, $50CA
Offset_0x0745EC:
                dc.w    $0003
                dc.w    $5088, $70B6, $50D0
Offset_0x0745F4:
                dc.w    $0003
                dc.w    $5096, $50BE, $50D6
Offset_0x0745FC:
                dc.w    $0003
                dc.w    $50A2, $50C4, $50DC
Offset_0x074604:
                dc.w    $0003
                dc.w    $10E2, $30E4, $B0E8
Offset_0x07460C:
                dc.w    $0003
                dc.w    $30F4, $B0F8, $3104
Offset_0x074614:
                dc.w    $0003
                dc.w    $3108, $310C, $B110
Offset_0x07461C:
                dc.w    $0003
                dc.w    $111C, $F11E, $112E
Offset_0x074624:
                dc.w    $0003
                dc.w    $10E2, $30E4, $B130
Offset_0x07462C:
                dc.w    $0003
                dc.w    $30F4, $B13C, $3148
Offset_0x074634:
                dc.w    $0003
                dc.w    $3108, $310C, $B14C
Offset_0x07463C:
                dc.w    $0003
                dc.w    $111C, $F158, $1168
Offset_0x074644:
                dc.w    $0003
                dc.w    $716A, $7172, $71CA
Offset_0x07464C:
                dc.w    $0003
                dc.w    $717A, $7182, $71D2
Offset_0x074654:
                dc.w    $0003
                dc.w    $718A, $7192, $71DA
Offset_0x07465C:
                dc.w    $0003
                dc.w    $719A, $71A2, $75BE
Offset_0x074664:
                dc.w    $0003
                dc.w    $716A, $71AA, $71CA
Offset_0x07466C:
                dc.w    $0003
                dc.w    $717A, $71B2, $71D2
Offset_0x074674:
                dc.w    $0003
                dc.w    $718A, $71BA, $71DA
Offset_0x07467C:
                dc.w    $0003
                dc.w    $719A, $71C2, $75BE
Offset_0x074684:
                dc.w    $0002
                dc.w    $11EA, $F1EC
Offset_0x07468A:
                dc.w    $0003
                dc.w    $31FC, $1200, $F202
Offset_0x074692:
                dc.w    $0002
                dc.w    $1212, $F214
Offset_0x074698:
                dc.w    $0003
                dc.w    $1224, $1226, $F228
Offset_0x0746A0:
                dc.w    $0002
                dc.w    $11EA, $F238
Offset_0x0746A6:
                dc.w    $0003
                dc.w    $1248, $1200, $F24A
Offset_0x0746AE:
                dc.w    $0002
                dc.w    $1212, $F25A
Offset_0x0746B4:
                dc.w    $0003
                dc.w    $126A, $1224, $F26C
Offset_0x0746BC:
                dc.w    $0002
                dc.w    $F27C, $729C
Offset_0x0746C2:
                dc.w    $0002
                dc.w    $F28C, $32A4
Offset_0x0746C8:
                dc.w    $0002
                dc.w    $F27C, $32A8
Offset_0x0746CE:
                dc.w    $0002
                dc.w    $F27C, $72AC
Offset_0x0746D4:
                dc.w    $0002
                dc.w    $F28C, $72AC
Offset_0x0746DA:
                dc.w    $0003
                dc.w    $12B4, $B2B6, $B2D2
Offset_0x0746E2:
                dc.w    $0003
                dc.w    $32C2, $B2C6, $32DE
Offset_0x0746EA:
                dc.w    $0003
                dc.w    $12B4, $B2B6, $32E2
Offset_0x0746F2:
                dc.w    $0003
                dc.w    $32C2, $B2C6, $32E6
Offset_0x0746FA:
                dc.w    $0003
                dc.w    $12B4, $B2B6, $B2EA
Offset_0x074702:
                dc.w    $0003
                dc.w    $32C2, $B2C6, $B2EA
Offset_0x07470A:
                dc.w    $0003
                dc.w    $52F6, $72FC, $7312
Offset_0x074712:
                dc.w    $0003
                dc.w    $5304, $730A, $331E
Offset_0x07471A:
                dc.w    $0003
                dc.w    $52F6, $72FC, $331A
Offset_0x074722:
                dc.w    $0003
                dc.w    $52F6, $72FC, $7322
Offset_0x07472A:
                dc.w    $0003
                dc.w    $5304, $730A, $7322
Offset_0x074732:
                dc.w    $0003
                dc.w    $B32A, $3336, $B2D2
Offset_0x07473A:
                dc.w    $0003
                dc.w    $B33A, $3346, $32DE
Offset_0x074742:
                dc.w    $0003
                dc.w    $B32A, $3336, $32E2
Offset_0x07474A:
                dc.w    $0003
                dc.w    $B33A, $3346, $32E6
Offset_0x074752:
                dc.w    $0003
                dc.w    $B32A, $3336, $B2EA
Offset_0x07475A:
                dc.w    $0003
                dc.w    $B33A, $3346, $B2EA
Offset_0x074762:
                dc.w    $0001
                dc.w    $F34A
Offset_0x074766:
                dc.w    $0001
                dc.w    $F35A
Offset_0x07476A:
                dc.w    $0001
                dc.w    $F36A
Offset_0x07476E:
                dc.w    $0001
                dc.w    $50CA
Offset_0x074772:
                dc.w    $0001
                dc.w    $50D0
Offset_0x074776:
                dc.w    $0001
                dc.w    $50D6
Offset_0x07477A:
                dc.w    $0001
                dc.w    $50DC
Offset_0x07477E:
                dc.w    $0001
                dc.w    $537A
Offset_0x074782:
                dc.w    $0001
                dc.w    $5380
Offset_0x074786:
                dc.w    $0001
                dc.w    $5386
Offset_0x07478A:
                dc.w    $0001
                dc.w    $538C
Offset_0x07478E:
                dc.w    $0001
                dc.w    $71CA
Offset_0x074792:
                dc.w    $0001
                dc.w    $71D2
Offset_0x074796:
                dc.w    $0001
                dc.w    $71DA
Offset_0x07479A:
                dc.w    $0001
                dc.w    $75BE
Offset_0x07479E:
                dc.w    $0001
                dc.w    $7392
Offset_0x0747A2:
                dc.w    $0001
                dc.w    $739A
Offset_0x0747A6:
                dc.w    $0001
                dc.w    $73A2
Offset_0x0747AA:
                dc.w    $0001
                dc.w    $73AA
Offset_0x0747AE:
                dc.w    $0002
                dc.w    $33B2, $B3B6
Offset_0x0747B4:
                dc.w    $0002
                dc.w    $33B2, $B3C2
Offset_0x0747BA:
                dc.w    $0001
                dc.w    $B3CE
Offset_0x0747BE:
                dc.w    $0001
                dc.w    $F3DA
Offset_0x0747C2:
                dc.w    $0001
                dc.w    $F3EA
Offset_0x0747C6:
                dc.w    $0002
                dc.w    $F3FA, $740A
Offset_0x0747CC:
                dc.w    $0001
                dc.w    $F412
Offset_0x0747D0:
                dc.w    $0001
                dc.w    $F422
Offset_0x0747D4:
                dc.w    $0001
                dc.w    $F432
Offset_0x0747D8:
                dc.w    $0002
                dc.w    $5442, $7448
Offset_0x0747DE:
                dc.w    $0002
                dc.w    $5442, $5450
Offset_0x0747E4:
                dc.w    $0002
                dc.w    $5442, $5456
Offset_0x0747EA:
                dc.w    $0002
                dc.w    $5442, $545C
Offset_0x0747F0:
                dc.w    $0002
                dc.w    $5462, $7468
Offset_0x0747F6:
                dc.w    $0002
                dc.w    $5470, $7476
Offset_0x0747FC:
                dc.w    $0002
                dc.w    $147E, $B480
Offset_0x074802:
                dc.w    $0002
                dc.w    $548C, $7492
Offset_0x074808:
                dc.w    $0001
                dc.w    $F49A
Offset_0x07480C:
                dc.w    $0002
                dc.w    $F4AA, $34BA
Offset_0x074812:
                dc.w    $0002
                dc.w    $F4BE, $34CE
Offset_0x074818:
                dc.w    $0002
                dc.w    $34D2, $B4D6
Offset_0x07481E:
                dc.w    $0002
                dc.w    $74E2, $74E2
Offset_0x074824:
                dc.w    $0002
                dc.w    $74EA, $34F2
Offset_0x07482A:
                dc.w    $0002
                dc.w    $34F6, $B4FA
Offset_0x074830:
                dc.w    $0001
                dc.w    $F506
Offset_0x074834:
                dc.w    $0001
                dc.w    $B516
Offset_0x074838:
                dc.w    $0002
                dc.w    $3522, $B526
Offset_0x07483E:
                dc.w    $0001
                dc.w    $B532
Offset_0x074842:
                dc.w    $0001
                dc.w    $B53E
Offset_0x074846:
                dc.w    $0001
                dc.w    $B54A
Offset_0x07484A:
                dc.w    $0001
                dc.w    $B556
Offset_0x07484E:
                dc.w    $0001
                dc.w    $B562
Offset_0x074852:
                dc.w    $0001
                dc.w    $B56E
Offset_0x074856:
                dc.w    $0001
                dc.w    $B57A
Offset_0x07485A:
                dc.w    $0001
                dc.w    $B586
Offset_0x07485E:
                dc.w    $0002
                dc.w    $5592, $3598
Offset_0x074864:
                dc.w    $0002
                dc.w    $759C, $35A4
Offset_0x07486A:
                dc.w    $0002
                dc.w    $55A8, $75AE
Offset_0x074870:
                dc.w    $0002
                dc.w    $55A8, $75B6 
;===============================================================================
; Script para carga dos Sprites do Miles / "Tails"      
; [ Término ]
;===============================================================================
              
Sega_Spr:                                                     ; Offset_0x074876:
                incbin  'data\sprites\sega.nem'
Sega_Blocks_Spr:                                              ; Offset_0x074CF6:      
                incbin  'data\sprites\sega_blk.nem'
Sega_Mappings:                                                ; Offset_0x074D0E:      
                incbin  'data\all\sega.eni'   
Title_Screen_Mappings_1:                                      ; Offset_0x074DC6: 
                incbin  'data\all\ts_map_1.eni' 
Title_Screen_Mappings_2:                                      ; Offset_0x074E3A:
                incbin  'data\all\ts_map_2.eni'
Title_Screen_Mappings_3:                                      ; Offset_0x074E86:
                incbin  'data\all\ts_map_3.eni'
Title_Screen_Bg_Wings:                                        ; Offset_0x074F6C:    
                incbin  'data\sprites\tsbgwngs.nem'                                                    
Title_Screen_Sonic_Miles:                                     ; Offset_0x07667A:
                incbin  'data\sprites\tssncmls.nem' 
Title_Screen_Cursor:                                          ; Offset_0x078CBC:
                incbin  'data\sprites\tscursor.nem'                   
Switch:                                                       ; Offset_0x078DAC:  
                incbin  'data\sprites\switch.nem'                
Vertical_Spring:                                              ; Offset_0x078E84:
                incbin  'data\sprites\v_spring.nem'  
Horizontal_Spring:                                            ; Offset_0x078FA0:
                incbin  'data\sprites\h_spring.nem'  
Diagonal_Spring:                                              ; Offset_0x07906A:
                incbin  'data\sprites\d_spring.nem'                                                              
Head_up_display_Sprites:                                      ; Offset_0x07923E:
                incbin  'data\sprites\hud.nem' 
Head_up_display_Sonic:                                        ; Offset_0x079346:
                incbin  'data\sprites\hudsonic.nem'
Rings_Sprites:                                                ; Offset_0x07945C: 
                incbin  'data\sprites\rings.nem'  
Monitors:                                                     ; Offset_0x079550:
                incbin  'data\sprites\monitors.nem'    
Spikes:                                                       ; Offset_0x07995C:
                incbin  'data\sprites\spikes.nem'                                  
Enemy_Points_Spr:                                             ; Offset_0x0799AC:                
                incbin  'data\sprites\points.nem'   
Star_Post:                                                    ; Offset_0x079A86:
                incbin  'data\sprites\starpost.nem' 
End_Panel:                                                    ; Offset_0x079BDE:
                incbin  'data\sprites\endpanel.nem'                   
End_Panel_Spr:                                                ; Offset_0x07A18A:                
                incbin  'data\sprites\endpanel.dat'                             
Diagonal_Spring_1:                                            ; Offset_0x07AB4A:
                incbin  'data\sprites\dspring1.nem'                    
MCz_Horizontal_Spikes:                                        ; Offset_0x07AC9A:
                incbin  'data\mcz\h_spikes.nem'   
Oxygen_Bubbles:                                               ; Offset_0x07AD16:
                incbin  'data\sprites\oxygen.nem'                                    
Bubbles:                                                      ; Offset_0x07AEE2: 
                incbin  'data\sprites\bubbles.nem' 
Oxygen_Numbers_Spr:                                           ; Offset_0x07AF80:
                incbin  'data\sprites\oxygnumb.dat'                 
Game_Over_Time_Over:                                          ; Offset_0x07B400:
                incbin  'data\sprites\gt_over.nem'                                                                               
Explosion:                                                    ; Offset_0x07B592:
                incbin  'data\sprites\explosn.nem' 
Head_up_display_Miles:                                        ; Offset_0x07B946:   
                incbin  'data\sprites\hudmiles.nem' 
Egg_Prison:                                                   ; Offset_0x07BA32:
                incbin  'data\sprites\eggprisn.nem'          
Miles_In_Continue:                                            ; Offset_0x07BDBE:
                incbin  'data\sprites\milescnt.nem'                            
Mini_Sonic:                                                   ; Offset_0x07C0AA:
                incbin  'data\sprites\m_sonic.nem'                 
Head_up_display_Tails:                                        ; Offset_0x07C20C:
                incbin  'data\sprites\hudtails.nem'  
Mini_Miles:                                                   ; Offset_0x07C2F2:
                incbin  'data\sprites\m_miles.nem'
Menu_Font:                                                    ; Offset_0x07C43A:
                incbin  'data\sprites\menufont.nem'  
Versus_1P2_Wins_Tied:                                         ; Offset_0x07C9AE:
                incbin  'data\sprites\vswinstd.nem'  
Versus_Menu_Bg_Mappings:                                      ; Offset_0x07CB80:
                incbin  'data\menus\vsmenubg.eni'      
Sonic_Miles:                                                  ; Offset_0x07CD2C: 
                incbin  'data\sprites\soncmils.dat'                                                                           
Title_Card_ZONE_123:                                          ; Offset_0x07D22C:
                incbin  'data\sprites\tc_zone.nem' 
Title_Card_AY:                                                ; Offset_0x07D58A:
                incbin  'data\sprites\tc_ay.nem'
Menu_Frame:                                                   ; Offset_0x07D990:
                incbin  'data\menus\menu_frm.nem'                              
Level_Icons:                                                  ; Offset_0x07DA10:
                incbin  'data\menus\levelico.nem'                    
Title_Card_Results:                                           ; Offset_0x07E86A:                
                incbin  'data\sprites\tc_res.nem' 
SS_Results_Spr:                                               ; Offset_0x07EB58:
                incbin  'data\ss\tc_res.nem'                 
Perfect:                                                      ; Offset_0x07EEBE:
                incbin  'data\sprites\perfect.nem'    
Blue_Bird:                                                    ; Offset_0x07EF60:
                incbin  'data\sprites\bluebird.nem'       
Squirrel:                                                     ; Offset_0x07F0A2:  
                incbin  'data\sprites\squirrel.nem'  
Mouse:                                                        ; Offset_0x07F206:    
                incbin  'data\sprites\mouse.nem' 
White_Bird:                                                   ; Offset_0x07F340:
                incbin  'data\sprites\wthebird.nem'    
Monkey:                                                       ; Offset_0x07F4A2:
                incbin  'data\sprites\monkey.nem'                                                          
Black_Bird:                                                   ; Offset_0x07F5E2:
                incbin  'data\sprites\blckbird.nem'   
Pig:                                                          ; Offset_0x07F710:
                incbin  'data\sprites\pig.nem'      
Seal:                                                         ; Offset_0x07F846:
                incbin  'data\sprites\seal.nem'   
Penguin:                                                      ; Offset_0x07F962:
                incbin  'data\sprites\penguin.nem'      
Turtle:                                                       ; Offset_0x07FADE:
                incbin  'data\sprites\turtle.nem'                 
Bear:                                                         ; Offset_0x07FC90:
                incbin  'data\sprites\bear.nem'  
Rabbit:                                                       ; Offset_0x07FDD2:
                incbin  'data\sprites\rabbit.nem'                                                                                                                                            
Boss_Switch_Spr:                                              ; Offset_0x07FF2A:                                  
                incbin  'data\wfz\b_switch.nem'                  
Breakable_Wall:                                               ; Offset_0x07FF98:
                incbin  'data\wfz\brk_wall.nem'  
OOz_Giant_Spikeball:                                          ; Offset_0x08007C:
                incbin  'data\ooz\gspkball.nem'
OOz_Touch_Boost_Up:                                           ; Offset_0x080274:
                incbin  'data\ooz\boost_up.nem'   
OOz_Break_To_Boost_Horizontal:                                ; Offset_0x08030A:
                incbin  'data\ooz\brkbst_h.nem'   
OOz_Oil:                                                      ; Offset_0x080376:
                incbin  'data\ooz\oil.nem'
OOz_Oil_01:                                                   ; Offset_0x0804F2:
                incbin  'data\ooz\oil_01.nem'  
OOz_Ball:                                                     ; Offset_0x0805C0:
                incbin  'data\ooz\ball.nem'
OOz_Cannon:                                                   ; Offset_0x0806E0:
                incbin  'data\ooz\cannon.nem'   
OOz_Collapsing_Platform:                                      ; Offset_0x0809D0:
                incbin  'data\ooz\platform.nem'   
OOz_Spring_Push_Boost:                                        ; Offset_0x080C64:
                incbin  'data\ooz\spngpush.nem' 
OOz_Swing_Platform:                                           ; Offset_0x080E26:
                incbin  'data\ooz\swngptfm.nem'  
OOz_Break_To_Boost_Vertical:                                  ; Offset_0x081048:
                incbin  'data\ooz\brkbst_v.nem'                                                                
OOz_Elevator:                                                 ; Offset_0x0810B8:
                incbin  'data\ooz\elevator.nem'   
OOz_Fans:                                                     ; Offset_0x081254:
                incbin  'data\ooz\fans.nem'                                  
OOz_Fire_Booster:                                             ; Offset_0x081514:
                incbin  'data\ooz\fire_bst.nem'  
CNz_Green_Platforms:                                          ; Offset_0x081600:
                incbin  'data\cnz\greenptf.nem'   
CNz_Spikeball_Slot_Machine:                                   ; Offset_0x081668:
                incbin  'data\cnz\spikball.nem'
CNz_Box:                                                      ; Offset_0x0816C8:
                incbin  'data\cnz\box.nem'       
CNz_Elevator:                                                 ; Offset_0x0817B4:
                incbin  'data\cnz\elevator.nem'  
CNz_Slot_Machine_Starter:                                     ; Offset_0x081826:
                incbin  'data\cnz\slotmach.nem'  
CNz_Blue_Bumper:                                              ; Offset_0x081894:
                incbin  'data\cnz\bbumpers.nem' 
CNz_Bumpers:                                                  ; Offset_0x08191E:
                incbin  'data\cnz\bumpers.nem'  
CNz_Diagonal_Launcher:                                        ; Offset_0x081AB0:
                incbin  'data\cnz\d_launch.nem'    
CNz_Vertical_Launcher:                                        ; Offset_0x081C96:
                incbin  'data\cnz\v_launch.nem'                             
CNz_Green_Bumpers:                                            ; Offset_0x081DCC:
                incbin  'data\cnz\gbumpers.nem'                 
CNz_Flippers:                                                 ; Offset_0x081EF2:
                incbin  'data\cnz\flippers.nem'
CPz_Triangle_Platform:                                        ; Offset_0x082216: 
                incbin  'data\cpz\tri_ptfm.nem'      
CPz_Water_Surface:                                            ; Offset_0x082364:
                incbin  'data\cpz\watrsurf.nem'                            
CPz_Speed_Booster:                                            ; Offset_0x0824D4:
                incbin  'data\cpz\speedbst.nem'     
CPz_Worms:                                                    ; Offset_0x08253C:
                incbin  'data\cpz\worms.nem'                               
CPz_Metal_Structure:                                          ; Offset_0x0825AE:
                incbin  'data\cpz\metal_st.nem' 
CPz_Breakable_Block:                                          ; Offset_0x0827B8:
                incbin  'data\cpz\brkblock.nem'                  
CPz_Automatic_Door:                                           ; Offset_0x0827F8:
                incbin  'data\cpz\autodoor.nem' 
CPz_Open_Close_Platform:                                      ; Offset_0x082864:
                incbin  'data\cpz\oc_ptfrm.nem'  
CPz_Platforms:                                                ; Offset_0x082A46:
                incbin  'data\cpz\platform.nem'                 
CPz_Spring_Tubes:                                             ; Offset_0x082C06:
                incbin  'data\cpz\spgtubes.nem'  
ARz_Water_Surface:                                            ; Offset_0x082E02:
                incbin  'data\arz\watrsurf.nem'  
ARz_Leaves:                                                   ; Offset_0x082EE8:
                incbin  'data\arz\leaves.nem'   
ARz_Arrow_Shooter:                                            ; Offset_0x082F74:
                incbin  'data\arz\arrow_s.nem'                                              
ARz_Automatic_Door:                                           ; Offset_0x0830D2:     
                incbin  'data\arz\autodoor.nem'                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
Buzzer:                                                       ; Offset_0x08316A:
                incbin  'data\ehz\buzzer.nem'
Octus:                                                        ; Offset_0x08336A:
                incbin  'data\ooz\octus.nem'                 
Aquis:                                                        ; Offset_0x08368A:
                incbin  'data\ooz\aquis.nem'                  
Masher:                                                       ; Offset_0x0839EA:
                incbin  'data\ehz\masher.nem' 
Robotnik_Ship:                                                ; Offset_0x083BF6: 
                incbin  'data\sprites\robotnik.nem'    
CPz_Boss:                                                     ; Offset_0x084332:
                incbin  'data\cpz\boss.nem'   
Boss_Explosions:                                              ; Offset_0x084890:
                incbin  'data\sprites\explosns.nem'                 
Ship_Boost                                                    ; Offset_0x084F18:   
                incbin  'data\sprites\shpboost.nem'    
Boss_Smokes:                                                  ; Offset_0x084F96:
                incbin  'data\sprites\boss_smk.nem'   
EHz_Boss_Car:                                                 ; Offset_0x08507C:
                incbin  'data\ehz\boss_car.nem'  
Ehz_Boss_Blades:                                              ; Offset_0x085868: 
                incbin  'data\ehz\b_blades.nem'  
HTz_Boss_Fire_Cannon:                                         ; Offset_0x08585C:
                incbin  'data\htz\bossfire.nem'  
ARz_Boss:                                                     ; Offset_0x086128:
                incbin  'data\arz\boss.nem'    
MCz_Boss:                                                     ; Offset_0x086B6E:
                incbin  'data\mcz\boss.nem' 
CNz_Boss:                                                     ; Offset_0x087AAC:
                incbin  'data\cnz\boss.nem'
OOz_Boss:                                                     ; Offset_0x0882D6:
                incbin  'data\ooz\boss.nem'                   
Mz_Boss_Balls_And_Robotniks:                                  ; Offset_0x088DA6:
                incbin  'data\mz\bossballs.nem'       
MCz_Boss_Rocks:                                               ; Offset_0x0894E4:
                incbin  'data\mcz\bossrock.dat'                                                                                                                                                                                                                                                  
Whisp:                                                        ; Offset_0x0895E4:
                incbin  'data\arz\whisp.nem'  
Grounder:                                                     ; Offset_0x08970E:
                incbin  'data\arz\grounder.nem'  
Chop_Chop:                                                    ; Offset_0x089B9A:
                incbin  'data\arz\chopchop.nem'                                
Rexon:                                                        ; Offset_0x089DEC:
                incbin  'data\htz\rexon.nem' 
Spiker:                                                       ; Offset_0x089FAA:
                incbin  'data\htz\spiker.nem'         
Nebula:                                                       ; Offset_0x08A142:
                incbin  'data\scz\nebula.nem'                
Turtloid:                                                     ; Offset_0x08A362:
                incbin  'data\scz\turtloid.nem'                                        
Coconuts:                                                     ; Offset_0x08A87A:
                incbin  'data\ehz\coconuts.nem'  
Crawlton:                                                     ; Offset_0x08AB36:
                incbin  'data\mcz\crawlton.nem'                  
Flasher:                                                      ; Offset_0x08AC5E:
                incbin  'data\mcz\flasher.nem'                 
Slicer:                                                       ; Offset_0x08AD80:
                incbin  'data\mz\slicer.nem'  
Shellcracker:                                                 ; Offset_0x08B058:
                incbin  'data\mz\shellcrac.nem'                                 
Asteron:                                                      ; Offset_0x08B300:             
                incbin  'data\mz\asteron.nem'   
Lander:                                                       ; Offset_0x08B430:
                incbin  'data\cpz\lander.nem'                    
Grabber:                                                      ; Offset_0x08B6B4:
                incbin  'data\cpz\grabber.nem'                     
Clucker:                                                      ; Offset_0x08B9DC:
                incbin  'data\wfz\clucker.nem'                 
Balkiry:                                                      ; Offset_0x08BC16:
                incbin  'data\wfz\balkiry.nem'     
Metal_Sonic:                                                  ; Offset_0x08BE12:
                incbin  'data\dez\metal_snc.nem'                              
Tornado:                                                      ; Offset_0x08CC44:   
                incbin  'data\sprites\tornado.nem' 
WFz_Cannon:                                                   ; Offset_0x08D1A0:
                incbin  'data\wfz\cannon.nem'                  
Chain_Hook:                                                   ; Offset_0x08D388:
                incbin  'data\wfz\chainhook.nem'
Hatchways:                                                    ; Offset_0x08D540: 
                incbin  'data\wfz\hatchways.nem'                                     
Conveyor_Belts_Wheels:                                        ; Offset_0x08D7D8: 
                incbin  'data\wfz\cb_wheels.nem'   
WFz_Platform:                                                 ; Offset_0x08D96E:
                incbin  'data\wfz\platform.nem'                  
Vertical_Laser:                                               ; Offset_0x08DA6E:
                incbin  'data\wfz\verlaser.nem'                               
Clouds:                                                       ; Offset_0x08DAFC: 
                incbin  'data\sprites\clouds.nem'  
Horizontal_Laser:                                             ; Offset_0x08DC42:
                incbin  'data\wfz\horlaser.nem' 
Speed_Boost:                                                  ; Offset_0x08DCA2:
                incbin  'data\wfz\spdboost.nem'                 
WFz_Elevators:                                                ; Offset_0x08DD0C:
                incbin  'data\wfz\elevator.nem'  
Engine_Part:                                                  ; Offset_0x08DDF6:
                incbin  'data\wfz\engnpart.nem'                                                
Vertical_Helix_Spr:                                           ; Offset_0x08DEB8:                
                incbin  'data\wfz\verhelix.nem'
Horizontal_Helix_Spr:                                         ; Offset_0x08DEE8:                
                incbin  'data\wfz\horhelix.nem'                 
Rotating_Helix:                                               ; Offset_0x08E010:
                incbin  'data\wfz\rtthelix.nem'                  
Rocket_Flame_Spr:                                             ; Offset_0x08E0C4:
                incbin  'data\wfz\rktflame.nem'  
Spikeball_Laser:                                              ; Offset_0x08E138:
                incbin  'data\wfz\spkblasr.nem'                                     
Robotnik_Faces:                                               ; Offset_0x08E886:
                incbin  'data\wfz\rbtkface.nem'                
Robotnik:                                                     ; Offset_0x08EA5A:
                incbin  'data\wfz\robotnik.nem'  
Robotnik_Body:                                                ; Offset_0x08EE52:
                incbin  'data\wfz\rbtkbody.nem'                              
Robotnik_Window:                                              ; Offset_0x08EF96:
                incbin  'data\dez\robotnkw.nem'                      
Robotnik_Final:                                               ; Offset_0x08F024:
                incbin  'data\dez\rbtnkfnl.nem'                                    
Crawl:                                                        ; Offset_0x0901A4:
                incbin  'data\cnz\crawl.nem' 
Tornado_Rocket                                                ; Offset_0x090520:
                incbin  'data\wfz\t_rocket.nem' 
Ending_Movie_Frame_0:                                         ; Offset_0x0906E0:                
                incbin  'data\all\emovie.eni'
Ending_Movie_Frame_1:                                         ; Offset_0x0906F8:                
                incbin  'data\all\emovie2.eni'                
Ending_Movie_Frame_2:                                         ; Offset_0x090722:                
                incbin  'data\all\emovie3.eni'
Ending_Movie_Frame_3:                                         ; Offset_0x09073C:                
                incbin  'data\all\emovie4.eni'                                      
Ending_Mappings:                                              ; Offset_0x09076E:
                incbin  'data\all\end_map.eni'
Ending_Mappings_1:                                            ; Offset_0x0907C0:
                incbin  'data\all\end_map_1.eni'                                   
Miles_In_Ending_Movie:                                        ; Offset_0x090992: 
                incbin  'data\sprites\ending.nem'
Tornado_In_Ending:                                            ; Offset_0x091F3C:
                incbin  'data\sprites\tornado1.nem'   
Tornado_In_Ending_2:                                          ; Offset_0x0927E0:
                incbin  'data\sprites\tornado2.nem' 
Sonic_In_Ending:                                              ; Offset_0x092F0A:
                incbin  'data\sprites\sonicend.nem'                    
Super_Sonic_In_Ending:                                        ; Offset_0x093848:
                incbin  'data\sprites\supersnc.nem'
Miles_In_Ending:                                              ; Offset_0x093F3C:   
                incbin  'data\sprites\milesend.nem' 
Sonic_The_Hedgehog_2:                                         ; Offset_0x094B28:
                incbin  'data\sprites\sonic_2.nem'                     
              
                                                            
;-------------------------------------------------------------------------------                  
Emerald_Hill_Blocks:                                          ; Offset_0x094E74:
                incbin  'data\ehz\blocks.kos'
                dc.w    $0000                                 ; Filler
                dc.b    $00                                   ; Filler
Emerald_Hill_Tiles:                                           ; Offset_0x295C24:
                incbin  'data\ehz\tiles.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000 ; Filler                  
;-------------------------------------------------------------------------------                
Hill_Top_Blocks:                                              ; Offset_0x2985A4:
                incbin  'data\htz\blocks.kos'
                dc.w    $0000                                 ; Filler
                dc.b    $00                                   ; Filler                
Hill_Top_Tiles:                                               ; Offset_0x298AB4:
                incbin  'data\htz\tiles.kos'
                dc.b    $00                                   ; Filler 
;-------------------------------------------------------------------------------   
Emerald_Hill_Chunks:                                          ; Offset_0x299D34:

                incbin  'data\ehz\chunks.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000 ; Filler
                dc.b    $00                                   ; Filler 
;------------------------------------------------------------------------------- 
Metropolis_Blocks:                                            ; Offset_0x09CFD4:
                incbin  'data\mz\blocks.kos'   
                dc.w    $0000, $0000, $0000, $0000            ; Filler             
Metropolis_Tiles:                                             ; Offset_0x09DB64:
                incbin  'data\mz\tiles.kos'
                dc.w    $0000, $0000, $0000, $0000            ; Filler
Metropolis_Chunks:                                            ; Offset_0x0A06C4:                
                incbin  'data\mz\chunks.kos'
                dc.b    $00                                   ; Filler 
;-------------------------------------------------------------------------------
Hidden_Palace_Blocks:                                         ; Offset_0x0A3364:
              ; incbin  'data\hpz\blocks.kos'  
Hidden_Palace_Tiles:                                          ; Offset_0x0A3364:
              ; incbin  'data\hpz\tiles.kos'    
Hidden_Palace_Chunks:                                         ; Offset_0x0A3364:
              ; incbin  'data\hpz\chunks.kos'
;-------------------------------------------------------------------------------                
Oil_Ocean_Blocks:                                             ; Offset_0x0A3364:
                incbin  'data\ooz\blocks.kos'
                dc.w    $0000, $0000, $0000, $0000            ; Filler  
Oil_Ocean_Tiles:                                              ; Offset_0x0A4204:
                incbin  'data\ooz\tiles.kos' 
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000 ; Filler
Oil_Ocean_Chunks:                                             ; Offset_0x0A6834:
                incbin  'data\ooz\chunks.kos'
                dc.b    $00                                   ; Filler 
;-------------------------------------------------------------------------------
Mystic_Cave_Blocks:                                           ; Offset_0x0A8D04:
                incbin  'data\mcz\blocks.kos'
                dc.w    $0000, $0000                          ; Filler
                dc.b    $00                                   ; Filler 
Mystic_Cave_Tiles:                                            ; Offset_0x0A9D74:
                incbin  'data\mcz\tiles.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000     ; Filler
                dc.b    $00                                   ; Filler  
Mystic_Cave_Chunks:                                           ; Offset_0x0AD454:
                incbin  'data\mcz\chunks.kos'
                dc.w    $0000, $0000                          ; Filler
;-------------------------------------------------------------------------------
Casino_Night_Blocks:                                          ; Offset_0x0AFFC4:
                incbin  'data\cnz\blocks.kos'
                dc.w    $0000                                 ; Filler
                dc.b    $00                                   ; Filler
Casino_Night_Tiles:                                           ; Offset_0x0B0894:
                incbin  'data\cnz\tiles.kos'
                dc.w    $0000, $0000, $0000                   ; Filler
                dc.b    $00                                   ; Filler 
Casino_Night_Chunks:                                          ; Offset_0x0B2CF4:
                incbin  'data\cnz\chunks.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000     ; Filler
;------------------------------------------------------------------------------- 
Chemical_Plant_Blocks:                                        ; Offset_0x0B5234:
                incbin  'data\cpz\blocks.kos'
                dc.w    $0000, $0000, $0000, $0000            ; Filler
                dc.b    $00                                   ; Filler 
Chemical_Plant_Tiles:                                         ; Offset_0x0B6174:
                incbin  'data\cpz\tiles.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000 ; Filler
                dc.b    $00                                   ; Filler 
Chemical_Plant_Chunks:                                        ; Offset_0x0B90F4:
                incbin  'data\cpz\chunks.kos'
                dc.w    $0000                                 ; Filler
                dc.b    $00                                   ; Filler 
;-------------------------------------------------------------------------------  
Aquatic_Ruin_Blocks:                                          ; Offset_0x0BB944: 
                incbin  'data\arz\blocks.kos'
                dc.w    $0000, $0000, $0000                   ; Filler
                dc.b    $00                                   ; Filler 
Aquatic_Ruin_Tiles:                                           ; Offset_0x0BCC24:
                incbin  'data\arz\tiles.kos'
                dc.b    $00                                   ; Filler 
Aquatic_Ruin_Chunks:                                          ; Offset_0x0C1434:
                incbin  'data\arz\chunks.kos'
                dc.w    $0000, $0000, $0000                   ; Filler
;-------------------------------------------------------------------------------                   
Sky_Chase_Blocks:                                             ; Offset_0x0C4074:
                incbin  'data\scz\blocks.kos'  
                dc.w    $0000, $0000, $0000, $0000            ; Filler  
                dc.b    $00                                   ; Filler 
Sky_Chase_Tiles:                                              ; Offset_0x0C5004:
                incbin  'data\scz\tiles.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000 ; Filler
                dc.b    $00                                   ; Filler 
;-------------------------------------------------------------------------------              
Wing_Fortress_Tiles:                                          ; Offset_0x2C7EC4: 
                incbin  'data\wfz\tiles.kos'
;-------------------------------------------------------------------------------                 
Sky_Chase_Chunks:                                             ; Offset_0x0C85E4: 
                incbin  'data\scz\chunks.kos' 
                dc.w    $0000, $0000, $0000, $0000            ; Filler                              
;-------------------------------------------------------------------------------                 
                
Offset_0x0CA904:
                incbin  'data\ss\0x0CA904.dat'     
Offset_0x0CADA8:    
                incbin  'data\ss\0x0CADA8.dat'         
Offset_0x0CB376: 
                incbin  'data\ss\0x0CB376.dat'                
Offset_0x0CB92E:
                incbin  'data\ss\0x0CB92E.dat'  
Offset_0x0CBF92:
                incbin  'data\ss\0x0CBF92.dat'  
Offset_0x0CC5BE:  
                incbin  'data\ss\0x0CC5BE.dat'  
Offset_0x0CCC7A: 
                incbin  'data\ss\0x0CCC7A.dat'  
Offset_0x0CD282:
                incbin  'data\ss\0x0CD282.dat'  
Offset_0x0CD7C0: 
                incbin  'data\ss\0x0CD7C0.dat'  
Offset_0x0CDD44: 
                incbin  'data\ss\0x0CDD44.dat'  
Offset_0x0CE2BE: 
                incbin  'data\ss\0x0CE2BE.dat' 
Offset_0x0CE7DE:
                incbin  'data\ss\0x0CE7DE.dat' 
Offset_0x0CEC52:  
                incbin  'data\ss\0x0CEC52.dat' 
Offset_0x0CF0BC:  
                incbin  'data\ss\0x0CF0BC.dat' 
Offset_0x0CF580:  
                incbin  'data\ss\0x0CF580.dat' 
Offset_0x0CFA00:
                incbin  'data\ss\0x0CFA00.dat' 
Offset_0x0CFE4A:    
                incbin  'data\ss\0x0CFE4A.dat'
Offset_0x0D028C:  
                incbin  'data\ss\0x0D028C.dat'
Offset_0x0D090A: 
                incbin  'data\ss\0x0D090A.dat'
Offset_0x0D0EA6:
                incbin  'data\ss\0x0D0EA6.dat'
Offset_0x0D1400:  
                incbin  'data\ss\0x0D1400.dat'
Offset_0x0D19FC:  
                incbin  'data\ss\0x0D19FC.dat'
Offset_0x0D1EAC:  
                incbin  'data\ss\0x0D1EAC.dat'
Offset_0x0D23AE:
                incbin  'data\ss\0x0D23AE.dat'
Offset_0x0D27C6:  
                incbin  'data\ss\0x0D27C6.dat'
Offset_0x0D2C14:  
                incbin  'data\ss\0x0D2C14.dat'
Offset_0x0D3092:  
                incbin  'data\ss\0x0D3092.dat'
Offset_0x0D3522:
                incbin  'data\ss\0x0D3522.dat'
Offset_0x0D39EC:  
                incbin  'data\ss\0x0D39EC.dat'
Offset_0x0D3F78:  
                incbin  'data\ss\0x0D3F78.dat'
Offset_0x0D4660:  
                incbin  'data\ss\0x0D4660.dat'
Offset_0x0D4DA6:
                incbin  'data\ss\0x0D4DA6.dat'
Offset_0x0D53FC: 
                incbin  'data\ss\0x0D53FC.dat'
Offset_0x0D5958:
                incbin  'data\ss\0x0D5958.dat'
Offset_0x0D5F02:
                incbin  'data\ss\0x0D5F02.dat'
Offset_0x0D6596:
                incbin  'data\ss\0x0D6596.dat'
Offset_0x0D6BAA:
                incbin  'data\ss\0x0D6BAA.dat'
Offset_0x0D702E:
                incbin  'data\ss\0x0D702E.dat'
Offset_0x0D749C:
                incbin  'data\ss\0x0D749C.dat'
Offset_0x0D7912:
                incbin  'data\ss\0x0D7912.dat'
Offset_0x0D7DAA:
                incbin  'data\ss\0x0D7DAA.dat'
Offset_0x0D8250:
                incbin  'data\ss\0x0D8250.dat'
Offset_0x0D85F8:
                incbin  'data\ss\0x0D85F8.dat'
Offset_0x0D89EC:
                incbin  'data\ss\0x0D89EC.dat'
Offset_0x0D8E24:
                incbin  'data\ss\0x0D8E24.dat'
Offset_0x0D92B6:
                incbin  'data\ss\0x0D92B6.dat'
Offset_0x0D9778:
                incbin  'data\ss\0x0D9778.dat'
Offset_0x0D9B80:
                incbin  'data\ss\0x0D9B80.dat'
Offset_0x0DA016: 
                incbin  'data\ss\0x0DA016.dat'
Offset_0x0DA4CE:
                incbin  'data\ss\0x0DA4CE.dat'
Offset_0x0DAB20:
                incbin  'data\ss\0x0DAB20.dat'
Offset_0x0DB086:
                incbin  'data\ss\0x0DB086.dat'
Offset_0x0DB5AE:
                incbin  'data\ss\0x0DB5AE.dat'
Offset_0x0DBB62:
                incbin  'data\ss\0x0DBB62.dat'
Offset_0x0DC154:
                incbin  'data\ss\0x0DC154.dat'
Offset_0x0DC5E8:
                incbin  'data\ss\0x0DC5E8.dat'
Offset_0x0DCA38:
                incbin  'data\ss\0x0DCA38.dat'                                                                                          
SS_Background_8x8_Tiles:                                      ; Offset_0x0DCD68:
                incbin  'data\ss\backgnd8.nem'  
Offset_0x0DD1DE:
                incbin  'data\ss\0x0DD1DE.dat'
Offset_0x0DD30C:
                incbin  'data\ss\0x0DD30C.dat'                                              
SS_HUD_Font:                                                  ; Offset_0x0DD48A:     
                incbin  'data\ss\hud_font.nem'
SS_START:                                                     ; Offset_0x0DD790:
                incbin  'data\ss\start.nem'    
SS_Background_Stars:                                          ; Offset_0x0DD8CE:
                incbin  'data\ss\bg_stars.nem'                 
SS_PAYMW_vs:                                                  ; Offset_0x0DD9C8:
                incbin  'data\ss\paymw_vs.nem'                              
SS_Rings:                                                     ; Offset_0x0DDA7E:    
                incbin  'data\ss\rings.nem'                   
SS_Player_Shadow:                                             ; Offset_0x0DDFA4:
                incbin  'data\ss\p_shadow.nem'     
SS_Player_Diagonal_Shadow:                                    ; Offset_0x0DE05A:
                incbin  'data\ss\d_shadow.nem'  
SS_Player_Vertical_Shadow:                                    ; Offset_0x0DE120:
                incbin  'data\ss\v_shadow.nem' 
SS_Bomb_Explosion:                                            ; Offset_0x0DE188:
                incbin  'data\ss\bomb_exp.nem'   
SS_Bombs:                                                     ; Offset_0x0DE4BC:
                incbin  'data\ss\bombs.nem'                                 
SS_Emerald:                                                   ; Offset_0x0DE8AC:
                incbin  'data\ss\emerald.nem'
SS_Wings_Hand:                                                ; Offset_0x0DEAF4:
                incbin  'data\ss\winghand.nem'   
SS_Sonic_Miles:                                               ; Offset_0x0DEEAE:
                incbin  'data\ss\sonicmls.nem'          
SS_Tails_Text:                                                ; Offset_0x0E247E:
                incbin  'data\ss\tailstxt.nem'                 
Offset_0x0E24FE:
                incbin  'data\ss\0x0E24FE.kos'
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Filler                  
Offset_0x0E34EE:
                incbin  'data\ss\0x0E34EE.nem'                   
Offset_0x0E35F2:
                incbin  'data\ss\0x0E35F2.kos'
                dc.b    $00                                             ; Filler
;-------------------------------------------------------------------------------                   
                cnop    $00000000, $000E4300, $00000000                 
;===============================================================================
; Array do posicionamento dos anéis das fases     
; [ Início ]
;===============================================================================                  
Rings_Layout: ; Offset_0x0E4300:
                dc.w    EHz_1_Rings_Layout-Rings_Layout        ; Offset_0x0E4344
                dc.w    EHz_2_Rings_Layout-Rings_Layout        ; Offset_0x0E456A
                dc.w    Null_1_Rings_Layout-Rings_Layout       ; Offset_0x0E47AC
                dc.w    Null_2_Rings_Layout-Rings_Layout       ; Offset_0x0E47AE
                dc.w    Wz_1_Rings_Layout-Rings_Layout         ; Offset_0x0E47B0
                dc.w    Wz_2_Rings_Layout-Rings_Layout         ; Offset_0x0E47B2
                dc.w    Null_3_Rings_Layout-Rings_Layout       ; Offset_0x0E47B4
                dc.w    Null_4_Rings_Layout-Rings_Layout       ; Offset_0x0E47B6
                dc.w    Mz_1_Rings_Layout-Rings_Layout         ; Offset_0x0E47B8
                dc.w    Mz_2_Rings_Layout-Rings_Layout         ; Offset_0x0E4A2A
                dc.w    Mz_3_Rings_Layout-Rings_Layout         ; Offset_0x0E4C48
                dc.w    Mz_4_Rings_Layout-Rings_Layout         ; Offset_0x0E4D72
                dc.w    WFz_1_Rings_Layout-Rings_Layout        ; Offset_0x0E6154
                dc.w    WFz_2_Rings_Layout-Rings_Layout        ; Offset_0x0E6292
                dc.w    HTz_1_Rings_Layout-Rings_Layout        ; Offset_0x0E4D74
                dc.w    HTz_2_Rings_Layout-Rings_Layout        ; Offset_0x0E4EAA
                dc.w    HPz_1_Rings_Layout-Rings_Layout        ; Offset_0x0E50E8
                dc.w    HPz_2_Rings_Layout-Rings_Layout        ; Offset_0x0E525A
                dc.w    Null_5_Rings_Layout-Rings_Layout       ; Offset_0x0E525C
                dc.w    Null_6_Rings_Layout-Rings_Layout       ; Offset_0x0E525E
                dc.w    OOz_1_Rings_Layout-Rings_Layout        ; Offset_0x0E5260
                dc.w    OOz_2_Rings_Layout-Rings_Layout        ; Offset_0x0E5422
                dc.w    MCz_1_Rings_Layout-Rings_Layout        ; Offset_0x0E5598
                dc.w    MCz_2_Rings_Layout-Rings_Layout        ; Offset_0x0E570E
                dc.w    CNz_1_Rings_Layout-Rings_Layout        ; Offset_0x0E5944
                dc.w    CNz_2_Rings_Layout-Rings_Layout        ; Offset_0x0E5B7E
                dc.w    CPz_1_Rings_Layout-Rings_Layout        ; Offset_0x0E5E2C
                dc.w    CPz_2_Rings_Layout-Rings_Layout        ; Offset_0x0E5F9E
                dc.w    DEz_1_Rings_Layout-Rings_Layout        ; Offset_0x0E6150
                dc.w    DEz_2_Rings_Layout-Rings_Layout        ; Offset_0x0E6152
                dc.w    ARz_1_Rings_Layout-Rings_Layout        ; Offset_0x0E6294
                dc.w    ARz_2_Rings_Layout-Rings_Layout        ; Offset_0x0E642E
                dc.w    SCz_1_Rings_Layout-Rings_Layout        ; Offset_0x0E6684
                dc.w    SCz_2_Rings_Layout-Rings_Layout        ; Offset_0x0E66D6
;-------------------------------------------------------------------------------                
EHz_1_Rings_Layout:                                           ; Offset_0x0E4344:
                incbin  'data\ehz\rng_act1.dat' 
EHz_2_Rings_Layout:                                           ; Offset_0x0E456A:
                incbin  'data\ehz\rng_act2.dat' 
;-------------------------------------------------------------------------------                 
Null_1_Rings_Layout:                                          ; Offset_0x0E47AC:
                dc.w    $FFFF
Null_2_Rings_Layout:                                          ; Offset_0x0E47AE:
                dc.w    $FFFF
;-------------------------------------------------------------------------------                  
Wz_1_Rings_Layout:                                            ; Offset_0x0E47B0:
                dc.w    $FFFF
Wz_2_Rings_Layout:                                            ; Offset_0x0E47B2:
                dc.w    $FFFF
;-------------------------------------------------------------------------------                    
Null_3_Rings_Layout:                                          ; Offset_0x0E47B4:
                dc.w    $FFFF
Null_4_Rings_Layout:                                          ; Offset_0x0E47B6:
                dc.w    $FFFF
;-------------------------------------------------------------------------------                 
Mz_1_Rings_Layout:                                            ; Offset_0x0E47B8:
                incbin  'data\mz\rng_act1.dat' 
Mz_2_Rings_Layout:                                            ; Offset_0x0E4A2A:
                incbin  'data\mz\rng_act2.dat' 
Mz_3_Rings_Layout:                                            ; Offset_0x0E4C48:
                incbin  'data\mz\rng_act3.dat' 
Mz_4_Rings_Layout:                                            ; Offset_0x0E4D72:
                dc.w    $FFFF
;-------------------------------------------------------------------------------  
HTz_1_Rings_Layout:                                           ; Offset_0x0E4D74:
                incbin  'data\htz\rng_act1.dat' 
HTz_2_Rings_Layout:                                           ; Offset_0x0E4EAA:
                incbin  'data\htz\rng_act2.dat' 
;-------------------------------------------------------------------------------                 
HPz_1_Rings_Layout:                                           ; Offset_0x0E50E8:
                incbin  'data\hpz\rng_act.dat' 
HPz_2_Rings_Layout:                                           ; Offset_0x0E525A:
                dc.w    $FFFF
;-------------------------------------------------------------------------------                  
Null_5_Rings_Layout:                                          ; Offset_0x0E525C:
                dc.w    $FFFF
Null_6_Rings_Layout:                                          ; Offset_0x0E525E:  
                dc.w    $FFFF
;-------------------------------------------------------------------------------     
OOz_1_Rings_Layout:                                           ; Offset_0x0E5260:
                incbin  'data\ooz\rng_act1.dat' 
OOz_2_Rings_Layout:                                           ; Offset_0x0E5422:
                incbin  'data\ooz\rng_act2.dat' 
;-------------------------------------------------------------------------------                  
MCz_1_Rings_Layout:                                           ; Offset_0x0E5598:
                incbin  'data\mcz\rng_act1.dat' 
MCz_2_Rings_Layout:                                           ; Offset_0x0E570E:
                incbin  'data\mcz\rng_act2.dat' 
;-------------------------------------------------------------------------------                 
CNz_1_Rings_Layout:                                           ; Offset_0x0E5944:
                incbin  'data\cnz\rng_act1.dat' 
CNz_2_Rings_Layout:                                           ; Offset_0x0E5B7E:
                incbin  'data\cnz\rng_act2.dat' 
;-------------------------------------------------------------------------------                  
CPz_1_Rings_Layout:                                           ; Offset_0x0E5E2C:
                incbin  'data\cpz\rng_act1.dat' 
CPz_2_Rings_Layout:                                           ; Offset_0x0E5F9E:
                incbin  'data\cpz\rng_act2.dat' 
;-------------------------------------------------------------------------------                 
DEz_1_Rings_Layout:                                           ; Offset_0x0E6150:
                dc.w    $FFFF
DEz_2_Rings_Layout:                                           ; Offset_0x0E6152:
                dc.w    $FFFF
;-------------------------------------------------------------------------------                  
WFz_1_Rings_Layout:                                           ; Offset_0x0E6154:
                incbin  'data\wfz\rng_act.dat'
WFz_2_Rings_Layout:                                           ; Offset_0x0E6292:   
                dc.w    $FFFF
;-------------------------------------------------------------------------------  
ARz_1_Rings_Layout:                                           ; Offset_0x0E6294:
                incbin  'data\arz\rng_act1.dat'
ARz_2_Rings_Layout:                                           ; Offset_0x0E642E:
                incbin  'data\arz\rng_act2.dat'
;-------------------------------------------------------------------------------                 
SCz_1_Rings_Layout:                                           ; Offset_0x0E6684:
                incbin  'data\scz\rng_act.dat'
SCz_2_Rings_Layout:                                           ; Offset_0x0E66D6:
                dc.w    $FFFF
;===============================================================================
; Array do posicionamento dos anéis das fases     
; [ Término ]
;===============================================================================                  
                cnop    $00000000, $000E6800, $00000000 
;===============================================================================
; Array do posicionamento dos objetos das fases     
; [ Início ]
;===============================================================================  
Objects_Layout: ; Offset_0x0E6800:                  
                dc.w    EHz_1_Objects_Layout-Objects_Layout    ; Offset_0x0E684A
                dc.w    EHz_2_Objects_Layout-Objects_Layout    ; Offset_0x0E6B7A
                dc.w    Null_Objects_Layout-Objects_Layout     ; Offset_0x0EBD52
                dc.w    Null_Objects_Layout-Objects_Layout     ; Offset_0x0EBD52
                dc.w    Null_Objects_Layout-Objects_Layout     ; Offset_0x0EBD52
                dc.w    Null_Objects_Layout-Objects_Layout     ; Offset_0x0EBD52
                dc.w    Null_Objects_Layout-Objects_Layout     ; Offset_0x0EBD52
                dc.w    Null_Objects_Layout-Objects_Layout     ; Offset_0x0EBD52
                dc.w    Mz_1_Objects_Layout-Objects_Layout     ; Offset_0x0E6F34
                dc.w    Mz_2_Objects_Layout-Objects_Layout     ; Offset_0x0E73C0
                dc.w    Mz_3_Objects_Layout-Objects_Layout     ; Offset_0x0E78EE
                dc.w    Mz_3_Objects_Layout-Objects_Layout     ; Offset_0x0E78EE
                dc.w    WFz_1_Objects_Layout-Objects_Layout    ; Offset_0x0E7F48
                dc.w    WFz_2_Objects_Layout-Objects_Layout    ; Offset_0x0E82FC
                dc.w    HTz_1_Objects_Layout-Objects_Layout    ; Offset_0x0E8302
                dc.w    HTz_2_Objects_Layout-Objects_Layout    ; Offset_0x0E8668
                dc.w    HPz_1_Objects_Layout-Objects_Layout    ; Offset_0x0E8C80
                dc.w    HPz_2_Objects_Layout-Objects_Layout    ; Offset_0x0E8D94
                dc.w    Null_Objects_Layout-Objects_Layout     ; Offset_0x0EBD52
                dc.w    Null_Objects_Layout-Objects_Layout     ; Offset_0x0EBD52
                dc.w    OOz_1_Objects_Layout-Objects_Layout    ; Offset_0x0E8DA0
                dc.w    OOz_2_Objects_Layout-Objects_Layout    ; Offset_0x0E9214
                dc.w    MCz_1_Objects_Layout-Objects_Layout    ; Offset_0x0E968E
                dc.w    MCz_2_Objects_Layout-Objects_Layout    ; Offset_0x0E99A0
                dc.w    CNz_1_Objects_Layout-Objects_Layout    ; Offset_0x0E9D1E
                dc.w    CNz_2_Objects_Layout-Objects_Layout    ; Offset_0x0EA3D8
                dc.w    CPz_1_Objects_Layout-Objects_Layout    ; Offset_0x0EA9D2
                dc.w    CPz_2_Objects_Layout-Objects_Layout    ; Offset_0x0EAD6E
                dc.w    DEz_1_Objects_Layout-Objects_Layout    ; Offset_0x0EB230
                dc.w    DEz_2_Objects_Layout-Objects_Layout    ; Offset_0x0EB254
                dc.w    ARz_1_Objects_Layout-Objects_Layout    ; Offset_0x0EB25A
                dc.w    ARz_2_Objects_Layout-Objects_Layout    ; Offset_0x0EB6A4
                dc.w    SCz_1_Objects_Layout-Objects_Layout    ; Offset_0x0EBBDE
                dc.w    SCz_2_Objects_Layout-Objects_Layout    ; Offset_0x0EBD4C
;-------------------------------------------------------------------------------                 
                dc.w    $FFFF, $0000, $0000 ; O jogo travará se não existir estes bytes   
;-------------------------------------------------------------------------------   
EHz_1_Objects_Layout: ; Offset_0x0E684A:
                incbin  'data\ehz\obj_act1.dat'
EHz_2_Objects_Layout: ; Offset_0x0E6B7A:
                incbin  'data\ehz\obj_act2.dat'
;-------------------------------------------------------------------------------  
Mz_1_Objects_Layout: ; Offset_0x0E6F34:
                incbin  'data\mz\obj_act1.dat'
Mz_2_Objects_Layout: ; Offset_0x0E73C0:
                incbin  'data\mz\obj_act2.dat'
Mz_3_Objects_Layout: ; Offset_0x0E78EE:
                incbin  'data\mz\obj_act3.dat'
;-------------------------------------------------------------------------------  
WFz_1_Objects_Layout: ; Offset_0x0E7F48:
                incbin  'data\wfz\obj_act.dat'
WFz_2_Objects_Layout: ; Offset_0x0E82FC:
                dc.w    $FFFF, $0000, $0000
;-------------------------------------------------------------------------------  
HTz_1_Objects_Layout: ; Offset_0x0E8302:
                incbin  'data\htz\obj_act1.dat'
HTz_2_Objects_Layout: ; Offset_0x0E8668:
                incbin  'data\htz\obj_act2.dat'
;------------------------------------------------------------------------------- 
HPz_1_Objects_Layout: ; Offset_0x0E8C80:
                incbin  'data\hpz\obj_act.dat'
HPz_2_Objects_Layout: ; Offset_0x0E8D94:  
                dc.w    $FFFF, $0000, $0000                       
;------------------------------------------------------------------------------- 
                dc.w    $FFFF, $0000, $0000
;------------------------------------------------------------------------------- 
OOz_1_Objects_Layout: ; Offset_0x0E8DA0:
                incbin  'data\ooz\obj_act1.dat'
OOz_2_Objects_Layout: ; Offset_0x0E9214:
                incbin  'data\ooz\obj_act2.dat'
;------------------------------------------------------------------------------- 
MCz_1_Objects_Layout: ; Offset_0x0E968E:
                incbin  'data\mcz\obj_act1.dat'
MCz_2_Objects_Layout: ; Offset_0x0E99A0:
                incbin  'data\mcz\obj_act2.dat'
;------------------------------------------------------------------------------- 
CNz_1_Objects_Layout: ; Offset_0x0E9D1E:
                incbin  'data\cnz\obj_act1.dat'
CNz_2_Objects_Layout: ; Offset_0x0EA3D8:
                incbin  'data\cnz\obj_act2.dat'
;------------------------------------------------------------------------------- 
CPz_1_Objects_Layout: ; Offset_0x0EA9D2:
                incbin  'data\cpz\obj_act1.dat'
CPz_2_Objects_Layout: ; Offset_0x0EAD6E:
                incbin  'data\cpz\obj_act2.dat'
;------------------------------------------------------------------------------- 
DEz_1_Objects_Layout: ; Offset_0x0EB230:
                incbin  'data\dez\obj_act.dat'
DEz_2_Objects_Layout: ; Offset_0x0EB254:
                dc.w    $FFFF, $0000, $0000
;------------------------------------------------------------------------------- 
ARz_1_Objects_Layout: ; Offset_0x0EB25A:
                incbin  'data\arz\obj_act1.dat'
ARz_2_Objects_Layout: ; Offset_0x0EB6A4:
                incbin  'data\arz\obj_act2.dat'
;------------------------------------------------------------------------------- 
SCz_1_Objects_Layout: ; Offset_0x0EBBDE:
                incbin  'data\scz\obj_act.dat'
SCz_2_Objects_Layout: ; Offset_0x0EBD4C:
                dc.w    $FFFF, $0000, $0000
;-------------------------------------------------------------------------------   
Null_Objects_Layout: ; Offset_0x0EBD52:
                dc.w    $FFFF, $0000, $0000     
                dc.w    $FFFF, $0000, $0000  
                dc.w    $FFFF, $0000, $0000   
                dc.w    $FFFF, $0000, $0000            
;===============================================================================
; Array do posicionamento dos objetos das fases     
; [ Término ]
;===============================================================================                                       
                cnop    $00000000, $000EC000, $00000000 
;===============================================================================
; Driver de Som
; [ Início ]
;===============================================================================                
Sound_Driver: ; Offset_0x0EC000:
                move    SR, -(A7)
                movem.l D0-D7/A0-A6, -(A7)
                move    #$2700, SR
                lea     ($00A11100), A3
                lea     ($00A11200), A2
                moveq   #$00, D2
                move.w  #$0100, D1
                move.w  D1, (A3)
                move.w  D1, (A2)
Offset_0x0EC020:
                btst    D2, (A3)
                bne.s   Offset_0x0EC020
                jsr     Offset_0x0EC04A(PC)
                btst    #$00, ($00C00005)
                sne     ($00A00007)
                move.w  D2, (A2)
                move.w  D2, (A3)
                moveq   #$FFFFFFE6, D0
Offset_0x0EC03C:
                dbra    D0, Offset_0x0EC03C
                move.w  D1, (A2)
                movem.l (A7)+, D0-D7/A0-A6
                move    (A7)+, SR
                rts
Offset_0x0EC04A:                
                lea     Z80_Driver(PC), A6                     ; Offset_0x0EC0E8
                move.w  #$0F64, D7
                moveq   #$00, D6
                lea     ($00A00000), A5
                moveq   #$00, D5
                lea     ($00A00000), A4
Offset_0x0EC062:
                lsr.w   #$01, D6
                btst    #$08, D6
                bne.s   Offset_0x0EC074
                jsr     Offset_0x0EC0DE(PC)
                move.b  D0, D6
                ori.w   #$FF00, D6
Offset_0x0EC074:
                btst    #$00, D6
                beq.s   Offset_0x0EC086
                jsr     Offset_0x0EC0DE(PC)
                move.b  D0, (A5)+
                addq.w  #$01, D5
                bra     Offset_0x0EC062
Offset_0x0EC086:
                jsr     Offset_0x0EC0DE(PC)
                moveq   #$00, D4
                move.b  D0, D4
                jsr     Offset_0x0EC0DE(PC)
                move.b  D0, D3
                andi.w  #$000F, D3
                addq.w  #$02, D3
                andi.w  #$00F0, D0
                lsl.w   #$04, D0
                add.w   D0, D4
                addi.w  #$0012, D4
                andi.w  #$0FFF, D4
                move.w  D5, D0
                andi.w  #$F000, D0
                add.w   D0, D4
                cmp.w   D4, D5
                bcc.s   Offset_0x0EC0CC
                subi.w  #$1000, D4
                bcc.s   Offset_0x0EC0CC
                add.w   D3, D5
                addq.w  #$01, D5
Offset_0x0EC0C0:
                move.b  #$00, (A5)+
                dbra    D3, Offset_0x0EC0C0
                bra     Offset_0x0EC062   
Offset_0x0EC0CC:
                add.w   D3, D5
                addq.w  #$01, D5
Offset_0x0EC0D0:
                move.b  $00(A4, D4), (A5)+
                addq.w  #$01, D4
                dbra    D3, Offset_0x0EC0D0
                bra     Offset_0x0EC062   
Offset_0x0EC0DE:                
                move.b  (A6)+, D0
                subq.w  #$01, D7
                bne.s   Offset_0x0EC0E6
                addq.w  #$04, A7
Offset_0x0EC0E6:
                rts                              
Z80_Driver: ; Offset_0x0EC0E8
                incbin  'data\sounds\z80.sax'
                
                cnop    $00000000, $000ED100, $00000000      
DAC_Sample_00: ; Offset_0x0ED100:  
                incbin  'data\sounds\DAC_00.bin'
DAC_Sample_01: ; Offset_0x0ED394: 
                incbin  'data\sounds\DAC_01.bin' 
DAC_Sample_02: ; Offset_0x0EDAB7: 
                incbin  'data\sounds\DAC_02.bin'   
DAC_Sample_03: ; Offset_0x0EE66C:  
                incbin  'data\sounds\DAC_03.bin'                           
DAC_Sample_04: ; Offset_0x0EED7A:  
                incbin  'data\sounds\DAC_04.bin' 
DAC_Sample_05: ; Offset_0x0EF2F0:  
                incbin  'data\sounds\DAC_05.bin'  
DAC_Sample_06: ; Offset_0x0EFA3C:  
                incbin  'data\sounds\DAC_06.bin'      
                                                                        
                
Music_81_Ptr equ  (Music_81&$FFFF)|$8000  
Music_82_Ptr equ  (Music_82&$FFFF)|$8000  
Music_83_Ptr equ  (Music_83&$FFFF)|$8000  
Music_84_Ptr equ  (Music_84&$FFFF)|$8000  
Music_85_Ptr equ  (Music_85&$FFFF)|$8000  
Music_86_Ptr equ  (Music_86&$FFFF)|$8000  
Music_87_Ptr equ  (Music_87&$FFFF)|$8000  
Music_88_Ptr equ  (Music_88&$FFFF)|$8000  
Music_89_Ptr equ  (Music_89&$FFFF)|$8000  
Music_8A_Ptr equ  (Music_8A&$FFFF)|$8000  
Music_8B_Ptr equ  (Music_8B&$FFFF)|$8000  
Music_8C_Ptr equ  (Music_8C&$FFFF)|$8000  
Music_8D_Ptr equ  (Music_8D&$FFFF)|$8000  
Music_8E_Ptr equ  (Music_8E&$FFFF)|$8000  
Music_8F_Ptr equ  (Music_8F&$FFFF)|$8000  
Music_90_Ptr equ  (Music_90&$FFFF)|$8000  
Music_91_Ptr equ  (Music_91&$FFFF)|$8000  
Music_92_Ptr equ  (Music_92&$FFFF)|$8000  
Music_93_Ptr equ  (Music_93&$FFFF)|$8000  
Music_94_Ptr equ  (Music_94&$FFFF)|$8000  
Music_95_Ptr equ  (Music_95&$FFFF)|$8000  
Music_96_Ptr equ  (Music_96&$FFFF)|$8000  
Music_97_Ptr equ  (Music_97&$FFFF)|$8000  
Music_98_Ptr equ  (Music_98&$FFFF)|$8000  
Music_99_Ptr equ  (Music_99&$FFFF)|$8000  
Music_9A_Ptr equ  (Music_9A&$FFFF)|$8000  
Music_9B_Ptr equ  (Music_9B&$FFFF)|$8000  
Music_9C_Ptr equ  (Music_9C&$FFFF)|$8000  
Music_9D_Ptr equ  (Music_9D&$FFFF)|$8000  
Music_9E_Ptr equ  (Music_9E&$FFFF)|$8000  
Music_9F_Ptr equ  (Music_9F&$FFFF)|$8000   
               
;-------------------------------------------------------------------------------                   
                cnop    $00000000, $000F0000, $00000000 
Music_9C_Idx: ; Offset_0x0F8000:                        
                dc.w    (((Music_9C_Ptr>>$08)|(Music_9C_Ptr<<$08))&$FFFF)  
Music_9C:                                  
                incbin  'data\sounds\cont_9C.sax'                 
;------------------------------------------------------------------------------- 
                cnop    $00000000, $000F0160, $00000000                      
HTz_FireBall:                                                 ; Offset_0x0F0160:  
                incbin  'data\htz\fireball.nem'                
EHz_Waterfall:                                                ; Offset_0x0F02D6:
                incbin  'data\ehz\watrfall.nem'
Htz_Lava_Bubble:                                              ; Offset_0x0F03DC:
                incbin  'data\htz\lvbubble.nem'                
EHz_Bridge:                                                   ; Offset_0x0F052A:
                incbin  'data\ehz\bridge.nem'  
Htz_Teleferic:                                                ; Offset_0x0F0602:
                incbin  'data\htz\telefrcs.nem'  
Htz_Automatic_Door:                                           ; Offset_0x0F08F6:
                incbin  'data\htz\autodoor.nem'                                 
Htz_See_saw:                                                  ; Offset_0x0F096E:  
                incbin  'data\htz\see-saw.nem' 
HTz_Unknow_Fireball:                                          ; Offset_0x0F0B06:
                incbin  'data\htz\unk_fball.nem'                                  
Htz_Rock:                                                     ; Offset_0x0F0C14:
                incbin  'data\htz\rock.nem'    
Htz_See_saw_badnick:                                          ; Offset_0x0F0D4A:   
                incbin  'data\htz\see-sawb.nem'                              
Mz_Rotating_Gear:                                             ; Offset_0x0F0DB6:
                incbin  'data\mz\gear.nem'   
Mz_Gear_Holes:                                                ; Offset_0x0F120E:
                incbin  'data\mz\gearhole.nem'  
Mz_Harpon_Platform:                                           ; Offset_0x0F12B6:
                incbin  'data\mz\harp_ptf.nem'                  
Mz_Steam:                                                     ; Offset_0x0F1384:
                incbin  'data\mz\steam.nem'  
Mz_Harpon:                                                    ; Offset_0x0F148E:
                incbin  'data\mz\harpoon.nem' 
Mz_Screw_Nut:                                                 ; Offset_0x0F1550:
                incbin  'data\mz\screwnut.nem'   
Mz_Lava_Bubble:                                               ; Offset_0x0F15C6:
                incbin  'data\mz\lvbubble.nem'                                                               
Mz_Elevator:                                                  ; Offset_0x0F167C:
                incbin  'data\mz\elevator.nem'    
Mz_Miscellaneous:                                             ; Offset_0x0F16EC:
                incbin  'data\mz\miscelns.nem'   
Mz_Mini_Gear:                                                 ; Offset_0x0F178E:
                incbin  'data\mz\minigear.nem'  
Mz_Teleport_Flash:                                            ; Offset_0x0F1870:
                incbin  'data\mz\tlpflash.nem'     
MCz_Box:                                                      ; Offset_0x0F187C:  
                incbin  'data\mcz\box.nem'   
MCz_Collapsing_Platform:                                      ; Offset_0x0F1ABA:
                incbin  'data\mcz\clp_ptfm.nem'      
MCz_Vines:                                                    ; Offset_0x0F1C64:
                incbin  'data\mcz\vines.nem' 
MCz_Vines_1:                                                  ; Offset_0x0F1D5C:
                incbin  'data\mcz\vines_1.nem' 
MCz_Bridge:                                                   ; Offset_0x0F1E06:     
                incbin  'data\mcz\bridge.nem'                                                                                                                                                                
;-------------------------------------------------------------------------------                             
                cnop    $00000000, $000F1E8C, $00000000 
Sega_Snd: ; Offset_0x0F1E8C:                
                incbin  'data\sounds\sega.snd'                                  
;-------------------------------------------------------------------------------                              
                cnop    $00000000, $000F8000, $00000000       
Music_81_To_9F: ; Offset_0x0F8000:                
                dc.w    (((Music_88_Ptr>>$08)|(Music_88_Ptr<<$08))&$FFFF) 
                dc.w    (((Music_82_Ptr>>$08)|(Music_82_Ptr<<$08))&$FFFF)
                dc.w    (((Music_85_Ptr>>$08)|(Music_85_Ptr<<$08))&$FFFF)
                dc.w    (((Music_89_Ptr>>$08)|(Music_89_Ptr<<$08))&$FFFF)
                dc.w    (((Music_8B_Ptr>>$08)|(Music_8B_Ptr<<$08))&$FFFF)
                dc.w    (((Music_83_Ptr>>$08)|(Music_83_Ptr<<$08))&$FFFF)
                dc.w    (((Music_87_Ptr>>$08)|(Music_87_Ptr<<$08))&$FFFF) 
                dc.w    (((Music_8A_Ptr>>$08)|(Music_8A_Ptr<<$08))&$FFFF) 
                dc.w    (((Music_92_Ptr>>$08)|(Music_92_Ptr<<$08))&$FFFF) 
                dc.w    (((Music_91_Ptr>>$08)|(Music_91_Ptr<<$08))&$FFFF)                  
                dc.w    (((Music_95_Ptr>>$08)|(Music_95_Ptr<<$08))&$FFFF)
                dc.w    (((Music_94_Ptr>>$08)|(Music_94_Ptr<<$08))&$FFFF)
                dc.w    (((Music_8E_Ptr>>$08)|(Music_8E_Ptr<<$08))&$FFFF)
                dc.w    (((Music_93_Ptr>>$08)|(Music_93_Ptr<<$08))&$FFFF)
                dc.w    (((Music_8D_Ptr>>$08)|(Music_8D_Ptr<<$08))&$FFFF)
                dc.w    (((Music_84_Ptr>>$08)|(Music_84_Ptr<<$08))&$FFFF)     
                dc.w    (((Music_8F_Ptr>>$08)|(Music_8F_Ptr<<$08))&$FFFF)  
                dc.w    (((Music_8C_Ptr>>$08)|(Music_8C_Ptr<<$08))&$FFFF)  
                dc.w    (((Music_81_Ptr>>$08)|(Music_81_Ptr<<$08))&$FFFF)  
                dc.w    (((Music_96_Ptr>>$08)|(Music_96_Ptr<<$08))&$FFFF)  
                dc.w    (((Music_86_Ptr>>$08)|(Music_86_Ptr<<$08))&$FFFF)                  
                dc.w    (((Music_98_Ptr>>$08)|(Music_98_Ptr<<$08))&$FFFF)  
                dc.w    (((Music_99_Ptr>>$08)|(Music_99_Ptr<<$08))&$FFFF)     
                dc.w    (((Music_9A_Ptr>>$08)|(Music_9A_Ptr<<$08))&$FFFF) 
                dc.w    (((Music_9B_Ptr>>$08)|(Music_9B_Ptr<<$08))&$FFFF)
                dc.w    (((Music_97_Ptr>>$08)|(Music_97_Ptr<<$08))&$FFFF)  
                dc.w    (((Music_9D_Ptr>>$08)|(Music_9D_Ptr<<$08))&$FFFF)                    
                dc.w    (((Music_90_Ptr>>$08)|(Music_90_Ptr<<$08))&$FFFF)   
                dc.w    (((Music_9F_Ptr>>$08)|(Music_9F_Ptr<<$08))&$FFFF)
                dc.w    (((Music_9E_Ptr>>$08)|(Music_9E_Ptr<<$08))&$FFFF)                                 
;-------------------------------------------------------------------------------                                              
Music_90: ; Hidden Palace                                    ; Offset_0x00F803C: 
                incbin  'data\sounds\hpz_90.sax' 
Music_9F: ; Panic                                            ; Offset_0x00F823B:
                incbin  'data\sounds\pnc_9F.sax'
Music_97: ; Invencibility                                    ; Offset_0x00F8359:  
                incbin  'data\sounds\invcb_97.sax'
Music_88: ; Casino Night Versus Mode                         ; Offset_0x00F84F6: 
                incbin  'data\sounds\cnzvs_88.sax'
Music_82: ; Green Hill                                       ; Offset_0x00F88C4:  
                incbin  'data\sounds\ghz_82.sax'
Music_85: ; Metropolis                                       ; Offset_0x00F8DEE:
                incbin  'data\sounds\mz_85.sax'
Music_89: ; Casino Night                                     ; Offset_0x00F917B:
                incbin  'data\sounds\cnz_89.sax'
Music_8B: ; Dust Hill                                        ; Offset_0x00F9664:
                incbin  'data\sounds\dhz_8B.sax'
Music_83: ; Dust Hill Versus Mode                            ; Offset_0x00F9A3C:
                incbin  'data\sounds\dhzvs_83.sax'
Music_87: ; Neo Green Hill                                   ; Offset_0x00F9D69:
                incbin  'data\sounds\nghz_87.sax'
Music_8A: ; Deat Egg                                         ; Offset_0x00FA36B:
                incbin  'data\sounds\dez_8A.sax'
Music_92: ; Special Stage                                    ; Offset_0x00FA6ED:
                incbin  'data\sounds\ss_92.sax'
Music_91: ; Level Select Menu / Vs Mode Menu                 ; Offset_0x00FAAC4:
                incbin  'data\sounds\menu_91.sax'
Music_95: ; Ending Sequence                                  ; Offset_0x00FAC3C:
                incbin  'data\sounds\endsq_95.sax'
Music_94: ; Death Egg Final Boss                             ; Offset_0x00FB124:
                incbin  'data\sounds\dezfb_94.sax'
Music_8E: ; Chemical Plant                                   ; Offset_0x00FB3F7:
                incbin  'data\sounds\cpz_8E.sax'
Music_93: ; Level Boss                                       ; Offset_0x00FB81E:
                incbin  'data\sounds\boss_93.sax'
Music_8D: ; Sky Chase                                        ; Offset_0x00FBA6F:
                incbin  'data\sounds\scz_8D.sax'
Music_84: ; Oil Ocean                                        ; Offset_0x00FBD8C:
                incbin  'data\sounds\ooz_84.sax'
Music_8F: ; Sky Fortress                                     ; Offset_0x00FC146:
                incbin  'data\sounds\sfz_8F.sax'
Music_8C: ; Green Hill Versus Mode                           ; Offset_0x00FC480:
                incbin  'data\sounds\ghzvs_8C.sax'
Music_81: ; Versus Mode Results                              ; Offset_0x00FC824:
                incbin  'data\sounds\vsres_81.sax'
Music_96: ; Super Sonic                                      ; Offset_0x00FCBBC:
                incbin  'data\sounds\spsnc_96.sax'
Music_86: ; Hill Top                                         ; Offset_0x00FCE74:
                incbin  'data\sounds\htz_86.sax'
Music_99: ; Title Screen                                     ; Offset_0x00FD193:
                incbin  'data\sounds\tscr_99.sax'
Music_9A: ; Results Screen                                   ; Offset_0x00FD35E:
                incbin  'data\sounds\rscr_9A.sax'
Music_98: ; +1 Up  ( Uncompressed )                          ; Offset_0x00FD48D:
                incbin  'data\sounds\1up_98.snd'
Music_9B: ; Time Over / Game Over  ( Uncompressed )          ; Offset_0x00FD57A:
                incbin  'data\sounds\tgovr_9B.snd'
Music_9D: ; Emerald  ( Uncompressed )                        ; Offset_0x00FD6C9:  
                incbin  'data\sounds\emrld_9D.snd'
Music_9E: ; Credits  ( Uncompressed )                        ; Offset_0x00FD797:
                incbin  'data\sounds\credt_9E.snd'
;-------------------------------------------------------------------------------  
Sfx_A0_Ptr   equ     (Sfx_A0&$FFFF)|$8000   
Sfx_A1_Ptr   equ     (Sfx_A1&$FFFF)|$8000    
Sfx_A2_Ptr   equ     (Sfx_A2&$FFFF)|$8000    
Sfx_A3_Ptr   equ     (Sfx_A3&$FFFF)|$8000  
Sfx_A4_Ptr   equ     (Sfx_A4&$FFFF)|$8000 
Sfx_A5_Ptr   equ     (Sfx_A5&$FFFF)|$8000  
Sfx_A6_Ptr   equ     (Sfx_A6&$FFFF)|$8000   
Sfx_A7_Ptr   equ     (Sfx_A7&$FFFF)|$8000    
Sfx_A8_Ptr   equ     (Sfx_A8&$FFFF)|$8000    
Sfx_A9_Ptr   equ     (Sfx_A9&$FFFF)|$8000  
Sfx_AA_Ptr   equ     (Sfx_AA&$FFFF)|$8000 
Sfx_AB_Ptr   equ     (Sfx_AB&$FFFF)|$8000  
Sfx_AC_Ptr   equ     (Sfx_AC&$FFFF)|$8000   
Sfx_AD_Ptr   equ     (Sfx_AD&$FFFF)|$8000    
Sfx_AE_Ptr   equ     (Sfx_AE&$FFFF)|$8000    
Sfx_AF_Ptr   equ     (Sfx_AF&$FFFF)|$8000  
Sfx_B0_Ptr   equ     (Sfx_B0&$FFFF)|$8000 
Sfx_B1_Ptr   equ     (Sfx_B1&$FFFF)|$8000  
Sfx_B2_Ptr   equ     (Sfx_B2&$FFFF)|$8000   
Sfx_B3_Ptr   equ     (Sfx_B3&$FFFF)|$8000    
Sfx_B4_Ptr   equ     (Sfx_B4&$FFFF)|$8000    
Sfx_B5_Ptr   equ     (Sfx_B5&$FFFF)|$8000  
Sfx_B6_Ptr   equ     (Sfx_B6&$FFFF)|$8000 
Sfx_B7_Ptr   equ     (Sfx_B7&$FFFF)|$8000  
Sfx_B8_Ptr   equ     (Sfx_B8&$FFFF)|$8000    
Sfx_B9_Ptr   equ     (Sfx_B9&$FFFF)|$8000  
Sfx_BA_Ptr   equ     (Sfx_BA&$FFFF)|$8000 
Sfx_BB_Ptr   equ     (Sfx_BB&$FFFF)|$8000  
Sfx_BC_Ptr   equ     (Sfx_BC&$FFFF)|$8000   
Sfx_BD_Ptr   equ     (Sfx_BD&$FFFF)|$8000    
Sfx_BE_Ptr   equ     (Sfx_BE&$FFFF)|$8000    
Sfx_BF_Ptr   equ     (Sfx_BF&$FFFF)|$8000 
Sfx_C0_Ptr   equ     (Sfx_C0&$FFFF)|$8000 
Sfx_C1_Ptr   equ     (Sfx_C1&$FFFF)|$8000  
Sfx_C2_Ptr   equ     (Sfx_C2&$FFFF)|$8000   
Sfx_C3_Ptr   equ     (Sfx_C3&$FFFF)|$8000    
Sfx_C4_Ptr   equ     (Sfx_C4&$FFFF)|$8000    
Sfx_C5_Ptr   equ     (Sfx_C5&$FFFF)|$8000  
Sfx_C6_Ptr   equ     (Sfx_C6&$FFFF)|$8000 
Sfx_C7_Ptr   equ     (Sfx_C7&$FFFF)|$8000  
Sfx_C8_Ptr   equ     (Sfx_C8&$FFFF)|$8000    
Sfx_C9_Ptr   equ     (Sfx_C9&$FFFF)|$8000  
Sfx_CA_Ptr   equ     (Sfx_CA&$FFFF)|$8000 
Sfx_CB_Ptr   equ     (Sfx_CB&$FFFF)|$8000  
Sfx_CC_Ptr   equ     (Sfx_CC&$FFFF)|$8000   
Sfx_CD_Ptr   equ     (Sfx_CD&$FFFF)|$8000    
Sfx_CE_Ptr   equ     (Sfx_CE&$FFFF)|$8000    
Sfx_CF_Ptr   equ     (Sfx_CF&$FFFF)|$8000 
Sfx_D0_Ptr   equ     (Sfx_D0&$FFFF)|$8000 
Sfx_D1_Ptr   equ     (Sfx_D1&$FFFF)|$8000  
Sfx_D2_Ptr   equ     (Sfx_D2&$FFFF)|$8000   
Sfx_D3_Ptr   equ     (Sfx_D3&$FFFF)|$8000    
Sfx_D4_Ptr   equ     (Sfx_D4&$FFFF)|$8000    
Sfx_D5_Ptr   equ     (Sfx_D5&$FFFF)|$8000  
Sfx_D6_Ptr   equ     (Sfx_D6&$FFFF)|$8000 
Sfx_D7_Ptr   equ     (Sfx_D7&$FFFF)|$8000  
Sfx_D8_Ptr   equ     (Sfx_D8&$FFFF)|$8000    
Sfx_D9_Ptr   equ     (Sfx_D9&$FFFF)|$8000  
Sfx_DA_Ptr   equ     (Sfx_DA&$FFFF)|$8000 
Sfx_DB_Ptr   equ     (Sfx_DB&$FFFF)|$8000  
Sfx_DC_Ptr   equ     (Sfx_DC&$FFFF)|$8000   
Sfx_DD_Ptr   equ     (Sfx_DD&$FFFF)|$8000    
Sfx_DE_Ptr   equ     (Sfx_DE&$FFFF)|$8000    
Sfx_DF_Ptr   equ     (Sfx_DF&$FFFF)|$8000 
Sfx_E0_Ptr   equ     (Sfx_E0&$FFFF)|$8000 
Sfx_E1_Ptr   equ     (Sfx_E1&$FFFF)|$8000  
Sfx_E2_Ptr   equ     (Sfx_E2&$FFFF)|$8000   
Sfx_E3_Ptr   equ     (Sfx_E3&$FFFF)|$8000    
Sfx_E4_Ptr   equ     (Sfx_E4&$FFFF)|$8000    
Sfx_E5_Ptr   equ     (Sfx_E5&$FFFF)|$8000 
Sfx_E6_Ptr   equ     (Sfx_E6&$FFFF)|$8000 
Sfx_E7_Ptr   equ     (Sfx_E7&$FFFF)|$8000  
Sfx_E8_Ptr   equ     (Sfx_E8&$FFFF)|$8000    
Sfx_E9_Ptr   equ     (Sfx_E9&$FFFF)|$8000  
Sfx_EA_Ptr   equ     (Sfx_EA&$FFFF)|$8000 
Sfx_EB_Ptr   equ     (Sfx_EB&$FFFF)|$8000  
Sfx_EC_Ptr   equ     (Sfx_EC&$FFFF)|$8000   
Sfx_ED_Ptr   equ     (Sfx_ED&$FFFF)|$8000    
Sfx_EE_Ptr   equ     (Sfx_EE&$FFFF)|$8000    
Sfx_EF_Ptr   equ     (Sfx_EF&$FFFF)|$8000 
Sfx_F0_Ptr   equ     (Sfx_F0&$FFFF)|$8000 
;-------------------------------------------------------------------------------          
Sfx_A0_To_F9: ; Offset_0x0FF000:      
                dc.w    (((Sfx_A0_Ptr>>$08)|(Sfx_A0_Ptr<<$08))&$FFFF)      
                dc.w    (((Sfx_A1_Ptr>>$08)|(Sfx_A1_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_A2_Ptr>>$08)|(Sfx_A2_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_A3_Ptr>>$08)|(Sfx_A3_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_A4_Ptr>>$08)|(Sfx_A4_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_A5_Ptr>>$08)|(Sfx_A5_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_A6_Ptr>>$08)|(Sfx_A6_Ptr<<$08))&$FFFF)      
                dc.w    (((Sfx_A7_Ptr>>$08)|(Sfx_A7_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_A8_Ptr>>$08)|(Sfx_A8_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_A9_Ptr>>$08)|(Sfx_A9_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_AA_Ptr>>$08)|(Sfx_AA_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_AB_Ptr>>$08)|(Sfx_AB_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_AC_Ptr>>$08)|(Sfx_AC_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_AD_Ptr>>$08)|(Sfx_AD_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_AE_Ptr>>$08)|(Sfx_AE_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_AF_Ptr>>$08)|(Sfx_AF_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_B0_Ptr>>$08)|(Sfx_B0_Ptr<<$08))&$FFFF)      
                dc.w    (((Sfx_B1_Ptr>>$08)|(Sfx_B1_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_B2_Ptr>>$08)|(Sfx_B2_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_B3_Ptr>>$08)|(Sfx_B3_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_B4_Ptr>>$08)|(Sfx_B4_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_B5_Ptr>>$08)|(Sfx_B5_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_B6_Ptr>>$08)|(Sfx_B6_Ptr<<$08))&$FFFF)      
                dc.w    (((Sfx_B7_Ptr>>$08)|(Sfx_B7_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_B8_Ptr>>$08)|(Sfx_B8_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_B9_Ptr>>$08)|(Sfx_B9_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_BA_Ptr>>$08)|(Sfx_BA_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_BB_Ptr>>$08)|(Sfx_BB_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_BC_Ptr>>$08)|(Sfx_BC_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_BD_Ptr>>$08)|(Sfx_BD_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_BE_Ptr>>$08)|(Sfx_BE_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_BF_Ptr>>$08)|(Sfx_BF_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_C0_Ptr>>$08)|(Sfx_C0_Ptr<<$08))&$FFFF)      
                dc.w    (((Sfx_C1_Ptr>>$08)|(Sfx_C1_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_C2_Ptr>>$08)|(Sfx_C2_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_C3_Ptr>>$08)|(Sfx_C3_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_C4_Ptr>>$08)|(Sfx_C4_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_C5_Ptr>>$08)|(Sfx_C5_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_C6_Ptr>>$08)|(Sfx_C6_Ptr<<$08))&$FFFF)      
                dc.w    (((Sfx_C7_Ptr>>$08)|(Sfx_C7_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_C8_Ptr>>$08)|(Sfx_C8_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_C9_Ptr>>$08)|(Sfx_C9_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_CA_Ptr>>$08)|(Sfx_CA_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_CB_Ptr>>$08)|(Sfx_CB_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_CC_Ptr>>$08)|(Sfx_CC_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_CD_Ptr>>$08)|(Sfx_CD_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_CE_Ptr>>$08)|(Sfx_CE_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_CF_Ptr>>$08)|(Sfx_CF_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_D0_Ptr>>$08)|(Sfx_D0_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_D1_Ptr>>$08)|(Sfx_D1_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_D2_Ptr>>$08)|(Sfx_D2_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_D3_Ptr>>$08)|(Sfx_D3_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_D4_Ptr>>$08)|(Sfx_D4_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_D5_Ptr>>$08)|(Sfx_D5_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_D6_Ptr>>$08)|(Sfx_D6_Ptr<<$08))&$FFFF)      
                dc.w    (((Sfx_D7_Ptr>>$08)|(Sfx_D7_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_D8_Ptr>>$08)|(Sfx_D8_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_D9_Ptr>>$08)|(Sfx_D9_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_DA_Ptr>>$08)|(Sfx_DA_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_DB_Ptr>>$08)|(Sfx_DB_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_DC_Ptr>>$08)|(Sfx_DC_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_DD_Ptr>>$08)|(Sfx_DD_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_DE_Ptr>>$08)|(Sfx_DE_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_DF_Ptr>>$08)|(Sfx_DF_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_E0_Ptr>>$08)|(Sfx_E0_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_E1_Ptr>>$08)|(Sfx_E1_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_E2_Ptr>>$08)|(Sfx_E2_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_E3_Ptr>>$08)|(Sfx_E3_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_E4_Ptr>>$08)|(Sfx_E4_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_E5_Ptr>>$08)|(Sfx_E5_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_E6_Ptr>>$08)|(Sfx_E6_Ptr<<$08))&$FFFF)      
                dc.w    (((Sfx_E7_Ptr>>$08)|(Sfx_E7_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_E8_Ptr>>$08)|(Sfx_E8_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_E9_Ptr>>$08)|(Sfx_E9_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_EA_Ptr>>$08)|(Sfx_EA_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_EB_Ptr>>$08)|(Sfx_EB_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_EC_Ptr>>$08)|(Sfx_EC_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_ED_Ptr>>$08)|(Sfx_ED_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_EE_Ptr>>$08)|(Sfx_EE_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_EF_Ptr>>$08)|(Sfx_EF_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_F0_Ptr>>$08)|(Sfx_F0_Ptr<<$08))&$FFFF) 
;-------------------------------------------------------------------------------
Sfx_A0: ; Offset_0x0FEF33:
                incbin  'data\sounds\sfx_A0.snd'
Sfx_A1: ; Offset_0x0FEF49:
                incbin  'data\sounds\sfx_A1.snd'
Sfx_A2: ; Offset_0x0FEF73:
                incbin  'data\sounds\sfx_A2.snd'
Sfx_A3: ; Offset_0x0FEF92:
                incbin  'data\sounds\sfx_A3.snd'
Sfx_A4: ; Offset_0x0FEFC4:
                incbin  'data\sounds\sfx_A4.snd'
Sfx_A5: ; Offset_0x0FEFF9:
                incbin  'data\sounds\sfx_A5.snd'
Sfx_A6: ; Offset_0x0FF025:
                incbin  'data\sounds\sfx_A6.snd'
Sfx_A7: ; Offset_0x0FF054:
                incbin  'data\sounds\sfx_A7.snd'
Sfx_A8: ; Offset_0x0FF080:
                incbin  'data\sounds\sfx_A8.snd'
Sfx_A9: ; Offset_0x0FF08F:
                incbin  'data\sounds\sfx_A9.snd'
Sfx_AA: ; Offset_0x0FF0A1:
                incbin  'data\sounds\sfx_AA.snd'
Sfx_AB: ; Offset_0x0FF0E2:
                incbin  'data\sounds\sfx_AB.snd'
Sfx_AC: ; Offset_0x0FF101:
                incbin  'data\sounds\sfx_AC.snd'
Sfx_AD: ; Offset_0x0FF135:
                incbin  'data\sounds\sfx_AD.snd'
Sfx_AE: ; Offset_0x0FF16B:
                incbin  'data\sounds\sfx_AE.snd'
Sfx_AF: ; Offset_0x0FF1B5:
                incbin  'data\sounds\sfx_AF.snd'
Sfx_B0: ; Offset_0x0FF1E2:
                incbin  'data\sounds\sfx_B0.snd'
Sfx_B1: ; Offset_0x0FF213:
                incbin  'data\sounds\sfx_B1.snd'
Sfx_B2: ; Offset_0x0FF23F:
                incbin  'data\sounds\sfx_B2.snd'
Sfx_B3: ; Offset_0x0FF28E:
                incbin  'data\sounds\sfx_B3.snd'
Sfx_B4: ; Offset_0x0FF2BF:
                incbin  'data\sounds\sfx_B4.snd'
Sfx_B5: ; Offset_0x0FF31A:
                incbin  'data\sounds\sfx_B5.snd'
Sfx_B6: ; Offset_0x0FF32F:
                incbin  'data\sounds\sfx_B6.snd'
Sfx_B7: ; Offset_0x0FF34C:
                incbin  'data\sounds\sfx_B7.snd'
Sfx_B8: ; Offset_0x0FF387:
                incbin  'data\sounds\sfx_B8.snd'
Sfx_B9: ; Offset_0x0FF3A4:
                incbin  'data\sounds\sfx_B9.snd'
Sfx_BA: ; Offset_0x0FF3EE:
                incbin  'data\sounds\sfx_BA.snd'
Sfx_BB: ; Offset_0x0FF416:
                incbin  'data\sounds\sfx_BB.snd'
Sfx_BC: ; Offset_0x0FF441:
                incbin  'data\sounds\sfx_BC.snd'
Sfx_BD: ; Offset_0x0FF482:
                incbin  'data\sounds\sfx_BD.snd'
Sfx_BE: ; Offset_0x0FF4D5:
                incbin  'data\sounds\sfx_BE.snd'
Sfx_BF: ; Offset_0x0FF50F:
                incbin  'data\sounds\sfx_BF.snd'
Sfx_C0: ; Offset_0x0FF581:
                incbin  'data\sounds\sfx_C0.snd'
Sfx_C1: ; Offset_0x0FF59A:
                incbin  'data\sounds\sfx_C1.snd'
Sfx_C2: ; Offset_0x0FF5D4:
                incbin  'data\sounds\sfx_C2.snd'
Sfx_C3: ; Offset_0x0FF5E5:
                incbin  'data\sounds\sfx_C3.snd'
Sfx_C4: ; Offset_0x0FF65F:
                incbin  'data\sounds\sfx_C4.snd'
Sfx_C5: ; Offset_0x0FF687:
                incbin  'data\sounds\sfx_C5.snd'
Sfx_C6: ; Offset_0x0FF6EE:
                incbin  'data\sounds\sfx_C6.snd'
Sfx_C7: ; Offset_0x0FF716:
                incbin  'data\sounds\sfx_C7.snd'
Sfx_C8: ; Offset_0x0FF744:
                incbin  'data\sounds\sfx_C8.snd'
Sfx_C9: ; Offset_0x0FF755:
                incbin  'data\sounds\sfx_C9.snd'
Sfx_CA: ; Offset_0x0FF782:
                incbin  'data\sounds\sfx_CA.snd'
Sfx_CB: ; Offset_0x0FF7AF:
                incbin  'data\sounds\sfx_CB.snd'
Sfx_CC: ; Offset_0x0FF7E2:
                incbin  'data\sounds\sfx_CC.snd'
Sfx_CD: ; Offset_0x0FF81C:
                incbin  'data\sounds\sfx_CD.snd'
Sfx_CE: ; Offset_0x0FF829:
                incbin  'data\sounds\sfx_CE.snd'
Sfx_CF: ; Offset_0x0FF83E:
                incbin  'data\sounds\sfx_CF.snd'
Sfx_D0: ; Offset_0x0FF875:
                incbin  'data\sounds\sfx_D0.snd'
Sfx_D1: ; Offset_0x0FF8A8:
                incbin  'data\sounds\sfx_D1.snd'
Sfx_D2: ; Offset_0x0FF8E1:
                incbin  'data\sounds\sfx_D2.snd'
Sfx_D3: ; Offset_0x0FF91E:
                incbin  'data\sounds\sfx_D3.snd'
Sfx_D4: ; Offset_0x0FF95D:
                incbin  'data\sounds\sfx_D4.snd'
Sfx_D5: ; Offset_0x0FF99E:
                incbin  'data\sounds\sfx_D5.snd'
Sfx_D6: ; Offset_0x0FF9C8:
                incbin  'data\sounds\sfx_D6.snd'
Sfx_D7: ; Offset_0x0FFA0D:
                incbin  'data\sounds\sfx_D7.snd'
Sfx_D8: ; Offset_0x0FFA35:
                incbin  'data\sounds\sfx_D8.snd'
Sfx_D9: ; Offset_0x0FFA5F:
                incbin  'data\sounds\sfx_D9.snd'
Sfx_DA: ; Offset_0x0FFAB8:
                incbin  'data\sounds\sfx_DA.snd'
Sfx_DB: ; Offset_0x0FFAE5:
                incbin  'data\sounds\sfx_DB.snd'
Sfx_DC: ; Offset_0x0FFB19:
                incbin  'data\sounds\sfx_DC.snd'
Sfx_DD: ; Offset_0x0FFB60:
                incbin  'data\sounds\sfx_DD.snd'
Sfx_DE: ; Offset_0x0FFB88:
                incbin  'data\sounds\sfx_DE.snd'
Sfx_DF: ; Offset_0x0FFBC2:
                incbin  'data\sounds\sfx_DF.snd'
Sfx_E0: ; Offset_0x0FFC5E:
                incbin  'data\sounds\sfx_E0.snd'
Sfx_E1: ; Offset_0x0FFC99:
                incbin  'data\sounds\sfx_E1.snd'
Sfx_E2: ; Offset_0x0FFCF6:
                incbin  'data\sounds\sfx_E2.snd'
Sfx_E3: ; Offset_0x0FFD2D:
                incbin  'data\sounds\sfx_E3.snd'
Sfx_E4: ; Offset_0x0FFD5C:
                incbin  'data\sounds\sfx_E4.snd'
Sfx_E5: ; Offset_0x0FFD84:
                incbin  'data\sounds\sfx_E5.snd'
Sfx_E6: ; Offset_0x0FFDA5:
                incbin  'data\sounds\sfx_E6.snd'
Sfx_E7: ; Offset_0x0FFDDF:
                incbin  'data\sounds\sfx_E7.snd'
Sfx_E8: ; Offset_0x0FFE00:
                incbin  'data\sounds\sfx_E8.snd'
Sfx_E9: ; Offset_0x0FFE2A:
                incbin  'data\sounds\sfx_E9.snd'
Sfx_EA: ; Offset_0x0FFE67:
                incbin  'data\sounds\sfx_EA.snd'
Sfx_EB: ; Offset_0x0FFE92:
                incbin  'data\sounds\sfx_EB.snd'
Sfx_EC: ; Offset_0x0FFEBC:
                incbin  'data\sounds\sfx_EC.snd'
Sfx_ED: ; Offset_0x0FFF27:
                incbin  'data\sounds\sfx_ED.snd'
Sfx_EE: ; Offset_0x0FFF53:
                incbin  'data\sounds\sfx_EE.snd'
Sfx_EF: ; Offset_0x0FFF91:
                incbin  'data\sounds\sfx_EF.snd'
Sfx_F0: ; Offset_0x0FFFD4:
                incbin  'data\sounds\sfx_F0.snd' 
;===============================================================================
; Driver de Som
; [ Término ]
;===============================================================================    